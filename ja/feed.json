{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Nushell",
  "home_page_url": "www.nushell.sh/ja/",
  "feed_url": "www.nushell.sh/feed.json",
  "description": "新しいタイプのシェル",
  "items": [
    {
      "title": "目次",
      "url": "www.nushell.sh/ja/book/",
      "id": "www.nushell.sh/ja/book/",
      "content_html": "<h1 id=\"目次\" tabindex=\"-1\"> 目次</h1>\n<ul>\n<li><a href=\"/ja/book/installation.html\">インストール</a> - nushell のインストール</li>\n<li><a href=\"/ja/book/introduction.html\">はじめに</a> - nushell をはじめよう</li>\n<li><a href=\"/ja/book/moving_around.html\">ファイルシステムの操作</a> - nushell からファイルシステムを扱おう</li>\n<li><a href=\"/ja/book/types_of_data.html\">データ型</a> - nushell のデータ型</li>\n<li><a href=\"/ja/book/loading_data.html\">データの読み込み</a> - データの読み込みとその利用方法</li>\n<li><a href=\"/ja/book/working_with_tables.html\">テーブル</a> - テーブルを利用してみよう</li>\n<li><a href=\"/ja/book/pipeline.html\">パイプライン</a> - パイプラインの仕組み</li>\n<li><a href=\"/ja/book/configuration.html\">設定</a> - nushell の設定方法</li>\n<li><a href=\"/ja/book/aliases.html\">エイリアス</a> - コードブロックに名前をつけよう</li>\n<li><a href=\"/ja/book/math.html\">Math</a> - nushell で計算する</li>\n<li><a href=\"/ja/book/environment.html\">環境変数</a> - 環境変数の設定</li>\n<li><a href=\"/ja/book/metadata.html\">メタデータ</a> - nushell におけるメタデータについて</li>\n<li><a href=\"/ja/book/shells_in_shells.html\">シェル</a> - 複数の場所で作業しよう</li>\n<li><a href=\"/ja/book/escaping.html\">コマンドのエスケープ</a> - Nu コマンドと同じ名前のコマンドを実行するには</li>\n<li><a href=\"/ja/book/plugins.html\">プラグイン</a> - プラグインを利用して nushell を拡張する</li>\n<li><a href=\"/ja/book/coming_from_bash.html\">Bash から来た人向け</a> - bash から nushell に来た人向けガイド</li>\n<li><a href=\"/ja/book/nushell_map.html\">shells/DSL と nushell の対応表</a> - nushell と SQL, Linq, PowerShell, Bash との対応表。コントリビューション歓迎。</li>\n<li><a href=\"/ja/book/nushell_map_imperative.html\">命令形言語と nushell の対応表</a> - nushell と Python, Kotlin, C++, C#, Rust との対応表。コントリビューション歓迎。</li>\n<li><a href=\"/ja/book/nushell_map_functional.html\">関数型言語と nushell の対応表</a> - nushell と Clojure, Tablecloth (Ocaml / Elm), Haskell との対応表。コントリビューション歓迎。</li>\n<li><a href=\"/ja/book/nushell_operator_map.html\">Nushell 演算子対応表</a> - 演算子の対応表。</li>\n<li><a href=\"/ja/book/command_reference.html\">Command Reference</a> - A list of all Nushell's commands.</li>\n</ul>\n",
      "date_modified": "2022-06-03T05:34:12.236Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "エイリアス",
      "url": "www.nushell.sh/ja/book/aliases.html",
      "id": "www.nushell.sh/ja/book/aliases.html",
      "content_html": "<h1 id=\"エイリアス\" tabindex=\"-1\"> エイリアス</h1>\n<p>Nu ではパイプラインを利用して自由にデータやシステムを操作できますが、その反面多くのタイピングを要してしまいます。一度作成したパイプラインを保存しておき再利用できるようにしておきたいところです。</p>\n<p>そこでエイリアスの出番です。</p>\n<p>エイリアスを使うとコマンドのブロックに名前をつけることができます。エイリアスを実行するとそのコマンドブロックが実行されます。</p>\n<p>例:</p>\n<div><pre><code>> alias ls-names [] { ls | select name }\n> ls-names\n────┬────────────────────\n #  │ name\n────┼────────────────────\n  0 │ 404.html\n  1 │ CONTRIBUTING.md\n  2 │ Gemfile\n  3 │ Gemfile.lock\n  4 │ LICENSE\n</code></pre></div><h2 id=\"パラメータ\" tabindex=\"-1\"> パラメータ</h2>\n<p>エイリアスは、ブロックに渡されるオプションのパラメータをもつことができます。これらはブロック内の新しい変数になります。</p>\n<div><pre><code>> alias e [msg] { echo $msg }\n> e \"hello world\"\nhello world\n</code></pre></div><p>パラメータは任意の数設定することができ、ユーザが値を提供しなかった場合、ブロック内では Nothing と評価されて削除されます。</p>\n<h2 id=\"保存\" tabindex=\"-1\"> 保存</h2>\n<p>デフォルトでは、エイリアスは現在のセッションでのみ有効です。これは一時的なヘルパーや新しいエイリアスをテストするのに便利ですが、エイリアスを有効に活用するには保存しておく必要があります。エイリアスを保存するには、alias を<code>--save</code>(もしくは<code>-s</code>)つきで実行します。例えば</p>\n<div><pre><code>alias e --save [msg] { echo $msg }\n</code></pre></div><p>エイリアスは起動時の設定に保存され、<code>config get startup</code>で確認することができます。<code>startup</code>設定がまだ存在していない場合はエラーが表示されます。</p>\n<p>config.toml ファイルのエイリアスを直接編集することもできます。<code>vi</code>を使う場合は</p>\n<div><pre><code>config path | vi $it\n</code></pre></div>",
      "date_modified": "2022-06-03T05:34:12.236Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Bash から来た人向け",
      "url": "www.nushell.sh/ja/book/coming_from_bash.html",
      "id": "www.nushell.sh/ja/book/coming_from_bash.html",
      "content_html": "<h1 id=\"bash-から来た人向け\" tabindex=\"-1\"> Bash から来た人向け</h1>\n<p>注: このテーブルは Nu 1.14.1 以降を想定しています。</p>\n<table>\n<thead>\n<tr>\n<th>Bash</th>\n<th>Nu</th>\n<th>Task</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ls</code></td>\n<td><code>ls</code></td>\n<td>Lists the files in the current directory</td>\n</tr>\n<tr>\n<td><code>ls &lt;dir&gt;</code></td>\n<td><code>ls &lt;dir&gt;</code></td>\n<td>Lists the files in the given directory</td>\n</tr>\n<tr>\n<td><code>ls pattern*</code></td>\n<td><code>ls pattern*</code></td>\n<td>Lists files that match a given pattern</td>\n</tr>\n<tr>\n<td><code>ls -la</code></td>\n<td><code>ls --long --all</code> or <code>ls -la</code></td>\n<td>List files with all available information, including hidden files</td>\n</tr>\n<tr>\n<td><code>ls -d */</code></td>\n<td><code>ls | where type == Dir</code></td>\n<td>List directories</td>\n</tr>\n<tr>\n<td><code>find . -name *.rs</code></td>\n<td><code>ls **/*.rs</code></td>\n<td>Find recursively all files that match a given pattern</td>\n</tr>\n<tr>\n<td><code>cd &lt;directory&gt;</code></td>\n<td><code>cd &lt;directory&gt;</code></td>\n<td>Change to the given directory</td>\n</tr>\n<tr>\n<td><code>cd</code></td>\n<td><code>cd</code></td>\n<td>Change to the home directory</td>\n</tr>\n<tr>\n<td><code>mkdir &lt;path&gt;</code></td>\n<td><code>mkdir &lt;path&gt;</code></td>\n<td>Creates the given path</td>\n</tr>\n<tr>\n<td><code>mkdir -p &lt;path&gt;</code></td>\n<td><code>mkdir &lt;path&gt;</code></td>\n<td>Creates the given path, creating parents as necessary</td>\n</tr>\n<tr>\n<td><code>touch test.txt</code></td>\n<td><code>touch test.txt</code></td>\n<td>Create a file</td>\n</tr>\n<tr>\n<td><code>&gt; &lt;path&gt;</code></td>\n<td><code>| save --raw &lt;path&gt;</code></td>\n<td>Save string into a file</td>\n</tr>\n<tr>\n<td><code>cat &lt;path&gt;</code></td>\n<td><code>open --raw &lt;path&gt;</code></td>\n<td>Display the contents of the given file</td>\n</tr>\n<tr>\n<td></td>\n<td><code>open &lt;path&gt;</code></td>\n<td>Read a file as structured data</td>\n</tr>\n<tr>\n<td><code>mv &lt;source&gt; &lt;dest&gt;</code></td>\n<td><code>mv &lt;source&gt; &lt;dest&gt;</code></td>\n<td>Move file to new location</td>\n</tr>\n<tr>\n<td><code>cp &lt;source&gt; &lt;dest&gt;</code></td>\n<td><code>cp &lt;source&gt; &lt;dest&gt;</code></td>\n<td>Copy file to new location</td>\n</tr>\n<tr>\n<td><code>cp -r &lt;source&gt; &lt;dest&gt;</code></td>\n<td><code>cp -r &lt;source&gt; &lt;dest&gt;</code></td>\n<td>Copy directory to a new location, recursively</td>\n</tr>\n<tr>\n<td><code>rm &lt;path&gt;</code></td>\n<td><code>rm &lt;path&gt;</code></td>\n<td>Remove the given file</td>\n</tr>\n<tr>\n<td></td>\n<td><code>rm -t &lt;path&gt;</code></td>\n<td>Move the given file to the system trash</td>\n</tr>\n<tr>\n<td><code>rm -rf &lt;path&gt;</code></td>\n<td><code>rm -r &lt;path&gt;</code></td>\n<td>Recursively removes the given path</td>\n</tr>\n<tr>\n<td><code>chmod</code></td>\n<td><code>&lt;not yet possible&gt;</code></td>\n<td>Changes the file attributes</td>\n</tr>\n<tr>\n<td><code>date -d &lt;date&gt;</code></td>\n<td><code>echo &lt;date&gt; | str to-datetime -f &lt;format&gt;</code></td>\n<td>Parse a date (<a href=\"https://docs.rs/chrono/0.4.15/chrono/format/strftime/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">format documentation</a>)</td>\n</tr>\n<tr>\n<td><code>sed</code></td>\n<td><code>str find-replace</code></td>\n<td>Find and replace a pattern in a string</td>\n</tr>\n<tr>\n<td><code>grep &lt;pattern&gt;</code></td>\n<td><code>where $it =~ &lt;substring&gt;</code></td>\n<td>Filter strings that contain the substring</td>\n</tr>\n<tr>\n<td><code>man &lt;command&gt;</code></td>\n<td><code>help &lt;command&gt;</code></td>\n<td>Get the help for a given command</td>\n</tr>\n<tr>\n<td></td>\n<td><code>help commands</code></td>\n<td>List all available commands</td>\n</tr>\n<tr>\n<td></td>\n<td><code>help --find &lt;string&gt;</code></td>\n<td>Search for match in all available commands</td>\n</tr>\n<tr>\n<td><code>command1 &amp;&amp; command2</code></td>\n<td><code>command1; command2</code></td>\n<td>Run a command, and if it's successful run a second</td>\n</tr>\n<tr>\n<td><code>stat $(which git)</code></td>\n<td><code>stat (which git).path</code></td>\n<td>Use command output as argument for other command</td>\n</tr>\n<tr>\n<td><code>echo $PATH</code></td>\n<td><code>echo $nu.path</code></td>\n<td>See the current path</td>\n</tr>\n<tr>\n<td><code>&lt;update ~/.bashrc&gt;</code></td>\n<td><code>config set path [&lt;dir1&gt; &lt;dir2&gt; ...]</code></td>\n<td>Update PATH permanently</td>\n</tr>\n<tr>\n<td><code>export PATH = $PATH:/usr/other/bin</code></td>\n<td><code>pathvar add &lt;path&gt;</code></td>\n<td>Update PATH temporarily</td>\n</tr>\n<tr>\n<td><code>export</code></td>\n<td><code>echo $nu.env</code></td>\n<td>List the current environment variables</td>\n</tr>\n<tr>\n<td><code>&lt;update ~/.bashrc&gt;</code></td>\n<td><code>echo $nu.env | insert var value | config set_into env</code></td>\n<td>Update environment variables permanently</td>\n</tr>\n<tr>\n<td><code>FOO=BAR ./bin</code></td>\n<td><code>FOO=BAR ./bin</code></td>\n<td>Update environment temporarily</td>\n</tr>\n<tr>\n<td><code>export FOO=BAR</code></td>\n<td><code>let-env FOO = BAR</code></td>\n<td>Set environment variable for current session</td>\n</tr>\n<tr>\n<td><code>unset FOO</code></td>\n<td><code>let-env FOO = $nothing</code></td>\n<td>Unset environment variable for current session</td>\n</tr>\n<tr>\n<td><code>alias s=&quot;git status -sb&quot;</code></td>\n<td><code>alias s = git status -sb</code></td>\n<td>Define an alias temporarily</td>\n</tr>\n<tr>\n<td><code>&lt;update ~/.bashrc&gt;</code></td>\n<td><code>alias --save myecho [msg] { echo Hello $msg }</code></td>\n<td>Define an alias for all sessions (persist it in startup config)</td>\n</tr>\n<tr>\n<td><code>&lt;update ~/.bashrc&gt;</code></td>\n<td><code>&lt;update nu/config.toml&gt;</code></td>\n<td>Add and edit alias permanently (for new shells), find path for the file with <code>config path</code></td>\n</tr>\n<tr>\n<td><code>bash -c &lt;commands&gt;</code></td>\n<td><code>nu -c &lt;commands&gt;</code></td>\n<td>Run a pipeline of commands (requires 0.9.1 or later)</td>\n</tr>\n<tr>\n<td><code>bash &lt;script file&gt;</code></td>\n<td><code>nu &lt;script file&gt;</code></td>\n<td>Run a script file (requires 0.9.1 or later)</td>\n</tr>\n<tr>\n<td><code>\\</code></td>\n<td><code>&lt;not yet possible&gt;</code></td>\n<td>Line continuation is not yet supported.</td>\n</tr>\n</tbody>\n</table>\n",
      "date_modified": "2022-06-03T05:34:12.236Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Command Reference",
      "url": "www.nushell.sh/ja/book/command_reference.html",
      "id": "www.nushell.sh/ja/book/command_reference.html",
      "content_html": "<h1 id=\"command-reference\" tabindex=\"-1\"> Command Reference</h1>\n<table>\n  <tr>\n    <th>コマンド</th>\n    <th>説明 </th>\n  </tr>\n  <tr v-for=\"command in commands\">\n   <td><a :href=\"command.path\"><code>{{ command.title }}</code></a></td>\n   <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n  </tr>\n</table>\n",
      "date_modified": "2022-06-03T05:34:12.236Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "設定",
      "url": "www.nushell.sh/ja/book/configuration.html",
      "id": "www.nushell.sh/ja/book/configuration.html",
      "content_html": "<h1 id=\"設定\" tabindex=\"-1\"> 設定</h1>\n<p>Nu には、見た目や挙動を変更させるための内部的な変数があります。\n以下がそのリストです。</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>completion_mode</td>\n<td>&quot;list&quot; or &quot;circular&quot;</td>\n<td>利用する自動補完のモード</td>\n</tr>\n<tr>\n<td>ctrlc_exit</td>\n<td>boolean</td>\n<td>ctrl-c を複数回押したときに Nu を exit するかどうか</td>\n</tr>\n<tr>\n<td>disable_table_indexes</td>\n<td>boolean</td>\n<td>テーブルインデックスカラムを無効にするかどうか</td>\n</tr>\n<tr>\n<td>edit_mode</td>\n<td>&quot;vi&quot; or &quot;emacs&quot;</td>\n<td>行の編集モードを&quot;vi&quot;か&quot;emacs&quot;モードに変更する</td>\n</tr>\n<tr>\n<td>env</td>\n<td>row</td>\n<td>外部コマンドに渡す環境変数</td>\n</tr>\n<tr>\n<td>header_align</td>\n<td>&quot;center&quot;, &quot;right&quot;, or other</td>\n<td>テーブルのヘッダーの揃え方</td>\n</tr>\n<tr>\n<td>key_timeout</td>\n<td>integer</td>\n<td>edit モードのスイッチ時のタイムアウト</td>\n</tr>\n<tr>\n<td>nonzero_exit_errors</td>\n<td>boolean</td>\n<td>外部コマンドが 0 以外の終了ステータスの場合にエラーを表示するかどうか</td>\n</tr>\n<tr>\n<td>path</td>\n<td>list of strings</td>\n<td>バイナリーを検索する PATH</td>\n</tr>\n<tr>\n<td>startup</td>\n<td>list of strings</td>\n<td><code>alias</code>のような nushell 起動時に実行するコマンド</td>\n</tr>\n<tr>\n<td>table_mode</td>\n<td>&quot;light&quot; or other</td>\n<td>テーブルのモード</td>\n</tr>\n<tr>\n<td>no_auto_pivot</td>\n<td>boolean</td>\n<td>自動で 1 行のデータを pivot するかどうか</td>\n</tr>\n<tr>\n<td>skip_welcome_message</td>\n<td>boolean</td>\n<td>nushell 起動時にウェルカムメッセージの表示をスキップするかどうか</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"利用方法\" tabindex=\"-1\"> 利用方法</h2>\n<h3 id=\"変数の設定\" tabindex=\"-1\"> 変数の設定</h3>\n<p>これらの変数のいずれかを設定するには<code>config set</code> コマンドを利用します。例えば</p>\n<div><pre><code>> config set edit_mode \"vi\"\n</code></pre></div><h3 id=\"パイプラインからの変数を設定\" tabindex=\"-1\"> パイプラインからの変数を設定</h3>\n<p>設定したい値をパイプラインを通じて設定することもできます。このためには<code>set_into</code>フラグを利用します。</p>\n<div><pre><code>> echo \"bar\" | config set_into foo\n</code></pre></div><p>この方法は、<code>env</code>や<code>path</code>変数を設定する際に便利です。</p>\n<h3 id=\"すべての変数の表示\" tabindex=\"-1\"> すべての変数の表示</h3>\n<p><code>config</code>コマンドを引数なしで実行すると現在の設定されている変数を表示します。</p>\n<div><pre><code>> config\n─────────────────┬──────────────────\n completion_mode │ circular\n env             │ [row 51 columns]\n path            │ [table 9 rows]\n startup         │ [table 1 rows]\n─────────────────┴──────────────────\n</code></pre></div><p>注: もしまだ変数を設定していない場合、出力が空の場合があります。</p>\n<h3 id=\"変数の取得\" tabindex=\"-1\"> 変数の取得</h3>\n<p><code>get</code>フラグを利用して特定の変数の値を取得できます。</p>\n<div><pre><code>> config get edit_mode\n</code></pre></div><h3 id=\"変数の削除\" tabindex=\"-1\"> 変数の削除</h3>\n<p>変数を削除する場合、<code>remove</code>フラグを利用します。</p>\n<div><pre><code>> config remove edit_mode\n</code></pre></div><h3 id=\"設定全体のクリア\" tabindex=\"-1\"> 設定全体のクリア</h3>\n<p>設定全体をクリアして、最初からやりなおしたい場合は<code>--clear</code>フラグを利用できます。このコマンドを実行すると設定ファイルもクリアされるので注意してください。</p>\n<div><pre><code>> config clear\n</code></pre></div><h3 id=\"設定が保存されている場所をみつける\" tabindex=\"-1\"> 設定が保存されている場所をみつける</h3>\n<p>設定ファイルはデフォルトの場所から読み込まれます。この場所をみつけるには<code>-path</code>フラグを利用します。</p>\n<div><pre><code>> config path\n/home/jonathant/.config/nu/config.toml\n</code></pre></div><h3 id=\"ファイルから設定を読み込む\" tabindex=\"-1\"> ファイルから設定を読み込む</h3>\n<p>デフォルトとは違う設定ファイルを読み込みたい場合は、<code>load</code> パラメーターを利用します。</p>\n<div><pre><code>> config load myconfiguration.toml\n</code></pre></div><h2 id=\"nu-をログインシェルとして設定する\" tabindex=\"-1\"> Nu をログインシェルとして設定する</h2>\n<p>Nu をログインシェルとして利用するには、<code>path</code>と<code>env</code>変数を設定する必要があります。これらによりログインシェルとして外部コマンドを実行するのに十分なサポートが得られます。</p>\n<p>切り替える前に、Bash 等の別のシェルから Nu を実行します。そして次のコマンドで環境変数と PATH をシェルから取得します。</p>\n<div><pre><code>> config set path $nu.path\n> config set env $nu.env\n</code></pre></div><p>0.7.2 より以前のバージョンでは</p>\n<div><pre><code>> config --set [path $nu:path]\n> config --set [env $nu:env]\n</code></pre></div><p><code>$nu.path</code>および<code>$nu.env</code>にはそれぞれ、現在の PATH と環境変数がセットされています。これらをセットすると、のちに Nu をログインシェルとして利用したさいに利用できるようになります。</p>\n<p>次にいくつかのディストリビューションでは、Nu が<code>/etc/shells</code>のリストに含まれているかを確認する必要があります。</p>\n<div><pre><code>❯ cat /etc/shells\n# /etc/shells: valid login shells\n/bin/sh\n/bin/dash\n/bin/bash\n/bin/rbash\n/usr/bin/screen\n/usr/bin/fish\n/home/jonathan/.cargo/bin/nu\n</code></pre></div><p>これにより、<code>chsh</code>で Nu をログインシェルとして設定できるようになります。ログアウト後、次回のログイン時に Nu の素敵なプロンプトが表示されます。</p>\n<h2 id=\"プロンプトの設定\" tabindex=\"-1\"> プロンプトの設定</h2>\n<p>プロンプトの設定は<code>prompt</code>の値を設定することで行います。<br>\n例えば、<a href=\"https://starship.rs\" target=\"_blank\" rel=\"noopener noreferrer\">starship</a>を使うには、ダウンロードして次のコマンドを実行します。(0.18.2 and later)</p>\n<div><pre><code>config set prompt \"starship prompt\"\n</code></pre></div><p>Nu を再起動すると</p>\n<div><pre><code>nushell on 📙 master [$] is 📦 v0.18.2 via 🦀 v1.48.0-nightly\n❯\n</code></pre></div>",
      "date_modified": "2022-06-03T05:34:12.236Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "環境変数",
      "url": "www.nushell.sh/ja/book/environment.html",
      "id": "www.nushell.sh/ja/book/environment.html",
      "content_html": "<h1 id=\"環境変数\" tabindex=\"-1\"> 環境変数</h1>\n<p>外部アプリケーションが使用する環境を制御することはシェルの一般的なタスクです。多くの場合、環境はパッケージ化されて外部のアプリケーション起動時に与えられることで自動的に行われます。しかし時には、アプリケーションが利用する環境変数をより正確に制御したい場合があります。</p>\n<p>アプリケーションに送られる現在の環境変数は<code>$nu.env</code>の値を echo して確認することができます。</p>\n<div><pre><code>> echo $nu.env\n──────────────────────────┬──────────────────────────────\n COLORTERM                │ truecolor\n DBUS_SESSION_BUS_ADDRESS │ unix:path=/run/user/1000/bus\n DESKTOP_SESSION          │ gnome\n DISPLAY                  │ :1\n</code></pre></div><p>環境は Nu の設定と Nu が実行されている環境から作られます。<a href=\"/ja/book/configuration.html\">設定の章</a>に記載されている方法で環境を恒久的に更新できます。</p>\n<p>コマンドやパイプラインを実行するときに一時的に環境変数を更新することもできます。</p>\n<div><pre><code>> with-env [FOO BAR] { echo $nu.env.FOO }\nBAR\n</code></pre></div><p><code>with-env</code>コマンドは、環境変数を一時的に与えられた値に設定します(ここでは変数&quot;FOO&quot;に&quot;BAR&quot;という値がセットされます)。ブロックは新しい環境変数が設定された状態で実行されます。</p>\n<p>Bash などにヒントを得た一般的な省略記法も用意されています。上の例は次のように書くことができます。</p>\n<div><pre><code>> FOO=BAR echo $nu.env.FOO\nBAR\n</code></pre></div>",
      "date_modified": "2022-06-03T05:34:12.236Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "エスケープ",
      "url": "www.nushell.sh/ja/book/escaping.html",
      "id": "www.nushell.sh/ja/book/escaping.html",
      "content_html": "<h1 id=\"エスケープ\" tabindex=\"-1\"> エスケープ</h1>\n<p>Nu は様々な OS で使用できる一連のコマンドを提供します。このような一貫性があると便利です。ただし、ときには Nu コマンドと同じ名前のコマンドを実行したいときがあります。例えば、ローカルの<code>ls</code>や<code>date</code>コマンドなどです。このような場合にはキャレット(^)コマンドを使用します。</p>\n<p>Nu のコマンド:</p>\n<div><pre><code>> ls\n</code></pre></div><p>ローカルコマンドへのエスケープ:</p>\n<div><pre><code>> ^ls\n</code></pre></div>",
      "date_modified": "2022-06-03T05:34:12.237Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Nu のインストール",
      "url": "www.nushell.sh/ja/book/installation.html",
      "id": "www.nushell.sh/ja/book/installation.html",
      "content_html": "<h1 id=\"nu-のインストール\" tabindex=\"-1\"> Nu のインストール</h1>\n<p>今のところ Nu をインストールするもっともよい方法は、<a href=\"https://crates.io\" target=\"_blank\" rel=\"noopener noreferrer\">crates.io</a>からインストールするか、ビルド済のバイナリーを<a href=\"https://github.com/nushell/nushell/releases\" target=\"_blank\" rel=\"noopener noreferrer\">リリースページ</a>からダウンロードするか、ソースからビルドすることです。\nDocker を利用してビルド済のコンテナをプルしてくる方法もあります。</p>\n<h2 id=\"ビルド済みのバイナリー\" tabindex=\"-1\"> ビルド済みのバイナリー</h2>\n<p>ビルド済の Nu は<a href=\"https://github.com/nushell/nushell/releases\" target=\"_blank\" rel=\"noopener noreferrer\">リリースページ</a>からダウンロードできます。もし、macOS で<a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Homebrew</a> を利用しているなら、<code>brew install nushell</code>を実行して、バイナリーをインストールできます。</p>\n<h2 id=\"windows\" tabindex=\"-1\"> Windows</h2>\n<p><strong>Note</strong> Nu は Windows 10 で動作しますが、現在のところ 7/8.1 はサポートされていません。</p>\n<p><a href=\"https://github.com/nushell/nushell/releases\" target=\"_blank\" rel=\"noopener noreferrer\">リリースページ</a>から<code>.zip</code>ファイルをダウンロードして、例えば次の箇所に解凍します。</p>\n<div><pre><code>C:<span>\\</span>Program Files\n</code></pre></div><p>そして、<code>nu</code>フォルダを PATH に追加します。これが済めば、<code>nu</code>コマンドで Nu を起動できます。</p>\n<div><pre><code><span>></span> nu\nC:<span>\\</span>Users<span>\\</span>user<span>></span>\n</code></pre></div><p>もし、<a href=\"https://github.com/microsoft/terminal\" target=\"_blank\" rel=\"noopener noreferrer\">Windows Terminal</a>を使っているなら、次のようにして<code>nu</code>をデフォルトシェルに指定できます。</p>\n<div><pre><code><span>{</span>\n  <span>\"guid\"</span><span>:</span> <span>\"{2b372ca1-1ee2-403d-a839-6d63077ad871}\"</span>,\n  <span>\"hidden\"</span><span>:</span> false,\n  <span>\"icon\"</span><span>:</span> <span>\"https://www.nushell.sh/icon.png\"</span>,\n  <span>\"name\"</span><span>:</span> <span>\"Nu Shell\"</span>,\n  <span>\"commandline\"</span><span>:</span> <span>\"nu.exe\"</span>\n<span>}</span>\n</code></pre></div><p>この設定を Terminal Settings の<code>&quot;profiles&quot;</code>に追加します。そして、<code>&quot;defaultProfile&quot;</code>を次のように変更します。</p>\n<div><pre><code><span>\"defaultProfile\"</span><span>:</span> <span>\"{2b372ca1-1ee2-403d-a839-6d63077ad871}\"</span>,\n</code></pre></div><p>これで<code>nu</code>が Windows Terminal の起動時にロードされます。</p>\n<h2 id=\"事前準備\" tabindex=\"-1\"> 事前準備</h2>\n<p>Nu をインストールする前に、システムに必要なツールがそろっているか確認する必要があります。現在、Rust のツールチェインといくつかの依存関係が必要です。</p>\n<h3 id=\"コンパイラスイートのインストール\" tabindex=\"-1\"> コンパイラスイートのインストール</h3>\n<p>Rust が適切に機能するには、互換性のあるコンパイラスイートがシステムにインストールされている必要があります。推奨されるコンパイラスイートは次のとおりです。</p>\n<ul>\n<li>Linux: GCC or Clang</li>\n<li>macOS: Clang (install Xcode)</li>\n<li>Windows: <a href=\"https://visualstudio.microsoft.com/vs/community/\" target=\"_blank\" rel=\"noopener noreferrer\">Visual Studio Community Edition</a></li>\n</ul>\n<p>Linux と macOS の場合、コンパイラのインストールが完了すれば、<code>rustup</code>での Rust のインストールの準備が整います。</p>\n<p>Windows の場合、Visual Studio Community Edition をインストールするときに、「C ++ビルドツール」をインストールする必要があります。\nオプショナルなインストールとして提供されている<code>link.exe</code>が必要なためです。これで次のステップに進む準備ができました。</p>\n<h3 id=\"rust-のインストール\" tabindex=\"-1\"> Rust のインストール</h3>\n<p>Rust がシステムにまだインストールされていない場合は、<a href=\"https://rustup.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">rustup</a>を利用して Rust をインストールする方法がベストです。Rustup は、異なる Rust のバージョンのインストールを管理するツールです。</p>\n<p>Nu は現在、<strong>最新の stable(1.46 or later)</strong> バージョンの Rust を必要とします。\n<code>rustup</code>で正しい version を選択するのが良い方法です。\n最初に&quot;rustup&quot;を実行すると、インストールする Rust のバージョンを尋ねられます。</p>\n<div><pre><code>Current installation options:\n\ndefault <span>host</span> triple: x86_64-unknown-linux-gnu\ndefault toolchain: stable\nprofile: default\nmodify <span>PATH</span> variable: <span>yes</span>\n\n<span>1</span><span>)</span> Proceed with installation <span>(</span>default<span>)</span>\n<span>2</span><span>)</span> Customize installation\n<span>3</span><span>)</span> Cancel installation\n</code></pre></div><p>準備ができたら、1 を押してからエンターを押します。</p>\n<p>もし、<code>rustup</code>を経由して Rust をインストールしたくない場合、他の方法でもインストールすることができます。(例えば、Linux ディストリビューションのパッケージから)\nその場合でも Rust の 1.46 以上のバージョンがインストールされるようにしてください。</p>\n<h2 id=\"依存関係\" tabindex=\"-1\"> 依存関係</h2>\n<h3 id=\"debian-ubuntu\" tabindex=\"-1\"> Debian / Ubuntu</h3>\n<p>&quot;pkg-config&quot;および&quot;libssl-dev&quot;パッケージをインストールしてください。</p>\n<div><pre><code><span>apt</span> <span>install</span> pkg-config libssl-dev\n</code></pre></div><p><code>rawkey</code>や<code>clipboard</code>機能を使用する Linux ユーザーは&quot;libx11-dev&quot;および&quot;libxcb-composite0-dev&quot;パッケージをインストールする必要があります。</p>\n<div><pre><code><span>apt</span> <span>install</span> libxcb-composite0-dev libx11-dev\n</code></pre></div><h3 id=\"rhel-based-distros\" tabindex=\"-1\"> RHEL based distros</h3>\n<p>&quot;libxcb&quot;, &quot;openssl-devel&quot;および&quot;libX11-devel&quot;パッケージをインストールする必要があります。</p>\n<div><pre><code>yum <span>install</span> libxcb openssl-devel libX11-devel\n</code></pre></div><h3 id=\"macos\" tabindex=\"-1\"> macOS</h3>\n<p><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Homebrew</a>を利用して、&quot;openssl&quot;と&quot;cmake&quot;をインストールしてください。</p>\n<div><pre><code>brew <span>install</span> openssl cmake\n</code></pre></div><h2 id=\"crates-ioからのインストール\" tabindex=\"-1\"> <a href=\"https://crates.io\" target=\"_blank\" rel=\"noopener noreferrer\">crates.io</a>からのインストール</h2>\n<p>必要となる依存関係が準備できたら、Rust コンパイラーに付属している<code>cargo</code>を使って、Nu をインストールできます。\ncargo は Nu とそのソースの依存関係をダウンロードし、ビルドしたあと、実行できるように cargo の bin path にインストールします。</p>\n<div><pre><code><span>></span> cargo <span>install</span> nu\n</code></pre></div><p>これでおしまいです！<code>cargo</code>は Nu のソースコードとその依存関係をダウンロードしてビルドし、<code>cargo</code>のバイナリーパスにインストールすることで Nu を実行できるようにします。</p>\n<p>より多くの機能をインストールするには、次のようにします。</p>\n<div><pre><code><span>></span> cargo <span>install</span> nu --features<span>=</span>extra\n</code></pre></div><p>すべての機能を利用するための最も簡単な方法は Nu をチェックアウトして、Rust ツールを利用してビルドすることです。</p>\n<div><pre><code><span>></span> <span>git</span> clone https://github.com/nushell/nushell.git\n<span>></span> <span>cd</span> nushell\nnushell<span>></span> cargo <span>install</span> --path <span>.</span> --features<span>=</span>extra\n</code></pre></div><p>上で示したすべての依存関係がシステムにあることを確認してください。\nインストールが完了すると、<code>nu</code>コマンドで Nu を実行できます。</p>\n<div><pre><code>$ nu\n/home/jt/Source<span>></span>\n</code></pre></div><h2 id=\"ソースからビルド\" tabindex=\"-1\"> ソースからビルド</h2>\n<p>github のソースから直接ビルドすることもできます。こうすることで、最新の機能やバグ修正にすぐにアクセスすることができます。</p>\n<div><pre><code><span>></span> <span>git</span> clone https://github.com/nushell/nushell.git\n</code></pre></div><p>Git でメインの nushell リポジトリをクローンし、Nu をビルドして実行できます。</p>\n<div><pre><code><span>></span> <span>cd</span> nushell\nnushell<span>></span> cargo build --workspace --features<span>=</span>extra <span>&amp;&amp;</span> cargo run --features<span>=</span>extra\n</code></pre></div><p>リリースモードで Nu をビルドし実行することもできます。</p>\n<div><pre><code>nushell<span>></span> cargo build --release --workspace --features<span>=</span>extra <span>&amp;&amp;</span> cargo run --release --features<span>=</span>extra\n</code></pre></div><p>Rust に慣れている人は、&quot;run&quot;がデフォルトでビルドを行うのに、なぜ&quot;build&quot;と&quot;run&quot;の両方を行うのか疑問に思うかもしれません。\nこれは Cargo の新しい<code>default-run</code>オプションの欠点を回避し、全てのプラグインがビルドされるようにするためですが、将来的には必要なくなるかもしれません。</p>\n<h2 id=\"ログインシェルとして設定するには\" tabindex=\"-1\"> ログインシェルとして設定するには</h2>\n<p><strong>!!! Nu は開発中なので、日常使いのシェルとしての安定性を欠く可能性があります!!!</strong></p>\n<p><a href=\"https://linux.die.net/man/1/chsh\" target=\"_blank\" rel=\"noopener noreferrer\"><code>chsh</code></a>コマンドを使用して、ログインシェルを設定できます。\n一部の Linux ディストリビューションには<code>/etc/shells</code>に有効なシェルのリストが記載されており、Nu がホワイトリストに登録されるまで変更ができません。\n<code>shells</code>ファイルを更新していない場合は次のようなエラーが表示される場合があります。</p>\n<div><pre><code>chsh: /home/username/.cargo/bin/nu is an invalid shell\n</code></pre></div><p>Nu バイナリを<code>shells</code>ファイルに追加することにより、許可されたシェルのリストに Nu を追加できます。\n追加するパスは<code>which nu</code>コマンドで見つけることができます。通常は<code>$HOME/.cargo/bin/nu</code>です。</p>\n",
      "date_modified": "2022-06-03T05:34:12.237Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "はじめに",
      "url": "www.nushell.sh/ja/book/introduction.html",
      "id": "www.nushell.sh/ja/book/introduction.html",
      "content_html": "<h1 id=\"はじめに\" tabindex=\"-1\"> はじめに</h1>\n<p>こんにちは、Nushell プロジェクトへようこそ。このプロジェクトのゴールは、シンプルなコマンドをパイプでつなぎ合わせるというシェルの Unix 哲学を現代の開発スタイルにもちこむことです。</p>\n<p>Nu は Bash のような伝統的なシェル、PowerShell などの高度なシェル、関数型プログラミング、システムプログラミングなど、多くの分野からヒントを得ています。しかし Nu は何でもこなせることを目指すのではなく、いくつかのことをうまくこなせることに注力しています。</p>\n<ul>\n<li>モダンな雰囲気をもつ柔軟なクロスプラットフォームシェルを作ること</li>\n<li>データ構造を理解するコマンドラインアプリケーションを組みあわせることができること</li>\n<li>現代的な CLI アプリケーションが提供する UX をそなえること</li>\n</ul>\n<p>Nu になにができるかをみるには、実際に使ってみることが一番です。</p>\n<p><code>ls</code>コマンドを実行して最初に気づくことは、テキストブロックではなく、構造化されたテーブルデータが返ってくることです。</p>\n<div><pre><code><span>></span> <span>ls</span>\n╭────┬───────────────────────┬──────┬───────────┬─────────────╮\n│ <span>#  │         name          │ type │   size    │  modified   │</span>\n├────┼───────────────────────┼──────┼───────────┼─────────────┤\n│  <span>0</span> │ <span>404</span>.html              │ <span>file</span> │     <span>429</span> B │ <span>3</span> days ago  │\n│  <span>1</span> │ CONTRIBUTING.md       │ <span>file</span> │     <span>955</span> B │ <span>8</span> mins ago  │\n│  <span>2</span> │ Gemfile               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>3</span> │ Gemfile.lock          │ <span>file</span> │   <span>6.9</span> KiB │ <span>3</span> days ago  │\n│  <span>4</span> │ LICENSE               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>5</span> │ README.md             │ <span>file</span> │     <span>213</span> B │ <span>3</span> days ago  │\n<span>..</span>.\n</code></pre></div><p>このテーブルはディレクトリの内容を別の方法で表示しているだけではありません。このテーブルを利用するとスプレッドシートと同じように、よりインタラクティブにデータを操作できます。</p>\n<p>最初に行うことはテーブルをサイズでソートすることです。これを行うには<code>ls</code>の出力を取得して、カラムの内容に基づいてテーブルをソートするコマンドに入力します。</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> sort-by size <span>|</span> reverse\n╭────┬───────────────────────┬──────┬───────────┬─────────────╮\n│ <span>#  │         name          │ type │   size    │  modified   │</span>\n├────┼───────────────────────┼──────┼───────────┼─────────────┤\n│  <span>0</span> │ Gemfile.lock          │ <span>file</span> │   <span>6.9</span> KiB │ <span>3</span> days ago  │\n│  <span>1</span> │ SUMMARY.md            │ <span>file</span> │   <span>3.7</span> KiB │ <span>3</span> days ago  │\n│  <span>2</span> │ Gemfile               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>3</span> │ LICENSE               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>4</span> │ CONTRIBUTING.md       │ <span>file</span> │     <span>955</span> B │ <span>9</span> mins ago  │\n│  <span>5</span> │ books.md              │ <span>file</span> │     <span>687</span> B │ <span>3</span> days ago  │\n<span>..</span>.\n</code></pre></div><p>この作業をおこなうために、<code>ls</code>にコマンドライン引数を渡していないことがわかります。代わりに、Nu が提供する<code>sort-by</code>コマンドを利用して、<code>ls</code>コマンドの出力をソートしています。また、一番大きなファイルを表示するために逆順に並び替えています。</p>\n<p>Nu にはテーブルを扱うための多くのコマンドが用意されています。例えば、1 キロバイトを超えるファイルのみを表示するように<code>ls</code>コマンドの出力をフィルターできます。</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> where size <span>></span> 1kb\n╭───┬───────────────────┬──────┬─────────┬────────────╮\n│ <span># │       name        │ type │  size   │  modified  │</span>\n├───┼───────────────────┼──────┼─────────┼────────────┤\n│ <span>0</span> │ Gemfile           │ <span>file</span> │ <span>1.1</span> KiB │ <span>3</span> days ago │\n│ <span>1</span> │ Gemfile.lock      │ <span>file</span> │ <span>6.9</span> KiB │ <span>3</span> days ago │\n│ <span>2</span> │ LICENSE           │ <span>file</span> │ <span>1.1</span> KiB │ <span>3</span> days ago │\n│ <span>3</span> │ SUMMARY.md        │ <span>file</span> │ <span>3.7</span> KiB │ <span>3</span> days ago │\n╰───┴───────────────────┴──────┴─────────┴────────────╯\n</code></pre></div><p>Unix 哲学にあるように、コマンドをつなぎ合わせることで様々な組み合わせを作り出すことができます。別のコマンドをみてみましょう。</p>\n<div><pre><code><span>></span> <span>ps</span>\n╭─────┬──────┬──────────────────────┬─────────┬───────┬───────────┬──────────╮\n│  <span>#  │ pid  │         name         │ status  │  cpu  │    mem    │ virtual  │</span>\n├─────┼──────┼──────────────────────┼─────────┼───────┼───────────┼──────────┤\n│   <span>0</span> │ <span>7570</span> │ nu                   │ Running │  <span>1.96</span> │  <span>23.2</span> MiB │ <span>32.8</span> GiB │\n│   <span>1</span> │ <span>3533</span> │ remindd              │ Sleep   │  <span>0.00</span> │ <span>103.6</span> MiB │ <span>32.3</span> GiB │\n│   <span>2</span> │ <span>3495</span> │ TVCacheExtension     │ Sleep   │  <span>0.00</span> │  <span>11.9</span> MiB │ <span>32.2</span> GiB │\n│   <span>3</span> │ <span>3490</span> │ MusicCacheExtension  │ Sleep   │  <span>0.00</span> │  <span>12.9</span> MiB │ <span>32.2</span> GiB │\n<span>..</span>.\n</code></pre></div><p>もしあなたが Linux を利用しているなら<code>ps</code>コマンドには馴染みがあるでしょう。これを使うと、現在システムが実行しているすべてのプロセスの状態や名前の一覧を取得することができます。プロセスの CPU 負荷も確認することができます。</p>\n<p>CPU をアクティブに利用しているプロセスを表示したい場合はどうでしょうか。さきほどの<code>ls</code>コマンドと同じように、<code>ps</code>コマンドが返すテーブルを利用することができます。</p>\n<div><pre><code><span>></span> <span>ps</span> <span>|</span> where cpu <span>></span> <span>5</span>\n╭───┬──────┬────────────────┬─────────┬────────┬───────────┬──────────╮\n│ <span># │ pid  │      name      │ status  │  cpu   │    mem    │ virtual  │</span>\n├───┼──────┼────────────────┼─────────┼────────┼───────────┼──────────┤\n│ <span>0</span> │ <span>1583</span> │ Terminal       │ Running │  <span>20.69</span> │ <span>127.8</span> MiB │ <span>33.0</span> GiB │\n│ <span>1</span> │  <span>579</span> │ photoanalysisd │ Running │ <span>139.50</span> │  <span>99.9</span> MiB │ <span>32.3</span> GiB │\n╰───┴──────┴────────────────┴─────────┴────────┴───────────┴──────────╯\n</code></pre></div><p>これまで、<code>ls</code>と<code>ps</code>を利用してファイルやプロセスの一覧を表示しました。Nu はこの他にも便利なテーブルを作り出すコマンドを提供します。次に<code>date</code>と<code>sys</code>をみてみましょう。</p>\n<p><code>date now</code>を実行すると、現在の日時と時間に関する情報が得られます。</p>\n<div><pre><code><span>></span> <span>date</span> now\n<span>2022</span>-03-07 <span>14</span>:14:51.684619600 -08:00\n</code></pre></div><p><code>sys</code>は Nu が実行されているシステムに関する情報を提供します。</p>\n<div><pre><code><span>></span> sys\n╭───────┬───────────────────╮\n│ <span>host</span>  │ <span>{</span>record <span>6</span> fields<span>}</span> │\n│ cpu   │ <span>[</span>table <span>4</span> rows<span>]</span>    │\n│ disks │ <span>[</span>table <span>3</span> rows<span>]</span>    │\n│ mem   │ <span>{</span>record <span>4</span> fields<span>}</span> │\n│ temp  │ <span>[</span>table <span>1</span> row<span>]</span>     │\n│ net   │ <span>[</span>table <span>4</span> rows<span>]</span>    │\n╰───────┴───────────────────╯\n</code></pre></div><p>これはさきほどまでのテーブルと少し異なります。<code>sys</code>コマンドは単純な値ではなくセルに構造化されたテーブルを含むテーブルを提供します。このデータを見るには表示する列を選択する必要があります。</p>\n<div><pre><code><span>></span> sys <span>|</span> get <span>host</span>\n╭────────────────┬────────────────────────╮\n│ name           │ Debian GNU/Linux       │\n│ os version     │ <span>11</span>                     │\n│ kernel version │ <span>5.10</span>.92-v8+            │\n│ <span>hostname</span>       │ lifeless               │\n│ <span>uptime</span>         │ 19day 21hr 34min 45sec │\n│ sessions       │ <span>[</span>table <span>1</span> row<span>]</span>          │\n╰────────────────┴────────────────────────╯\n</code></pre></div><p><code>get</code>コマンドを利用するとテーブルのカラムの内容を調べることができます。ここでは、Nu が実行されているホストに関する情報を含む&quot;host&quot;列を調べています。OS の名前、ホスト名、CPU などです。システム上のユーザーの名前を取得してみましょう。</p>\n<div><pre><code><span>></span> sys <span>|</span> get host.sessions.name\n╭───┬────╮\n│ <span>0</span> │ jt │\n╰───┴────╯\n</code></pre></div><p>現在、システムには&quot;jonathan&quot;という名前のユーザが１人だけいます。列の名前だけではなくパスも渡せることに気づくでしょう。Nu はパスを受け取るとテーブルの対応するデータを取得します。</p>\n<p>テーブルデータではなく、文字列&quot;jonathan&quot;を取得したことに気づかれたかもしれません。Nu はテーブルだけでなく文字列も扱います。文字列は Nu 以外のコマンドを扱う上で重要な役割をはたします。</p>\n<p>実際に Nu の外で文字列がどのように機能するか見てみましょう。先ほどの例で外部の<code>echo</code>コマンドを実行します。(<code>^</code>は組込みの<code>echo</code>コマンドを使用しないよう指示しています)。</p>\n<div><pre><code><span>></span> sys <span>|</span> get host.sessions.name <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> ^echo <span>$it</span> <span>}</span>\njt\n</code></pre></div><p>するどい読者にはこれが以前ものと似ていると思われるでしょう。しかし、さきほどの出力で<code>echo</code>を呼び出しているという重要な違いがあります。このように、Nu からデータを<code>echo</code>(または<code>git</code>のような Nu 以外の任意のコマンド)にわたすことができるのです。</p>\n<p>注：Nu の組み込みコマンドのヘルプテキストは、<code>help</code>コマンドで検出できます。</p>\n<div><pre><code><span>></span> <span>help</span> path\nExplore and manipulate paths.\n\nThere are three ways to represent a path:\n\n* As a path literal, e.g., <span>'/home/viking/spam.txt'</span>\n* As a structured path: a table with <span>'parent'</span>, <span>'stem'</span>, and <span>'extension'</span> <span>(</span>and\n* <span>'prefix'</span> on Windows<span>)</span> columns. This <span>format</span> is produced by the <span>'path parse'</span>\n  subcommand.\n* As an inner list of path parts, e.g., <span>'[[ / home viking spam.txt ]]'</span><span>.</span>\n  Splitting into parts is <span>done</span> by the <span><span>`</span>path <span>split</span><span>`</span></span> command.\n\nAll subcommands accept all three variants as an input. Furthermore, the <span>'path\njoin'</span> subcommand can be used to <span>join</span> the structured path or path parts back into\nthe path literal.\n\nUsage:\n  <span>></span> path\n\nSubcommands:\n  path <span>basename</span> - Get the final component of a path\n  path <span>dirname</span> - Get the parent directory of a path\n  path exists - Check whether a path exists\n  path <span>expand</span> - Try to <span>expand</span> a path to its absolute form\n  path <span>join</span> - Join a structured path or a list of path parts.\n  path parse - Convert a path into structured data.\n  path relative-to - Get a path as relative to another path.\n  path <span>split</span> - Split a path into parts by a separator.\n  path <span>type</span> - Get the <span>type</span> of the object a path refers to <span>(</span>e.g., file, dir, symlink<span>)</span>\n\nFlags:\n  -h, --help\n      Display this <span>help</span> message\n</code></pre></div>",
      "date_modified": "2022-06-03T05:34:12.237Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "データの読み込み",
      "url": "www.nushell.sh/ja/book/loading_data.html",
      "id": "www.nushell.sh/ja/book/loading_data.html",
      "content_html": "<h1 id=\"データの読み込み\" tabindex=\"-1\"> データの読み込み</h1>\n<p>これまでに、<code>ls</code>、<code>ps</code>、<code>date</code>、および<code>sys</code>コマンドを使って、ファイル、プロセス、日付そしてシステム自身の情報を取得する方法をみてきました。各コマンドはテーブル情報を提供しますが、他にもデータをテーブルに読み込む方法があります。</p>\n<h2 id=\"ファイルを開く\" tabindex=\"-1\"> ファイルを開く</h2>\n<p>データを操作するための Nu の最も強力なコマンドのひとつが<code>open</code>コマンドです。これは様々なデータ形式に対応したマルチツールです。これがなにを意味するかをみるために、json ファイルを開いてみましょう。</p>\n<div><pre><code>> open editors/vscode/package.json\n──────────────────┬───────────────────────────────────────────────────────────────────────────────\n name             │ lark\n description      │ Lark support for VS Code\n author           │ Lark developers\n license          │ MIT\n version          │ 1.0.0\n repository       │ [row type url]\n publisher        │ vscode\n categories       │ [table 0 rows]\n keywords         │ [table 1 rows]\n engines          │ [row vscode]\n activationEvents │ [table 1 rows]\n main             │ ./out/extension\n contributes      │ [row configuration grammars languages]\n scripts          │ [row compile postinstall test vscode:prepublish watch]\n devDependencies  │ [row @types/mocha @types/node tslint typescript vscode vscode-languageclient]\n──────────────────┴───────────────────────────────────────────────────────────────────────────────\n</code></pre></div><p><code>ls</code>と同様、Nu が理解できるタイプのファイルを開くと、単なるテキスト(またはバイトストリーム)以上のものが返ってきます。ここでは、JavaScript プロジェクト内の&quot;package.json&quot;ファイルを開いています。Nu は JSON テキストを認識し、テーブルデータを返すことができます。</p>\n<p>プロジェクトのバージョンを確認したい場合は、<code>get</code>コマンドを利用します。</p>\n<div><pre><code>> open editors/vscode/package.json | get version\n1.0.0\n</code></pre></div><p>Nu が現在、直接データをテーブルに読み込める形式は次の通りです。</p>\n<ul>\n<li>json</li>\n<li>yaml</li>\n<li>toml</li>\n<li>xml</li>\n<li>csv</li>\n<li>ini</li>\n</ul>\n<p>しかし、これらのいずれでもないテキストファイルを読み込むとどうなるでしょうか、試してみましょう。</p>\n<div><pre><code>> open README.md\n</code></pre></div><p>ファイルの内容が表示されます。ファイルが大きすぎる場合は、便利なスクロールビューでファイルの中身を確認してからターミナルに戻ってることができます。読みやすさのために、ソースファイルやマークダウンといった一般的なファイル形式ではシンタックスハイライトを提供します。</p>\n<p>裏側では、Nu はこれらのファイルをひとつの大きな文字列としてみています。次に、これらの文字列から必要なデータを取得する方法について説明します。</p>\n<h2 id=\"文字列を扱う\" tabindex=\"-1\"> 文字列を扱う</h2>\n<p>Nu の外からきたデータを Nu がいつも理解できるとは限らないことを理解しておくのは重要なことです。多くの場合このデータは文字列として与えられます。</p>\n<p>以下のファイルが与えられたと想定してみましょう。</p>\n<div><pre><code>> open people.txt\nOctavia | Butler | Writer\nBob | Ross | Painter\nAntonio | Vivaldi | Composer\n</code></pre></div><p>必要なデータはパイプ('|')記号で区切られており、各行はそれぞれの人物を表しています。Nu はデフォルトではパイプで区切られたファイル形式を知らないので、明示的にこのファイルをパースする必要があります。</p>\n<p>ファイルを読み込むときに最初に行うことは、１行ずつ作業することです。</p>\n<div><pre><code>> open people.txt | lines\n───┬──────────────────────────────\n 0 │ Octavia | Butler | Writer\n 1 │ Bob | Ross | Painter\n 2 │ Antonio | Vivaldi | Composer\n───┴──────────────────────────────\n</code></pre></div><p>テーブルにもどってきたので、行を使って作業していることがわかります。次のステップは、行をもうすこし便利なものに分割できるかみてみることです。そのために、<code>split</code>コマンドを利用します。名前からわかるように、<code>split</code>は区切り文字を含む文字列を列に分割する方法を提供します。<code>split</code>の<code>column</code>サブコマンドを使って、複数の列に分割するします。必要なのは区切り文字を指定することだけです。</p>\n<div><pre><code>> open people.txt | lines | split column \"|\"\n───┬──────────┬───────────┬───────────\n # │ Column1  │ Column2   │ Column3\n───┼──────────┼───────────┼───────────\n 0 │ Octavia  │  Butler   │  Writer\n 1 │ Bob      │  Ross     │  Painter\n 2 │ Antonio  │  Vivaldi  │  Composer\n───┴──────────┴───────────┴───────────\n</code></pre></div><p>ほとんど正しいように見えますが、余分なスペースを含んでいます。余分なスペースを<code>trim</code>してみましょう。</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" | str trim\n───┬─────────┬─────────┬──────────\n # │ Column1 │ Column2 │ Column3\n───┼─────────┼─────────┼──────────\n 0 │ Octavia │ Butler  │ Writer\n 1 │ Bob     │ Ross    │ Painter\n 2 │ Antonio │ Vivaldi │ Composer\n───┴─────────┴─────────┴──────────\n</code></pre></div><p>悪くありません。<code>split</code>コマンドは利用可能なデータとデフォルトのカラム名をつけてくれます。</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" | str trim | get Column1\n───┬─────────\n 0 │ Octavia\n 1 │ Bob\n 2 │ Antonio\n───┴─────────\n</code></pre></div><p>デフォルトの名前を利用するかわりに、列に名前をつけることもできます。</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" first_name last_name job | str trim\n───┬────────────┬───────────┬──────────\n # │ first_name │ last_name │ job\n───┼────────────┼───────────┼──────────\n 0 │ Octavia    │ Butler    │ Writer\n 1 │ Bob        │ Ross      │ Painter\n 2 │ Antonio    │ Vivaldi   │ Composer\n───┴────────────┴───────────┴──────────\n</code></pre></div><p>データをテーブルに変換できたので、これまでテーブルに利用してきたすべてのコマンドをつかうことができます。</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" first_name last_name job | str trim | sort-by first_name\n───┬────────────┬───────────┬──────────\n # │ first_name │ last_name │ job\n───┼────────────┼───────────┼──────────\n 0 │ Antonio    │ Vivaldi   │ Composer\n 1 │ Bob        │ Ross      │ Painter\n 2 │ Octavia    │ Butler    │ Writer\n───┴────────────┴───────────┴──────────\n</code></pre></div><p>文字列を操作するために使用できるその他のコマンドです。</p>\n<ul>\n<li>str</li>\n<li>lines</li>\n<li>size</li>\n</ul>\n<p>データが Nu が理解できる構造をもっていることがわかっている場合に呼び出すことのできるヘルパーコマンドのセットもあります。例えば、Rust のロックファイルを開いてみましょう。</p>\n<div><pre><code>> open Cargo.lock\n# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"adhoc_derive\"\nversion = \"0.1.2\"\n</code></pre></div><p>&quot;Cargo.lock&quot;ファイルは実際には.toml ファイルですが、ファイル拡張子が.toml ではありません。でも大丈夫です、<code>from toml</code>コマンドが使えます。</p>\n<div><pre><code>> open Cargo.lock | from toml\n──────────┬───────────────────\n metadata │ [row 107 columns]\n package  │ [table 130 rows]\n──────────┴───────────────────\n</code></pre></div><p><code>from</code>コマンドはサポートされているテキストフォーマットをサブコマンドとして渡すことで Nu が扱える構造化データごとに利用できます。</p>\n<h2 id=\"raw-モードで開く\" tabindex=\"-1\"> raw モードで開く</h2>\n<p>ファイルを開いてそのデータのテーブルをすぐに操作できると便利ですが、これは必ずしもやりたいことであるとは限りません。テキストをそのまま取得するために、<code>open</code>コマンドに<code>--raw</code>オプションフラグを渡すことができます。</p>\n<div><pre><code>> open Cargo.toml --raw\n[package]                                                                                        name = \"nu\"\nversion = \"0.1.3\"\nauthors = [\"Yehuda Katz &lt;wycats@gmail.com>\", \"Jonathan Turner &lt;jonathan.d.turner@gmail.com>\"]\ndescription = \"A shell for the GitHub era\"\nlicense = \"MIT\"\n</code></pre></div><h2 id=\"url-からの取得\" tabindex=\"-1\"> URL からの取得</h2>\n<p>ファイルシステムからファイルを読み込むことに加えて、<code>fetch</code>コマンドを利用して URL からリソースを取得できます。\nこれはインターネットから URL の内容をフェッチして返してくれます。</p>\n<div><pre><code>> fetch https://www.jonathanturner.org/feed.xml\n─────┬───────────────────────────\n rss │ [row attributes children]\n─────┴───────────────────────────\n</code></pre></div>",
      "date_modified": "2022-06-03T05:34:12.238Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Math",
      "url": "www.nushell.sh/ja/book/math.html",
      "id": "www.nushell.sh/ja/book/math.html",
      "content_html": "<h1 id=\"math\" tabindex=\"-1\"> Math</h1>\n<p>何かの作業をしているとき、いくつかの数字を足し算したくなるときがあります。Nu には基本的な数学演算が用意されています。</p>\n<p>&quot;math mode&quot;にするには、コマンドの先頭に<code>=</code>をつけます。これにより演算子を使用するコマンドを書くことができます。<code>where</code>コマンドのように自動でおこなってくれるコマンドもあります。</p>\n<h2 id=\"四則演算\" tabindex=\"-1\"> 四則演算</h2>\n<div><pre><code>> = 1 + 3\n4\n</code></pre></div><p>Nu では足し算、引き算、掛け算、割り算をそれぞれ<code>+</code>,<code>-</code>,<code>*</code>そして<code>/</code>演算子でおこなうことができます。演算子の優先順位が考慮されるので<code>1 + 2 * 3</code>は<code>1 + (2 * 3)</code>として扱われます。</p>\n<h2 id=\"括弧\" tabindex=\"-1\"> 括弧</h2>\n<p>math mode では括弧を利用して数式をグループ化できます。これにより足し算を優先したいときは<code>(1 + 2) * 3</code>と書くことができます。</p>\n<h2 id=\"inとnot-in\" tabindex=\"-1\"> <code>in</code>と<code>not-in</code></h2>\n<p><code>in</code>と<code>not-in</code>演算子を使って、値が集合に含まれるかどうかを調べることができます。</p>\n<div><pre><code>> = 1 in [1 2 3]\ntrue\n</code></pre></div><div><pre><code>> = 1 not-in [1 2 3]\nfalse\n</code></pre></div><h2 id=\"と\" tabindex=\"-1\"> <code>=~</code>と<code>!~</code></h2>\n<p><code>=~</code>と<code>!~</code>演算子を使って文字列が他の文字列の中にあるかどうかを調べることができます。</p>\n<div><pre><code>> = \"foobar\" =~ \"foo\"\ntrue\n</code></pre></div><div><pre><code>> = \"foobar\" !~ \"baz\"\ntrue\n</code></pre></div><h2 id=\"比較演算子\" tabindex=\"-1\"> 比較演算子</h2>\n<p>以下の比較演算子が利用可能です。</p>\n<ul>\n<li><code>&lt;</code> - less than</li>\n<li><code>&lt;=</code> - less than or equal to</li>\n<li><code>&gt;</code> - greater than</li>\n<li><code>&gt;=</code> - greater than or equal to</li>\n<li><code>==</code> - equal to</li>\n<li><code>!=</code> - not equal to</li>\n</ul>\n<h2 id=\"複合演算子\" tabindex=\"-1\"> 複合演算子</h2>\n<p><code>&amp;&amp;</code>と<code>||</code>を使ってブーリアンを返す２つの操作を結合できます。例えば: <code>ls | where name in [&quot;one&quot; &quot;two&quot; &quot;three&quot;] &amp;&amp; size &gt; 10kb</code></p>\n",
      "date_modified": "2022-06-03T05:34:12.238Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "メタデータ",
      "url": "www.nushell.sh/ja/book/metadata.html",
      "id": "www.nushell.sh/ja/book/metadata.html",
      "content_html": "<h1 id=\"メタデータ\" tabindex=\"-1\"> メタデータ</h1>\n<p>Nu を使用していると裏でなにか特別なことがおきているのではないかと思うことがあるでしょう。例えば、Nu がサポートしているファイル形式を忘れていて、余計に変換しようとしてしまったとしましょう。</p>\n<div><pre><code>> open Cargo.toml | from toml\nerror: Expected a string from pipeline\n- shell:1:18\n1 | open Cargo.toml | from toml\n  |                   ^^^^^^^^^ requires string input\n- shell:1:5\n1 | open Cargo.toml | from toml\n  |      ---------- object originates from here\n</code></pre></div><p>エラーメッセージは、<code>from toml</code>に渡したものが文字列ではなかったことだけではなく、元の値がどこから来たかも示しています。どうやってこれを知るのでしょうか。</p>\n<p>Nu のパイプラインを流れる値には、多くの場合、メタデータと呼ばれる一連の追加情報が付加されます。これらはストアにあるアイテムにつけられているタグのようにタグと呼ばれています。これらのタグはデータには影響しませんが、データを操作する際の体験を向上させます。</p>\n<p>もう一度<code>open</code>コマンドを実行してみましょう、ただし今回は、返されるタグを確認します。</p>\n<div><pre><code>> open Cargo.toml | tags\n────────┬───────────────────────────────────────────\n span   │ [row end start]\n anchor │ /home/jonathant/Source/nushell/Cargo.toml\n────────┴───────────────────────────────────────────\n</code></pre></div><p>現在、パイプライン上の値について２つのメタデータを追跡しています。このデータがどこから読み込まれたかをしめす anchor があることに気づくでしょう。これにより Nu はデータの表示方法をよりよく理解できるのです。</p>\n<p>今度は span をみてみましょう。</p>\n<div><pre><code>> open Cargo.toml | tags | get span\n───────┬────\n start │ 5\n end   │ 15\n───────┴────\n</code></pre></div><p>ここでの&quot;start&quot;と&quot;end&quot;の span は下線が行のどこにあるのかを示しています。5 から 15 まで数えてみるとそれが&quot;Cargo.toml&quot;ファイル名と一致することがわかるでしょう。このようにして、さきほどみたエラーはどこに下線をひくべきかをしったのです。</p>\n",
      "date_modified": "2022-06-03T05:34:12.238Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "システム内の移動",
      "url": "www.nushell.sh/ja/book/moving_around.html",
      "id": "www.nushell.sh/ja/book/moving_around.html",
      "content_html": "<h1 id=\"システム内の移動\" tabindex=\"-1\"> システム内の移動</h1>\n<p>初期のシェルを使うとシステム内を移動してコマンドを実行することができますが、Nu のような現代的なシェルでも同じことができます。システムを操作する際によく使われるコマンドをいくつか見てみましょう。</p>\n<h2 id=\"ディレクトリの内容を確認する\" tabindex=\"-1\"> ディレクトリの内容を確認する</h2>\n<div><pre><code><span>></span> <span>ls</span>\n</code></pre></div><p>他の章でみてきたように、<code>ls</code>はパスの内容を表示するためのコマンドです。Nu はパスの内容をテーブルとして返してくれます。</p>\n<p><code>ls</code>コマンドには表示する内容を変更するためにオプションで引数を渡すことができます。例えば&quot;.md&quot;で終わるファイルの一覧を表示することができます。glob&quot;*.md&quot;はファイルが'.md'で終わっていればマッチすると読むことができます。</p>\n<div><pre><code><span>></span> <span>ls</span> *.md\n───┬────────────────────┬──────┬─────────┬────────────\n <span># │ name               │ type │ size    │ modified </span>\n───┼────────────────────┼──────┼─────────┼────────────\n <span>0</span> │ CODE_OF_CONDUCT.md │ File │  <span>3.4</span> KB │ <span>5</span> days ago \n <span>1</span> │ CONTRIBUTING.md    │ File │   <span>886</span> B │ <span>5</span> days ago \n <span>2</span> │ README.md          │ File │ <span>15.0</span> KB │ <span>5</span> days ago \n <span>3</span> │ TODO.md            │ File │  <span>1.6</span> KB │ <span>5</span> days ago \n───┴────────────────────┴──────┴─────────┴────────────\n</code></pre></div><p>上記のオプション引数&quot;*.txt&quot;の中で利用されているアスタリスク(*)はしばしばワイルドカードやグロブと呼ばれ、何にでもマッチします。グロブ&quot;*.txt&quot;は&quot;'.txt'で終わる任意のファイルにマッチする&quot;と読むことができます。</p>\n<p>Nu はより深いディレクトリにアクセスできる最新のグロブも利用します。</p>\n<div><pre><code> <span>ls</span> **/*.md\n────┬───────────────────────────────────────────┬──────┬─────────┬────────────\n <span>#  │ name                                      │ type │ size    │ modified </span>\n────┼───────────────────────────────────────────┼──────┼─────────┼────────────\n  <span>0</span> │ .github/ISSUE_TEMPLATE/bug_report.md      │ File │   <span>592</span> B │ <span>5</span> days ago \n  <span>1</span> │ .github/ISSUE_TEMPLATE/feature_request.md │ File │   <span>595</span> B │ <span>5</span> days ago \n  <span>2</span> │ CODE_OF_CONDUCT.md                        │ File │  <span>3.4</span> KB │ <span>5</span> days ago \n  <span>3</span> │ CONTRIBUTING.md                           │ File │   <span>886</span> B │ <span>5</span> days ago \n  <span>4</span> │ README.md                                 │ File │ <span>15.0</span> KB │ <span>5</span> days ago \n  <span>5</span> │ TODO.md                                   │ File │  <span>1.6</span> KB │ <span>5</span> days ago \n  <span>6</span> │ crates/nu-source/README.md                │ File │  <span>1.7</span> KB │ <span>5</span> days ago \n  <span>7</span> │ docker/packaging/README.md                │ File │  <span>1.5</span> KB │ <span>5</span> days ago \n  <span>8</span> │ docs/commands/README.md                   │ File │   <span>929</span> B │ <span>5</span> days ago \n  <span>9</span> │ docs/commands/alias.md                    │ File │  <span>1.7</span> KB │ <span>5</span> days ago \n <span>10</span> │ docs/commands/append.md                   │ File │  <span>1.4</span> KB │ <span>5</span> days ago\n</code></pre></div><p>ここでは&quot;.md&quot;で終わるファイルを探していますが、２つのアスタリスクはさらに&quot;ここから始まる任意のディレクトリにある&quot;という意味です。</p>\n<h2 id=\"現在のディレクトリを変更する\" tabindex=\"-1\"> 現在のディレクトリを変更する</h2>\n<div><pre><code><span>></span> <span>cd</span> new_directory\n</code></pre></div><p>現在のディレクトリを変更するには<code>cd</code>コマンドを使います。他のシェルと同じように、ディレクトリの名前か上の階層に移動する場合は<code>..</code>ショートカットを利用します。</p>\n<p><code>cd</code>を省略してパスだけを指定することでも現在の作業ディレクトリを変更することができます。</p>\n<div><pre><code><span>></span> ./new_directory\n</code></pre></div><h2 id=\"ファイルシステムのコマンド\" tabindex=\"-1\"> ファイルシステムのコマンド</h2>\n<p>Nu はクロスプラットフォームで動作するいくつかの基本的なファイルシステムのコマンドも提供します。</p>\n<p><code>mv</code>コマンドを利用すればアイテムをある場所から別の場所へ移動できます。</p>\n<div><pre><code><span>></span> <span>mv</span> item location\n</code></pre></div><p>ある場所から別の場所へアイテムのコピーができます。</p>\n<div><pre><code><span>></span> <span>cp</span> item location\n</code></pre></div><p>アイテムの削除ができます。</p>\n<div><pre><code><span>></span> <span>rm</span> item\n</code></pre></div><p>３つのコマンドは<code>ls</code>コマンドでみたグロブ機能も利用できます。</p>\n<p>最後に、<code>mkdir</code>コマンドで新しいディレクトリを作成できます。</p>\n<div><pre><code><span>></span> <span>mkdir</span> new_directory\n</code></pre></div>",
      "date_modified": "2022-06-03T05:34:12.238Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "他のシェルと DSL から Nu への対応表",
      "url": "www.nushell.sh/ja/book/nushell_map.html",
      "id": "www.nushell.sh/ja/book/nushell_map.html",
      "content_html": "<h1 id=\"他のシェルと-dsl-から-nu-への対応表\" tabindex=\"-1\"> 他のシェルと DSL から Nu への対応表</h1>\n<p>このテーブルは Nu の組込みコマンドやプラグインと他のシェルや DLS(Domain Specific Languages)との対応関係を理解することを助けるためのものです。ここでは全ての Nu コマンドとそのコマンドが他の言語でどう使われているかをマッピングしています。コントリビューション歓迎です。</p>\n<p>注: Nu が 0.14.1 以降であることを想定しています。</p>\n<table>\n<thead>\n<tr>\n<th>Nushell</th>\n<th>SQL</th>\n<th>.Net LINQ (C#)</th>\n<th>PowerShell (without external modules)</th>\n<th>Bash</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alias</td>\n<td>-</td>\n<td>-</td>\n<td>alias</td>\n<td>alias</td>\n</tr>\n<tr>\n<td>append</td>\n<td>-</td>\n<td>Append</td>\n<td>-Append</td>\n<td></td>\n</tr>\n<tr>\n<td>args</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>autoview</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>average(<code>*</code>)</td>\n<td>avg</td>\n<td>Average</td>\n<td>Measure-Object, measure</td>\n<td></td>\n</tr>\n<tr>\n<td>binaryview(<code>*</code>)</td>\n<td>-</td>\n<td></td>\n<td>Format-Hex</td>\n<td></td>\n</tr>\n<tr>\n<td>calc, = math</td>\n<td>math operators</td>\n<td>Aggregate, Average, Count, Max, Min, Sum</td>\n<td></td>\n<td>bc</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>-</td>\n<td>-</td>\n<td>Set-Location, cd</td>\n<td>cd</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>-</td>\n<td>-</td>\n<td>Clear-Host</td>\n<td>clear</td>\n</tr>\n<tr>\n<td>clip</td>\n<td>-</td>\n<td>-</td>\n<td>Set-Clipboard, scb</td>\n<td>clip, clipboard, xclip, pbcopy</td>\n</tr>\n<tr>\n<td>compact</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>config</td>\n<td>-</td>\n<td>-</td>\n<td>$Profile</td>\n<td>vi .bashrc, .profile</td>\n</tr>\n<tr>\n<td>count</td>\n<td>count</td>\n<td>Count</td>\n<td>Measure-Object, measure</td>\n<td>wc</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>-</td>\n<td>-</td>\n<td>Copy-Item, cp, copy</td>\n<td>cp</td>\n</tr>\n<tr>\n<td>date</td>\n<td>NOW() / getdate()</td>\n<td>DateTime class</td>\n<td>Get-Date</td>\n<td>date</td>\n</tr>\n<tr>\n<td>debug</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>= dec</td>\n<td></td>\n<td>x--</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>drop</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>du</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td>du</td>\n</tr>\n<tr>\n<td>each</td>\n<td>cursor</td>\n<td></td>\n<td>ForEach-Object, foreach, for</td>\n<td></td>\n</tr>\n<tr>\n<td>echo</td>\n<td>print</td>\n<td>-</td>\n<td>Write-Output, write</td>\n<td>echo</td>\n</tr>\n<tr>\n<td>enter</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>evaluate_by</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>exit</td>\n<td>-</td>\n<td></td>\n<td>exit</td>\n<td>exit</td>\n</tr>\n<tr>\n<td>fetch(<code>*</code>)</td>\n<td>-</td>\n<td>HttpClient,WebClient, HttpWebRequest/Response</td>\n<td>Invoke-WebRequest</td>\n<td>wget</td>\n</tr>\n<tr>\n<td>first</td>\n<td>top, limit</td>\n<td>First, FirstOrDefault</td>\n<td>Select-Object -First</td>\n<td>head</td>\n</tr>\n<tr>\n<td>format</td>\n<td></td>\n<td>String.Format</td>\n<td>String.Format</td>\n<td></td>\n</tr>\n<tr>\n<td>from</td>\n<td>import flatfile, openjson, cast(variable as xml)</td>\n<td>-</td>\n<td>Import/ConvertFrom-{Csv,Xml,Html,Json}</td>\n<td></td>\n</tr>\n<tr>\n<td>get</td>\n<td></td>\n<td>Select</td>\n<td>(cmd).column</td>\n<td></td>\n</tr>\n<tr>\n<td>group_by</td>\n<td>group by</td>\n<td>GroupBy, group</td>\n<td>Group-Object, group</td>\n<td></td>\n</tr>\n<tr>\n<td>headers</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>help</td>\n<td>sp_help</td>\n<td>-</td>\n<td>Get-Help, help, man</td>\n<td>man</td>\n</tr>\n<tr>\n<td>histogram</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>history</td>\n<td>-</td>\n<td>-</td>\n<td>Get-History, history</td>\n<td>history</td>\n</tr>\n<tr>\n<td>inc(<code>*</code>)</td>\n<td>-</td>\n<td></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>insert</td>\n<td></td>\n<td></td>\n<td>Add-Member</td>\n<td></td>\n</tr>\n<tr>\n<td>is_empty</td>\n<td>is null</td>\n<td>String.InNullOrEmpty</td>\n<td>String.InNullOrEmpty</td>\n<td></td>\n</tr>\n<tr>\n<td>keep, =take</td>\n<td>top, limit</td>\n<td>Take</td>\n<td>Select-Object -First</td>\n<td>head</td>\n</tr>\n<tr>\n<td>keep_until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>keep_while</td>\n<td></td>\n<td>TakeWhile</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>kill</td>\n<td>-</td>\n<td>-</td>\n<td>Stop-Process, kill</td>\n<td>kill</td>\n</tr>\n<tr>\n<td>last</td>\n<td></td>\n<td>Last, LastOrDefault</td>\n<td>Select-Object -Last</td>\n<td>tail</td>\n</tr>\n<tr>\n<td>lines</td>\n<td>-</td>\n<td>-</td>\n<td>File.ReadAllLines</td>\n<td></td>\n</tr>\n<tr>\n<td>ls</td>\n<td>-</td>\n<td>-</td>\n<td>Get-ChildItem, dir, ls</td>\n<td>ls</td>\n</tr>\n<tr>\n<td>map_max_by</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>match(<code>*</code>)</td>\n<td>case when</td>\n<td>Regex.IsMatch</td>\n<td>[regex]</td>\n<td></td>\n</tr>\n<tr>\n<td>merge</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>-</td>\n<td>-</td>\n<td>mkdir, md</td>\n<td>mkdir</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>-</td>\n<td>-</td>\n<td>Move-Item, mv, move, mi</td>\n<td>mv</td>\n</tr>\n<tr>\n<td>next</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>nth</td>\n<td>limit x offset y, rownumber =</td>\n<td>ElementAt</td>\n<td>[x], indexing operator, ElementAt</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td></td>\n<td></td>\n<td>Get-Content, gc, cat, type</td>\n<td>cat</td>\n</tr>\n<tr>\n<td>parse</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pivot, =transpose</td>\n<td>pivot</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>post(<code>*</code>)</td>\n<td>-</td>\n<td>HttpClient,WebClient, HttpWebRequest/Response</td>\n<td>Invoke-WebRequest</td>\n<td></td>\n</tr>\n<tr>\n<td>prepend</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prev</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ps(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>Get-Process, ps, gps</td>\n<td>ps</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>-</td>\n<td>-</td>\n<td>Get-Location, pwd</td>\n<td>pwd</td>\n</tr>\n<tr>\n<td>range</td>\n<td></td>\n<td>Range</td>\n<td>1..10, 'a'..'f'</td>\n<td></td>\n</tr>\n<tr>\n<td>reduce_by</td>\n<td></td>\n<td>Aggregate</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>reject</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>rename</td>\n<td>-</td>\n<td>-</td>\n<td>Rename-Item, ren, rni</td>\n<td>mv</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td></td>\n<td>Reverse</td>\n<td>[Array]::Reverse($var)</td>\n<td></td>\n</tr>\n<tr>\n<td>rm</td>\n<td>-</td>\n<td>-</td>\n<td>Remove-Item, del, erase, rd, ri, rm, rmdir</td>\n<td>rm</td>\n</tr>\n<tr>\n<td>save</td>\n<td>-</td>\n<td>-</td>\n<td>Write-Output, Out-File</td>\n<td>&gt; foo.txt</td>\n</tr>\n<tr>\n<td>select(<code>***</code>)</td>\n<td>select</td>\n<td>Select</td>\n<td>Select-Object, select</td>\n<td></td>\n</tr>\n<tr>\n<td>shells</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>shuffle</td>\n<td></td>\n<td>Random</td>\n<td>$var</td>\n<td>Sort-Object {Get-Random}</td>\n</tr>\n<tr>\n<td>size</td>\n<td></td>\n<td></td>\n<td>Measure-Object, measure</td>\n<td>wc</td>\n</tr>\n<tr>\n<td>skip</td>\n<td>where row_number()</td>\n<td>Skip</td>\n<td>Select-Object -Skip</td>\n<td></td>\n</tr>\n<tr>\n<td>skip_until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip_while</td>\n<td></td>\n<td>SkipWhile</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>sort-by</td>\n<td>order by</td>\n<td>OrderBy, OrderByDescending, ThenBy, ThenByDescending</td>\n<td>Sort-Object, sort</td>\n<td></td>\n</tr>\n<tr>\n<td>split_by</td>\n<td></td>\n<td>Split</td>\n<td>Split</td>\n<td></td>\n</tr>\n<tr>\n<td>split_column</td>\n<td></td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>split_row</td>\n<td></td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>str(<code>*</code>)</td>\n<td>string functions</td>\n<td>String class</td>\n<td>String class</td>\n<td></td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum</td>\n<td>Sum</td>\n<td>Measure-Object, measure</td>\n<td></td>\n</tr>\n<tr>\n<td>sys(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>Get-ComputerInfo</td>\n<td>uname, lshw, lsblk, lscpu, lsusb, hdparam, free</td>\n</tr>\n<tr>\n<td>table</td>\n<td></td>\n<td></td>\n<td>Format-Table, ft, Format-List, fl</td>\n<td></td>\n</tr>\n<tr>\n<td>tags</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>textview(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>Get-Content, cat</td>\n<td></td>\n</tr>\n<tr>\n<td>tree(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>tree</td>\n<td></td>\n</tr>\n<tr>\n<td>to</td>\n<td>-</td>\n<td>-</td>\n<td>Export/ConvertTo-{Csv,Xml,Html,Json}</td>\n<td></td>\n</tr>\n<tr>\n<td>touch</td>\n<td>-</td>\n<td>-</td>\n<td>Set-Content</td>\n<td>touch</td>\n</tr>\n<tr>\n<td>trim</td>\n<td>rtrim, ltrim</td>\n<td>Trim, TrimStart, TrimEnd</td>\n<td>Trim</td>\n<td></td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>distinct</td>\n<td>Distinct</td>\n<td>Get-Unique, gu</td>\n<td>uniq</td>\n</tr>\n<tr>\n<td>update(<code>**</code>)</td>\n<td>As</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>version</td>\n<td>select @@version</td>\n<td>-</td>\n<td>$PSVersionTable</td>\n<td></td>\n</tr>\n<tr>\n<td>with_env</td>\n<td>-</td>\n<td>-</td>\n<td>$env:FOO = 'bar'</td>\n<td>export foo = &quot;bar&quot;</td>\n</tr>\n<tr>\n<td>what</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>where</td>\n<td>where</td>\n<td>Where</td>\n<td>Where-Object, where, &quot;?&quot; operator</td>\n<td></td>\n</tr>\n<tr>\n<td>which</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>which</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>*</code> - these commands are part of the standard plugins</li>\n<li><code>**</code> - renamed from <code>edit</code> to <code>update</code> in 0.13.1</li>\n<li><code>***</code> - renamed from <code>pick</code> to <code>select</code> in 0.13.1</li>\n</ul>\n",
      "date_modified": "2022-06-03T05:34:12.239Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "関数型言語から Nu への対応表",
      "url": "www.nushell.sh/ja/book/nushell_map_functional.html",
      "id": "www.nushell.sh/ja/book/nushell_map_functional.html",
      "content_html": "<h1 id=\"関数型言語から-nu-への対応表\" tabindex=\"-1\"> 関数型言語から Nu への対応表</h1>\n<p>このテーブルは Nu の組込みコマンドやプラグインと他の関数型言語との対応関係を理解することを助けるためのものです。ここでは全ての Nu コマンドとそのコマンドが他の言語でどう使われているかをマッピングしています。コントリビューション歓迎です。</p>\n<p>注: Nu が 0.14.1 以降であることを想定しています。</p>\n<p>| Nushell           | Clojure                      | Tablecloth (Ocaml / Elm)        | Haskell                  |\n| ----------------- | ---------------------------- | ------------------------------- | ------------------------ | --- |\n| alias             |                              |                                 |                          |     |\n| append            | conj, into, concat           | append, (++), concat, concatMap | (++)                     |     |\n| args              |                              |                                 |                          |     |\n| autoview          |                              |                                 |                          |     |\n| average(<code>*</code>)      |                              |                                 |                          |     |\n| binaryview(<code>*</code>)   | Integer/toHexString          |                                 | showHex                  |     |\n| calc, = math      | math operators               |                                 |                          |     |\n| cd                |                              |                                 |                          |     |\n| clear             |                              |                                 |                          |     |\n| clip              |                              |                                 |                          |     |\n| compact           |                              |                                 |                          |     |\n| config            |                              |                                 |                          |     |\n| count             | count                        | length, size                    | length, size             |     |\n| cp                |                              |                                 |                          |     |\n| date              | java.time.LocalDate/now      |                                 |                          |     |\n| debug             |                              |                                 |                          |     |\n| default           |                              |                                 |                          |     |\n| drop              |                              |                                 |                          |     |\n| du                |                              |                                 |                          |     |\n| each              | map, mapv, iterate           | map, forEach                    | map                      |     |\n| echo              | println                      |                                 | putStrLn, print          |     |\n| enter             |                              |                                 |                          |     |\n| evaluate_by       |                              |                                 |                          |     |\n| exit              | System/exit                  |                                 |                          |     |\n| fetch(<code>*</code>)        |                              |                                 |                          |     |\n| first             | first                        | head                            | head                     |     |\n| format            | format                       |                                 | Text.Printf.printf       |     |\n| from              |                              |                                 |                          |     |\n| get               |                              |                                 |                          |     |\n| group_by          | group-by                     |                                 | group, groupBy           |     |\n| headers           |                              |                                 |                          |     |\n| help              | doc                          |                                 |                          |     |\n| histogram         |                              |                                 |                          |     |\n| history           |                              |                                 |                          |     |\n| inc(<code>*</code>)          | inc                          |                                 | succ                     |     |\n| insert            |                              |                                 |                          |     |\n| is_empty          | empty?                       | isEmpty                         |                          |     |\n| keep              | take, drop-last, pop         | take, init                      | take, init               |     |\n| keep_until        |                              |                                 |                          |     |\n| keep_while        | take-while                   | takeWhile                       | takeWhile                |     |\n| kill              |                              |                                 |                          |     |\n| last              | last, peek, take-last        | last                            | last                     |     |\n| lines             |                              |                                 | lines, words, split-with |     |\n| ls                |                              |                                 |                          |     |\n| map_max_by        |                              |                                 |                          |     |\n| match(<code>*</code>)        | re-matches, re-seq, re-find  |                                 |                          |     |\n| merge             |                              |                                 |                          |     |\n| mkdir             |                              |                                 |                          |     |\n| mv                |                              |                                 |                          |     |\n| next              |                              |                                 |                          |     |\n| nth               | nth                          | Array.get                       | lookup                   |     |\n| open              | with-open                    |                                 |                          |     |\n| parse             |                              |                                 |                          |     |\n| pivot, =transpose | (apply mapv vector matrix)   |                                 | transpose                |     |\n| post(<code>*</code>)         |                              |                                 |                          |     |\n| prepend           | cons                         | cons, ::                        | ::                       |     |\n| prev              |                              |                                 |                          |     |\n| ps(<code>*</code>)           |                              |                                 |                          |     |\n| pwd               |                              |                                 |                          |     |\n| range             | range                        | range                           | 1..10, 'a'..'f'          |     |\n| reduce_by         | reduce, reduce-kv            | foldr                           | foldr                    |     |\n| reject            |                              |                                 |                          |     |\n| rename            |                              |                                 |                          |     |\n| reverse           | reverse, rseq                | reverse, reverseInPlace         | reverse                  |     |\n| rm                |                              |                                 |                          |     |\n| save              |                              |                                 |                          |     |\n| select(<code>***</code>)     | select-keys                  |                                 |                          |     |\n| shells            |                              |                                 |                          |     |\n| shuffle           | shuffle                      |                                 |                          |     |\n| size              | count                        |                                 | size, length             |     |\n| skip              | rest                         | tail                            | tail                     |     |\n| skip_until        |                              |                                 |                          |     |\n| skip_while        | drop-while                   | dropWhile                       | dropWhile, dropWhileEnd  |     |\n| sort-by           | sort, sort-by, sorted-set-by | sort, sortBy, sortWith          | sort, sortBy             |     |\n| split_by          | split, split-{at,with,lines} | split, words, lines             | split, words, lines      |     |\n| split_column      |                              |                                 |                          |     |\n| split_row         |                              |                                 |                          |     |\n| str(<code>*</code>)          | clojure.string functions     | String functions                |                          |     |\n| sum               | apply +                      | sum                             | sum                      |     |\n| sys(<code>*</code>)          |                              |                                 |                          |     |\n| table             |                              |                                 |                          |     |\n| tags              |                              |                                 |                          |     |\n| textview(<code>*</code>)     |                              |                                 |                          |     |\n| tree(<code>*</code>)         |                              |                                 |                          |     |\n| to                |                              |                                 |                          |     |\n| touch             |                              |                                 |                          |     |\n| trim              | trim, triml, trimr           | trim, trimLeft, trimRight       | strip                    |     |\n| uniq              | set                          | Set.empty                       | Data.Set                 |     |\n| update(<code>**</code>)      |                              |                                 |                          |     |\n| version           |                              |                                 |                          |     |\n| with_env          |                              |                                 |                          |     |\n| what              |                              |                                 |                          |     |\n| where             | filter, filterv, select      | filter, filterMap               | filter                   |     |\n| which             |                              |                                 |                          |     |\n| wrap              |                              |                                 |                          |     |</p>\n<ul>\n<li><code>*</code> - these commands are part of the standard plugins</li>\n<li><code>**</code> - renamed from <code>edit</code> to <code>update</code> in 0.13.1</li>\n<li><code>***</code> - renamed from <code>pick</code> to <code>select</code> in 0.13.1</li>\n</ul>\n",
      "date_modified": "2022-06-03T05:34:12.239Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "命令形言語から Nu への対応表",
      "url": "www.nushell.sh/ja/book/nushell_map_imperative.html",
      "id": "www.nushell.sh/ja/book/nushell_map_imperative.html",
      "content_html": "<h1 id=\"命令形言語から-nu-への対応表\" tabindex=\"-1\"> 命令形言語から Nu への対応表</h1>\n<p>このテーブルは Nu の組込みコマンドやプラグインと他の命令型言語との対応関係を理解することを助けるためのものです。ここでは全ての Nu コマンドとそのコマンドが他の言語でどう使われているかをマッピングしています。コントリビューション歓迎です。</p>\n<p>注: Nu が 0.14.1 以降であることを想定しています。</p>\n<table>\n<thead>\n<tr>\n<th>Nushell</th>\n<th>Python</th>\n<th>Kotlin (Java)</th>\n<th>C++</th>\n<th>Rust</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alias</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>append</td>\n<td>list.append, set.add</td>\n<td>add</td>\n<td>push_back, emplace_back</td>\n<td>push, push_back</td>\n</tr>\n<tr>\n<td>args</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>autoview</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>average(<code>*</code>)</td>\n<td>statistics.mean</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>binaryview(<code>*</code>)</td>\n<td>&quot;{:x}&quot;.format</td>\n<td>Integer.toHexString</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>calc, = math</td>\n<td>math operators</td>\n<td>math operators</td>\n<td>math operators</td>\n<td>math operators</td>\n</tr>\n<tr>\n<td>cd</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>clear</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>clip</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>compact</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>config</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>len</td>\n<td>size, length</td>\n<td>length</td>\n<td>len</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>shutil.copy</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>datetime.date.today</td>\n<td>java.time.LocalDate.now</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>debug</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>drop</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>du</td>\n<td>shutil.disk_usage</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>each</td>\n<td>for</td>\n<td>for</td>\n<td>for</td>\n<td>for</td>\n</tr>\n<tr>\n<td>echo</td>\n<td>print</td>\n<td>println</td>\n<td>printf</td>\n<td>println!</td>\n</tr>\n<tr>\n<td>enter</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>evaluate_by</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>exit</td>\n<td>exit</td>\n<td>System.exit, kotlin.system.exitProcess</td>\n<td>exit</td>\n<td>exit</td>\n</tr>\n<tr>\n<td>fetch(<code>*</code>)</td>\n<td>urllib.request.urlopen</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>first</td>\n<td>list[0]</td>\n<td>List[0], peek</td>\n<td>vector[0], top</td>\n<td>Vec[0]</td>\n</tr>\n<tr>\n<td>format</td>\n<td>format</td>\n<td>format</td>\n<td>format</td>\n<td>format!</td>\n</tr>\n<tr>\n<td>from</td>\n<td>csv, json, sqlite3</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>get</td>\n<td>dict[&quot;key&quot;]</td>\n<td>Map[&quot;key&quot;]</td>\n<td>map[&quot;key&quot;]</td>\n<td>HashMap[&quot;key&quot;], get, entry</td>\n</tr>\n<tr>\n<td>group_by</td>\n<td>itertools.groupby</td>\n<td>groupBy</td>\n<td></td>\n<td>group_by</td>\n</tr>\n<tr>\n<td>headers</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>help</td>\n<td>help</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>histogram</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>history</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>inc(<code>*</code>)</td>\n<td>x += 1</td>\n<td>x++</td>\n<td>x++</td>\n<td>x += 1</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>list.insert</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>is_empty</td>\n<td>is None</td>\n<td>isEmpty</td>\n<td>empty</td>\n<td>is_empty</td>\n</tr>\n<tr>\n<td>keep</td>\n<td>list[:x]</td>\n<td></td>\n<td></td>\n<td>&amp;Vec[..x]</td>\n</tr>\n<tr>\n<td>keep_until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>keep_while</td>\n<td>itertools.takewhile</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>kill</td>\n<td>os.kill</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>last</td>\n<td>list[-1]</td>\n<td></td>\n<td></td>\n<td>&amp;Vec[Vec.len()-1]</td>\n</tr>\n<tr>\n<td>lines</td>\n<td>split, splitlines</td>\n<td>split</td>\n<td>views::split</td>\n<td>split, split_whitespace, rsplit, lines</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>os.listdir</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>map_max_by</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>match(<code>*</code>)</td>\n<td>re.findall</td>\n<td>Regex.matches</td>\n<td>regex_match</td>\n<td></td>\n</tr>\n<tr>\n<td>merge</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>os.mkdir</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mv</td>\n<td>shutil.move</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>next</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>nth</td>\n<td>list[x]</td>\n<td>List[x]</td>\n<td>vector[x]</td>\n<td>Vec[x]</td>\n</tr>\n<tr>\n<td>open</td>\n<td>open</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>parse</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pivot, =transpose</td>\n<td>zip(*matrix)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>post(<code>*</code>)</td>\n<td>urllib.request.urlopen</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prepend</td>\n<td>deque.appendleft</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prev</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ps(<code>*</code>)</td>\n<td>os.listdir('/proc')</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>os.getcwd</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>range</td>\n<td>range</td>\n<td>.., until, downTo, step</td>\n<td>iota</td>\n<td>..</td>\n</tr>\n<tr>\n<td>reduce_by</td>\n<td>functools.reduce</td>\n<td>reduce</td>\n<td>reduce</td>\n<td>fold, rfold, scan</td>\n</tr>\n<tr>\n<td>reject</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>rename</td>\n<td>shutil.move</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>reversed, list.reverse</td>\n<td>reverse, reversed, asReversed</td>\n<td>reverse</td>\n<td>rev</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>os.remove</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>save</td>\n<td>io.TextIOWrapper.write</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>select(<code>***</code>)</td>\n<td>{k:dict[k] for k in keylist}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shells</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shuffle</td>\n<td>random.shuffle</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>len</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip</td>\n<td>list[x:]</td>\n<td></td>\n<td></td>\n<td>&amp;Vec[x..]</td>\n</tr>\n<tr>\n<td>skip_until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip_while</td>\n<td>itertools.dropwhile</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>sort-by</td>\n<td>sorted, list.sort</td>\n<td>sortedBy, sortedWith, Arrays.sort, Collections.sort</td>\n<td>sort</td>\n<td>sort</td>\n</tr>\n<tr>\n<td>split_by</td>\n<td>str.split{,lines}, re.split</td>\n<td>split</td>\n<td>views::split</td>\n<td>split</td>\n</tr>\n<tr>\n<td>split_column</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>split_row</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>str(<code>*</code>)</td>\n<td>str functions</td>\n<td>String functions</td>\n<td>string functions</td>\n<td>&amp;str, String functions</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum</td>\n<td>sum</td>\n<td>reduce</td>\n<td>sum</td>\n</tr>\n<tr>\n<td>sys(<code>*</code>)</td>\n<td>sys</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>table</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>tags</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>textview(<code>*</code>)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>tree(<code>*</code>)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>to</td>\n<td>csv, json, sqlite3</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>touch</td>\n<td>open(path, 'a').close()</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>trim</td>\n<td>strip, rstrip, lstrip</td>\n<td>trim, trimStart, trimEnd</td>\n<td>regex</td>\n<td>trim, trim*{start,end}, strip*{suffix,prefix}</td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>set</td>\n<td>Set</td>\n<td>set</td>\n<td>HashSet</td>\n</tr>\n<tr>\n<td>update(<code>**</code>)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>version</td>\n<td>sys.version, sys.version_info</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>with_env</td>\n<td>os.environ</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>what</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>where</td>\n<td>filter</td>\n<td>filter</td>\n<td>filter</td>\n<td>filter</td>\n</tr>\n<tr>\n<td>which</td>\n<td>shutil.which</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>wrap</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>*</code> - these commands are part of the standard plugins</li>\n<li><code>**</code> - renamed from <code>edit</code> to <code>update</code> in 0.13.1</li>\n<li><code>***</code> - renamed from <code>pick</code> to <code>select</code> in 0.13.1</li>\n</ul>\n",
      "date_modified": "2022-06-03T05:34:12.240Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Nushell 演算子対応表",
      "url": "www.nushell.sh/ja/book/nushell_operator_map.html",
      "id": "www.nushell.sh/ja/book/nushell_operator_map.html",
      "content_html": "<h1 id=\"nushell-演算子対応表\" tabindex=\"-1\"> Nushell 演算子対応表</h1>\n<p>このテーブルは Nu の演算子と他言語の演算子の対応関係を理解するのを助けるためのものです。ここでは全ての Nu の演算子とその演算子が他の言語でどう使われているかをマッピングしています。コントリビューション歓迎です。</p>\n<p>注: Nu が 0.14.1 以降であることを想定しています。</p>\n<table>\n<thead>\n<tr>\n<th>Nushell</th>\n<th>SQL</th>\n<th>Python</th>\n<th>.Net LINQ (C#)</th>\n<th>PowerShell</th>\n<th>Bash</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>=</td>\n<td>==</td>\n<td>==</td>\n<td>-eq, -is</td>\n<td>-eq</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>!=, &lt;&gt;</td>\n<td>!=</td>\n<td>!=</td>\n<td>-ne, -isnot</td>\n<td>-ne</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>&lt;</td>\n<td>&lt;</td>\n<td>&lt;</td>\n<td>-lt</td>\n<td>-lt</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>&lt;=</td>\n<td>&lt;=</td>\n<td>&lt;=</td>\n<td>-le</td>\n<td>-le</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>&gt;</td>\n<td>&gt;</td>\n<td>&gt;</td>\n<td>-gt</td>\n<td>-gt</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>&gt;=</td>\n<td>&gt;=</td>\n<td>&gt;=</td>\n<td>-ge</td>\n<td>-ge</td>\n</tr>\n<tr>\n<td>=~</td>\n<td>like</td>\n<td>re, in, startswith</td>\n<td>Contains, StartsWith</td>\n<td>-like, -contains</td>\n<td>=~</td>\n</tr>\n<tr>\n<td>!~</td>\n<td>not like</td>\n<td>not in</td>\n<td>Except</td>\n<td>-notlike, -notcontains</td>\n<td>! &quot;str1&quot; =~ &quot;str2&quot;</td>\n</tr>\n<tr>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n</tr>\n<tr>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n</tr>\n<tr>\n<td>in</td>\n<td>in</td>\n<td>re, in, startswith</td>\n<td>Contains, StartsWith</td>\n<td>-In</td>\n<td>case in</td>\n</tr>\n<tr>\n<td>not-in</td>\n<td>not in</td>\n<td>not in</td>\n<td>Except</td>\n<td>-NotIn</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>and</td>\n<td>and</td>\n<td>&amp;&amp;</td>\n<td>-And</td>\n<td>-a, &amp;&amp;</td>\n</tr>\n<tr>\n<td>||</td>\n<td>or</td>\n<td>or</td>\n<td>||</td>\n<td>-Or</td>\n<td>-o, ||</td>\n</tr>\n</tbody>\n</table>\n",
      "date_modified": "2022-06-03T05:34:12.240Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "パイプライン",
      "url": "www.nushell.sh/ja/book/pipeline.html",
      "id": "www.nushell.sh/ja/book/pipeline.html",
      "content_html": "<h1 id=\"パイプライン\" tabindex=\"-1\"> パイプライン</h1>\n<p>Nu のコアデザインのひとつがパイプラインです。パイプラインは Unix の背後にある哲学にまでそのルーツを遡ることができるデザインアイデアです。Nu は、Unix の文字列データを拡張したように、パイプラインの概念も拡張してテキスト以外のものも扱えるようにします。</p>\n<h2 id=\"基礎\" tabindex=\"-1\"> 基礎</h2>\n<p>パイプラインは、入力、フィルター、出力の３つの部分から構成されます。</p>\n<div><pre><code>> open \"Cargo.toml\" | inc package.version | save \"Cargo_new.toml\"\n</code></pre></div><p>最初のコマンド<code>open &quot;Cargo.toml&quot;</code>が入力です(しばしば&quot;source&quot;や&quot;producer&quot;と呼ばれます)。これによりデータが作成またはロードされパイプラインに送られます。パイプラインは入力から渡された値を扱います。<code>ls</code>のようなコマンドも入力です。ファイルシステムからデータを取得し、パイプラインを経由して扱えるようにするからです。</p>\n<p>２番目のコマンド<code>inc package.version</code>はフィルターです。フィルターは与えられたデータをうけとると大抵の場合はなにかします。それは変更(<code>inc</code>コマンドの例のように)であったり、ロギングなどの別の操作かもしれません。</p>\n<p>最後のコマンド<code>save &quot;Cargo_new.toml&quot;</code>が出力です(&quot;sink&quot;と呼ばれることもあります)。出力はパイプラインから入力を受け取り、最終的な操作を実行します。この例では、最終ステップとして、パイプラインを介しておくられてきたものをファイルに保存しています。他の出力コマンドとしては、値をうけとりユーザのために表示するものがあります。</p>\n<h2 id=\"外部コマンドの使用\" tabindex=\"-1\"> 外部コマンドの使用</h2>\n<p>Nu のコマンドは互いに Nu のデータ型(<a href=\"/ja/book/types_of_data.html\">types of data</a>を参照してください)を利用してやりとりします。しかし、Nu 以外のコマンドはどうでしょうか。外部コマンドの使用例をみてみましょう。</p>\n<p><code>internal_command | external_command</code></p>\n<p>データは内部コマンドから外部コマンドにむかって流れます。このデータは文字列であることが期待されるので、外部コマンドの<code>stdin</code>に送られます。</p>\n<p><code>external_command | internal_command</code></p>\n<p>外部コマンドから Nu に送られるデータは単一の文字列にまとめられ、内部コマンドに渡されます。<code>lines</code>のようなコマンドは外部からのデータを取り込む際に便利です。</p>\n<p><code>external_command_1 | external_command_2</code></p>\n<p>Nu は Bash のような他のシェルと同じように２つの外部コマンドでパイプされるデータを処理します。外部コマンド１の<code>stdout</code>は外部コマンド２の<code>stdin</code>につながれます。これにより２つのコマンドの間でデータは自然にやりとりされます。</p>\n<h2 id=\"内部の仕組み\" tabindex=\"-1\"> 内部の仕組み</h2>\n<p><code>ls</code>が出力ではなく入力の場合、テーブルがどのように表示されるのか疑問に思われるかもしれません。Nu は<code>autoview</code>とよばれるコマンドを自動的に出力に加えます。<code>autoview</code>コマンドは結果を確認できる出力をもたないパイプラインに追加されるのです。</p>\n<p>実質的にこのコマンドと</p>\n<div><pre><code>> ls\n</code></pre></div><p>このパイプラインは</p>\n<div><pre><code>> ls | autoview\n</code></pre></div><p>同じものです。</p>\n",
      "date_modified": "2022-06-03T05:34:12.240Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "プラグイン",
      "url": "www.nushell.sh/ja/book/plugins.html",
      "id": "www.nushell.sh/ja/book/plugins.html",
      "content_html": "<h1 id=\"プラグイン\" tabindex=\"-1\"> プラグイン</h1>\n<p>プラグインを用いることで Nu の機能を拡張することができます。プラグインは、Nu の組み込みコマンドと同じ操作の多くを実行することができ、Nu 本体とは別に追加できるという利点もあります。</p>\n<p>プラグインを追加するには、ビルドして PATH にバイナリーを配置するだけです。Nu のプラグインは、PATH 内の他のバイナリーと区別できるように<code>nu_plugin_</code>というファイル名ではじまります。</p>\n<p><strong>注:</strong> 将来的には、プラグインは Nu がみつけられるように特定の場所に配置されることになるかもしれません。</p>\n<p>Nu が起動すると、システムがスキャンされ、見つかったプラグインがロードされます。</p>\n<p>Nu プラグインが利用するプロトコルは Nu の開発中に変更される可能性があります。プロトコルの詳細と独自のプラグインの作成方法を学ぶのに最適なのは、<a href=\"https://github.com/nushell/nushell/tree/master/crates\" target=\"_blank\" rel=\"noopener noreferrer\">Nu リポジトリのプラグインのソース</a>を読むことです。\n<a href=\"https://github.com/nushell/contributor-book/blob/master/en/plugins.md\" target=\"_blank\" rel=\"noopener noreferrer\">コントリビュータブックのプラグインの章</a>も参照してください。</p>\n",
      "date_modified": "2022-06-03T05:34:12.240Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "シェルの中のシェル",
      "url": "www.nushell.sh/ja/book/shells_in_shells.html",
      "id": "www.nushell.sh/ja/book/shells_in_shells.html",
      "content_html": "<h1 id=\"シェルの中のシェル\" tabindex=\"-1\"> シェルの中のシェル</h1>\n<h2 id=\"複数のディレクトリで作業する\" tabindex=\"-1\"> 複数のディレクトリで作業する</h2>\n<p>ひとつのディレクトリで作業することが一般的ですが、同時に複数の場所で作業できれば便利です。このため、Nu は&quot;shells&quot;という概念を提供します。その名の通り、これらは同じ場所で複数のシェルを実行する方法であり、作業ディレクトリ間をすばやく移動することができます。</p>\n<p>まずはじめに、ディレクトリを入力しましょう。</p>\n<div><pre><code>/home/jonathant/Source/nushell(master)> enter ../book\n/home/jonathant/Source/book(master)> ls\n────┬────────────────────┬──────┬────────┬─────────────\n #  │ name               │ type │ size   │ modified\n────┼────────────────────┼──────┼────────┼─────────────\n  0 │ 404.html           │ File │  429 B │ 2 hours ago\n  1 │ CONTRIBUTING.md    │ File │  955 B │ 2 hours ago\n  2 │ Gemfile            │ File │ 1.1 KB │ 2 hours ago\n  3 │ Gemfile.lock       │ File │ 6.9 KB │ 2 hours ago\n</code></pre></div><p><code>enter</code>はディレクトリの変更に似ています(<code>cd</code>コマンドでみたように)。これによりディレクトリにジャンプして作業することができます。ディレクトリを変更するかわりに、２つのディレクトリに移動しました。このことをより明確にするために、<code>shells</code>コマンドを実行して、アクティブな現在のディレクトリの一覧を表示してみましょう。</p>\n<div><pre><code>/home/jonathan/Source/book(master)> shells\n───┬────────┬────────────┬─────────────────────────────────\n # │ active │ name       │ path\n───┼────────┼────────────┼─────────────────────────────────\n 0 │        │ filesystem │ /home/jonathant/Source/nushell/\n 1 │ X      │ filesystem │ /home/jonathant/Source/book\n───┴────────┴────────────┴─────────────────────────────────\n</code></pre></div><p><code>shells</code>コマンドは現在２つのシェルがアクティブであることを示しています。もともといた&quot;nushell&quot;のソースディレクトリと新しい&quot;book&quot;ディレクトリです。</p>\n<p>&quot;next&quot;と&quot;previous&quot;のショートカットである<code>n</code>と<code>p</code>を利用して、両者のシェルを行き来できます。</p>\n<div><pre><code>/home/jonathant/Source/book(master)> n\n/home/jonathant/Source/nushell(master)> p\n/home/jonathant/Source/book(master)>\n</code></pre></div><p>ディレクトリを変更できることがわかります。そしていつでも元いた作業ディレクトリに戻ることができるのです。これにより、同じセッションにいながら複数のディレクトリで作業できます。</p>\n<h2 id=\"シェルを終了する\" tabindex=\"-1\"> シェルを終了する</h2>\n<p><code>exit</code>コマンドを利用して<code>enter</code>したシェルを終了することができます。もし最後のシェルを終了したときは Nu が終了します。</p>\n<p><code>exit --now</code>のように、<code>--now</code>フラグを<code>exit</code>コマンドに渡すことで、複数のシェルがアクティブな場合でもすぐに Nu を終了することができます。 こんなふうに: <code>exit --now</code></p>\n<h2 id=\"ディレクトリを超えて\" tabindex=\"-1\"> ディレクトリを超えて</h2>\n<p>Nu はファイルシステムのパスとは別に、他のものからシェルを作ることもできます。たとえば、大規模なデータセットを使用していて、その中の場所を失いたくないとしましょう。</p>\n<p>これがどのように機能するかを見るために、次の演習を行いましょう。現在、&quot;Cargo.toml&quot;ファイルの中に開発した<a href=\"/ja/book/plugins.html\">Nu プラグイン</a>をリストしています。src/plugins ディレクトリの中に&quot;doc.rs&quot;とよばれる新しいプラグインを作成したので、正しくコンパイルされインストールされるか確認したいので&quot;Cargo.toml&quot;にリストされているか知りたいとしましょう。</p>\n<p>Nu のソースコードから&quot;Cargo.toml&quot;ファイルに<code>enter</code>してみましょう。</p>\n<div><pre><code>/home/jonathant/Source/nushell(master)> enter Cargo.toml\n/> ls\n────────────────────┬───────────────────────────\n bin                │ [table 18 rows]\n build-dependencies │ [row nu-build serde toml]\n dependencies       │ [row 29 columns]\n dev-dependencies   │ [row nu-test-support]\n features           │ [row 19 columns]\n package            │ [row 12 columns]\n workspace          │ [row members]\n────────────────────┴───────────────────────────\n</code></pre></div><p>今のところ、ファイルに<code>enter</code>し、<code>ls</code>から得られたテーブルで中身を確認できます。注意深くみてみると、今回は Nu が理解できる(.toml)ファイル形式にエンターしていることがわかります。Nu はファイルの中身をファイルシステムのように表示するので、あたかも通常のファイルシステムのように内容を確認することができます。</p>\n<p>続きを始める前に、アクティブなシェルを確認しておきましょう。</p>\n<div><pre><code>> shells\n───┬────────┬─────────────────────────────────────────────┬─────────────────────────────────\n # │ active │ name                                        │ path\n───┼────────┼─────────────────────────────────────────────┼─────────────────────────────────\n 0 │        │ filesystem                                  │ /home/jonathant/Source/nushell/\n 1 │ X      │ {/home/jonathant/Source/nushell/Cargo.toml} │ /\n───┴────────┴─────────────────────────────────────────────┴─────────────────────────────────\n</code></pre></div><p>２つのアクティブなシェルがあり、&quot;Cargo.toml&quot;内のデフォルトのルートパスである&quot;/&quot;にいることがわかります。内容をもう一度表示してみましょう。</p>\n<div><pre><code>/> ls\n────────────────────┬───────────────────────────\n bin                │ [table 18 rows]\n build-dependencies │ [row nu-build serde toml]\n dependencies       │ [row 29 columns]\n dev-dependencies   │ [row nu-test-support]\n features           │ [row 19 columns]\n package            │ [row 12 columns]\n workspace          │ [row members]\n────────────────────┴───────────────────────────\n</code></pre></div><p>今探しているのは、&quot;bin&quot;列の中なので、そこにいってみましょう。</p>\n<div><pre><code>> cd bin\n/bin> ls\n────┬─────────────────────────────┬────────────────────────────────────────────┬───────────────────\n #  │ name                        │ path                                       │ required-features\n────┼─────────────────────────────┼────────────────────────────────────────────┼───────────────────\n  0 │ fail                        │ crates/nu-test-support/src/bins/fail.rs    │ [table 1 rows]\n  1 │ chop                        │ crates/nu-test-support/src/bins/chop.rs    │ [table 1 rows]\n  2 │ cococo                      │ crates/nu-test-support/src/bins/cococo.rs  │ [table 1 rows]\n  3 │ nonu                        │ crates/nu-test-support/src/bins/nonu.rs    │ [table 1 rows]\n  4 │ iecho                       │ crates/nu-test-support/src/bins/iecho.rs   │ [table 1 rows]\n  5 │ nu_plugin_core_textview     │ src/plugins/nu_plugin_core_textview.rs     │ [table 1 rows]\n</code></pre></div><p>ここから、<code>p</code>(previous)を使うことでいつでも以前の作業ディレクトリに戻ることができます。</p>\n<div><pre><code>/bin> p\n</code></pre></div><p>シェルをもう一度確認しましょう。</p>\n<div><pre><code>/home/jonathant/Source/nushell/(simple_list_view)> shells\n───┬────────┬─────────────────────────────────────────────┬─────────────────────────────────\n # │ active │ name                                        │ path\n───┼────────┼─────────────────────────────────────────────┼─────────────────────────────────\n 0 │ X      │ filesystem                                  │ /home/jonathant/Source/nushell/\n 1 │        │ {/home/jonathant/Source/nushell/Cargo.toml} │ /bin\n───┴────────┴─────────────────────────────────────────────┴─────────────────────────────────\n\n\n</code></pre></div><p>&quot;Cargo.toml&quot;ファイルにエンターする前の作業ディレクトリにもどっていることがわかります。</p>\n",
      "date_modified": "2022-06-03T05:34:12.240Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "目次",
      "url": "www.nushell.sh/ja/book/table_of_contents.html",
      "id": "www.nushell.sh/ja/book/table_of_contents.html",
      "content_html": "<h1 id=\"目次\" tabindex=\"-1\"> 目次</h1>\n<ul>\n<li><a href=\"/ja/book/installation.html\">インストール</a> - nushell のインストール</li>\n<li><a href=\"/ja/book/introduction.html\">はじめに</a> - nushell をはじめよう</li>\n<li><a href=\"/ja/book/moving_around.html\">ファイルシステムの操作</a> - nushell からファイルシステムを扱おう</li>\n<li><a href=\"/ja/book/types_of_data.html\">データ型</a> - nushell のデータ型</li>\n<li><a href=\"/ja/book/loading_data.html\">データの読み込み</a> - データの読み込みとその利用方法</li>\n<li><a href=\"/ja/book/working_with_tables.html\">テーブル</a> - テーブルを利用してみよう</li>\n<li><a href=\"/ja/book/pipeline.html\">パイプライン</a> - パイプラインの仕組み</li>\n<li><a href=\"/ja/book/configuration.html\">設定</a> - nushell の設定</li>\n<li><a href=\"/ja/book/metadata.html\">メタデータ</a> - nushell におけるメタデータについて</li>\n<li><a href=\"/ja/book/shells_in_shells.html\">シェル</a> - 複数の場所で作業しよう</li>\n<li><a href=\"/ja/book/escaping.html\">コマンドのエスケープ</a> - Nu コマンドと同じ名前のコマンドを実行するには</li>\n<li><a href=\"/ja/book/plugins.html\">プラグイン</a> - プラグインを利用して nushell を拡張する</li>\n</ul>\n",
      "date_modified": "2022-06-03T05:34:12.240Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "データ型",
      "url": "www.nushell.sh/ja/book/types_of_data.html",
      "id": "www.nushell.sh/ja/book/types_of_data.html",
      "content_html": "<h1 id=\"データ型\" tabindex=\"-1\"> データ型</h1>\n<p>従来、Unix シェルコマンドは文字列テキストを通じて互いに通信してきました。あるコマンドは標準出力(しばしば'stdout'と略されます)を介してテキストを出力し、他方のコマンドは標準入力(または'stdin')を介してテキストを読み込みます。このようにして、２つのコマンドは通信できます。</p>\n<p>この種の通信は文字列ベースと考えることができます。</p>\n<p>Nu はコマンドに対してこのアプローチを採用しつつ、他の種類のデータを扱えるよう拡張しています。現在、Nu はシンプルなデータと構造化されたデータ、２つの種類をサポートしています。</p>\n<h2 id=\"シンプルなデータ\" tabindex=\"-1\"> シンプルなデータ</h2>\n<p>多くのプログラミング言語と同様に、Nu はシンプルなデータと構造化されたデータを用いてデータをモデル化します。シンプルなデータ型には、整数、浮動小数点、文字列、真偽値、日付、およびパスが含まれます。ファイルサイズのための特別な型もこれに含まれます。</p>\n<h3 id=\"整数\" tabindex=\"-1\"> 整数</h3>\n<p>整数(または丸めた数)。例として、１，５，および 100 があります。</p>\n<h3 id=\"浮動小数点\" tabindex=\"-1\"> 浮動小数点</h3>\n<p>浮動小数点は小数部を含む数です。例として、1.5、2.0、および 15.333 があります。</p>\n<h3 id=\"文字列\" tabindex=\"-1\"> 文字列</h3>\n<p>文字列はテキストを表す基本的な方法です。文字列はダブルクォートを使って表されます。例として、&quot;Fred&quot;, &quot;myname.txt&quot;, and &quot;Lynchburg, VA&quot;があります。</p>\n<p>Nu の文字列はデフォルトで Unicode に対応しているため UTF-8 のテキストを簡単に渡すことができます。</p>\n<h3 id=\"lines\" tabindex=\"-1\"> Lines</h3>\n<p>Lines は OS に依存した行末をもつ文字列です。使用される場合は、OS 固有の行末が使用されます。</p>\n<h3 id=\"column-paths\" tabindex=\"-1\"> Column paths</h3>\n<p>Column paths はテーブルにおける特定のサブテーブル、列、行、またはセルへのパスです。</p>\n<h3 id=\"パターン\" tabindex=\"-1\"> パターン</h3>\n<p>&quot;glob&quot;パターンと呼ばれたりもするパターンはシェルでよく利用されるファイル名のマッチング方法です。<br>\n<code>*</code>は何にでもマッチし、<code>?</code>は一文字にマッチすることを表しています。</p>\n<p>例) <code>ls test*</code>における<code>test*</code>がパターンです。</p>\n<h3 id=\"真偽値\" tabindex=\"-1\"> 真偽値</h3>\n<p>真偽値は真か偽かの状態をとります。しばしば比較の結果を表すために使われます。</p>\n<p>真偽値の２つの値は、<code>$true</code>と<code>$false</code>です。</p>\n<h3 id=\"日付\" tabindex=\"-1\"> 日付</h3>\n<p>日付と時間は日付型のデータに一緒に保持されます。システムで利用される日付データはタイムゾーンをもち、デフォルトでは UTC タイムゾーンが使用されます。</p>\n<h3 id=\"duration\" tabindex=\"-1\"> Duration</h3>\n<p>Duration は時間の長さを表します。1 秒、5 週間、1 年はすべて Duration の値です。</p>\n<p>例) <code>1wk</code>は 1 週間を表す Duration です。</p>\n<p>この表は現在サポートされているすべての Duration を示しています。</p>\n<table>\n<thead>\n<tr>\n<th>Duration</th>\n<th>Length</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1sec</td>\n<td>one second</td>\n</tr>\n<tr>\n<td>1min</td>\n<td>one minute</td>\n</tr>\n<tr>\n<td>1hr</td>\n<td>one hour</td>\n</tr>\n<tr>\n<td>1day</td>\n<td>one day</td>\n</tr>\n<tr>\n<td>1wk</td>\n<td>one week</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ranges\" tabindex=\"-1\"> Ranges</h3>\n<p>値の範囲を表すこともできます。大抵は、開始と終了の間の数値を表すために利用します。</p>\n<p>例) <code>ls | range 1..4</code></p>\n<h3 id=\"パス\" tabindex=\"-1\"> パス</h3>\n<p>パスは、特定の OS でファイルパスを表すプラットフォームに依存しない方法です。例として、<code>/usr/bin</code>や<code>C:\\Users\\file.txt</code>があげられます。</p>\n<h3 id=\"バイト\" tabindex=\"-1\"> バイト</h3>\n<p>ファイルサイズはバイトと呼ばれる特別な整数型で保持されます。例として、<code>100</code>, <code>15kb</code>、<code>100mb</code>があります。</p>\n<h3 id=\"バイナリデータ\" tabindex=\"-1\"> バイナリデータ</h3>\n<p>バイナリデータは、画像ファイルのデータのように、生のバイトの集まりです。</p>\n<h2 id=\"構造化データ\" tabindex=\"-1\"> 構造化データ</h2>\n<p>構造化データはシンプルなデータから作られます。例えば、構造化データは、複数の整数を表す方法を提供します。現在サポートされている構造化データは次のとおりです。rows, lists, そして blocks です。</p>\n<h3 id=\"rows\" tabindex=\"-1\"> Rows</h3>\n<p>row データ型は表の１行のデータで見えるものを表しています。異なる要素のデータをもち、データにはそれぞれ列名が与えられます。</p>\n<h3 id=\"lists\" tabindex=\"-1\"> Lists</h3>\n<p>Lists は一つ以上の値を保持できます。単純な値だけでなく、rows も保持することができます。rows の lists はしばしばテーブルと呼ばれます。</p>\n<div><pre><code>> echo [sam fred george]\n───┬────────\n 0 │ sam\n 1 │ fred\n 2 │ george\n───┴────────\n</code></pre></div><h3 id=\"blocks\" tabindex=\"-1\"> Blocks</h3>\n<p>Blocks は Nu のコードブロックを表します。例えば、<code>each { echo $it }</code>というコマンドでは、<code>{ echo $it }</code>が block になります。\nblock はデータの行ごとに実行するコードを表すのに便利です。</p>\n",
      "date_modified": "2022-06-03T05:34:12.240Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "テーブルを扱う",
      "url": "www.nushell.sh/ja/book/working_with_tables.html",
      "id": "www.nushell.sh/ja/book/working_with_tables.html",
      "content_html": "<h1 id=\"テーブルを扱う\" tabindex=\"-1\"> テーブルを扱う</h1>\n<p>Nu でデータを表示する一般的な方法はテーブルを使用することです。Nu には、探しているものを見つけやすくしたり、必要なデータを絞り込んだりするのに便利なテーブルを操作するためのコマンドがたくさん用意されています。</p>\n<p>まずはじめに、今回利用するテーブルを確認しましょう。</p>\n<div><pre><code>> ls\n───┬───────────────┬──────┬─────────┬────────────\n # │ name          │ type │ size    │ modified\n───┼───────────────┼──────┼─────────┼────────────\n 0 │ files.rs      │ File │  4.6 KB │ 5 days ago\n 1 │ lib.rs        │ File │   330 B │ 5 days ago\n 2 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago\n 3 │ parse.rs      │ File │ 49.8 KB │ 1 day ago\n 4 │ path.rs       │ File │  2.1 KB │ 5 days ago\n 5 │ shapes.rs     │ File │  4.7 KB │ 5 days ago\n 6 │ signature.rs  │ File │  1.2 KB │ 5 days ago\n───┴───────────────┴──────┴─────────┴────────────\n</code></pre></div><h2 id=\"データのソート\" tabindex=\"-1\"> データのソート</h2>\n<p>ソートに利用する列名を指定して、<code>sort-by</code>コマンドを呼びだすことでテーブルをソートできます。ファイルのサイズでテーブルをソートしたいとしましょう。</p>\n<div><pre><code>> ls | sort-by size\n───┬───────────────┬──────┬─────────┬────────────\n # │ name          │ type │ size    │ modified\n───┼───────────────┼──────┼─────────┼────────────\n 0 │ lib.rs        │ File │   330 B │ 5 days ago\n 1 │ signature.rs  │ File │  1.2 KB │ 5 days ago\n 2 │ path.rs       │ File │  2.1 KB │ 5 days ago\n 3 │ files.rs      │ File │  4.6 KB │ 5 days ago\n 4 │ shapes.rs     │ File │  4.7 KB │ 5 days ago\n 5 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago\n 6 │ parse.rs      │ File │ 49.8 KB │ 1 day ago\n───┴───────────────┴──────┴─────────┴────────────\n</code></pre></div><p>比較さえできれば任意の列でソートが行なえます。例えば、&quot;name&quot;、&quot;accessed&quot;、または&quot;modified&quot;列でソートすることができます。</p>\n<h2 id=\"必要なデータを選択する\" tabindex=\"-1\"> 必要なデータを選択する</h2>\n<p>列や行を選択することでテーブルから必要なデータを選択できます。テーブルからいくつかの列を選択してみましょう。</p>\n<div><pre><code>> ls | select name size\n───┬───────────────┬─────────\n # │ name          │ size\n───┼───────────────┼─────────\n 0 │ files.rs      │  4.6 KB\n 1 │ lib.rs        │   330 B\n 2 │ lite_parse.rs │  6.3 KB\n 3 │ parse.rs      │ 49.8 KB\n 4 │ path.rs       │  2.1 KB\n 5 │ shapes.rs     │  4.7 KB\n 6 │ signature.rs  │  1.2 KB\n───┴───────────────┴─────────\n</code></pre></div><p>こうすることで、より必要とするデータにフォーカスしたテーブルを作ることができます。次にディレクトリからもっとも小さい 5 つのファイルを表示してみます。</p>\n<div><pre><code>> ls | sort-by size | first 5\n───┬──────────────┬──────┬────────┬────────────\n # │ name         │ type │ size   │ modified\n───┼──────────────┼──────┼────────┼────────────\n 0 │ lib.rs       │ File │  330 B │ 5 days ago\n 1 │ signature.rs │ File │ 1.2 KB │ 5 days ago\n 2 │ path.rs      │ File │ 2.1 KB │ 5 days ago\n 3 │ files.rs     │ File │ 4.6 KB │ 5 days ago\n 4 │ shapes.rs    │ File │ 4.7 KB │ 5 days ago\n───┴──────────────┴──────┴────────┴────────────\n</code></pre></div><p>もっとも小さいファイルを取得するためにまずサイズでソートし、それから<code>first 5</code>を利用してテーブルから最初の 5 行を返しています。</p>\n<p>不要な行を<code>skip</code>することもできます。上記で返された５行のうち最初の２行をスキップしてみましょう。</p>\n<div><pre><code>> ls | sort-by size | first 5 | skip 2\n───┬───────────┬──────┬────────┬────────────\n # │ name      │ type │ size   │ modified\n───┼───────────┼──────┼────────┼────────────\n 0 │ path.rs   │ File │ 2.1 KB │ 5 days ago\n 1 │ files.rs  │ File │ 4.6 KB │ 5 days ago\n 2 │ shapes.rs │ File │ 4.7 KB │ 5 days ago\n───┴───────────┴──────┴────────┴────────────\n</code></pre></div><p>関心のある３行に絞り込みました。</p>\n<p>データを選択するための他のコマンドもみてみましょう。テーブルの各行が数字をもつことを疑問に思っているかもしれません。これは単一の行を簡単に指定する方法として機能します。テーブルをファイル名でソートして、<code>nth</code>コマンドを利用して n 行目を選択してみましょう。</p>\n<div><pre><code>> ls | sort-by name\n───┬───────────────┬──────┬─────────┬────────────\n # │ name          │ type │ size    │ modified\n───┼───────────────┼──────┼─────────┼────────────\n 0 │ files.rs      │ File │  4.6 KB │ 5 days ago\n 1 │ lib.rs        │ File │   330 B │ 5 days ago\n 2 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago\n 3 │ parse.rs      │ File │ 49.8 KB │ 1 day ago\n 4 │ path.rs       │ File │  2.1 KB │ 5 days ago\n 5 │ shapes.rs     │ File │  4.7 KB │ 5 days ago\n 6 │ signature.rs  │ File │  1.2 KB │ 5 days ago\n───┴───────────────┴──────┴─────────┴────────────\n\n> ls | sort-by name | nth 5\n──────────┬────────────\n name     │ shapes.rs\n type     │ File\n size     │ 4.7 KB\n modified │ 5 days ago\n──────────┴────────────\n</code></pre></div><h2 id=\"テーブルからデータを取得する\" tabindex=\"-1\"> テーブルからデータを取得する</h2>\n<p>これまでは、テーブルを必要なものだけにトリミングする操作を行ってきました。ときには一歩進んで、列全体ではなく、セル自体の値が必要になるかもしれません。たとえば、ファイル名のリストだけを取得したいとしましょう。この場合<code>get</code>コマンドを利用することができます。</p>\n<div><pre><code>> ls | get name\n───┬───────────────\n 0 │ files.rs\n 1 │ lib.rs\n 2 │ lite_parse.rs\n 3 │ parse.rs\n 4 │ path.rs\n 5 │ shapes.rs\n 6 │ signature.rs\n───┴───────────────\n</code></pre></div><p>これで各ファイルの名前が取得できました。</p>\n<p>これはさきほどみた<code>select</code>コマンドと同じにみえるかもしれません、比較のために<code>select</code>コマンドの出力もみておきましょう。</p>\n<div><pre><code>> ls | select name\n───┬───────────────\n # │ name\n───┼───────────────\n 0 │ files.rs\n 1 │ lib.rs\n 2 │ lite_parse.rs\n 3 │ parse.rs\n 4 │ path.rs\n 5 │ shapes.rs\n 6 │ signature.rs\n───┴───────────────\n</code></pre></div><p>両者は非常に似ています！両者の違いを明確にしておきましょう。</p>\n<ul>\n<li><code>select</code> - 指定された列のみを含む新しいテーブルを作成します</li>\n<li><code>get</code> - 指定された列内の値を返します</li>\n</ul>\n<p>テーブルからこれらを区別する方法の一つは、<code>value</code>列名です。これにより値のリストであることがわかります。</p>\n<p><code>get</code>コマンドは、パスを受け取りテーブル内のより深いデータへアクセスすることができます。これにより.json ファイルにあるような複雑なデータを簡単に操作することができます。</p>\n<h2 id=\"テーブルのデータを変更する\" tabindex=\"-1\"> テーブルのデータを変更する</h2>\n<p>テーブルからデータを選択することに加えて、テーブルの内容を更新することもできます。新しい列を加えたり、セルの内容を編集したりできるのです。Nu では、その場で編集するのではなく、パイプラインの各コマンドは新しいテーブルを返します。</p>\n<h3 id=\"新しい列を追加する\" tabindex=\"-1\"> 新しい列を追加する</h3>\n<p><code>add</code>コマンドを使用して、新しい列をテーブルに追加できます。例をみてみましょう。</p>\n<div><pre><code>> open rustfmt.toml\n─────────┬──────\n edition │ 2018\n─────────┴──────\n</code></pre></div><p>値が 2021 の&quot;next_edition&quot;列を追加してみましょう。</p>\n<div><pre><code>> open rustfmt.toml | insert next_edition 2021\n──────────────┬──────\n edition      │ 2018\n next_edition │ 2021\n──────────────┴──────\n</code></pre></div><p>元のファイルは変更されていないことに注意してください。</p>\n<div><pre><code>> open rustfmt.toml\n─────────┬──────\n edition │ 2018\n─────────┴──────\n</code></pre></div><p>Nu の変更は永続的な変更ではなく、値自体に作用する関数的な変更です。これにより、結果を書き出す準備ができるまでパイプライン上で様々な種類の作業をおこなうことができます。ここでは、<code>save</code>コマンドを使用して結果を書き出すことができます。</p>\n<div><pre><code>> open rustfmt.toml | insert next_edition 2021 | save rustfmt2.toml\n> open rustfmt2.toml\n──────────────┬──────\n edition      │ 2018\n next_edition │ 2021\n──────────────┴──────\n</code></pre></div><h3 id=\"列を更新する\" tabindex=\"-1\"> 列を更新する</h3>\n<p><code>insert</code>コマンドと同様に、<code>update</code>コマンドを利用して列の内容を新しい値に変更することもできます。実際に動作を確認するために同じファイルを開いてみましょう。</p>\n<div><pre><code>> open rustfmt.toml\n─────────┬──────\n edition │ 2018\n─────────┴──────\n</code></pre></div><p>今度は、サポートした次の edition を指定するよう更新しましょう。</p>\n<div><pre><code>> open rustfmt.toml | update edition 2021\n─────────┬──────\n edition │ 2021\n─────────┴──────\n</code></pre></div><h3 id=\"値を増やす\" tabindex=\"-1\"> 値を増やす</h3>\n<p>数字やバージョンを扱う際に便利なコマンドがもうひとつあります、<code>inc</code>です。</p>\n<div><pre><code>> open rustfmt.toml\n─────────┬──────\n edition │ 2018\n─────────┴──────\n> open rustfmt.toml | inc edition\n─────────┬──────\n edition │ 2019\n─────────┴──────\n</code></pre></div><p>&quot;edition&quot;の値は数字なので、<code>inc</code>を使って更新することができます。バージョンを扱う際には<code>inc</code>がその真価を発揮します。</p>\n<div><pre><code>> open Cargo.toml | get package.version\n0.1.3\n> open Cargo.toml | inc package.version --minor | get package.version\n0.2.0\n</code></pre></div><p>バージョンを扱う際には、フラグを利用して、バージョンのインクリメント方法を指定できます。</p>\n<ul>\n<li><strong>--major</strong> - メジャーバージョンをインクリメント (0.1.3 -&gt; 1.0.0)</li>\n<li><strong>--minor</strong> - マイナーバージョンをインクリメント (0.1.3 -&gt; 0.2.0)</li>\n<li><strong>--patch</strong> - パッチバージョンをインクリメント (0.1.3 -&gt; 0.1.4)</li>\n</ul>\n",
      "date_modified": "2022-06-03T05:34:12.241Z",
      "authors": [],
      "tags": []
    }
  ]
}