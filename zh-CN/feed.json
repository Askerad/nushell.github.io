{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Nushell",
  "home_page_url": "www.nushell.sh/zh-CN/",
  "feed_url": "www.nushell.sh/feed.json",
  "description": "一种新型的Shell",
  "items": [
    {
      "title": "配置第三方提示",
      "url": "www.nushell.sh/zh-CN/book/3rdpartyprompts.html",
      "id": "www.nushell.sh/zh-CN/book/3rdpartyprompts.html",
      "content_html": "<h1 id=\"配置第三方提示\" tabindex=\"-1\"> 配置第三方提示</h1>\n<h2 id=\"nerdfonts\" tabindex=\"-1\"> Nerdfonts</h2>\n<p>Nerdfonts 并不是必需的，但它们能使呈现效果更好。</p>\n<p><a href=\"https://www.nerdfonts.com\" target=\"_blank\" rel=\"noopener noreferrer\">网站</a></p>\n<p><a href=\"https://github.com/ryanoasis/nerd-fonts\" target=\"_blank\" rel=\"noopener noreferrer\">仓库</a></p>\n<h2 id=\"oh-my-posh\" tabindex=\"-1\"> oh-my-posh</h2>\n<p><a href=\"https://ohmyposh.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">网站</a></p>\n<p><a href=\"https://github.com/JanDeDobbeleer/oh-my-posh\" target=\"_blank\" rel=\"noopener noreferrer\">仓库</a></p>\n<p>如果你喜欢 <a href=\"https://ohmyposh.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">oh-my-posh</a>，可以通过以下几个步骤在 Nushell 里使用 oh-my-posh，它与 Nushell 一起配合得很好。在 Nushell 里设置 oh-my-posh 的步骤：</p>\n<ol>\n<li>安装 Oh My Posh 并按照 <a href=\"https://ohmyposh.dev/docs/linux#installation\" target=\"_blank\" rel=\"noopener noreferrer\">指南</a>下载 oh-my-posh 的主题。</li>\n<li>下载并安装一个 <a href=\"https://github.com/ryanoasis/nerd-fonts\" target=\"_blank\" rel=\"noopener noreferrer\">Nerdfonts 字体</a>。</li>\n<li>在<code>~/.config/nushell/config.nu</code>（或由<code>$nu.config-path</code>输出的路径）中设置<code>PROMPT_COMMAND</code>，将<code>M365Princess.mp.json</code>改为你喜欢的任何 <a href=\"https://ohmyposh.dev/docs/themes\" target=\"_blank\" rel=\"noopener noreferrer\">主题</a>。</li>\n</ol>\n<div><pre><code><span>></span> let-env PROMPT_COMMAND <span>=</span> <span>{</span> oh-my-posh --config ~/.poshthemes/M365Princess.omp.json <span>}</span>\n</code></pre></div><p>MacOS 用户配置步骤：</p>\n<ol>\n<li>你可以通过<code>brew</code>安装<code>oh-my-posh</code>，可以参考这里的 <a href=\"https://ohmyposh.dev/docs/macos\" target=\"_blank\" rel=\"noopener noreferrer\">指南</a>；</li>\n<li>下载并安装一个 <a href=\"https://github.com/ryanoasis/nerd-fonts\" target=\"_blank\" rel=\"noopener noreferrer\">Nerdfonts 字体</a>；</li>\n<li>在<code>$nu.config-path</code>输出的文件中设置<code>PROMPT_COMMAND</code>，可以参考下面的代码片段：</li>\n</ol>\n<div><pre><code><span>let</span> posh-dir <span>=</span> <span>(</span>brew --prefix oh-my-posh <span>|</span> str trim<span>)</span>\n<span>let</span> posh-theme <span>=</span> <span>$'($posh-dir)/share/oh-my-posh/themes/'</span>\n<span># Change the theme names to: zash/space/robbyrussel/powerline/powerlevel10k_lean/</span>\n<span># material/half-life/lambda Or double lines theme: amro/pure/spaceship, etc.</span>\n<span># For more [Themes demo](https://ohmyposh.dev/docs/themes)</span>\nlet-env PROMPT_COMMAND <span>=</span> <span>{</span> oh-my-posh prompt print primary --config <span>$'($posh-theme)/zash.omp.json'</span> <span>}</span>\n<span># Optional</span>\nlet-env PROMPT_INDICATOR <span>=</span> $<span>\"(ansi y)$> (ansi reset)\"</span>\n</code></pre></div><h2 id=\"starship\" tabindex=\"-1\"> Starship</h2>\n<p><a href=\"https://starship.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">网站</a></p>\n<p><a href=\"https://github.com/starship/starship\" target=\"_blank\" rel=\"noopener noreferrer\">仓库</a></p>\n<ol>\n<li>参照上面的链接，安装 Starship；</li>\n<li>根据你的喜好，安装 nerdfonts；</li>\n<li>使用下面的配置示例，请确保设置<code>STARSHIP_SHELL</code>环境变量；</li>\n</ol>\n<p>下面是一个关于 Starship 的配置示例：</p>\n<div><pre><code>let-env STARSHIP_SHELL <span>=</span> <span>\"nu\"</span>\n\ndef create_left_prompt <span>[</span><span>]</span> <span>{</span>\n    starship prompt --cmd-duration <span>$env</span>.CMD_DURATION_MS <span>$'--status=($env.LAST_EXIT_CODE)'</span>\n<span>}</span>\n\n<span># Use nushell functions to define your right and left prompt</span>\nlet-env PROMPT_COMMAND <span>=</span> <span>{</span> create_left_prompt <span>}</span>\nlet-env PROMPT_COMMAND_RIGHT <span>=</span> <span>\"\"</span>\n\n<span># The prompt indicators are environmental variables that represent</span>\n<span># the state of the prompt</span>\nlet-env PROMPT_INDICATOR <span>=</span> <span>\"\"</span>\nlet-env PROMPT_INDICATOR_VI_INSERT <span>=</span> <span>\": \"</span>\nlet-env PROMPT_INDICATOR_VI_NORMAL <span>=</span> <span>\"〉\"</span>\nlet-env PROMPT_MULTILINE_INDICATOR <span>=</span> <span>\"::: \"</span>\n</code></pre></div><p>然后重启 Nushell：</p>\n<div><pre><code>nushell on 📙 main is 📦 v0.60.0 via 🦀 v1.59.0\n❯\n</code></pre></div><p>你可以在 <a href=\"https://github.com/starship/starship#step-2-setup-your-shell-to-use-starship\" target=\"_blank\" rel=\"noopener noreferrer\">官方 Starship 配置文档</a>中了解更多关于配置 Starship 的信息。</p>\n<p>另一种启用 Starship 的方法在 <a href=\"https://starship.rs/#nushell\" target=\"_blank\" rel=\"noopener noreferrer\">Starship 快速安装</a>说明中有描述。</p>\n<h2 id=\"purs\" tabindex=\"-1\"> Purs</h2>\n<p><a href=\"https://github.com/xcambar/purs\" target=\"_blank\" rel=\"noopener noreferrer\">仓库</a></p>\n",
      "date_modified": "2022-06-03T06:25:20.475Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "介绍",
      "url": "www.nushell.sh/zh-CN/book/",
      "id": "www.nushell.sh/zh-CN/book/",
      "content_html": "<h1 id=\"介绍\" tabindex=\"-1\"> 介绍</h1>\n<p>你好，欢迎来到 Nushell 项目。这个项目的目标是继承 Unix Shell 中用管道把简单的命令连接在一起的理念，并将其带到更具现代风格的开发中。</p>\n<p>Nu 汲取了很多常见领域的灵感：传统 Shell 比如 Bash、基于对象的 Shell 比如 PowerShell、逐步类型化的语言比如 TypeScript、函数式编程、系统编程，等等。但是，Nu 并不试图成为万金油，而是把精力集中在做好这几件事上:</p>\n<ul>\n<li>作为一个具有现代感的灵活的跨平台 Shell；</li>\n<li>作为一种现代的编程语言，解决与数据有关的问题；</li>\n<li>给予清晰的错误信息和干净的 IDE 支持；</li>\n</ul>\n<p>了解 Nu 能做什么的最简单的方法是从一些例子开始，所以让我们深入了解一下。</p>\n<p>当你运行<a href=\"/book/commands/ls.html\"><code>ls</code></a>这样的命令时，你会注意到的第一件事是，你得到的不是一个文本块，而是一个结构化的表格：</p>\n<div><pre><code><span>></span> <span>ls</span>\n╭────┬───────────────────────┬──────┬───────────┬─────────────╮\n│ <span>#  │         name          │ type │   size    │  modified   │</span>\n├────┼───────────────────────┼──────┼───────────┼─────────────┤\n│  <span>0</span> │ <span>404</span>.html              │ <span>file</span> │     <span>429</span> B │ <span>3</span> days ago  │\n│  <span>1</span> │ CONTRIBUTING.md       │ <span>file</span> │     <span>955</span> B │ <span>8</span> mins ago  │\n│  <span>2</span> │ Gemfile               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>3</span> │ Gemfile.lock          │ <span>file</span> │   <span>6.9</span> KiB │ <span>3</span> days ago  │\n│  <span>4</span> │ LICENSE               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>5</span> │ README.md             │ <span>file</span> │     <span>213</span> B │ <span>3</span> days ago  │\n<span>..</span>.\n</code></pre></div><p>该表不仅仅是以不同的方式显示目录，就像电子表格中的表一样，它还允许我们以更加互动的方式来处理数据。</p>\n<p>我们要做的第一件事是按大小对我们的表进行排序。要做到这一点，我们将从<a href=\"/book/commands/ls.html\"><code>ls</code></a>中获取输出，并将其输入到一个可以根据列的内容对表进行排序的命令中：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> sort-by size <span>|</span> reverse\n╭────┬───────────────────────┬──────┬───────────┬─────────────╮\n│ <span>#  │         name          │ type │   size    │  modified   │</span>\n├────┼───────────────────────┼──────┼───────────┼─────────────┤\n│  <span>0</span> │ Gemfile.lock          │ <span>file</span> │   <span>6.9</span> KiB │ <span>3</span> days ago  │\n│  <span>1</span> │ SUMMARY.md            │ <span>file</span> │   <span>3.7</span> KiB │ <span>3</span> days ago  │\n│  <span>2</span> │ Gemfile               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>3</span> │ LICENSE               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │\n│  <span>4</span> │ CONTRIBUTING.md       │ <span>file</span> │     <span>955</span> B │ <span>9</span> mins ago  │\n│  <span>5</span> │ books.md              │ <span>file</span> │     <span>687</span> B │ <span>3</span> days ago  │\n<span>..</span>.\n</code></pre></div><p>你可以看到，为了达到这个目的，我们没有向<a href=\"/book/commands/ls.html\"><code>ls</code></a>传递命令行参数。取而代之的是，我们使用了 Nu 提供的<code>sort-by</code>命令来对<a href=\"/book/commands/ls.html\"><code>ls</code></a>命令的输出进行排序。为了在顶部看到最大的文件，我们还使用了<a href=\"/book/commands/reverse.html\"><code>reverse</code></a>命令。</p>\n<p>Nu 提供了许多可以对表进行操作的命令，例如，我们可以过滤<a href=\"/book/commands/ls.html\"><code>ls</code></a>表的内容，使其只显示超过 1 千字节的文件。</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> where size <span>></span> 1kb\n╭───┬───────────────────┬──────┬─────────┬────────────╮\n│ <span># │       name        │ type │  size   │  modified  │</span>\n├───┼───────────────────┼──────┼─────────┼────────────┤\n│ <span>0</span> │ Gemfile           │ <span>file</span> │ <span>1.1</span> KiB │ <span>3</span> days ago │\n│ <span>1</span> │ Gemfile.lock      │ <span>file</span> │ <span>6.9</span> KiB │ <span>3</span> days ago │\n│ <span>2</span> │ LICENSE           │ <span>file</span> │ <span>1.1</span> KiB │ <span>3</span> days ago │\n│ <span>3</span> │ SUMMARY.md        │ <span>file</span> │ <span>3.7</span> KiB │ <span>3</span> days ago │\n╰───┴───────────────────┴──────┴─────────┴────────────╯\n</code></pre></div><p>就像在 Unix 哲学中一样，能够让命令相互对话给我们提供了在许多不同的组合中对命令进行混搭的方法。我们来看看一个不同的命令：</p>\n<div><pre><code><span>></span> <span>ps</span>\n╭─────┬──────┬──────────────────────┬─────────┬───────┬───────────┬──────────╮\n│  <span>#  │ pid  │         name         │ status  │  cpu  │    mem    │ virtual  │</span>\n├─────┼──────┼──────────────────────┼─────────┼───────┼───────────┼──────────┤\n│   <span>0</span> │ <span>7570</span> │ nu                   │ Running │  <span>1.96</span> │  <span>23.2</span> MiB │ <span>32.8</span> GiB │\n│   <span>1</span> │ <span>3533</span> │ remindd              │ Sleep   │  <span>0.00</span> │ <span>103.6</span> MiB │ <span>32.3</span> GiB │\n│   <span>2</span> │ <span>3495</span> │ TVCacheExtension     │ Sleep   │  <span>0.00</span> │  <span>11.9</span> MiB │ <span>32.2</span> GiB │\n│   <span>3</span> │ <span>3490</span> │ MusicCacheExtension  │ Sleep   │  <span>0.00</span> │  <span>12.9</span> MiB │ <span>32.2</span> GiB │\n<span>..</span>.\n</code></pre></div><p>如果你使用过 Linux，你可能对<a href=\"/book/commands/ps.html\"><code>ps</code></a>命令很熟悉。通过它，我们可以得到一个当前系统正在运行的所有进程的列表，它们的状态是什么，以及它们的名字是什么，我们还可以看到这些进程的 CPU 负载。</p>\n<p>如果我们想显示那些正在活跃使用 CPU 的进程呢？就像我们之前对<a href=\"/book/commands/ls.html\"><code>ls</code></a>命令所做的那样，我们也可以利用<a href=\"/book/commands/ps.html\"><code>ps</code></a>命令返回给我们的表格来做到：</p>\n<div><pre><code><span>></span> <span>ps</span> <span>|</span> where cpu <span>></span> <span>5</span>\n╭───┬──────┬────────────────┬─────────┬────────┬───────────┬──────────╮\n│ <span># │ pid  │      name      │ status  │  cpu   │    mem    │ virtual  │</span>\n├───┼──────┼────────────────┼─────────┼────────┼───────────┼──────────┤\n│ <span>0</span> │ <span>1583</span> │ Terminal       │ Running │  <span>20.69</span> │ <span>127.8</span> MiB │ <span>33.0</span> GiB │\n│ <span>1</span> │  <span>579</span> │ photoanalysisd │ Running │ <span>139.50</span> │  <span>99.9</span> MiB │ <span>32.3</span> GiB │\n╰───┴──────┴────────────────┴─────────┴────────┴───────────┴──────────╯\n</code></pre></div><p>到目前为止，我们一直在使用<a href=\"/book/commands/ls.html\"><code>ls</code></a>和<a href=\"/book/commands/ps.html\"><code>ps</code></a>来列出文件和进程。Nu 还提供了其他可以创建有用信息表格的命令。接下来，让我们试一下<a href=\"/book/commands/date.html\"><code>date</code></a>和<a href=\"/book/commands/sys.html\"><code>sys</code></a>。</p>\n<p>运行<code>date now</code>输出关于当前日期和时间的信息：</p>\n<div><pre><code><span>></span> <span>date</span> now\n<span>2022</span>-03-07 <span>14</span>:14:51.684619600 -08:00\n</code></pre></div><p>为了将获得的日期以表格形式展示，我们可以把它输入到 <code>date to-table</code>中：</p>\n<div><pre><code><span>></span> <span>date</span> now <span>|</span> <span>date</span> to-table\n╭───┬──────┬───────┬─────┬──────┬────────┬────────┬──────────╮\n│ <span># │ year │ month │ day │ hour │ minute │ second │ timezone │</span>\n├───┼──────┼───────┼─────┼──────┼────────┼────────┼──────────┤\n│ <span>0</span> │ <span>2022</span> │     <span>3</span> │   <span>7</span> │   <span>14</span> │     <span>45</span> │      <span>3</span> │ -08:00   │\n╰───┴──────┴───────┴─────┴──────┴────────┴────────┴──────────╯\n</code></pre></div><p>运行<a href=\"/book/commands/sys.html\"><code>sys</code></a>可以得到 Nu 所运行的系统的信息：</p>\n<div><pre><code><span>></span> sys\n╭───────┬───────────────────╮\n│ <span>host</span>  │ <span>{</span>record <span>6</span> fields<span>}</span> │\n│ cpu   │ <span>[</span>table <span>4</span> rows<span>]</span>    │\n│ disks │ <span>[</span>table <span>3</span> rows<span>]</span>    │\n│ mem   │ <span>{</span>record <span>4</span> fields<span>}</span> │\n│ temp  │ <span>[</span>table <span>1</span> row<span>]</span>     │\n│ net   │ <span>[</span>table <span>4</span> rows<span>]</span>    │\n╰───────┴───────────────────╯\n</code></pre></div><p>这与我们之前看到的表格有些不同。<a href=\"/book/commands/sys.html\"><code>sys</code></a>命令输出了一个在单元格中包含结构化表格而非简单值的表格。要查看这些数据，我们需要 <em><code>get</code></em> 待查看的列：</p>\n<div><pre><code><span>></span> sys <span>|</span> get <span>host</span>\n╭────────────────┬────────────────────────╮\n│ name           │ Debian GNU/Linux       │\n│ os version     │ <span>11</span>                     │\n│ kernel version │ <span>5.10</span>.92-v8+            │\n│ <span>hostname</span>       │ lifeless               │\n│ <span>uptime</span>         │ 19day 21hr 34min 45sec │\n│ sessions       │ <span>[</span>table <span>1</span> row<span>]</span>          │\n╰────────────────┴────────────────────────╯\n</code></pre></div><p><a href=\"/book/commands/get.html\"><code>get</code></a>命令让我们深入表的某一列内容中。在这里，我们要查看的是 &quot;host&quot; 列，它包含了 Nu 正在运行的主机的信息：操作系统名称、主机名、CPU，以及更多。让我们来获取系统上的用户名：</p>\n<div><pre><code><span>></span> sys <span>|</span> get host.sessions.name\n╭───┬────╮\n│ <span>0</span> │ jt │\n╰───┴────╯\n</code></pre></div><p>现在，系统中只有一个名为 &quot;jt&quot; 的用户。你会注意到，我们可以传递一个列路径（<code>host.sessions.name</code>部分），而不仅仅是简单的列名称。Nu 会接受列路径并输出表中相应的数据。</p>\n<p>你可能已经注意到其他一些不同之处：我们没有一个数据表，而只有一个元素：即字符串 &quot;jt&quot;。Nu 既能处理数据表，也能处理字符串。字符串是使用 Nu 外部命令的一个重要部分。</p>\n<p>让我们看看字符串在 Nu 外部命令里面是如何工作的。我们以之前的例子为例，运行外部的<code>echo</code>命令（<code>^</code>告诉 Nu 不要使用内置的<a href=\"/book/commands/echo.html\"><code>echo</code></a>命令）：</p>\n<div><pre><code><span>></span> sys <span>|</span> get host.sessions.name <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> ^echo <span>$it</span> <span>}</span>\njt\n</code></pre></div><p>敏锐的读者可能会发现这看起来和我们之前的非常相似！确实如此，但有一个重要的区别：我们用前面的值调用了<code>^echo</code>。这允许我们把数据从 Nu 中传到外部命令<code>echo</code>（或者 Nu 之外的任何命令，比如<code>git</code>）。</p>\n<h3 id=\"获取帮助\" tabindex=\"-1\"> 获取帮助</h3>\n<p>任何 Nu 的内置命令的帮助文本都可以通过<a href=\"/book/commands/help.html\"><code>help</code></a>命令来找到。要查看所有命令，请运行<code>help commands</code>。你也可以通过执行<code>help -f &lt;topic&gt;</code>来搜索一个主题：</p>\n<div><pre><code><span>></span> <span>help</span> path\nExplore and manipulate paths.\n\nThere are three ways to represent a path:\n\n* As a path literal, e.g., <span>'/home/viking/spam.txt'</span>\n* As a structured path: a table with <span>'parent'</span>, <span>'stem'</span>, and <span>'extension'</span> <span>(</span>and\n* <span>'prefix'</span> on Windows<span>)</span> columns. This <span>format</span> is produced by the <span>'path parse'</span>\n  subcommand.\n* As an inner list of path parts, e.g., <span>'[[ / home viking spam.txt ]]'</span><span>.</span>\n  Splitting into parts is <span>done</span> by the <span><span>`</span>path <span>split</span><span>`</span></span> command.\n\nAll subcommands accept all three variants as an input. Furthermore, the <span>'path\njoin'</span> subcommand can be used to <span>join</span> the structured path or path parts back into\nthe path literal.\n\nUsage:\n  <span>></span> path\n\nSubcommands:\n  path <span>basename</span> - Get the final component of a path\n  path <span>dirname</span> - Get the parent directory of a path\n  path exists - Check whether a path exists\n  path <span>expand</span> - Try to <span>expand</span> a path to its absolute form\n  path <span>join</span> - Join a structured path or a list of path parts.\n  path parse - Convert a path into structured data.\n  path relative-to - Get a path as relative to another path.\n  path <span>split</span> - Split a path into parts by a separator.\n  path <span>type</span> - Get the <span>type</span> of the object a path refers to <span>(</span>e.g., file, dir, symlink<span>)</span>\n\nFlags:\n  -h, --help\n      Display this <span>help</span> message\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.476Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "别名",
      "url": "www.nushell.sh/zh-CN/book/aliases.html",
      "id": "www.nushell.sh/zh-CN/book/aliases.html",
      "content_html": "<h1 id=\"别名\" tabindex=\"-1\"> 别名</h1>\n<p>Nushell 中的别名提供了一种简单的文本替换方式，这允许你为一个较长的命令创建一个简写名称，包括其默认参数。</p>\n<p>例如，让我们创建一个名为 <code>ll</code> 的别名，它将展开为 <code>ls -l</code>。</p>\n<div><pre><code><span>></span> <span>alias</span> ll <span>=</span> <span>ls</span> -l\n</code></pre></div><p>我们可以通过别名来调用它：</p>\n<div><pre><code><span>></span> ll\n</code></pre></div><p>一旦我们这样做了，就如同我们输入了 <code>ls -l</code> 一样。这也允许我们传入标志或位置参数。例如，我们现在也可以这样写：</p>\n<div><pre><code>> ll -a\n</code></pre></div><p>可得到与输入了<code>ls -l -a</code>一样的结果。</p>\n<h2 id=\"编写带有管道的别名\" tabindex=\"-1\"> 编写带有管道的别名</h2>\n<p>如果你想在别名中添加管道，你必须用小括号把它括起来，小括号是一对圆括号<code>()</code>，用来标记你的一组带有管道命令：</p>\n<div><pre><code><span>alias</span> lsname <span>=</span> <span>(</span>ls <span>|</span> get name<span>)</span>\n</code></pre></div><p>下面是一个带有多个管道的别名：</p>\n<div><pre><code><span>alias</span> lt <span>=</span> <span>(</span>ls <span>|</span> sort-by modified -r <span>|</span> sort-by <span>type</span><span>)</span>\n</code></pre></div><h2 id=\"持久化\" tabindex=\"-1\"> 持久化</h2>\n<p>为了使你的别名持久化，它必须被添加到你的 <em>config.nu</em> 文件中。\n关于如何持久化别名，以便在你启动 Nushell 时它们是可用的，请参考 <a href=\"/zh-CN/book/configuration.html\">配置</a> 部分。</p>\n",
      "date_modified": "2022-06-03T06:25:20.476Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Nu 的配色和主题",
      "url": "www.nushell.sh/zh-CN/book/coloring_and_theming.html",
      "id": "www.nushell.sh/zh-CN/book/coloring_and_theming.html",
      "content_html": "<h1 id=\"nu-的配色和主题\" tabindex=\"-1\"> Nu 的配色和主题</h1>\n<p>Nushell 界面的许多部分都可以定制它们的颜色，所有这些都可以在<code>config.nu</code>配置文件中设置。如果你在配置文件中看到 hash/hashtag/pound 符号 <code>#</code>，这意味着它后面的文字被注释掉了。</p>\n<ol>\n<li>表的边框</li>\n<li>原始值</li>\n<li>形状（这是命令行的语法）</li>\n<li>提示</li>\n<li>LS_COLORS</li>\n</ol>\n<h2 id=\"表格边框\" tabindex=\"-1\"> 表格边框</h2>\n<hr>\n<p>表的边框由<code>config.nu</code>中的<code>table_mode</code>设置来控制。下面是一个例子：</p>\n<div><pre><code><span>></span> <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    table_mode: rounded\n<span>}</span>\n</code></pre></div><p>下面是目前<code>table_mode</code>的可能选项：</p>\n<ul>\n<li><code>rounded</code> # 当然了，这个是最好的 😃</li>\n<li><code>basic</code></li>\n<li><code>compact</code></li>\n<li><code>compact_double</code></li>\n<li><code>light</code></li>\n<li><code>thin</code></li>\n<li><code>with_love</code></li>\n<li><code>reinforced</code></li>\n<li><code>heavy</code></li>\n<li><code>none</code></li>\n<li><code>other</code></li>\n</ul>\n<h3 id=\"颜色符号\" tabindex=\"-1\"> 颜色符号</h3>\n<hr>\n<ul>\n<li><code>r</code> - 标准颜色红色的缩写</li>\n<li><code>rb</code> - 标准颜色红色的缩写，带有粗体属性</li>\n<li><code>red</code> - 标准颜色红色</li>\n<li><code>red_bold</code> - 带有粗体属性的标准颜色红色</li>\n<li><code>&quot;#ff0000&quot;</code> - &quot;#hex&quot; 格式的颜色：前景色为红色（需要引号）</li>\n<li><code>{ fg: &quot;#ff0000&quot; bg: &quot;#0000ff&quot; attr: b }</code> - 完整 &quot;#hex&quot; 格式：前景为红色，背景为蓝色的 &quot;#hex&quot; 格式，属性为粗体缩写。</li>\n</ul>\n<h3 id=\"属性\" tabindex=\"-1\"> 属性</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>l</td>\n<td>闪烁</td>\n</tr>\n<tr>\n<td>b</td>\n<td>加粗</td>\n</tr>\n<tr>\n<td>d</td>\n<td>暗淡</td>\n</tr>\n<tr>\n<td>h</td>\n<td>隐藏</td>\n</tr>\n<tr>\n<td>i</td>\n<td>斜体</td>\n</tr>\n<tr>\n<td>r</td>\n<td>反转</td>\n</tr>\n<tr>\n<td>s</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>u</td>\n<td>下划线</td>\n</tr>\n<tr>\n<td>n</td>\n<td>无</td>\n</tr>\n<tr>\n<td></td>\n<td>默认为无</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"标准颜色-和缩写\" tabindex=\"-1\"> &quot;标准颜色&quot;和缩写</h3>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g</td>\n<td>green</td>\n</tr>\n<tr>\n<td>gb</td>\n<td>green_bold</td>\n</tr>\n<tr>\n<td>gu</td>\n<td>green_underline</td>\n</tr>\n<tr>\n<td>gi</td>\n<td>green_italic</td>\n</tr>\n<tr>\n<td>gd</td>\n<td>green_dimmed</td>\n</tr>\n<tr>\n<td>gr</td>\n<td>green_reverse</td>\n</tr>\n<tr>\n<td>gbl</td>\n<td>green_blink</td>\n</tr>\n<tr>\n<td>gst</td>\n<td>green_strike</td>\n</tr>\n<tr>\n<td>lg</td>\n<td>light_green</td>\n</tr>\n<tr>\n<td>lgb</td>\n<td>light_green_bold</td>\n</tr>\n<tr>\n<td>lgu</td>\n<td>light_green_underline</td>\n</tr>\n<tr>\n<td>lgi</td>\n<td>light_green_italic</td>\n</tr>\n<tr>\n<td>lgd</td>\n<td>light_green_dimmed</td>\n</tr>\n<tr>\n<td>lgr</td>\n<td>light_green_reverse</td>\n</tr>\n<tr>\n<td>lgbl</td>\n<td>light_green_blink</td>\n</tr>\n<tr>\n<td>lgst</td>\n<td>light_green_strike</td>\n</tr>\n<tr>\n<td>r</td>\n<td>red</td>\n</tr>\n<tr>\n<td>rb</td>\n<td>red_bold</td>\n</tr>\n<tr>\n<td>ru</td>\n<td>red_underline</td>\n</tr>\n<tr>\n<td>ri</td>\n<td>red_italic</td>\n</tr>\n<tr>\n<td>rd</td>\n<td>red_dimmed</td>\n</tr>\n<tr>\n<td>rr</td>\n<td>red_reverse</td>\n</tr>\n<tr>\n<td>rbl</td>\n<td>red_blink</td>\n</tr>\n<tr>\n<td>rst</td>\n<td>red_strike</td>\n</tr>\n<tr>\n<td>lr</td>\n<td>light_red</td>\n</tr>\n<tr>\n<td>lrb</td>\n<td>light_red_bold</td>\n</tr>\n<tr>\n<td>lru</td>\n<td>light_red_underline</td>\n</tr>\n<tr>\n<td>lri</td>\n<td>light_red_italic</td>\n</tr>\n<tr>\n<td>lrd</td>\n<td>light_red_dimmed</td>\n</tr>\n<tr>\n<td>lrr</td>\n<td>light_red_reverse</td>\n</tr>\n<tr>\n<td>lrbl</td>\n<td>light_red_blink</td>\n</tr>\n<tr>\n<td>lrst</td>\n<td>light_red_strike</td>\n</tr>\n<tr>\n<td>u</td>\n<td>blue</td>\n</tr>\n<tr>\n<td>ub</td>\n<td>blue_bold</td>\n</tr>\n<tr>\n<td>uu</td>\n<td>blue_underline</td>\n</tr>\n<tr>\n<td>ui</td>\n<td>blue_italic</td>\n</tr>\n<tr>\n<td>ud</td>\n<td>blue_dimmed</td>\n</tr>\n<tr>\n<td>ur</td>\n<td>blue_reverse</td>\n</tr>\n<tr>\n<td>ubl</td>\n<td>blue_blink</td>\n</tr>\n<tr>\n<td>ust</td>\n<td>blue_strike</td>\n</tr>\n<tr>\n<td>lu</td>\n<td>light_blue</td>\n</tr>\n<tr>\n<td>lub</td>\n<td>light_blue_bold</td>\n</tr>\n<tr>\n<td>luu</td>\n<td>light_blue_underline</td>\n</tr>\n<tr>\n<td>lui</td>\n<td>light_blue_italic</td>\n</tr>\n<tr>\n<td>lud</td>\n<td>light_blue_dimmed</td>\n</tr>\n<tr>\n<td>lur</td>\n<td>light_blue_reverse</td>\n</tr>\n<tr>\n<td>lubl</td>\n<td>light_blue_blink</td>\n</tr>\n<tr>\n<td>lust</td>\n<td>light_blue_strike</td>\n</tr>\n<tr>\n<td>b</td>\n<td>black</td>\n</tr>\n<tr>\n<td>bb</td>\n<td>black_bold</td>\n</tr>\n<tr>\n<td>bu</td>\n<td>black_underline</td>\n</tr>\n<tr>\n<td>bi</td>\n<td>black_italic</td>\n</tr>\n<tr>\n<td>bd</td>\n<td>black_dimmed</td>\n</tr>\n<tr>\n<td>br</td>\n<td>black_reverse</td>\n</tr>\n<tr>\n<td>bbl</td>\n<td>black_blink</td>\n</tr>\n<tr>\n<td>bst</td>\n<td>black_strike</td>\n</tr>\n<tr>\n<td>ligr</td>\n<td>light_gray</td>\n</tr>\n<tr>\n<td>ligrb</td>\n<td>light_gray_bold</td>\n</tr>\n<tr>\n<td>ligru</td>\n<td>light_gray_underline</td>\n</tr>\n<tr>\n<td>ligri</td>\n<td>light_gray_italic</td>\n</tr>\n<tr>\n<td>ligrd</td>\n<td>light_gray_dimmed</td>\n</tr>\n<tr>\n<td>ligrr</td>\n<td>light_gray_reverse</td>\n</tr>\n<tr>\n<td>ligrbl</td>\n<td>light_gray_blink</td>\n</tr>\n<tr>\n<td>ligrst</td>\n<td>light_gray_strike</td>\n</tr>\n<tr>\n<td>y</td>\n<td>yellow</td>\n</tr>\n<tr>\n<td>yb</td>\n<td>yellow_bold</td>\n</tr>\n<tr>\n<td>yu</td>\n<td>yellow_underline</td>\n</tr>\n<tr>\n<td>yi</td>\n<td>yellow_italic</td>\n</tr>\n<tr>\n<td>yd</td>\n<td>yellow_dimmed</td>\n</tr>\n<tr>\n<td>yr</td>\n<td>yellow_reverse</td>\n</tr>\n<tr>\n<td>ybl</td>\n<td>yellow_blink</td>\n</tr>\n<tr>\n<td>yst</td>\n<td>yellow_strike</td>\n</tr>\n<tr>\n<td>ly</td>\n<td>light_yellow</td>\n</tr>\n<tr>\n<td>lyb</td>\n<td>light_yellow_bold</td>\n</tr>\n<tr>\n<td>lyu</td>\n<td>light_yellow_underline</td>\n</tr>\n<tr>\n<td>lyi</td>\n<td>light_yellow_italic</td>\n</tr>\n<tr>\n<td>lyd</td>\n<td>light_yellow_dimmed</td>\n</tr>\n<tr>\n<td>lyr</td>\n<td>light_yellow_reverse</td>\n</tr>\n<tr>\n<td>lybl</td>\n<td>light_yellow_blink</td>\n</tr>\n<tr>\n<td>lyst</td>\n<td>light_yellow_strike</td>\n</tr>\n<tr>\n<td>p</td>\n<td>purple</td>\n</tr>\n<tr>\n<td>pb</td>\n<td>purple_bold</td>\n</tr>\n<tr>\n<td>pu</td>\n<td>purple_underline</td>\n</tr>\n<tr>\n<td>pi</td>\n<td>purple_italic</td>\n</tr>\n<tr>\n<td>pd</td>\n<td>purple_dimmed</td>\n</tr>\n<tr>\n<td>pr</td>\n<td>purple_reverse</td>\n</tr>\n<tr>\n<td>pbl</td>\n<td>purple_blink</td>\n</tr>\n<tr>\n<td>pst</td>\n<td>purple_strike</td>\n</tr>\n<tr>\n<td>lp</td>\n<td>light_purple</td>\n</tr>\n<tr>\n<td>lpb</td>\n<td>light_purple_bold</td>\n</tr>\n<tr>\n<td>lpu</td>\n<td>light_purple_underline</td>\n</tr>\n<tr>\n<td>lpi</td>\n<td>light_purple_italic</td>\n</tr>\n<tr>\n<td>lpd</td>\n<td>light_purple_dimmed</td>\n</tr>\n<tr>\n<td>lpr</td>\n<td>light_purple_reverse</td>\n</tr>\n<tr>\n<td>lpbl</td>\n<td>light_purple_blink</td>\n</tr>\n<tr>\n<td>lpst</td>\n<td>light_purple_strike</td>\n</tr>\n<tr>\n<td>c</td>\n<td>cyan</td>\n</tr>\n<tr>\n<td>cb</td>\n<td>cyan_bold</td>\n</tr>\n<tr>\n<td>cu</td>\n<td>cyan_underline</td>\n</tr>\n<tr>\n<td>ci</td>\n<td>cyan_italic</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>cyan_dimmed</td>\n</tr>\n<tr>\n<td>cr</td>\n<td>cyan_reverse</td>\n</tr>\n<tr>\n<td>cbl</td>\n<td>cyan_blink</td>\n</tr>\n<tr>\n<td>cst</td>\n<td>cyan_strike</td>\n</tr>\n<tr>\n<td>lc</td>\n<td>light_cyan</td>\n</tr>\n<tr>\n<td>lcb</td>\n<td>light_cyan_bold</td>\n</tr>\n<tr>\n<td>lcu</td>\n<td>light_cyan_underline</td>\n</tr>\n<tr>\n<td>lci</td>\n<td>light_cyan_italic</td>\n</tr>\n<tr>\n<td>lcd</td>\n<td>light_cyan_dimmed</td>\n</tr>\n<tr>\n<td>lcr</td>\n<td>light_cyan_reverse</td>\n</tr>\n<tr>\n<td>lcbl</td>\n<td>light_cyan_blink</td>\n</tr>\n<tr>\n<td>lcst</td>\n<td>light_cyan_strike</td>\n</tr>\n<tr>\n<td>w</td>\n<td>white</td>\n</tr>\n<tr>\n<td>wb</td>\n<td>white_bold</td>\n</tr>\n<tr>\n<td>wu</td>\n<td>white_underline</td>\n</tr>\n<tr>\n<td>wi</td>\n<td>white_italic</td>\n</tr>\n<tr>\n<td>wd</td>\n<td>white_dimmed</td>\n</tr>\n<tr>\n<td>wr</td>\n<td>white_reverse</td>\n</tr>\n<tr>\n<td>wbl</td>\n<td>white_blink</td>\n</tr>\n<tr>\n<td>wst</td>\n<td>white_strike</td>\n</tr>\n<tr>\n<td>dgr</td>\n<td>dark_gray</td>\n</tr>\n<tr>\n<td>dgrb</td>\n<td>dark_gray_bold</td>\n</tr>\n<tr>\n<td>dgru</td>\n<td>dark_gray_underline</td>\n</tr>\n<tr>\n<td>dgri</td>\n<td>dark_gray_italic</td>\n</tr>\n<tr>\n<td>dgrd</td>\n<td>dark_gray_dimmed</td>\n</tr>\n<tr>\n<td>dgrr</td>\n<td>dark_gray_reverse</td>\n</tr>\n<tr>\n<td>dgrbl</td>\n<td>dark_gray_blink</td>\n</tr>\n<tr>\n<td>dgrst</td>\n<td>dark_gray_strike</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"hex-格式\" tabindex=\"-1\"> <code>&quot;#hex&quot;</code> 格式</h3>\n<hr>\n<p>&quot;#hex&quot; 格式是你通常看到的一种表示颜色的方式。它由简单的<code>#</code>字符以及后面的 6 个字符组成。前两个代表 <code>红色</code>，接下来两个代表 <code>绿色</code>，最后两个代表 <code>蓝色</code>。重要的是，这个字符串必须用引号包围，否则 Nushell 会认为它是一个被注释掉的字符串。</p>\n<p>例子：红色的主要颜色是 &quot;#ff0000&quot; 或 &quot;#FF0000&quot;。字母的大写和小写没有区别。</p>\n<p>这种 <code>&quot;#hex&quot;</code>格式允许我们为 Nushell 的不同部分指定 24 位真彩色调。</p>\n<h2 id=\"完整-hex-格式\" tabindex=\"-1\"> <code>完整 &quot;#hex&quot;</code> 格式</h2>\n<hr>\n<p><code>完整 &quot;#hex&quot;</code>格式是对 <code>&quot;#hex&quot;</code> 格式的一种改进，但允许人们在一行中指定前景色、背景色和属性。</p>\n<p>例如：<code>{ fg: &quot;#ff0000&quot; bg: &quot;#0000ff&quot; attr: b }</code></p>\n<ul>\n<li>前景色红色为 &quot;#hex&quot; 格式</li>\n<li>背景色蓝色为 &quot;#hex&quot; 格式</li>\n<li>属性为加粗的缩写形式</li>\n</ul>\n<h2 id=\"原始值\" tabindex=\"-1\"> 原始值</h2>\n<hr>\n<p>原始值是像<code>int</code>和<code>string</code>这样的值。原始值和形状可以用上面看到的各种颜色符号来设置。</p>\n<p>这是当前的原始值列表。并非所有这些都是可配置的。可配置的被标记为 <code>*</code>。</p>\n<table>\n<thead>\n<tr>\n<th>原始值</th>\n<th>默认颜色</th>\n<th>可配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>any</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>binary</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>block</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>bool</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>cellpath</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>condition</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>custom</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>duration</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>expression</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>filesize</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>glob</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>import</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>list</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>nothing</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>operator</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>range</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>record</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>signature</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td>Color::White.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>table</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>var</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>vardecl</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>variable</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"特殊的-原始值-不是真正的原始值-它们的存在仅仅是为了着色\" tabindex=\"-1\"> 特殊的 &quot;原始值&quot;（不是真正的原始值，它们的存在仅仅是为了着色）</h4>\n<table>\n<thead>\n<tr>\n<th>原始值</th>\n<th>默认颜色</th>\n<th>可配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>leading_trailing_space_bg</code></td>\n<td>Color::Rgb(128, 128, 128))</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>header</code></td>\n<td>Color::Green.bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>Color::Blue.normal()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>row_index</code></td>\n<td>Color::Green.bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>hints</code></td>\n<td>Color::DarkGray.normal()</td>\n<td>*</td>\n</tr>\n</tbody>\n</table>\n<p>下面是一个改变其中一些数值的小例子。</p>\n<div><pre><code><span>></span> <span>let</span> config <span>=</span> <span>{</span>\n    color_config: <span>{</span>\n        separator: purple\n        leading_trailing_space_bg: <span>\"#ffffff\"</span>\n        header: gb\n        date: wd\n        filesize: c\n        row_index: cb\n        bool: red\n        int: green\n        duration: blue_bold\n        range: purple\n        float: red\n        string: white\n        nothing: red\n        binary: red\n        cellpath: cyan\n        hints: dark_gray\n    <span>}</span>\n<span>}</span>\n</code></pre></div><p>下面是另一个使用多种颜色语法的小例子，其中有一些注释：</p>\n<div><pre><code><span>></span> <span>let</span> config <span>=</span> <span>{</span>\n    color_config: <span>{</span>\n        separator: <span>\"#88b719\"</span> <span># this sets only the foreground color like PR #486</span>\n        leading_trailing_space_bg: white <span># this sets only the foreground color in the original style</span>\n        header: <span>{</span> <span># this is like PR #489</span>\n            fg: <span>\"#B01455\"</span>, <span># note, quotes are required on the values with hex colors</span>\n            bg: <span>\"#ffb900\"</span>,<span># note, commas are not required, it could also be all on one line</span>\n            attr: bli <span># note, there are no quotes around this value. it works with or without quotes</span>\n        <span>}</span>\n        date: <span>\"#75507B\"</span>\n        filesize: <span>\"#729fcf\"</span>\n        row_index: <span>{</span>\n            <span># note that this is another way to set only the foreground, no need to specify bg and attr</span>\n            fg: <span>\"#e50914\"</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre></div><h2 id=\"shape-值\" tabindex=\"-1\"> <code>Shape</code> 值</h2>\n<p>如上所述，&quot;形状&quot; 是一个用来表示语法着色的术语。</p>\n<p>下面是当前支持的平面形状列表：</p>\n<table>\n<thead>\n<tr>\n<th>形状</th>\n<th>默认样式</th>\n<th>可配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>shape_block</code></td>\n<td>fg(Color::Blue).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_bool</code></td>\n<td>fg(Color::LightCyan)</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_custom</code></td>\n<td>bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_external</code></td>\n<td>fg(Color::Cyan)</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_externalarg</code></td>\n<td>fg(Color::Green).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_filepath</code></td>\n<td>fg(Color::Cyan)</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_flag</code></td>\n<td>fg(Color::Blue).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_float</code></td>\n<td>fg(Color::Purple).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_garbage</code></td>\n<td>fg(Color::White).on(Color::Red).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_globpattern</code></td>\n<td>fg(Color::Cyan).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_int</code></td>\n<td>fg(Color::Purple).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_internalcall</code></td>\n<td>fg(Color::Cyan).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_list</code></td>\n<td>fg(Color::Cyan).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_literal</code></td>\n<td>fg(Color::Blue)</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_nothing</code></td>\n<td>fg(Color::LightCyan)</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_operator</code></td>\n<td>fg(Color::Yellow)</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_range</code></td>\n<td>fg(Color::Yellow).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_record</code></td>\n<td>fg(Color::Cyan).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_signature</code></td>\n<td>fg(Color::Green).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_string</code></td>\n<td>fg(Color::Green)</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_string_interpolation</code></td>\n<td>fg(Color::Cyan).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_table</code></td>\n<td>fg(Color::Blue).bold()</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>shape_variable</code></td>\n<td>fg(Color::Purple)</td>\n<td>*</td>\n</tr>\n</tbody>\n</table>\n<p>这里有一个小例子，说明如何对这些项目应用颜色。任何没有显示指定的都会被设置为默认的颜色。</p>\n<div><pre><code><span>></span> <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    color_config: <span>{</span>\n        shape_garbage: <span>{</span> fg: <span>\"#FFFFFF\"</span> bg: <span>\"#FF0000\"</span> attr: b<span>}</span>\n        shape_bool: green\n        shape_int: <span>{</span> fg: <span>\"#0000ff\"</span> attr: b<span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre></div><h2 id=\"提示-的配置和着色\" tabindex=\"-1\"> &quot;提示&quot;的配置和着色</h2>\n<p>Nushell 的提示符可以通过这些环境变量进行配置：</p>\n<ul>\n<li><code>PROMPT_COMMAND</code>: 为设置提示而执行的代码（块）</li>\n<li><code>PROMPT_COMMAND_RIGHT</code>: 为设置 <em>RIGHT</em> 提示而执行的代码（块）(参考 nu_scripts 里的 oh-my.nu)</li>\n<li><code>PROMPT_INDICATOR</code> = &quot;〉&quot;: 提示后打印的标识（默认为&quot;&gt;&quot;类 Unicode 符号）</li>\n<li><code>PROMPT_INDICATOR_VI_INSERT</code> = &quot;: &quot;</li>\n<li><code>PROMPT_INDICATOR_VI_NORMAL</code> = &quot;v &quot;</li>\n<li><code>PROMPT_MULTILINE_INDICATOR</code> = &quot;::: &quot;</li>\n</ul>\n<p>例如：对于一个简单的提示，我们可以这样做。注意<code>PROMPT_COMMAND</code>需要一个<code>block</code>而其他的需要一个<code>string</code>。</p>\n<div><pre><code><span>></span> let-env PROMPT_COMMAND <span>=</span> <span>{</span> build-string <span>(</span>date now <span>|</span> <span>date</span> <span>format</span> <span>'%m/%d/%Y %I:%M:%S%.3f'</span><span>)</span> <span>': '</span> <span>(</span>pwd <span>|</span> path <span>basename</span><span>)</span> <span>}</span>\n</code></pre></div><p>如果你不喜欢默认的<code>PROMPT_INDICATOR</code>，你可以这样改变它：</p>\n<div><pre><code><span>></span> let-env PROMPT_INDICATOR <span>=</span> <span>\"> \"</span>\n</code></pre></div><p>提示的颜色由 <code>PROMPT_COMMAND</code> 中的 <code>block</code> 控制，在这里你可以编写自己的自定义提示。我们写了一个稍微花哨点的，有 git 状态的，位于 <a href=\"https://github.com/nushell/nu_scripts/blob/main/prompt/oh-my.nu\" target=\"_blank\" rel=\"noopener noreferrer\">nu_scripts 仓库</a>。</p>\n<h2 id=\"ls-命令的配色-ls-colors\" tabindex=\"-1\"> <code>ls</code> 命令的配色:<code>LS_COLORS</code></h2>\n<p>Nushell 将尊重并使用 Mac、Linux 和 Windows 上的 <code>LS_COLORS</code> 环境变量设置。这个设置允许你在做<a href=\"/book/commands/ls.html\"><code>ls</code></a>时定义文件类型的颜色。例如，你可以让目录变成一种颜色，<code>_.md</code> markdown 文件一种颜色，<code>_.toml</code> 文件变成另一种颜色，等等。有很多方法可以给你的文件类型着色。</p>\n<p>有一个详尽的清单可以在 <a href=\"https://github.com/trapd00r/LS_COLORS\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a> 看到，不过它可能太多了，但可以让你初步了解如何创建一个<code>ls_colors</code>文件，而<code>dircolors</code>可以把它变成<code>LS_COLORS</code>环境变量。</p>\n<p><a href=\"https://www.linuxhowto.net/how-to-set-colors-for-ls-command/\" target=\"_blank\" rel=\"noopener noreferrer\">这</a> 是对<code>LS_COLORS</code>的一个相当好的介绍。我相信你可以在网上找到更多相关教程。</p>\n<p>我喜欢<code>vivid</code>应用程序，目前在我的<code>config.nu</code>中是这样配置的。你可以在 <a href=\"https://github.com/sharkdp/vivid\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a> 找到<code>vivid</code>。</p>\n<p><code>let-env LS_COLORS = (vivid generate molokai | str trim)</code>。</p>\n<p>如果没有设置 <code>LS_COLORS</code>，Nushell 将默认使用内置的 <code>LS_COLORS</code> 设置，基于 8 位（扩展）ANSI 颜色。</p>\n<h2 id=\"主题\" tabindex=\"-1\"> 主题</h2>\n<p>主题设计结合了上述所有的着色。这里有一个快速的例子，我们把它放在一起，以证明主题定制的能力。这是对我们在网络上看到的 <code>base16</code> 主题的一种转换。</p>\n<p>使主题生效的关键是确保你在声明 <code>let config =</code> 行 <em>之前</em>，在<code>config.nu</code>文件中指定你要使用的所有主题和颜色：</p>\n<div><pre><code><span># let's define some colors</span>\n\n<span>let</span> base00 <span>=</span> <span>\"#181818\"</span> <span># Default Background</span>\n<span>let</span> base01 <span>=</span> <span>\"#282828\"</span> <span># Lighter Background (Used for status bars, line number and folding marks)</span>\n<span>let</span> base02 <span>=</span> <span>\"#383838\"</span> <span># Selection Background</span>\n<span>let</span> base03 <span>=</span> <span>\"#585858\"</span> <span># Comments, Invisibles, Line Highlighting</span>\n<span>let</span> base04 <span>=</span> <span>\"#b8b8b8\"</span> <span># Dark Foreground (Used for status bars)</span>\n<span>let</span> base05 <span>=</span> <span>\"#d8d8d8\"</span> <span># Default Foreground, Caret, Delimiters, Operators</span>\n<span>let</span> base06 <span>=</span> <span>\"#e8e8e8\"</span> <span># Light Foreground (Not often used)</span>\n<span>let</span> base07 <span>=</span> <span>\"#f8f8f8\"</span> <span># Light Background (Not often used)</span>\n<span>let</span> base08 <span>=</span> <span>\"#ab4642\"</span> <span># Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted</span>\n<span>let</span> base09 <span>=</span> <span>\"#dc9656\"</span> <span># Integers, Boolean, Constants, XML Attributes, Markup Link Url</span>\n<span>let</span> base0a <span>=</span> <span>\"#f7ca88\"</span> <span># Classes, Markup Bold, Search Text Background</span>\n<span>let</span> base0b <span>=</span> <span>\"#a1b56c\"</span> <span># Strings, Inherited Class, Markup Code, Diff Inserted</span>\n<span>let</span> base0c <span>=</span> <span>\"#86c1b9\"</span> <span># Support, Regular Expressions, Escape Characters, Markup Quotes</span>\n<span>let</span> base0d <span>=</span> <span>\"#7cafc2\"</span> <span># Functions, Methods, Attribute IDs, Headings</span>\n<span>let</span> base0e <span>=</span> <span>\"#ba8baf\"</span> <span># Keywords, Storage, Selector, Markup Italic, Diff Changed</span>\n<span>let</span> base0f <span>=</span> <span>\"#a16946\"</span> <span># Deprecated, Opening/Closing Embedded Language Tags, e.g. &lt;?php ?></span>\n\n<span># we're creating a theme here that uses the colors we defined above.</span>\n\n<span>let</span> base16_theme <span>=</span> <span>{</span>\n    separator: <span>$base03</span>\n    leading_trailing_space_bg: <span>$base04</span>\n    header: <span>$base0b</span>\n    date: <span>$base0e</span>\n    filesize: <span>$base0d</span>\n    row_index: <span>$base0c</span>\n    bool: <span>$base08</span>\n    int: <span>$base0b</span>\n    duration: <span>$base08</span>\n    range: <span>$base08</span>\n    float: <span>$base08</span>\n    string: <span>$base04</span>\n    nothing: <span>$base08</span>\n    binary: <span>$base08</span>\n    cellpath: <span>$base08</span>\n    hints: dark_gray\n\n    <span># shape_garbage: { fg: $base07 bg: $base08 attr: b} # base16 white on red</span>\n    <span># but i like the regular white on red for parse errors</span>\n    shape_garbage: <span>{</span> fg: <span>\"#FFFFFF\"</span> bg: <span>\"#FF0000\"</span> attr: b<span>}</span>\n    shape_bool: <span>$base0d</span>\n    shape_int: <span>{</span> fg: <span>$base0e</span> attr: b<span>}</span>\n    shape_float: <span>{</span> fg: <span>$base0e</span> attr: b<span>}</span>\n    shape_range: <span>{</span> fg: <span>$base0a</span> attr: b<span>}</span>\n    shape_internalcall: <span>{</span> fg: <span>$base0c</span> attr: b<span>}</span>\n    shape_external: <span>$base0c</span>\n    shape_externalarg: <span>{</span> fg: <span>$base0b</span> attr: b<span>}</span>\n    shape_literal: <span>$base0d</span>\n    shape_operator: <span>$base0a</span>\n    shape_signature: <span>{</span> fg: <span>$base0b</span> attr: b<span>}</span>\n    shape_string: <span>$base0b</span>\n    shape_filepath: <span>$base0d</span>\n    shape_globpattern: <span>{</span> fg: <span>$base0d</span> attr: b<span>}</span>\n    shape_variable: <span>$base0e</span>\n    shape_flag: <span>{</span> fg: <span>$base0d</span> attr: b<span>}</span>\n    shape_custom: <span>{</span>attr: b<span>}</span>\n<span>}</span>\n\n<span># now let's apply our regular config settings but also apply the \"color_config:\" theme that we specified above.</span>\n\n<span>let</span> config <span>=</span> <span>{</span>\n  filesize_metric: <span>true</span>\n  table_mode: rounded <span># basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other</span>\n  use_ls_colors: <span>true</span>\n  color_config: <span>$base16_theme</span> <span># &lt;-- this is the theme</span>\n  use_grid_icons: <span>true</span>\n  footer_mode: always <span>#always, never, number_of_rows, auto</span>\n  animate_prompt: <span>false</span>\n  float_precision: <span>2</span>\n  use_ansi_coloring: <span>true</span>\n  filesize_format: <span>\"b\"</span> <span># b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, zb, zib, auto</span>\n  edit_mode: emacs <span># vi</span>\n  max_history_size: <span>10000</span>\n  log_level: error\n<span>}</span>\n</code></pre></div><p>如果你想在主题设计上火力全开，你需要把我在一开始提到的所有项目作为主题，包括<code>LS_COLORS</code>和提示。祝您好运!</p>\n",
      "date_modified": "2022-06-03T06:25:20.478Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "从 Bash 到 Nu",
      "url": "www.nushell.sh/zh-CN/book/coming_from_bash.html",
      "id": "www.nushell.sh/zh-CN/book/coming_from_bash.html",
      "content_html": "<h1 id=\"从-bash-到-nu\" tabindex=\"-1\"> 从 Bash 到 Nu</h1>\n<p>如果你是来自 Windows 上的<code>Git Bash</code>用户，那么你习惯的外部命令（bash、grep 等）在<code>nu</code>中默认是不可用的（除非你在 Windows 路径环境变量中明确包含了它们）。\n要使这些命令在<code>nu</code>中可用，请在你的<code>config.nu</code>中添加以下一行，用<code>append</code>或<code>prepend</code>。</p>\n<div><pre><code>let-env Path <span>=</span> <span>(</span><span>$env</span>.Path <span>|</span> prepend <span>'C:\\Program Files\\Git\\usr\\bin'</span><span>)</span>\n</code></pre></div><p>注意：本表针对 Nu 0.14.1 或更高版本。</p>\n<table>\n<thead>\n<tr>\n<th>Bash</th>\n<th>Nu</th>\n<th>Task</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ls</code></td>\n<td><code>ls</code></td>\n<td>列出当前目录中的文件</td>\n</tr>\n<tr>\n<td><code>ls &lt;dir&gt;</code></td>\n<td><code>ls &lt;dir&gt;</code></td>\n<td>列出给定目录中的文件</td>\n</tr>\n<tr>\n<td><code>ls pattern*</code></td>\n<td><code>ls pattern*</code></td>\n<td>列出匹配给定模式的文件</td>\n</tr>\n<tr>\n<td><code>ls -la</code></td>\n<td><code>ls --long --all</code> or <code>ls -la</code></td>\n<td>列出包含所有可用信息的文件，包括隐藏文件</td>\n</tr>\n<tr>\n<td><code>ls -d */</code></td>\n<td><code>ls | where type == dir</code></td>\n<td>列出目录</td>\n</tr>\n<tr>\n<td><code>find . -name *.rs</code></td>\n<td><code>ls **/*.rs</code></td>\n<td>递归地查找匹配给定模式的所有文件</td>\n</tr>\n<tr>\n<td><code>find . -name Makefile | xargs vim</code></td>\n<td><code>ls \\*\\*/Makefile | get name | vim $in</code></td>\n<td>将值作为命令参数传递</td>\n</tr>\n<tr>\n<td><code>cd &lt;directory&gt;</code></td>\n<td><code>cd &lt;directory&gt;</code></td>\n<td>切换到给定目录</td>\n</tr>\n<tr>\n<td><code>cd</code></td>\n<td><code>cd</code></td>\n<td>切换到用户主目录</td>\n</tr>\n<tr>\n<td><code>cd -</code></td>\n<td><code>cd -</code></td>\n<td>切换到前一个目录</td>\n</tr>\n<tr>\n<td><code>mkdir &lt;path&gt;</code></td>\n<td><code>mkdir &lt;path&gt;</code></td>\n<td>创建给定的路径</td>\n</tr>\n<tr>\n<td><code>mkdir -p &lt;path&gt;</code></td>\n<td><code>mkdir &lt;path&gt;</code></td>\n<td>创建给定的路径，如果父目录不存在则自动创建</td>\n</tr>\n<tr>\n<td><code>touch test.txt</code></td>\n<td><code>touch test.txt</code></td>\n<td>新建文件</td>\n</tr>\n<tr>\n<td><code>&gt; &lt;path&gt;</code></td>\n<td><code>| save --raw &lt;path&gt;</code></td>\n<td>保存字符串到给定文件</td>\n</tr>\n<tr>\n<td><code>&gt;&gt; &lt;path&gt;</code></td>\n<td><code>| save --raw --append &lt;path&gt;</code></td>\n<td>追加字符串到给定文件</td>\n</tr>\n<tr>\n<td><code>cat &lt;path&gt;</code></td>\n<td><code>open --raw &lt;path&gt;</code></td>\n<td>显示给定文件的内容</td>\n</tr>\n<tr>\n<td></td>\n<td><code>open &lt;path&gt;</code></td>\n<td>将文件作为结构化数据读取</td>\n</tr>\n<tr>\n<td><code>mv &lt;source&gt; &lt;dest&gt;</code></td>\n<td><code>mv &lt;source&gt; &lt;dest&gt;</code></td>\n<td>移动文件到新的位置</td>\n</tr>\n<tr>\n<td><code>cp &lt;source&gt; &lt;dest&gt;</code></td>\n<td><code>cp &lt;source&gt; &lt;dest&gt;</code></td>\n<td>复制文件到新的位置</td>\n</tr>\n<tr>\n<td><code>cp -r &lt;source&gt; &lt;dest&gt;</code></td>\n<td><code>cp -r &lt;source&gt; &lt;dest&gt;</code></td>\n<td>递归地将目录复制到一个新的位置</td>\n</tr>\n<tr>\n<td><code>rm &lt;path&gt;</code></td>\n<td><code>rm &lt;path&gt;</code></td>\n<td>删除给定的文件</td>\n</tr>\n<tr>\n<td></td>\n<td><code>rm -t &lt;path&gt;</code></td>\n<td>将给定的文件移到系统垃圾箱</td>\n</tr>\n<tr>\n<td><code>rm -rf &lt;path&gt;</code></td>\n<td><code>rm -r &lt;path&gt;</code></td>\n<td>递归地删除给定的路径</td>\n</tr>\n<tr>\n<td><code>chmod</code></td>\n<td><code>&lt;not yet possible&gt;</code></td>\n<td>改变文件属性</td>\n</tr>\n<tr>\n<td><code>date -d &lt;date&gt;</code></td>\n<td><code>&quot;&lt;date&gt;&quot; | into datetime -f &lt;format&gt;</code></td>\n<td>解析日期 (<a href=\"https://docs.rs/chrono/0.4.15/chrono/format/strftime/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">日期格式文档</a>)</td>\n</tr>\n<tr>\n<td><code>sed</code></td>\n<td><code>str find-replace</code></td>\n<td>查找和替换一个字符串中的模式</td>\n</tr>\n<tr>\n<td><code>grep &lt;pattern&gt;</code></td>\n<td><code>where $it =~ &lt;substring&gt;</code> or <code>find &lt;substring&gt;</code></td>\n<td>过滤包含特定字符串的字符串</td>\n</tr>\n<tr>\n<td><code>man &lt;command&gt;</code></td>\n<td><code>help &lt;command&gt;</code></td>\n<td>获得特定命令的帮助信息</td>\n</tr>\n<tr>\n<td></td>\n<td><code>help commands</code></td>\n<td>列出所有可用的命令</td>\n</tr>\n<tr>\n<td></td>\n<td><code>help --find &lt;string&gt;</code></td>\n<td>在所有可用的命令中搜索</td>\n</tr>\n<tr>\n<td><code>command1 &amp;&amp; command2</code></td>\n<td><code>command1; command2</code></td>\n<td>运行一条命令，如果成功的话，再运行第二条</td>\n</tr>\n<tr>\n<td><code>stat $(which git)</code></td>\n<td><code>stat (which git).path</code></td>\n<td>使用命令输出作为其他命令的参数</td>\n</tr>\n<tr>\n<td><code>echo $PATH</code></td>\n<td><code>echo $env.PATH</code></td>\n<td>查看当前路径</td>\n</tr>\n<tr>\n<td><code>&lt;update ~/.bashrc&gt;</code></td>\n<td><code>vim $nu.config-path</code></td>\n<td>永久地更新 PATH</td>\n</tr>\n<tr>\n<td><code>export PATH = $PATH:/usr/other/bin</code></td>\n<td><code>let-env PATH = ($env.PATH | append /usr/other/bin)</code></td>\n<td>临时更新 PATH</td>\n</tr>\n<tr>\n<td><code>export</code></td>\n<td><code>echo $env</code></td>\n<td>列出当前的环境变量</td>\n</tr>\n<tr>\n<td><code>&lt;update ~/.bashrc&gt;</code></td>\n<td><code>vim $nu.config-path</code></td>\n<td>永久地更新环境变量</td>\n</tr>\n<tr>\n<td><code>FOO=BAR ./bin</code></td>\n<td><code>FOO=BAR ./bin</code></td>\n<td>临时修改环境变量</td>\n</tr>\n<tr>\n<td><code>export FOO=BAR</code></td>\n<td><code>let-env FOO = BAR</code></td>\n<td>为当前会话设置环境变量</td>\n</tr>\n<tr>\n<td><code>echo $FOO</code></td>\n<td><code>echo $env.FOO</code></td>\n<td>使用环境变量</td>\n</tr>\n<tr>\n<td><code>unset FOO</code></td>\n<td><code>hide FOO</code></td>\n<td>取消对当前会话的环境变量设置</td>\n</tr>\n<tr>\n<td><code>alias s=&quot;git status -sb&quot;</code></td>\n<td><code>alias s = git status -sb</code></td>\n<td>临时定义一个别名</td>\n</tr>\n<tr>\n<td><code>type FOO</code></td>\n<td><code>which FOO</code></td>\n<td>显示一个命令的信息（内置、别名或可执行）</td>\n</tr>\n<tr>\n<td><code>&lt;update ~/.bashrc&gt;</code></td>\n<td><code>vim $nu.config-path</code></td>\n<td>永久添加和编辑别名（新开Shell会话生效）</td>\n</tr>\n<tr>\n<td><code>bash -c &lt;commands&gt;</code></td>\n<td><code>nu -c &lt;commands&gt;</code></td>\n<td>运行一组命令（需要0.9.1或更高版本）</td>\n</tr>\n<tr>\n<td><code>bash &lt;script file&gt;</code></td>\n<td><code>nu &lt;script file&gt;</code></td>\n<td>运行一个脚本文件（需要0.9.1或更高版本）</td>\n</tr>\n<tr>\n<td><code>\\</code></td>\n<td><code>(</code> followed by <code>)</code></td>\n<td>目前还不支持换行延续性</td>\n</tr>\n</tbody>\n</table>\n",
      "date_modified": "2022-06-03T06:25:20.478Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "命令索引",
      "url": "www.nushell.sh/zh-CN/book/command_reference.html",
      "id": "www.nushell.sh/zh-CN/book/command_reference.html",
      "content_html": "<h1 id=\"命令索引\" tabindex=\"-1\"> 命令索引</h1>\n<p>若要查看所有 Nushell 命令, 可以执行 <a href=\"/book/commands/help.html\"><code>help commands</code></a>。</p>\n<p>译注：本页内容由于是从源码生成的暂不支持国际化，大家还是先看英文版的凑合下吧。</p>\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n  <tr v-for=\"command in commands\">\n   <td><a :href=\"command.path\"><code>{{ command.title }}</code></a></td>\n   <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n  </tr>\n</table>\n",
      "date_modified": "2022-06-03T06:25:20.478Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "配置",
      "url": "www.nushell.sh/zh-CN/book/configuration.html",
      "id": "www.nushell.sh/zh-CN/book/configuration.html",
      "content_html": "<h1 id=\"配置\" tabindex=\"-1\"> 配置</h1>\n<h2 id=\"nushell-配置与env-nu和config-nu\" tabindex=\"-1\"> Nushell 配置与<code>env.nu</code>和<code>config.nu</code></h2>\n<p>Nushell 使用一个配置系统，在启动时加载并运行两个 Nushell 脚本文件：\n首先是<code>env.nu</code>，然后是<code>config.nu</code>。\n这些文件的路径可以通过调用<code>echo $nu.env-path</code>和<code>echo $nu.config-path</code>找到。\n<code>env.nu</code>是用来定义环境变量的，之后这些环境变量定义将在<code>config.nu</code>中可用；\n<code>config.nu</code>可以用来在全局命名空间中添加定义、别名等等。</p>\n<p><em>(你可以把 Nushell 的配置加载顺序想象成在启动时执行两行 <a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\" rel=\"noopener noreferrer\">REPL</a>：<code>source /path/to/env.nu</code>和<code>source /path/to/config.nu</code>。因此，用<code>env.nu</code>表示环境，用<code>config.nu</code>表示其他配置只是一个约定。)</em></p>\n<p>当你在没有设置这些文件的情况下启动 Nushell，Nushell 会提示你下载<a href=\"https://github.com/nushell/nushell/blob/main/docs/sample_config/default_env.nu\" target=\"_blank\" rel=\"noopener noreferrer\"><code>default env.nu</code></a>和<a href=\"https://github.com/nushell/nushell/blob/main/docs/sample_config/default_config.nu\" target=\"_blank\" rel=\"noopener noreferrer\"><code>default config.nu</code></a>。\n你可以通过浏览这些默认文件，了解环境变量的默认值和所有可配置项的列表。</p>\n<h3 id=\"配置-env-config\" tabindex=\"-1\"> 配置 <code>$env.config</code></h3>\n<p>Nushell 的主要设置是以记录的形式保存在 <code>config</code> 环境变量中。这个记录可以用以下方式创建：</p>\n<div><pre><code>let-env <span>$config</span> <span>=</span> <span>{</span>\n  <span>..</span>.\n<span>}</span>\n</code></pre></div><p>你也可以隐藏(shadow)<code>$env.config</code>并更新它：</p>\n<div><pre><code>let-env <span>$config</span> <span>=</span> <span>(</span><span>$env</span>.config <span>|</span> upsert <span>&lt;</span>field name<span>></span> <span>&lt;</span>field value<span>></span><span>)</span>\n</code></pre></div><p>按照约定，这个变量被定义在<code>config.nu</code>文件中。</p>\n<h3 id=\"环境\" tabindex=\"-1\"> 环境</h3>\n<p>你可以在 Nushell 会话期间使用<a href=\"/book/commands/let-env.html\"><code>let-env</code></a>在<code>env.nu</code>文件中设置环境变量。比如：</p>\n<div><pre><code>let-env FOO <span>=</span> <span>'BAR'</span>\n</code></pre></div><p><em>(尽管 <code>$env.config</code> 是一个环境变量，按照惯例它仍然在 <code>config.nu</code> 中定义。)</em></p>\n<p>以下是值得关注的且为 Nushell 所特有的几个相对重要的环境变量：</p>\n<ul>\n<li><code>LS_COLORS</code>: 在<code>ls</code>中为每个文件类型设置颜色</li>\n<li><code>PROMPT_COMMAND</code>: 为设置提示而执行的代码（块或字符串）</li>\n<li><code>PROMPT_COMMAND_RIGHT</code>: 为设置正确的提示而执行的代码（块）</li>\n<li><code>PROMPT_INDICATOR = &quot;〉&quot;</code>: 提示后打印的提示符（默认为 &quot;&gt;&quot; 类似的 Unicode 符号）</li>\n<li><code>PROMPT_INDICATOR_VI_INSERT = &quot;: &quot;</code></li>\n<li><code>PROMPT_INDICATOR_VI_NORMAL = &quot;〉 &quot;</code></li>\n<li><code>PROMPT_MULTILINE_INDICATOR = &quot;::: &quot;</code></li>\n</ul>\n<h3 id=\"颜色配置部分\" tabindex=\"-1\"> 颜色配置部分</h3>\n<p>你可以在 <a href=\"/zh-CN/book/coloring_and_theming.html\">相关章节</a> 中了解更多关于设置颜色和主题的信息。</p>\n<h2 id=\"将-nu-配置为登录-shell\" tabindex=\"-1\"> 将 Nu 配置为登录 Shell</h2>\n<p>要把 Nu 作为一个登录 Shell，你需要配置<code>$env</code>变量。这样，在你将使用 Nu 为登录 Shell 时才有足够的支持来运行外部命令。</p>\n<p>你可以通过在另一个 Shell（如 Bash）中运行 Nu 来建立完整的环境变量集。一旦你进入 Nu，你可以运行这样的命令：</p>\n<div><pre><code><span>></span> <span>env</span> <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> <span>echo</span> $<span>\"let-env (<span>$it</span>.name) = '(<span>$it</span>.raw)'\"</span> <span>}</span> <span>|</span> str collect <span>(</span>char <span>nl</span><span>)</span>\n</code></pre></div><p>这将打印出<a href=\"/book/commands/let-env.html\"><code>let-env</code></a>所有行，且包含每个环境变量及其设置。</p>\n<p>接下来，在一些发行版上，你还需要确保 Nu 在<code>/etc/shells</code>列表中：</p>\n<div><pre><code><span>></span> <span>cat</span> /etc/shells\n<span># /etc/shells: valid login shells</span>\n/bin/sh\n/bin/dash\n/bin/bash\n/bin/rbash\n/usr/bin/screen\n/usr/bin/fish\n/home/jonathan/.cargo/bin/nu\n</code></pre></div><p>这样你就可以使用<code>chsh</code>命令来将 Nu 设置为你的登录 Shell。在你注销后下次登录时，应该可以看到一个闪亮的 Nu 提示。</p>\n<h3 id=\"macos-保持-open-为-usr-bin-open\" tabindex=\"-1\"> macOS: 保持 <code>open</code> 为 <code>/usr/bin/open</code></h3>\n<p>一些工具（例如 Emacs）依靠<code>open</code>命令来打开 Mac 上的文件。\n由于 Nushell 有自己的<a href=\"/book/commands/open.html\"><code>open</code></a>命令，它有不同的语义并隐藏了<code>/usr/bin/open</code>，这样某些工具在试图使用它时将出错。\n一个解决这个问题的方法是为 Nushell 的<code>open</code>定义一个自定义命令，并在你的<code>config.nu</code>文件中为系统的<code>open</code>创建一个别名，像这样：</p>\n<div><pre><code>def nuopen <span>[</span>arg, --raw <span>(</span>-r<span>)</span><span>]</span> <span>{</span> <span>if</span> <span>$raw</span> <span>{</span> <span>open</span> -r <span>$arg</span> <span>}</span> <span>else</span> <span>{</span> <span>open</span> <span>$arg</span> <span>}</span> <span>}</span>\n<span>alias</span> <span>open</span> <span>=</span> ^open\n</code></pre></div><h2 id=\"path-配置\" tabindex=\"-1\"> <code>PATH</code> 配置</h2>\n<p>要在 <a href=\"https://en.wikipedia.org/wiki/PATH_(variable)\" target=\"_blank\" rel=\"noopener noreferrer\">PATH 变量</a> 中添加一个路径，你可以在<code>env.nu</code>中使用 <a href=\"/book/commands/let-env.html\"><code>let-env</code></a> 和 <a href=\"/book/commands/append.html\"><code>append</code></a> 完成，如下：</p>\n<div><pre><code>let-env <span>PATH</span> <span>=</span> <span>(</span><span>$env</span><span>.</span><span>PATH</span> <span>|</span> append <span>'/some/path'</span><span>)</span>\n</code></pre></div><p>这将把<code>/some/path</code>追加到<code>PATH</code>的末尾；你也可以使用 <a href=\"/book/commands/prepend.html\"><code>prepend</code></a> 将该路径添加到<code>PATH</code>的开头。</p>\n",
      "date_modified": "2022-06-03T06:25:20.478Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "创建你自己的错误",
      "url": "www.nushell.sh/zh-CN/book/creating_errors.html",
      "id": "www.nushell.sh/zh-CN/book/creating_errors.html",
      "content_html": "<h1 id=\"创建你自己的错误\" tabindex=\"-1\"> 创建你自己的错误</h1>\n<p>使用 <a href=\"/zh-CN/book/metadata.html\">元数据</a> 信息，你可以创建自己的自定义错误，错误信息由多个部分构成：</p>\n<ul>\n<li>错误的标题</li>\n<li>错误信息的标签，其中包括标签的文本和要标注下划线的范围</li>\n</ul>\n<p>你可以使用<code>error make</code>命令来创建你自己的错误信息。例如，假设你有自己的名为<code>my-command</code>的命令，你想给调用者一个错误信息，说明传入的一个参数有问题。</p>\n<p>首先，你可以从参数的来源中获取标注范围：</p>\n<div><pre><code><span>let</span> span <span>=</span> <span>(</span>metadata <span>$x</span><span>)</span>.span<span>;</span>\n</code></pre></div><p>接下来你可以通过 <code>error make</code> 命令来创建一个错误，该命令需要一个可以描述待创建错误的记录作为输入：</p>\n<div><pre><code>error <span>make</span> <span>{</span>msg: <span>\"this is fishy\"</span>, label: <span>{</span>text: <span>\"fish right here\"</span>, start: <span>$span</span>.start, end: <span>$span</span>.end <span>}</span> <span>}</span>\n</code></pre></div><p>与你的自定义命令放在一起后，它可能看起来像这样：</p>\n<div><pre><code>def my-command <span>[</span>x<span>]</span> <span>{</span>\n    <span>let</span> span <span>=</span> <span>(</span>metadata <span>$x</span><span>)</span>.span<span>;</span>\n    error <span>make</span> <span>{</span>\n        msg: <span>\"this is fishy\"</span>,\n        label: <span>{</span>\n            text: <span>\"fish right here\"</span>,\n            start: <span>$span</span>.start,\n            end: <span>$span</span>.end\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre></div><p>现在当传入一个值调用时，我们会看到一个错误信息返回：</p>\n<div><pre><code><span>></span> my-command <span>100</span>\n\nError:\n  × this is fishy\n   ╭─<span>[</span>entry <span>#5:1:1]</span>\n <span>1</span> │ my-command <span>100</span>\n   ·            ─┬─\n   ·             ╰── fish right here\n   ╰────\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.478Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "自定义命令",
      "url": "www.nushell.sh/zh-CN/book/custom_commands.html",
      "id": "www.nushell.sh/zh-CN/book/custom_commands.html",
      "content_html": "<h1 id=\"自定义命令\" tabindex=\"-1\"> 自定义命令</h1>\n<p>Nu 具备组合长管道的能力使你对数据和系统有很强的控制力，但它的代价是需要大量的键盘输入。不过理想情况下，你可以保存精心设计的管道以便反复使用。</p>\n<p>这就是自定义命令(Custom Commands)的作用。</p>\n<p>下面看一个自定义命令的例子：</p>\n<div><pre><code>def greet <span>[</span>name<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello\"</span> <span>$name</span>\n<span>}</span>\n</code></pre></div><p>在这个定义中，我们定义了<code>greet</code>命令，它需要一个参数<code>name</code>。在这个参数后面是自定义命令运行时将执行的代码块。当被调用时，自定义命令将把传递给<code>name</code>的值设置为<code>$name</code>变量，该变量在块内是可用的。</p>\n<p>要运行上述命令，我们可以像调用内置命令一样调用它：</p>\n<div><pre><code><span>></span> greet <span>\"world\"</span>\n</code></pre></div><p>当我们这样做的时候，就会得到输出，如同我们使用内置命令一样：</p>\n<div><pre><code>───┬───────\n 0 │ hello\n 1 │ world\n───┴───────\n</code></pre></div><div><p>TIP</p>\n<p><code>echo</code>将其参数分别返回给管道。如果你想用它来生成一个单一的字符串，请在管道中添加<code> | str collect</code>：</p>\n<div><pre><code>def greet <span>[</span>name<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello \"</span> <span>$name</span> <span>|</span> str collect\n<span>}</span>\n\ngreet nushell\n</code></pre></div><p>返回 <code>hello nushell</code></p>\n</div>\n<h2 id=\"命令名称\" tabindex=\"-1\"> 命令名称</h2>\n<p>在 Nushell 中，命令名是一串字符或一个带引号的字符串。下面是一些有效命令名的例子：<code>greet</code>, <code>get-size</code>, <code>mycommand123</code>, <code>&quot;mycommand&quot;</code>, <code>😊</code>, 和<code>123</code>。</p>\n<p><em>注意：在 Nushell 中，通常的做法是用<code>-</code>来分隔命令的多个单词，以提高可读性。</em> 例如，使用 <code>get-size</code> 而不是 <code>getsize</code> 或者 <code>get_size</code>。</p>\n<h2 id=\"子命令\" tabindex=\"-1\"> 子命令</h2>\n<p>你也可以使用空格来定义命令的子命令(Subcommand)。例如，如果我们想给<code>str</code>添加一个新的子命令，可以通过命名我们的子命令以 &quot;str&quot; 开头来做到。比如：</p>\n<div><pre><code>def <span>\"str mycommand\"</span> <span>[</span><span>]</span> <span>{</span>\n  <span>echo</span> hello\n<span>}</span>\n</code></pre></div><p>现在我们可以像调用<code>str</code>的内置子命令一样调用我们的自定义命令：</p>\n<div><pre><code><span>></span> str mycommand\n</code></pre></div><h2 id=\"参数类型\" tabindex=\"-1\"> 参数类型</h2>\n<p>在定义自定义命令时，你可以为每个参数命名并选择性地设置其类型。例如，你可以把上面的内容写成：</p>\n<div><pre><code>def greet <span>[</span>name: string<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello \"</span> <span>$name</span> <span>|</span> str collect\n<span>}</span>\n</code></pre></div><p>参数的类型是可选的。Nushell 支持不添加类型，此时会把参数类型当作<code>any</code>。如果你在参数上标注了一个类型，Nushell 将在你调用函数的时候检查该类型。</p>\n<p>例如，假设你需要输入一个<code>int</code>类型：</p>\n<div><pre><code>def greet <span>[</span>name: int<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello \"</span> <span>$name</span> <span>|</span> str collect\n<span>}</span>\n\ngreet world\n</code></pre></div><p>如果我们尝试运行上述内容，Nushell 会告诉我们，类型不匹配：</p>\n<div><pre><code>error: Type Error\n  ┌─ shell:6:7\n  │\n5 │ greet world\n  │       ^^^^^ Expected int, found world\n</code></pre></div><p>这可以帮助指导你的用户只使用支持的类型来调用你所定义的命令。</p>\n<p>目前可以支持的类型是（从 0.59.0 版本开始）：</p>\n<ul>\n<li><code>any</code></li>\n<li><code>block</code></li>\n<li><code>cell-path</code></li>\n<li><code>duration</code></li>\n<li><code>path</code></li>\n<li><code>expr</code></li>\n<li><code>filesize</code></li>\n<li><code>glob</code></li>\n<li><code>int</code></li>\n<li><code>math</code></li>\n<li><code>number</code></li>\n<li><code>operator</code></li>\n<li><code>range</code></li>\n<li><code>cond</code></li>\n<li><code>bool</code></li>\n<li><code>signature</code></li>\n<li><code>string</code></li>\n<li><code>variable</code></li>\n</ul>\n<h2 id=\"具有默认值的参数\" tabindex=\"-1\"> 具有默认值的参数</h2>\n<p>若要使一个参数成为可选的，并具有默认值，你可以在命令定义中指定该默认值：</p>\n<div><pre><code>def greet <span>[</span>name <span>=</span> <span>\"nushell\"</span><span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello \"</span> <span>$name</span> <span>|</span> str collect\n<span>}</span>\n</code></pre></div><p>你可以在没有参数的情况下调用这个命令，也可以指定一个值来覆盖默认值：</p>\n<div><pre><code>> greet\nhello nushell\n> greet world\nhello world\n</code></pre></div><p>你也可以将默认值与相结合：</p>\n<div><pre><code>def congratulate [age: int = 18] {\n  echo \"Happy birthday! Wow you are \" $age \" years old now!\" | str collect\n}\n</code></pre></div><p>如果你想检查一个可选参数是否存在，而不是仅仅依赖一个默认值，请使用代替。</p>\n<h2 id=\"可选位置参数\" tabindex=\"-1\"> 可选位置参数</h2>\n<p>默认情况下，位置参数(Positional Parameters)是必须的。如果没有传递位置参数，我们将遇到一个报错：</p>\n<div><pre><code>  × Missing required positional argument.\n   ╭─[entry #23:1:1]\n 1 │ greet\n   ·      ▲\n   ·      ╰── missing name\n   ╰────\n  help: Usage: greet &lt;name>\n</code></pre></div><p>我们可以在一个位置参数的名字后面加上一个问号（<code>?</code>），将其标记为可选参数。比如：</p>\n<div><pre><code>def greet <span>[</span>name?: string<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello\"</span> <span>$name</span> <span>|</span> str collect\n<span>}</span>\n\ngreet\n</code></pre></div><p>使一个位置参数成为可选参数并不改变它在命令体中被访问的名称。如上例所示，尽管参数列表中有<code>?</code>的后缀，但它仍然以<code>$name</code>的形式被访问。</p>\n<p>当一个可选参数没有被传递，它在命令体中的值等于<code>null</code>和<code>$nothing</code>。我们可以利用这一点来对没有传递参数的情况进行处理：</p>\n<div><pre><code>def greet <span>[</span>name?: string<span>]</span> <span>{</span>\n  <span>if</span> <span>(</span><span>$name</span> <span>==</span> null<span>)</span> <span>{</span>\n    <span>echo</span> <span>\"hello, I don't know your name!\"</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>echo</span> <span>\"hello \"</span> <span>$name</span> <span>|</span> str collect\n  <span>}</span>\n<span>}</span>\n\ngreet\n</code></pre></div><p>如果你只是想在参数缺失时设置一个默认值，那么使用来代替就更简单了。</p>\n<p>如果必需的和可选的位置参数一起使用，那么必需的参数必须先出现在定义中。</p>\n<h2 id=\"标志\" tabindex=\"-1\"> 标志</h2>\n<p>除了传递位置参数之外, 你还可以通过为自定义命令定义标志(Flags)来传递命名参数。</p>\n<p>比如：</p>\n<div><pre><code>def greet <span>[</span>\n  name: string\n  --age: int\n<span>]</span> <span>{</span>\n  <span>echo</span> <span>$name</span> <span>$age</span>\n<span>}</span>\n</code></pre></div><p>在上面的<code>greet</code>定义中，我们定义了<code>name</code>位置参数以及<code>age</code>标志。这允许<code>greet</code>的调用者也可以选择传递<code>age</code>参数。</p>\n<p>你可以用以下方法调用上述内容：</p>\n<div><pre><code><span>></span> greet world --age <span>10</span>\n</code></pre></div><p>或者：</p>\n<div><pre><code><span>></span> greet --age <span>10</span> world\n</code></pre></div><p>或者甚至完全不使用标志：</p>\n<div><pre><code>> greet world\n</code></pre></div><p>标志也可以指定一个缩写版本，这允许你传递一个更简单的标志，如同传递一个更容易阅读的全写标志那样。</p>\n<p>让我们扩展前面的例子，为<code>age</code>添加一个缩写标志：</p>\n<div><pre><code>def greet <span>[</span>\n  name: string\n  --age <span>(</span>-a<span>)</span>: int\n<span>]</span> <span>{</span>\n  <span>echo</span> <span>$name</span> <span>$age</span>\n<span>}</span>\n</code></pre></div><p><em>注意：</em> 标志是以其全称命名的，所以上面的例子的命令体内需要使用<code>$age</code>而不是<code>$a</code>。</p>\n<p>现在，我们可以使用缩写标志来调用这个新的定义：</p>\n<div><pre><code>> greet -a 10 hello\n</code></pre></div><h2 id=\"剩余参数\" tabindex=\"-1\"> 剩余参数</h2>\n<p>在某些情况下, 你可能想定义一个需要任意数量的位置参数的命令。我们可以用一个剩余参数(Rest Parameter)来实现这一点，通过下面的<code>...</code>语法：</p>\n<div><pre><code>def greet <span>[</span><span>..</span>.name: string<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello all:\"</span>\n  <span>for</span> <span>$n</span> <span>in</span> <span>$name</span> <span>{</span>\n    <span>echo</span> <span>$n</span>\n  <span>}</span>\n<span>}</span>\n\ngreet earth mars jupiter venus\n</code></pre></div><p>我们可以使用任意数量的参数来调用上述<code>greet</code>命令的定义，包括完全没有参数，所有的参数都将被收集到<code>$name</code>列表中。</p>\n<p>剩余参数可以和位置参数一起使用：</p>\n<div><pre><code>def greet <span>[</span>vip: string, <span>..</span>.name: string<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello to our VIP \"</span> <span>$vip</span> <span>|</span> str collect\n  <span>echo</span> <span>\"and hello to everybody else:\"</span>\n  <span>for</span> <span>$n</span> <span>in</span> <span>$name</span> <span>{</span>\n    <span>echo</span> <span>$n</span>\n  <span>}</span>\n<span>}</span>\n\n<span>#     $vip          $name</span>\n<span>#     ---- ------------------------</span>\ngreet moon earth mars jupiter venus\n</code></pre></div><h2 id=\"为命令添加文档\" tabindex=\"-1\"> 为命令添加文档</h2>\n<p>为了更好地帮助用户使用你的自定义命令，也可以为其添加额外的命令和参数描述。</p>\n<p>以我们之前的例子为例：</p>\n<div><pre><code>def greet <span>[</span>\n  name: string\n  --age <span>(</span>-a<span>)</span>: int\n<span>]</span> <span>{</span>\n  <span>echo</span> <span>$name</span> <span>$age</span>\n<span>}</span>\n</code></pre></div><p>一旦定义完毕，我们可以运行<code>help greet</code>来获得该命令的帮助信息：</p>\n<div><pre><code>Usage:\n  > greet &lt;name> {flags}\n\nParameters:\n  &lt;name>\n\nFlags:\n  -h, --help: Display this help message\n  -a, --age &lt;integer>\n</code></pre></div><p>你可以看到我们定义的参数和标志，以及所有命令都会得到的<code>-h</code>帮助标志。</p>\n<p>为了改进这个帮助，我们可以在定义中加入描述，这些描述将在帮助中显示出来：</p>\n<div><pre><code><span># A greeting command that can greet the caller</span>\ndef greet <span>[</span>\n  name: string      <span># The name of the person to greet</span>\n  --age <span>(</span>-a<span>)</span>: int   <span># The age of the person</span>\n<span>]</span> <span>{</span>\n  <span>echo</span> <span>$name</span> <span>$age</span>\n<span>}</span>\n</code></pre></div><p>我们给定义和参数添加的注释会作为描述出现在命令的<code>help</code>中。</p>\n<p>现在，如果我们运行<code>help greet</code>，就会得到一些更友好的帮助文本：</p>\n<div><pre><code>A greeting command that can greet the caller\n\nUsage:\n  > greet &lt;name> {flags}\n\nParameters:\n  &lt;name> The name of the person to greet\n\nFlags:\n  -h, --help: Display this help message\n  -a, --age &lt;integer>: The age of the person\n</code></pre></div><h2 id=\"管道输出\" tabindex=\"-1\"> 管道输出</h2>\n<p>自定义命令会像内置命令一样流式输出。例如，假设我们想重构这个管道：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> get name\n</code></pre></div><p>让我们把<a href=\"/book/commands/ls.html\"><code>ls</code></a>移到我们编写的命令中：</p>\n<div><pre><code>def my-ls <span>[</span><span>]</span> <span>{</span> <span>ls</span> <span>}</span>\n</code></pre></div><p>我们就可以像使用<a href=\"/book/commands/ls.html\"><code>ls</code></a>一样使用这个命令的输出：</p>\n<div><pre><code>> my-ls | get name\n───┬───────────────────────\n 0 │ myscript.nu\n 1 │ myscript2.nu\n 2 │ welcome_to_nushell.md\n───┴───────────────────────\n</code></pre></div><p>这让我们可以很容易地创建自定义命令并处理它们的输出。注意，我们不像其他语言那样使用返回语句，取而代之的是我们创建管道，而其输出数据流可以连接到其他管道。</p>\n<h2 id=\"管道输入\" tabindex=\"-1\"> 管道输入</h2>\n<p>如同其他命令一样，自定义命令也可以从管道中获取输入，这个输入会自动传递给自定义命令所使用的代码块。</p>\n<p>让我们创建一个把所有接收值都加倍的命令：</p>\n<div><pre><code>def double <span>[</span><span>]</span> <span>{</span>\n  each <span>{</span> <span>|</span>it<span>|</span> <span>2</span> * <span>$it</span> <span>}</span>\n<span>}</span>\n</code></pre></div><p>现在，如果我们在一个管道中调用上述命令，就可以看到它对输入的处理结果：</p>\n<div><pre><code>> [1 2 3] | double\n───┬─────\n 0 │ 2\n 1 │ 4\n 2 │ 6\n───┴─────\n</code></pre></div><p>我们还可以使用<code>$in</code>变量来存储输入，以便在后面使用：</p>\n<div><pre><code>def nullify <span>[</span><span>..</span>.cols<span>]</span> <span>{</span>\n  <span>let</span> start <span>=</span> <span>$in</span>\n  <span>$cols</span> <span>|</span> reduce --fold <span>$start</span> <span>{</span> <span>|</span>col, <span>df</span><span>|</span>\n    <span>$df</span> <span>|</span> upsert <span>$col</span> null\n  <span>}</span>\n<span>}</span>\n</code></pre></div><h2 id=\"持久化\" tabindex=\"-1\"> 持久化</h2>\n<p>关于如何持久化自定义命令，以便在你启动 Nushell 时它们是可用的，请参阅 <a href=\"/zh-CN/book/configuration.html\">配置</a> 部分并添加你的启动脚本。</p>\n",
      "date_modified": "2022-06-03T06:25:20.479Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "自定义补全",
      "url": "www.nushell.sh/zh-CN/book/custom_completions.html",
      "id": "www.nushell.sh/zh-CN/book/custom_completions.html",
      "content_html": "<h1 id=\"自定义补全\" tabindex=\"-1\"> 自定义补全</h1>\n<p>自定义补全允许你混合使用 Nushell 的两个功能：自定义命令和补全。有了它们，你就能够创建支持对位置参数和标志(Flags)参数进行自动补全的命令。这些自定义补全既适用于自定义命令，也适用于 <a href=\"/zh-CN/book/externs.html\">已知的外部或<code>extern</code>命令</a>。</p>\n<p>自定义命令有两个部分：处理补全的命令和使用<code>@</code>将此命令附加到另一个命令的类型中。</p>\n<h2 id=\"自定义补全例子\" tabindex=\"-1\"> 自定义补全例子</h2>\n<p>我们来看一个例子：</p>\n<div><pre><code><span>></span> def animals <span>[</span><span>]</span> <span>{</span> <span>[</span><span>\"cat\"</span>, <span>\"dog\"</span>, <span>\"eel\"</span> <span>]</span> <span>}</span>\n<span>></span> def my-command <span>[</span>animal: string@animals<span>]</span> <span>{</span> print <span>$animal</span> <span>}</span>\n<span>>|</span> my-command\n<span>cat</span>                 dog                 eel\n</code></pre></div><p>在第一行中，我们创建了一个自定义命令，将返回三个不同动物的列表。这些是我们想在补全中使用的值。一旦我们创建了这个命令，我们就可以用它来为其他自定义命令和 <code>extern</code> 提供补全。</p>\n<p>在第二行，我们使用<code>string@animals</code>。这告诉了 Nushell 两件事：用于类型检查的参数的形状，以及如果用户想在该位置补全输入值，需要使用的自定义完成。</p>\n<p>在第三行，我们输入我们的自定义命令的名称<code>my-command</code>，然后输入空格，再输入<code>&lt;tab&gt;</code>键，就可以触发我们的自动补全功能。自定义补全的工作方式与系统中的其他补全方式相同，比如允许你输入<code>e</code>，然后按<code>&lt;tab&gt;</code>键，得到 &quot;eel&quot; 自动补全。</p>\n<h2 id=\"模块和自定义补全\" tabindex=\"-1\"> 模块和自定义补全</h2>\n<p>你可能更喜欢让你的自定义补全远离你的代码的公共 API。为此，你可以将模块和自定义补全结合起来。</p>\n<p>让我们把上面的例子放在一个模块中：</p>\n<div><pre><code>module commands <span>{</span>\n    def animals <span>[</span><span>]</span> <span>{</span>\n        <span>[</span><span>\"cat\"</span>, <span>\"dog\"</span>, <span>\"eel\"</span> <span>]</span>\n    <span>}</span>\n\n    <span>export</span> def my-command <span>[</span>animal: string@animals<span>]</span> <span>{</span>\n        print <span>$animal</span>\n    <span>}</span>\n<span>}</span>\n</code></pre></div><p>在我们的模块中，我们选择只导出自定义命令<code>my-command</code>，而不导出自定义补全<code>animals</code>。这使得本模块的用户可以调用命令，甚至使用自定义补全逻辑，而不需要访问自定义补全。这样可以让 API 更干净，同时仍然提供所有相同的好处。</p>\n<p>这是可能的，因为使用<code>@</code>的自定义补全标签在命令第一次被解析时就被锁定了。</p>\n<h2 id=\"自定义补全和-extern\" tabindex=\"-1\"> 自定义补全和 <code>extern</code></h2>\n<p>一个强大的组合是为 <a href=\"/zh-CN/book/externs.html\">已知的<code>extern</code>命令</a> 添加自定义补全。这些工作方式与向自定义命令添加自定义补全的方式相同：创建自定义补全，然后用<code>@</code>附加到 <code>extern</code> 的一个位置参数或标志参数的类型中。</p>\n<p>如果你仔细看一下默认配置中的例子，你会看到这个：</p>\n<div><pre><code><span>export</span> extern <span>\"git push\"</span> <span>[</span>\n    remote?: string@<span>\"nu-complete git remotes\"</span>, <span># the name of the remote</span>\n    refspec?: string@<span>\"nu-complete git branches\"</span># the branch / refspec\n    <span>..</span>.\n<span>]</span>\n</code></pre></div><p>自定义补全在这个例子中的作用与前面的例子中的作用相同。上面的例子根据用户当前所处的位置，调用了两个不同的自定义补全。</p>\n",
      "date_modified": "2022-06-03T06:25:20.479Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "DataFrames",
      "url": "www.nushell.sh/zh-CN/book/dataframes.html",
      "id": "www.nushell.sh/zh-CN/book/dataframes.html",
      "content_html": "<h1 id=\"dataframes\" tabindex=\"-1\"> DataFrames</h1>\n<div><p>TIP</p>\n<p>DataFrame 相关命令从 0.33.1 版本开始支持</p>\n</div>\n<p>正如我们到目前为止所看到的，Nushell 把数据处理作为其主要任务。<code>Lists</code> 和 <code>Tables</code>的存在是为了帮助你循环处理值，以便执行多种操作或轻而易举地找到数据。然而，在某些操作中，基于行的数据布局并不是处理数据的最有效方式，特别是在处理极其庞大的文件时。对于大型数据集的<code>group-by</code>或<code>join</code>等操作，如果不使用适当的数据格式，会占用大量的内存，并可能耗费大量的计算时间。</p>\n<p>出于这个原因，Nushell 引入了<code>DataFrame</code>结构。<code>DataFrame</code>以列格式存储数据，以 <a href=\"https://arrow.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Apache Arrow</a> 规范为基础，并使用 <a href=\"https://github.com/pola-rs/polars\" target=\"_blank\" rel=\"noopener noreferrer\">Polars</a> 作为执行极其 <a href=\"https://h2oai.github.io/db-benchmark/\" target=\"_blank\" rel=\"noopener noreferrer\">快速列式操作</a> 的马达。</p>\n<p>你现在可能想知道这个组合能有多快，以及它如何能使数据工作更容易、更可靠。出于这个原因，让我们在本页开始时介绍一下处理数据时的常见操作的性能测试情况。</p>\n<h2 id=\"性能测试对比\" tabindex=\"-1\"> 性能测试对比</h2>\n<p>在这个小的性能测试练习中，我们将比较本地的 Nushell 原生命令、Nushell DataFrame 相关命令和<a href=\"https://pandas.pydata.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Python Pandas</a>命令。暂时不要太在意<code>dataframe</code>命令，它们将在本页后面的章节中解释。</p>\n<blockquote>\n<p>系统细节：本节介绍的性能测试是用一台配备 Intel(R) Core(TM) i7-10710U\n（CPU @1.10GHz 1.61GHz）和 16 GB 内存的机器运行的。</p>\n<p>所有的例子都在 Nushell 0.33.1 版本上运行。</p>\n</blockquote>\n<h3 id=\"文件信息\" tabindex=\"-1\"> 文件信息</h3>\n<p>我们将用于性能测试的文件是 <a href=\"https://www.stats.govt.nz/assets/Uploads/New-Zealand-business-demography-statistics/New-Zealand-business-demography-statistics-At-February-2020/Download-data/Geographic-units-by-industry-and-statistical-area-2000-2020-descending-order-CSV.zip\" target=\"_blank\" rel=\"noopener noreferrer\">新西兰商业人口统计</a> 数据集。\n如果你想尝试这些测试，请下载该文件。</p>\n<p>该数据集有 5 列，5,429,252 行。我们可以通过使用<code>dfr list</code>命令来检查：</p>\n<div><pre><code><span>></span> <span>let</span> <span>df</span> <span>=</span> <span>(</span>dfr <span>open</span> .<span>\\</span>Data7602DescendingYearOrder.csv<span>)</span>\n<span>></span> dfr list\n\n───┬──────┬─────────┬─────────\n <span># │ name │  rows   │ columns</span>\n───┼──────┼─────────┼─────────\n <span>0</span> │ <span>$df</span>  │ <span>5429252</span> │ <span>5</span>\n───┴──────┴─────────┴─────────\n</code></pre></div><p>我们可以用<code>dfr first</code>看一下文件的第一行：</p>\n<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr first\n\n───┬──────────┬─────────┬──────┬───────────┬──────────\n <span># │ anzsic06 │  Area   │ year │ geo_count │ ec_count</span>\n───┼──────────┼─────────┼──────┼───────────┼──────────\n <span>0</span> │ A        │ A100100 │ <span>2000</span> │        <span>96</span> │      <span>130</span>\n <span>1</span> │ A        │ A100200 │ <span>2000</span> │       <span>198</span> │      <span>110</span>\n <span>2</span> │ A        │ A100300 │ <span>2000</span> │        <span>42</span> │       <span>25</span>\n <span>3</span> │ A        │ A100400 │ <span>2000</span> │        <span>66</span> │       <span>40</span>\n <span>4</span> │ A        │ A100500 │ <span>2000</span> │        <span>63</span> │       <span>40</span>\n───┴──────────┴─────────┴──────┴───────────┴──────────\n</code></pre></div><p>...最后，我们可以了解一下推断出的数据类型：</p>\n<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr dtypes\n\n───┬───────────┬───────\n <span># │  column   │ dtype</span>\n───┼───────────┼───────\n <span>0</span> │ anzsic06  │ str\n <span>1</span> │ Area      │ str\n <span>2</span> │ year      │ i64\n <span>3</span> │ geo_count │ i64\n <span>4</span> │ ec_count  │ i64\n───┴───────────┴───────\n</code></pre></div><h3 id=\"加载文件\" tabindex=\"-1\"> 加载文件</h3>\n<p>让我们先来比较一下各种方法的加载时间。首先，我们将使用 Nushell 的<a href=\"/book/commands/open.html\"><code>open</code></a>命令加载数据：</p>\n<div><pre><code><span>></span> benchmark <span>{</span>open .<span>\\</span>Data7602DescendingYearOrder.csv<span>}</span>\n\n───┬─────────────────────────\n <span># │        real time</span>\n───┼─────────────────────────\n <span>0</span> │ 30sec 479ms 614us 400ns\n───┴─────────────────────────\n</code></pre></div><p>使用原生的 Nushell 功能加载文件需要 30 秒。对于加载 500 万条记录来说，这还算不错！但我们可以做得更好一些。</p>\n<p>现在让我们使用 Pandas。我们将使用以下脚本来加载文件：</p>\n<div><pre><code><span>import</span> pandas <span>as</span> pd\n\ndf <span>=</span> pd<span>.</span>read_csv<span>(</span><span>\"Data7602DescendingYearOrder.csv\"</span><span>)</span>\n</code></pre></div><p>而它的性能测试结果是：</p>\n<div><pre><code><span>></span> benchmark <span>{</span>python load.py<span>}</span>\n\n───┬───────────────────────\n <span># │       real time</span>\n───┼───────────────────────\n <span>0</span> │ 2sec 91ms 872us 900ns\n───┴───────────────────────\n</code></pre></div><p>这是一个很大的进步，从 30 秒到 2 秒。干得好，Pandas!</p>\n<p>也许我们加载数据可以再快一点，这一次我们将使用 Nushell 的<code>dfr open</code>命令：</p>\n<div><pre><code><span>></span> benchmark <span>{</span>dfr <span>open</span> .<span>\\</span>Data7602DescendingYearOrder.csv<span>}</span>\n\n───┬───────────────────\n <span># │     real time</span>\n───┼───────────────────\n <span>0</span> │ 601ms 700us 700ns\n───┴───────────────────\n</code></pre></div><p>这一次，我们花了 0.6 秒。一点也不差。</p>\n<h3 id=\"group-by比较\" tabindex=\"-1\"> <code>Group-by</code>比较</h3>\n<p>这次让我们做一个稍微复杂的操作。我们将按年份对数据进行分组，并根据<code>geo_count</code>列对分组求和。</p>\n<p>同样，我们要从 Nushell 的原生命令开始：</p>\n<div><p>TIP</p>\n<p>如果你想运行这个例子，请注意接下来的命令将使用大量的内存，在该命令执行期间可能会影响你的系统性能。</p>\n</div>\n<div><pre><code><span>></span> benchmark <span>{</span>\n\t<span>open</span> .<span>\\</span>Data7602DescendingYearOrder.csv\n\t<span>|</span> group-by year\n\t<span>|</span> pivot header rows\n\t<span>|</span> upsert rows <span>{</span> get rows <span>|</span> math <span>sum</span> <span>}</span>\n\t<span>|</span> flatten\n<span>}</span>\n\n───┬────────────────────────\n <span># │       real time</span>\n───┼────────────────────────\n <span>0</span> │ 6min 30sec 622ms 312us\n───┴────────────────────────\n</code></pre></div><p>所以，执行这个聚合操作需要 6 分钟。</p>\n<p>让我们试试在<code>pandas</code>中进行同样的操作：</p>\n<div><pre><code><span>import</span> pandas <span>as</span> pd\n\ndf <span>=</span> pd<span>.</span>read_csv<span>(</span><span>\"Data7602DescendingYearOrder.csv\"</span><span>)</span>\nres <span>=</span> df<span>.</span>groupby<span>(</span><span>\"year\"</span><span>)</span><span>[</span><span>\"geo_count\"</span><span>]</span><span>.</span><span>sum</span><span>(</span><span>)</span>\n<span>print</span><span>(</span>res<span>)</span>\n</code></pre></div><p>而性能测试的结果是：</p>\n<div><pre><code><span>></span> benchmark <span>{</span>python .<span>\\</span>load.py<span>}</span>\n\n───┬────────────────────────\n <span># │       real time</span>\n───┼────────────────────────\n <span>0</span> │ 1sec 966ms 954us 800ns\n───┴────────────────────────\n</code></pre></div><p>一点也不差！同样，Pandas 设法在很短的时间内完成了它。</p>\n<p>为了进行比较，让我们试试 Nushell DataFrames。我们要把所有的操作放在一个<code>nu</code>文件中，以确保我们做的是类似的操作：</p>\n<div><pre><code><span>let</span> <span>df</span> <span>=</span> <span>(</span>dfr <span>open</span> Data7602DescendingYearOrder.csv<span>)</span>\n<span>let</span> res <span>=</span> <span>(</span><span>$df</span> <span>|</span> dfr group-by year <span>|</span> dfr aggregate <span>sum</span> <span>|</span> dfr <span>select</span> geo_count<span>)</span>\n<span>$res</span>\n</code></pre></div><p>当使用 DataFrames 时的性能测试结果是：</p>\n<div><pre><code><span>></span> benchmark <span>{</span>source load.nu<span>}</span>\n\n───┬───────────────────\n <span># │     real time</span>\n───┼───────────────────\n <span>0</span> │ 557ms 658us 500ns\n───┴───────────────────\n</code></pre></div><p>幸运的是，Nushell DataFrame 设法将时间再次减半。这不是很好吗？</p>\n<p>正如你所看到的，Nushell 的<code>DataFrame</code>命令和现在最常见的做数据分析的工具一样快。这个发行版中的命令有可能成为你做数据分析的首选工具。通过组合复杂的 Nushell 管道，你可以以一种可靠的方式从数据中提取信息。</p>\n<h2 id=\"使用-dataframes\" tabindex=\"-1\"> 使用 DataFrames</h2>\n<p>在看到了可以用<code>DataFrame</code>命令完成的事情之后，现在是时候开始测试它们了。首先，让我们创建一个样本 CSV 文件，该文件将成为我们的样本 DataFrame，并与示例一起使用。在你喜欢的编辑器中粘贴下面几行来创建样本 csv 文件：</p>\n<div><pre><code><span>int_1</span><span>,</span><span>int_2</span><span>,</span><span>float_1</span><span>,</span><span>float_2</span><span>,</span><span>first</span><span>,</span><span>second</span><span>,</span><span>third</span><span>,</span><span>word</span>\n<span>1</span><span>,</span><span>11</span><span>,</span><span>0.1</span><span>,</span><span>1.0</span><span>,</span><span>a</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>first</span>\n<span>2</span><span>,</span><span>12</span><span>,</span><span>0.2</span><span>,</span><span>1.0</span><span>,</span><span>a</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>second</span>\n<span>3</span><span>,</span><span>13</span><span>,</span><span>0.3</span><span>,</span><span>2.0</span><span>,</span><span>a</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>third</span>\n<span>4</span><span>,</span><span>14</span><span>,</span><span>0.4</span><span>,</span><span>3.0</span><span>,</span><span>b</span><span>,</span><span>a</span><span>,</span><span>c</span><span>,</span><span>second</span>\n<span>0</span><span>,</span><span>15</span><span>,</span><span>0.5</span><span>,</span><span>4.0</span><span>,</span><span>b</span><span>,</span><span>a</span><span>,</span><span>a</span><span>,</span><span>third</span>\n<span>6</span><span>,</span><span>16</span><span>,</span><span>0.6</span><span>,</span><span>5.0</span><span>,</span><span>b</span><span>,</span><span>a</span><span>,</span><span>a</span><span>,</span><span>second</span>\n<span>7</span><span>,</span><span>17</span><span>,</span><span>0.7</span><span>,</span><span>6.0</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>a</span><span>,</span><span>third</span>\n<span>8</span><span>,</span><span>18</span><span>,</span><span>0.8</span><span>,</span><span>7.0</span><span>,</span><span>c</span><span>,</span><span>c</span><span>,</span><span>b</span><span>,</span><span>eight</span>\n<span>9</span><span>,</span><span>19</span><span>,</span><span>0.9</span><span>,</span><span>8.0</span><span>,</span><span>c</span><span>,</span><span>c</span><span>,</span><span>b</span><span>,</span><span>ninth</span>\n<span>0</span><span>,</span><span>10</span><span>,</span><span>0.0</span><span>,</span><span>9.0</span><span>,</span><span>c</span><span>,</span><span>c</span><span>,</span><span>b</span><span>,</span><span>ninth</span>\n</code></pre></div><p>保存该文件并随意命名，在这些例子中，该文件将被称为<code>test_small.csv</code>。</p>\n<p>现在，要将该文件作为 DataFrame 进行读取，请使用<code>dfr open</code>命令，如下所示：</p>\n<div><pre><code><span>></span> <span>let</span> <span>df</span> <span>=</span> <span>(</span>dfr <span>open</span> test_small.csv<span>)</span>\n</code></pre></div><p>这应该会在内存中创建一个值<code>df</code>，用来存放我们刚刚创建的数据。</p>\n<div><p>TIP</p>\n<p><code>dfrs open</code>命令可以读取 <strong>csv</strong> 或 <strong>parquet</strong> 文件。</p>\n</div>\n<p>要查看存储在内存中的所有 DataFrames，你可以使用：</p>\n<div><pre><code><span>></span> dfr list\n\n───┬──────┬──────┬─────────\n <span># │ name │ rows │ columns</span>\n───┼──────┼──────┼─────────\n <span>0</span> │ <span>$df</span>  │ <span>10</span>   │ <span>8</span>\n───┴──────┴──────┴─────────\n</code></pre></div><p>正如你所看到的，该命令显示了所创建的 DataFrame 以及关于它们的基本信息。</p>\n<p>如果你想看到加载的 DataFrame 的预览，你可以将 DataFrame 变量发送到流中：</p>\n<div><pre><code><span>></span> <span>$df</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────\n <span>0</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first\n <span>1</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second\n <span>2</span> │     <span>3</span> │    <span>13</span> │  <span>0.3000</span> │  <span>2.0000</span> │ a     │ b      │ c     │ third\n <span>3</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second\n <span>4</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third\n <span>5</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second\n <span>6</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third\n <span>7</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight\n <span>8</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth\n <span>9</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────\n</code></pre></div><p>有了内存中的 DataFrame，我们就可以开始对 <code>DataFrame</code> 进行列操作。</p>\n<div><p>TIP</p>\n<p>如果你想看到所有可用的 DataFrame 命令，你可以使用<code>help dfr</code>。</p>\n</div>\n<h2 id=\"基本聚合\" tabindex=\"-1\"> 基本聚合</h2>\n<p>让我们从 DataFrame 的基本聚合开始，通过使用<code>aggregate</code>命令对<code>df</code>中存在的所有列进行求和：</p>\n<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr aggregate <span>sum</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬──────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │ word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼──────\n <span>0</span> │    <span>40</span> │   <span>145</span> │  <span>4.5000</span> │ <span>46.0000</span> │       │        │       │\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴──────\n</code></pre></div><p>正如你所看到的，聚合函数(<code>aggregate</code>)为那些有意义的列计算出了总和。如果你想过滤掉文本列，你可以使用<code>select</code>命令来选择你想要的列。</p>\n<div><pre><code><span>$df</span> <span>|</span> dfr aggregate <span>sum</span> <span>|</span> dfr <span>select</span> int_1 int_2 float_1 float_2\n\n───┬───────┬───────┬─────────┬─────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2</span>\n───┼───────┼───────┼─────────┼─────────\n <span>0</span> │    <span>40</span> │   <span>145</span> │  <span>4.5000</span> │ <span>46.0000</span>\n───┴───────┴───────┴─────────┴─────────\n</code></pre></div><p>你甚至可以像存储任何其他 Nushell 变量一样存储这个聚合的结果：</p>\n<div><pre><code><span>></span> <span>let</span> res <span>=</span> <span>(</span><span>$df</span> <span>|</span> dfr aggregate <span>sum</span> <span>|</span> dfr <span>select</span> int_1 int_2 float_1 float_2<span>)</span>\n</code></pre></div><p>现在我们有两个 DataFrame 存储在内存中：</p>\n<div><pre><code><span>></span> dfr list\n\n───┬──────┬──────┬─────────\n <span># │ name │ rows │ columns</span>\n───┼──────┼──────┼─────────\n <span>0</span> │ <span>$df</span>  │ <span>10</span>   │ <span>8</span>\n <span>1</span> │ <span>$res</span> │ <span>1</span>    │ <span>4</span>\n───┴──────┴──────┴─────────\n</code></pre></div><p>很整洁，不是吗？</p>\n<p>你可以在 DataFrame 上进行若干聚合，以便从中提取基本信息，也可以对你的全新 DataFrame 进行基本数据分析。</p>\n<h2 id=\"连接-dataframe\" tabindex=\"-1\"> 连接 DataFrame</h2>\n<p>也可以用一个列作为参考来连接(<code>join</code>)两个 DataFrame。我们将把我们的迷你 DataFrame 与另一个迷你 DataFrame 连接起来。在另一个文件中复制这些行，并创建相应的 DataFrame（在以下例子中，我们将称之为<code>test_small_a.csv</code>）。</p>\n<div><pre><code>int_1a,int_2,float_1,float_2,first\n9,14,0.4,3.0,a\n8,13,0.3,2.0,a\n7,12,0.2,1.0,a\n6,11,0.1,0.0,b\n</code></pre></div><p>我们使用<code>dfr open</code>命令来创建新的变量：</p>\n<div><pre><code><span>></span> <span>let</span> df_a <span>=</span> <span>(</span>dfr <span>open</span> test_small_a.csv<span>)</span>\n</code></pre></div><p>现在，当第二个 DataFrame 加载到内存中时，我们可以使用左边 DataFrame 的<code>int_1</code>列和右边 DataFrame 的<code>int_1a</code>列来连接它们。</p>\n<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr <span>join</span> <span>$df_a</span> -l <span>[</span>int_1<span>]</span> -r <span>[</span>int_1a<span>]</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬─────────┬─────────────┬───────────────┬───────────────┬─────────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word   │ int_2_right │ float_1_right │ float_2_right │ first_right</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼─────────┼─────────────┼───────────────┼───────────────┼─────────────\n <span>0</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second  │          <span>11</span> │        <span>0.1000</span> │        <span>0.0000</span> │ b\n <span>1</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third   │          <span>12</span> │        <span>0.2000</span> │        <span>1.0000</span> │ a\n <span>2</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight   │          <span>13</span> │        <span>0.3000</span> │        <span>2.0000</span> │ a\n <span>3</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth   │          <span>14</span> │        <span>0.4000</span> │        <span>3.0000</span> │ a\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴─────────┴─────────────┴───────────────┴───────────────┴─────────────\n</code></pre></div><div><p>TIP</p>\n<p>在<code>Nu</code>中，当一个命令有多个参数，并期望得到多个值时，我们用方括号<code>[]</code>来包裹这些值。在<code>dfr join</code>的情况下，我们可以对多个列进行连接，只要它们具有相同的类型，例如我们可以这样做：<code>$df | dfr join $df_a -l [int_1 int_2] -r [int_1a int_2]</code>。</p>\n</div>\n<p>默认情况下，连接命令做的是内连接，也就是说，它将保留两个 DataFrame 都有相同值的记录。你可以选择一个左联接来保留左边 DataFrame 中缺失的行。你也可以保存这个结果，以便在以后的操作中使用它。</p>\n<h2 id=\"dataframe-分组\" tabindex=\"-1\"> DataFrame 分组</h2>\n<p>可以用 DataFrame 进行的最强大的操作之一是<code>group-by</code>。这个命令将允许你根据一个分组条件进行聚合操作。在 Nushell 中，<code>GroupBy</code>是一种可以被存储和重复使用的对象，可以被用于多个聚合。这是很方便的，因为在进行分组时，创建分组对是最昂贵的运算，如果你打算用同一个分组条件进行多个操作，就没有必要重复该运算。</p>\n<p>要创建一个<code>GroupBy</code>对象，你只需要使用<code>group-by</code>命令：</p>\n<div><pre><code><span>></span> <span>let</span> group <span>=</span> <span>(</span><span>$df</span> <span>|</span> dfr group-by first<span>)</span>\n<span>></span> <span>$group</span>\n\n───┬──────────┬───────\n <span># │ property │ value</span>\n───┼──────────┼───────\n <span>0</span> │ group by │ first\n───┴──────────┴───────\n</code></pre></div><p>当打印 <code>GroupBy</code> 对象时，我们可以看到被用作条件的列来对 DataFrame 进行分组。使用<code>GroupBy</code>，我们可以使用多种操作对 DataFrame 进行聚合。</p>\n<div><pre><code><span>$group</span> <span>|</span> dfr aggregate <span>sum</span>\n\n───┬───────┬───────────┬───────────┬─────────────┬─────────────\n <span># │ first │ int_1     │ int_2     │ float_1     │ float_2</span>\n───┼───────┼───────────┼───────────┼─────────────┼─────────────\n <span>0</span> │ a     │         <span>6</span> │        <span>36</span> │      <span>0.6000</span> │      <span>4.0000</span>\n <span>1</span> │ b     │        <span>17</span> │        <span>62</span> │      <span>2.2000</span> │     <span>18.0000</span>\n <span>2</span> │ c     │        <span>17</span> │        <span>47</span> │      <span>1.7000</span> │     <span>24.0000</span>\n───┴───────┴───────────┴───────────┴─────────────┴─────────────\n</code></pre></div><p>使用同样的 <code>GroupBy</code>，你可以对整个 DataFrame 进行另一个操作，比如本例中的<code>min</code>：</p>\n<div><pre><code><span>$group</span> <span>|</span> aggregate min\n\n───┬───────┬───────────┬───────────┬─────────────┬─────────────\n <span># │ first │ int_1     │ int_2     │ float_1     │ float_2</span>\n───┼───────┼───────────┼───────────┼─────────────┼─────────────\n <span>0</span> │ a     │         <span>1</span> │        <span>11</span> │      <span>0.1000</span> │      <span>1.0000</span>\n <span>1</span> │ b     │         <span>0</span> │        <span>14</span> │      <span>0.4000</span> │      <span>3.0000</span>\n <span>2</span> │ c     │         <span>0</span> │        <span>10</span> │      <span>0.0000</span> │      <span>7.0000</span>\n───┴───────┴───────────┴───────────┴─────────────┴─────────────\n</code></pre></div><p>创建的<code>GroupBy</code>对象非常方便，它甚至可以被用作表格透视的基础。作为一个例子，让我们使用名为<code>second</code>的列作为透视列，而<code>float_1</code>列作为值列：</p>\n<div><pre><code><span>></span> <span>$group</span> <span>|</span> dfr pivot second float_1 <span>sum</span>\n\n───┬───────┬────────┬────────┬────────\n <span># │ first │   b    │   a    │   c</span>\n───┼───────┼────────┼────────┼────────\n <span>0</span> │ a     │ <span>0.6000</span> │        │\n <span>1</span> │ c     │        │        │ <span>1.7000</span>\n <span>2</span> │ b     │        │ <span>1.5000</span> │ <span>0.7000</span>\n───┴───────┴────────┴────────┴────────\n</code></pre></div><div><p>TIP</p>\n<p>透视操作是一种基于两列数据进行聚合的方法。在前面的例子中，透视命令的结果产生了一个表格，代表了列<code>float_1</code>中所有数值的总和，这些数值在列<code>first</code>（现在是行）和<code>second</code>（现在是列）中共享。因此，显示在第<code>b</code>行和第<code>a</code>列的值<code>1.5</code>是所有浮点的总和，其中第<code>first</code>列是<code>b</code>，第<code>second</code>列是<code>a</code>。</p>\n</div>\n<p>正如你所看到的，<code>GroupBy</code>对象是一个非常强大的变量，在你操作数据集时，它值得被保留在内存中。</p>\n<h2 id=\"创建-dataframes\" tabindex=\"-1\"> 创建 DataFrames</h2>\n<p>也可以从基本的 Nushell 基础类型，如整数、小数或字符串，来构建 DataFrames。让我们使用<code>to-df</code>命令来创建一个小的 DataFrame：</p>\n<div><pre><code><span>></span> <span>let</span> a <span>=</span> <span>(</span><span>[</span><span>[</span>a b<span>]</span><span>;</span> <span>[</span><span>1</span> <span>2</span><span>]</span> <span>[</span><span>3</span> <span>4</span><span>]</span> <span>[</span><span>5</span> <span>6</span><span>]</span><span>]</span> <span>|</span> dfr to-df<span>)</span>\n<span>></span> <span>$a</span>\n\n───┬───┬───\n <span># │ b │ a</span>\n───┼───┼───\n <span>0</span> │ <span>2</span> │ <span>1</span>\n <span>1</span> │ <span>4</span> │ <span>3</span>\n <span>2</span> │ <span>6</span> │ <span>5</span>\n───┴───┴───\n</code></pre></div><div><p>TIP</p>\n<p>目前，并不是所有的 Nushell 基本类型都可以转换为 DataFrame。随着 DataFrame 功能的成熟，这一点将在未来发生变化。</p>\n</div>\n<p>我们可以在一个 DataFrame 中添加列，以创建一个新的变量。作为一个例子，让我们在迷你 DataFrame <code>$a</code> 上添加两列：</p>\n<div><pre><code><span>></span> <span>let</span> a2 <span>=</span> <span>(</span><span>$a</span> <span>|</span> dfr with-column <span>$a</span>.a --name a2 <span>|</span> dfr with-column <span>$a</span>.a --name a3<span>)</span>\n\n───┬───┬───┬────┬────\n <span># │ b │ a │ a2 │ a3</span>\n───┼───┼───┼────┼────\n <span>0</span> │ <span>2</span> │ <span>1</span> │  <span>1</span> │  <span>1</span>\n <span>1</span> │ <span>4</span> │ <span>3</span> │  <span>3</span> │  <span>3</span>\n <span>2</span> │ <span>6</span> │ <span>5</span> │  <span>5</span> │  <span>5</span>\n───┴───┴───┴────┴────\n</code></pre></div><p>Nushell 强大的管道语法允许我们通过从其他 DataFrame 中获取数据并将其附加到这些 DataFrame 中来创建新的 DataFrame。现在，如果你列出你的 DataFrame，你会看到总共有四个：</p>\n<div><pre><code><span>></span> dfr list\n\n───┬───────┬──────┬─────────\n <span># │  name │ rows │ columns</span>\n───┼───────┼──────┼─────────\n <span>0</span> │ <span>$a</span>    │ <span>3</span>    │ <span>2</span>\n <span>1</span> │ <span>$a2</span>   │ <span>3</span>    │ <span>4</span>\n <span>2</span> │ <span>$df_a</span> │ <span>4</span>    │ <span>5</span>\n <span>3</span> │ <span>$df</span>   │ <span>10</span>   │ <span>8</span>\n───┴───────┴──────┴─────────\n</code></pre></div><p>值得一提的是，在使用 DataFrame 时，内存是如何被优化的呢？这要感谢 <strong>Apache Arrow</strong> 和 <strong>Polars</strong>。在一个非常简单的表示中，DataFrame 中的每一列都是一个 Arrow 数组，它使用了几种内存规格，以塞满尽可能多的数据（查看 <a href=\"https://arrow.apache.org/docs/format/Columnar.html\" target=\"_blank\" rel=\"noopener noreferrer\">Arrow 列格式</a> ）；另一个优化技巧是，只要有可能，DataFrame 中的列就会在多个 DataFrame 之间共享，避免了相同数据的内存重复占用。这意味着 DataFrame <code>$a</code>和<code>$a2</code>共享我们用<code>to-df</code>命令创建的两个列。由于这个原因，不能改变 DataFrame 中某一列的值。然而，你可以根据其他列或 DataFrame 的数据创建新的列。</p>\n<h2 id=\"使用系列\" tabindex=\"-1\"> 使用系列</h2>\n<p>系列(<code>Series</code>) 是 <code>DataFrame</code> 的基本组成部分。每个系列代表一个具有相同数据类型的列，我们可以创建多个不同类型的系列，如浮点、整型或字符串。</p>\n<p>让我们通过使用<code>to-df</code>命令创建一个系列，来开始我们对系列的探索：</p>\n<div><pre><code><span>></span> <span>let</span> new <span>=</span> <span>(</span><span>[</span><span>9</span> <span>8</span> <span>4</span><span>]</span> <span>|</span> dfr to-df<span>)</span>\n<span>></span> <span>$new</span>\n\n───┬───\n <span># │ 0</span>\n───┼───\n <span>0</span> │ <span>9</span>\n <span>1</span> │ <span>8</span>\n <span>2</span> │ <span>4</span>\n───┴───\n</code></pre></div><p>我们从一个整数列表创建了一个新的系列（我们也可以用浮点数或字符串做同样的事情）。</p>\n<p>系列已经定义了自己的基本操作，它们可以用来创建其他系列。让我们通过对先前创建的列进行一些运算来创建一个新的系列：</p>\n<div><pre><code><span>></span> <span>let</span> new_2 <span>=</span> <span>(</span><span>$new</span> * <span>3</span> + <span>10</span><span>)</span>\n<span>></span> <span>$new_2</span>\n\n───┬────\n <span># │ 0</span>\n───┼────\n <span>0</span> │ <span>37</span>\n <span>1</span> │ <span>34</span>\n <span>2</span> │ <span>22</span>\n───┴────\n</code></pre></div><p>现在我们有一个新的系列，它是通过对前一个变量进行基本操作而构建的。</p>\n<div><p>TIP</p>\n<p>如果你想看看你在内存中存储了多少变量，你可以使用<code>$nu.scope.vars</code>。</p>\n</div>\n<p>让我们重新命名我们之前的系列为 <code>memorable</code></p>\n<div><pre><code><span>></span> <span>let</span> new_2 <span>=</span> <span>(</span><span>$new_2</span> <span>|</span> dfr <span>rename</span> memorable<span>)</span>\n<span>></span> <span>$new_2</span>\n\n───┬───────────\n <span># │ memorable</span>\n───┼───────────\n <span>0</span> │        <span>37</span>\n <span>1</span> │        <span>34</span>\n <span>2</span> │        <span>22</span>\n───┴───────────\n</code></pre></div><p>只要两个系列的数据类型相同，我们也可以对它们进行基本操作：</p>\n<div><pre><code><span>></span> <span>$new</span> - <span>$new_2</span>\n\n───┬──────────\n <span># │ sub_0_0</span>\n───┼──────────\n <span>0</span> │     -28\n <span>1</span> │     -26\n <span>2</span> │     -18\n───┴──────────\n</code></pre></div><p>而且我们可以将它们添加到先前定义的 DataFrames 中：</p>\n<div><pre><code><span>></span> <span>let</span> new_df <span>=</span> <span>(</span><span>$a</span> <span>|</span> dfr with-column <span>$new</span> --name new_col<span>)</span>\n<span>></span> <span>$new_df</span>\n\n───┬───┬───┬─────────\n <span># │ b │ a │ new_col</span>\n───┼───┼───┼─────────\n <span>0</span> │ <span>2</span> │ <span>1</span> │       <span>9</span>\n <span>1</span> │ <span>4</span> │ <span>3</span> │       <span>8</span>\n <span>2</span> │ <span>6</span> │ <span>5</span> │       <span>4</span>\n───┴───┴───┴─────────\n</code></pre></div><p>存储在 DataFrame 中的系列也可以直接使用，例如，我们可以将列<code>a</code>和<code>b</code>相乘来创建一个新系列：</p>\n<div><pre><code><span>></span> <span>$new_df</span>.a * <span>$new_df</span>.b\n\n───┬─────────\n <span># │ mul_a_b</span>\n───┼─────────\n <span>0</span> │       <span>2</span>\n <span>1</span> │      <span>12</span>\n <span>2</span> │      <span>30</span>\n───┴─────────\n</code></pre></div><p>我们可以开始使用管道，以创建新的列和 DataFrames：</p>\n<div><pre><code><span>></span> <span>let</span> <span>$new_df</span> <span>=</span> <span>(</span><span>$new_df</span> <span>|</span> dfr with-column <span>(</span><span>$new_df</span>.a * <span>$new_df</span>.b / <span>$new_df</span>.new_col<span>)</span> --name my_sum<span>)</span>\n<span>></span> <span>let</span> <span>$new_df</span>\n\n───┬───┬───┬─────────┬────────\n <span># │ b │ a │ new_col │ my_sum</span>\n───┼───┼───┼─────────┼────────\n <span>0</span> │ <span>2</span> │ <span>1</span> │       <span>9</span> │      <span>0</span>\n <span>1</span> │ <span>4</span> │ <span>3</span> │       <span>8</span> │      <span>1</span>\n <span>2</span> │ <span>6</span> │ <span>5</span> │       <span>4</span> │      <span>7</span>\n───┴───┴───┴─────────┴────────\n</code></pre></div><p>Nushell 的管道系统可以帮助你创建非常有趣的工作流程。</p>\n<h2 id=\"系列和掩码\" tabindex=\"-1\"> 系列和掩码</h2>\n<p>在使用 DataFrames 时，系列还有另一个关键用途，那就是我们可以用它们来建立布尔掩码（Mask）。让我们先用等于运算符创建一个简单的掩码：</p>\n<div><pre><code><span>></span> <span>let</span> mask <span>=</span> <span>(</span><span>$new</span> <span>==</span> <span>8</span><span>)</span>\n<span>></span> <span>$mask</span>\n\n───┬─────────\n <span># │ new_col</span>\n───┼─────────\n <span>0</span> │ <span>false</span>\n <span>1</span> │ <span>true</span>\n <span>2</span> │ <span>false</span>\n───┴─────────\n</code></pre></div><p>有了这个掩码，我们现在可以过滤一个 DataFrame，像这样：</p>\n<div><pre><code><span>></span> <span>$new_df</span> <span>|</span> dfr filter-with <span>$mask</span>\n\n───┬───┬───┬─────────┬────────\n <span># │ a │ b │ new_col │ my_sum</span>\n───┼───┼───┼─────────┼────────\n <span>0</span> │ <span>3</span> │ <span>4</span> │       <span>8</span> │      <span>1</span>\n───┴───┴───┴─────────┴────────\n</code></pre></div><p>现在我们有一个新的 DataFrame，其中只有掩码为真的值。</p>\n<p>掩码也可以从 Nushell 列表中创建，比如：</p>\n<div><pre><code><span>></span> <span>let</span> mask1 <span>=</span> <span>(</span><span>[</span>true <span>true</span> false<span>]</span> <span>|</span> dfr to-df mask<span>)</span>\n<span>></span> <span>$new_df</span> <span>|</span> dfr filter-with <span>$mask1</span>\n\n───┬───┬───┬─────────┬────────\n <span># │ a │ b │ new_col │ my_sum</span>\n───┼───┼───┼─────────┼────────\n <span>0</span> │ <span>1</span> │ <span>2</span> │       <span>9</span> │      <span>0</span>\n <span>1</span> │ <span>3</span> │ <span>4</span> │       <span>8</span> │      <span>1</span>\n───┴───┴───┴─────────┴────────\n</code></pre></div><p>为了创建复杂的掩码，我们可以使用<code>AND</code>：</p>\n<div><pre><code><span>></span> <span>$mask</span> <span>&amp;&amp;</span> <span>$mask1</span>\n\n───┬──────────────────\n <span># │ and_new_col_mask</span>\n───┼──────────────────\n <span>0</span> │ <span>false</span>\n <span>1</span> │ <span>true</span>\n <span>2</span> │ <span>false</span>\n───┴──────────────────\n</code></pre></div><p>或者 <code>OR</code> 操作：</p>\n<div><pre><code><span>></span> <span>$mask</span> <span>||</span> <span>$mask1</span>\n\n───┬─────────────────\n <span># │ or_new_col_mask</span>\n───┼─────────────────\n <span>0</span> │ <span>true</span>\n <span>1</span> │ <span>true</span>\n <span>2</span> │ <span>false</span>\n───┴─────────────────\n</code></pre></div><p>我们也可以通过检查某些值是否存在于其他系列来创建一个掩码。使用我们创建的第一个 DataFrame，我们可以这样做：</p>\n<div><pre><code><span>></span> <span>let</span> mask3 <span>=</span> <span>(</span><span>$df</span>.first <span>|</span> dfr is-in <span>(</span><span>[</span>b c<span>]</span> <span>|</span> dfr to-df<span>))</span>\n\n───┬──────\n <span># │ first</span>\n───┼───────\n <span>0</span> │ <span>false</span>\n <span>1</span> │ <span>false</span>\n <span>2</span> │ <span>false</span>\n <span>3</span> │ <span>true</span>\n <span>4</span> │ <span>true</span>\n <span>5</span> │ <span>true</span>\n <span>6</span> │ <span>true</span>\n <span>7</span> │ <span>true</span>\n <span>8</span> │ <span>true</span>\n <span>9</span> │ <span>true</span>\n───┴───────\n</code></pre></div><p>而这个新的掩码可以用来过滤 DataFrame</p>\n<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr filter-with <span>$mask3</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬─────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼─────────\n <span>0</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second\n <span>1</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third\n <span>2</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second\n <span>3</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third\n <span>4</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight\n <span>5</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth\n <span>6</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴─────────\n</code></pre></div><p>另一个可以用掩码进行的操作是设置或替换一个系列的值。例如，我们可以改变列<code>first</code>中的值，如果该值包含<code>a</code>：</p>\n<div><pre><code><span>></span> <span>$df</span>.first <span>|</span> dfr <span>set</span> new --mask <span>(</span><span>$df</span>.first <span>=~</span> a<span>)</span>\n\n───┬────────\n <span># │ string</span>\n───┼────────\n <span>0</span> │ new\n <span>1</span> │ new\n <span>2</span> │ new\n <span>3</span> │ b\n <span>4</span> │ b\n <span>5</span> │ b\n <span>6</span> │ b\n <span>7</span> │ c\n <span>8</span> │ c\n <span>9</span> │ c\n───┴────────\n</code></pre></div><h2 id=\"系列作为索引\" tabindex=\"-1\"> 系列作为索引</h2>\n<p>系列也可以作为过滤 DataFrame 的一种方式，将它们作为索引列表使用。例如，假设我们想从原始 DataFrame 中获取第1、4和6行。针对这一点，我们可以使用以下命令来提取这些信息：</p>\n<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>[</span><span>1</span> <span>4</span> <span>6</span><span>]</span> <span>|</span> dfr to-df<span>)</span>\n<span>></span> <span>$df</span> <span>|</span> dfr take <span>$indices</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────\n <span>0</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second\n <span>1</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third\n <span>2</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────\n</code></pre></div><p>命令<code>take</code>非常方便，特别是当我们把它与其他命令混合使用时。\n比方说，我们想提取列<code>first</code>的唯一元素的所有行。为了做到这一点，我们可以使用<code>dfr arg-unique</code>命令，如下例所示：</p>\n<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>$df</span>.first <span>|</span> dfr arg-unique<span>)</span>\n<span>></span> <span>$df</span> <span>|</span> dfr take <span>$indices</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────\n <span>0</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first\n <span>1</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second\n <span>2</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────\n</code></pre></div><p>或者，如果我们想使用一个特定的列来创建一个新的有序 DataFrame，该怎么办？我们可以使用<code>dfr arg-sort</code>来完成这个任务。在下一个例子中，我们可以通过<code>word</code>列对 DataFrame 进行排序：</p>\n<div><p>TIP</p>\n<p>同样的结果也可以用<code>sort</code>命令来完成。</p>\n</div>\n<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>$df</span>.word <span>|</span> dfr arg-sort<span>)</span>\n<span>></span> <span>$df</span> <span>|</span> dfr take <span>$indices</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────\n <span>0</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight\n <span>1</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first\n <span>2</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth\n <span>3</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth\n <span>4</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second\n <span>5</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second\n <span>6</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second\n <span>7</span> │     <span>3</span> │    <span>13</span> │  <span>0.3000</span> │  <span>2.0000</span> │ a     │ b      │ c     │ third\n <span>8</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third\n <span>9</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────\n</code></pre></div><p>最后，我们可以通过在标记的索引中设置一个新值来创建新的系列。请看下一条命令：</p>\n<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>[</span><span>0</span> <span>2</span><span>]</span> <span>|</span> dfr to-df<span>)</span><span>;</span>\n<span>></span> <span>$df</span>.int_1 <span>|</span> dfr set-with-idx <span>123</span> --indices <span>$indices</span>\n\n───┬───────\n <span># │ int_1</span>\n───┼───────\n <span>0</span> │   <span>123</span>\n <span>1</span> │     <span>2</span>\n <span>2</span> │   <span>123</span>\n <span>3</span> │     <span>4</span>\n <span>4</span> │     <span>0</span>\n <span>5</span> │     <span>6</span>\n <span>6</span> │     <span>7</span>\n <span>7</span> │     <span>8</span>\n <span>8</span> │     <span>9</span>\n <span>9</span> │     <span>0</span>\n───┴───────\n</code></pre></div><h2 id=\"唯一值\" tabindex=\"-1\"> 唯一值</h2>\n<p>另一个可以用<code>Series</code>完成的操作是在一个列表或列中搜索唯一值。让我们再次使用我们创建的第一个 DataFrame 来测试这些操作。</p>\n<p>第一个也是最常见的操作是<code>value_counts</code>。这个命令计算出一个系列中存在的唯一值的数量。例如，我们可以用它来计算 <code>first</code> 列各值的出现次数：</p>\n<div><pre><code><span>></span> <span>$df</span>.first <span>|</span> dfr value-counts\n\n───┬───────┬────────\n <span># │ first │ counts</span>\n───┼───────┼────────\n <span>0</span> │ b     │      <span>4</span>\n <span>1</span> │ c     │      <span>3</span>\n <span>2</span> │ a     │      <span>3</span>\n───┴───────┴────────\n</code></pre></div><p>正如预期的那样，该命令返回一个新的 DataFrame，可以用来做更多的查询。</p>\n<p>继续我们对 <code>Series</code> 的探索，我们要做的下一件事是只从一个系列中获得唯一值，像这样：</p>\n<div><pre><code><span>></span> <span>$df</span>.first <span>|</span> dfr unique\n\n───┬───────\n <span># │ first</span>\n───┼───────\n <span>0</span> │ c\n <span>1</span> │ b\n <span>2</span> │ a\n───┴───────\n</code></pre></div><p>或者我们可以得到一个掩码，用来过滤出数据唯一或重复的行。例如，我们可以选择列 <code>word</code> 中含唯一值的行：</p>\n<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr filter-with <span>(</span><span>$df</span>.word <span>|</span> dfr is-unique<span>)</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬───────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │ word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼───────\n <span>0</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first\n <span>1</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴───────\n</code></pre></div><p>或所有含重复值的行：</p>\n<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr filter-with <span>(</span><span>$df</span>.word <span>|</span> dfr is-duplicated<span>)</span>\n\n───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────\n <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>\n───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────\n <span>0</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second\n <span>1</span> │     <span>3</span> │    <span>13</span> │  <span>0.3000</span> │  <span>2.0000</span> │ a     │ b      │ c     │ third\n <span>2</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second\n <span>3</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third\n <span>4</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second\n <span>5</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third\n <span>6</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth\n <span>7</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth\n───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────\n</code></pre></div><h2 id=\"dataframe-命令\" tabindex=\"-1\"> Dataframe 命令</h2>\n<p>到目前为止，我们已经看到了很多可以使用 <code>DataFrame</code> 相关命令的操作。然而，到目前为止，我们所使用的命令并不包括所有可用来处理数据的命令，请放心，随着该功能的稳定，还会有更多的命令。</p>\n<p>下表列出了可用的<code>DataFrame</code>命令及其描述，并尽可能显示其类似的 Nushell 命令。</p>\n<table>\n<thead>\n<tr>\n<th>命令名</th>\n<th>应用于</th>\n<th>描述</th>\n<th>Nushell 类似命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aggregate</td>\n<td>DataFrame, GroupBy, Series</td>\n<td>在一个 DataFrame、GroupBy 或系列对象上执行聚合操作</td>\n<td>math</td>\n</tr>\n<tr>\n<td>all-false</td>\n<td>Series</td>\n<td>如果所有的值都是假的，则返回真</td>\n<td></td>\n</tr>\n<tr>\n<td>all-true</td>\n<td>Series</td>\n<td>如果所有的值都是真的，则返回真</td>\n<td>all?</td>\n</tr>\n<tr>\n<td>arg-max</td>\n<td>Series</td>\n<td>返回系列中最大值的索引</td>\n<td></td>\n</tr>\n<tr>\n<td>arg-min</td>\n<td>Series</td>\n<td>返回系列中最小值的索引</td>\n<td></td>\n</tr>\n<tr>\n<td>arg-sort</td>\n<td>Series</td>\n<td>返回排序后的系列的索引</td>\n<td></td>\n</tr>\n<tr>\n<td>arg-true</td>\n<td>Series</td>\n<td>返回值为真的索引</td>\n<td></td>\n</tr>\n<tr>\n<td>arg-unique</td>\n<td>Series</td>\n<td>返回唯一值的索引</td>\n<td></td>\n</tr>\n<tr>\n<td>column</td>\n<td>DataFrame</td>\n<td>将选定的列作为系列返回</td>\n<td>get</td>\n</tr>\n<tr>\n<td>count-null</td>\n<td>Series</td>\n<td>计算空值</td>\n<td></td>\n</tr>\n<tr>\n<td>count-unique</td>\n<td>Series</td>\n<td>计算唯一值</td>\n<td></td>\n</tr>\n<tr>\n<td>drop</td>\n<td>DataFrame</td>\n<td>通过删除选定的列来创建一个新的 DataFrame</td>\n<td>drop</td>\n</tr>\n<tr>\n<td>drop-duplicates</td>\n<td>DataFrame</td>\n<td>删除 DataFrame 中的重复值</td>\n<td></td>\n</tr>\n<tr>\n<td>drop-nulls</td>\n<td>DataFrame, Series</td>\n<td>丢弃 DataFrame 中的空值</td>\n<td></td>\n</tr>\n<tr>\n<td>dtypes</td>\n<td>DataFrame</td>\n<td>显示 DataFrame 的数据类型</td>\n<td></td>\n</tr>\n<tr>\n<td>filter-with</td>\n<td>DataFrame</td>\n<td>使用 Mask 作为参考来过滤 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>first</td>\n<td>DataFrame</td>\n<td>用第一行创建新的 DataFrame</td>\n<td>first</td>\n</tr>\n<tr>\n<td>get</td>\n<td>DataFrame</td>\n<td>用选定的列创建 DataFrame</td>\n<td>get</td>\n</tr>\n<tr>\n<td>group-by</td>\n<td>DataFrame</td>\n<td>创建一个 GroupBy 对象，可用于其他聚合</td>\n<td>group-by</td>\n</tr>\n<tr>\n<td>is-duplicated</td>\n<td>Series</td>\n<td>创建表示重复值的 Mask</td>\n<td></td>\n</tr>\n<tr>\n<td>is-in</td>\n<td>Series</td>\n<td>检查一个系列的元素是否包含在右边的系列中</td>\n<td>in</td>\n</tr>\n<tr>\n<td>is-not-null</td>\n<td>Series</td>\n<td>创建值为非空的 Mask</td>\n<td></td>\n</tr>\n<tr>\n<td>is-null</td>\n<td>Series</td>\n<td>创建值为空的 Mask</td>\n<td><code>&lt;column_name&gt; == $nothing</code></td>\n</tr>\n<tr>\n<td>is-unique</td>\n<td>Series</td>\n<td>创建表示唯一值的 Mask</td>\n<td></td>\n</tr>\n<tr>\n<td>join</td>\n<td>DataFrame</td>\n<td>使用列作为参考来连接一个 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>last</td>\n<td>DataFrame</td>\n<td>用最后几行创建新的 DataFrame</td>\n<td>last</td>\n</tr>\n<tr>\n<td>list</td>\n<td></td>\n<td>列出已存储的 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>melt</td>\n<td>DataFrame</td>\n<td>将一个 DataFrame 从宽格式转为长格式</td>\n<td></td>\n</tr>\n<tr>\n<td>not</td>\n<td>Series Inverts boolean mask</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td></td>\n<td>从 csv 文件中加载 DataFrame</td>\n<td>open</td>\n</tr>\n<tr>\n<td>pivot</td>\n<td>GroupBy</td>\n<td>在 GroupBy 对象上执行透视操作</td>\n<td>pivot</td>\n</tr>\n<tr>\n<td>rename</td>\n<td>Series</td>\n<td>重命名一个系列</td>\n<td>rename</td>\n</tr>\n<tr>\n<td>sample</td>\n<td>DataFrame</td>\n<td>创建样本 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>select</td>\n<td>DataFrame</td>\n<td>用选定的列创建一个新的 DataFrame</td>\n<td>select</td>\n</tr>\n<tr>\n<td>set</td>\n<td>Series</td>\n<td>在给定的 Mask 为真时设置值</td>\n<td></td>\n</tr>\n<tr>\n<td>set-with-idx</td>\n<td>Series</td>\n<td>设置给定索引中的值</td>\n<td></td>\n</tr>\n<tr>\n<td>shift</td>\n<td>Series</td>\n<td>将值移到一个给定的时段</td>\n<td></td>\n</tr>\n<tr>\n<td>show</td>\n<td>DataFrame</td>\n<td>将 DataFrame 的一个部分转换为一个表或列表值</td>\n<td></td>\n</tr>\n<tr>\n<td>slice</td>\n<td>DataFrame</td>\n<td>从行的切片中创建新的 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>sort</td>\n<td>DataFrame, Series</td>\n<td>创建新的排序 DataFrame 或系列</td>\n<td>sort</td>\n</tr>\n<tr>\n<td>take</td>\n<td>DataFrame, Series</td>\n<td>使用给定的索引创建新的 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>to-csv</td>\n<td>DataFrame</td>\n<td>将 DataFrame 保存为 csv 文件</td>\n<td>to csv</td>\n</tr>\n<tr>\n<td>to-df</td>\n<td></td>\n<td>将一个管道里的表或列表转换为 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>to-dummies</td>\n<td>DataFrame</td>\n<td>创建一个带有假值的新 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>to-parquet</td>\n<td>DataFrame</td>\n<td>将 DataFrame 保存到 parquet 文件中</td>\n<td></td>\n</tr>\n<tr>\n<td>unique</td>\n<td>Series</td>\n<td>返回一个系列中的唯一值</td>\n<td>uniq</td>\n</tr>\n<tr>\n<td>value-counts</td>\n<td>Series</td>\n<td>返回一个带有系列中唯一值的计数的 DataFrame</td>\n<td></td>\n</tr>\n<tr>\n<td>where</td>\n<td>DataFrame</td>\n<td>过滤 DataFrame 以符合条件</td>\n<td>where</td>\n</tr>\n<tr>\n<td>with-column</td>\n<td>DataFrame</td>\n<td>在 DataFrame 中添加一个系列</td>\n<td><code>insert &lt;column_name&gt; &lt;value&gt; | upsert &lt;column_name&gt; { &lt;new_value&gt; }</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"dataframes-的未来\" tabindex=\"-1\"> DataFrames 的未来</h2>\n<p>我们希望在本页结束时，你已经牢固掌握了如何使用 DataFrame 相关命令。正如你所看到的，它们提供了强大的操作，可以帮助你更快更原生地处理数据。</p>\n<p>然而，DataFrames 的未来仍然是非常实验性的，随着这些命令的成熟，新的命令和利用这些命令的工具将被加入。例如，DataFrames 的下一步是引入惰性 DataFrames，这将允许你定义复杂的数据操作，这些操作将在你决定 &quot;<strong>完成</strong>&quot; 这个管道时才被执行。这将使 Nushell 有机会选择最佳计划来查询你所要求的数据。</p>\n<p>请继续访问本书，以查看 DataFrames 的最新情况，以及它们如何帮助你更快更有效地处理数据。</p>\n",
      "date_modified": "2022-06-03T06:25:20.482Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "环境",
      "url": "www.nushell.sh/zh-CN/book/environment.html",
      "id": "www.nushell.sh/zh-CN/book/environment.html",
      "content_html": "<h1 id=\"环境\" tabindex=\"-1\"> 环境</h1>\n<p>Shell 中的一个常见任务是控制外部应用程序将使用的环境变量。这通常是自动完成的，因为环境被打包，并在外部应用程序启动时提供给它。但有时，我们希望更精确地控制一个应用程序看到的环境变量。</p>\n<p>你可以使用<a href=\"/book/commands/env.html\"><code>env</code></a>命令查看当前环境变量：</p>\n<div><pre><code>   #           name                 type                value                 raw\n──────────────────────────────────────────────────────────────────────────────────────────\n  16   DISPLAY              string               :0                   :0\n  17   EDITOR               string               nvim                 nvim\n  28   LANG                 string               en_US.UTF-8          en_US.UTF-8\n  35   PATH                 list&lt;unknown>        [list 16 items]      /path1:/path2:/...\n  36   PROMPT_COMMAND       block                &lt;Block 197>\n</code></pre></div><p>在 Nushell 中，环境变量可以是任何值，并且有任何类型（见<code>type</code>列）。\nNushell 中使用的环境变量的实际值在<code>value</code>列下。\n你可以直接使用<code>$env</code>变量查询该值，例如，<code>$env.PATH | length</code>。\n最后的<code>raw</code>列显示了将被发送到外部应用程序的实际值（详见 <a href=\"/zh-CN/book/environment.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%BD%AC%E6%8D%A2\">环境变量转换</a> ）。</p>\n<p>环境最初是由 Nu 的 <a href=\"/zh-CN/book/configuration.html\">配置文件</a> 和 Nu 的运行环境创建的。</p>\n<h2 id=\"设置环境变量\" tabindex=\"-1\"> 设置环境变量</h2>\n<p>有几种方法可以设置环境变量：</p>\n<h3 id=\"let-env\" tabindex=\"-1\"> <a href=\"/book/commands/let-env.html\"><code>let-env</code></a></h3>\n<p>使用<code>let-env</code>命令是最直接的方法：</p>\n<div><pre><code><span>></span> let-env FOO <span>=</span> <span>'BAR'</span>\n</code></pre></div><p><code>let-env</code> 类似于 bash 中的 <strong>export</strong> 命令。</p>\n<p>因此，如果你想扩展<code>PATH</code>变量，你可以这样做：</p>\n<div><pre><code>let-env <span>PATH</span> <span>=</span> <span>(</span><span>$env</span><span>.</span><span>PATH</span> <span>|</span> prepend <span>'/path/you/want/to/add'</span><span>)</span>\n</code></pre></div><p>在这里，我们把指定文件夹前置添加到<code>PATH</code>中的现有路径中，所以它将有最高的优先级。\n如果你想给它最低的优先级，你可以使用<code>append</code>命令。</p>\n<h3 id=\"load-env\" tabindex=\"-1\"> <a href=\"/book/commands/load-env.html\"><code>load-env</code></a></h3>\n<p>如果你有一个以上的环境变量需要设置，你可以使用<code>load-env</code>并创建一个键/值对记录(Record)，以用于加载多个环境变量：</p>\n<div><pre><code><span>></span> load-env <span>{</span> <span>\"BOB\"</span><span>:</span> <span>\"FOO\"</span>, <span>\"JAY\"</span><span>:</span> <span>\"BAR\"</span> <span>}</span>\n</code></pre></div><h3 id=\"一次性环境变量\" tabindex=\"-1\"> 一次性环境变量</h3>\n<p>这些变量被定义为只在执行代码块的过程中临时有效。\n详情请看 <a href=\"/zh-CN/book/environment.html#%E4%B8%80%E6%AC%A1%E6%80%A7%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">一次性环境变量</a> 。</p>\n<h3 id=\"调用def-env定义的命令\" tabindex=\"-1\"> 调用<a href=\"/book/commands/def-env.html\"><code>def-env</code></a>定义的命令</h3>\n<p>详情见 <a href=\"/zh-CN/book/environment.html#%E4%BB%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">从自定义命令中定义环境</a>。</p>\n<h3 id=\"使用模块导出\" tabindex=\"-1\"> 使用模块导出</h3>\n<p>参见 <a href=\"/zh-CN/book/modules.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">模块</a> 部分了解更多详情。</p>\n<h2 id=\"作用域\" tabindex=\"-1\"> 作用域</h2>\n<p>当你设置环境变量时，它将只在当前作用域内可用（变量所在的块和它里面的任何块）。</p>\n<p>这里有一个小例子来演示环境变量作用域：</p>\n<div><pre><code><span>></span> let-env FOO <span>=</span> <span>\"BAR\"</span>\n<span>></span> <span>do</span> <span>{</span>\n    let-env FOO <span>=</span> <span>\"BAZ\"</span>\n    <span>$env</span>.FOO <span>==</span> <span>\"BAZ\"</span>\n<span>}</span>\n<span>true</span>\n<span>></span> <span>$env</span>.FOO <span>==</span> <span>\"BAR\"</span>\n<span>true</span>\n</code></pre></div><h2 id=\"目录切换\" tabindex=\"-1\"> 目录切换</h2>\n<p>Shell 中常见的任务是用<a href=\"/book/commands/cd.html\"><code>cd</code></a>命令来改变目录。\n在 Nushell 中，调用<code>cd</code>等同于设置<code>PWD</code>环境变量。\n因此，它遵循与其他环境变量相同的规则（例如，作用域）。</p>\n<h2 id=\"一次性环境变量-1\" tabindex=\"-1\"> 一次性环境变量</h2>\n<p>在 Bash 和其他软件的启发下，有一个常用的简便方法，可以设置一次性环境变量：</p>\n<div><pre><code><span>></span> <span>FOO</span><span>=</span>BAR <span>echo</span> <span>$env</span>.FOO\nBAR\n</code></pre></div><p>你也可以使用<a href=\"/book/commands/with-env.html\"><code>with-env</code></a>来更明确地做同样的事情：</p>\n<div><pre><code><span>></span> with-env <span>{</span> FOO: BAR <span>}</span> <span>{</span> <span>echo</span> <span>$env</span>.FOO <span>}</span>\nBAR\n</code></pre></div><p><a href=\"/book/commands/with-env.html\"><code>with-env</code></a>命令将暂时把环境变量设置为给定的值（这里：变量 &quot;FOO&quot; 被赋为 &quot;BAR&quot; 值）。一旦这样做了，<a href=\"/zh-CN/book/types_of_data.html#%E5%9D%97\">块</a> 将在这个新的环境变量设置下运行。</p>\n<h2 id=\"永久性环境变量\" tabindex=\"-1\"> 永久性环境变量</h2>\n<p>你也可以在启动时设置环境变量，使它们在 Nushell 运行期间都可用。\n要做到这一点，请在 <a href=\"/zh-CN/book/configuration.html\">Nu 配置文件</a> 中设置一个环境变量。\n比如：</p>\n<div><pre><code><span># In config.nu</span>\nlet-env FOO <span>=</span> <span>'BAR'</span>\n</code></pre></div><h2 id=\"从自定义命令中定义环境变量\" tabindex=\"-1\"> 从自定义命令中定义环境变量</h2>\n<p>由于作用域规则，在自定义命令中定义的任何环境变量都只存在于该命令的作用域内。\n然而，用<a href=\"/book/commands/def-env.html\"><code>def-env</code></a>而不是<a href=\"/book/commands/def.html\"><code>def</code></a>定义的命令（它也适用于<code>export def</code>，见 <a href=\"/zh-CN/book/modules.html\">模块</a>）将在调用者一方保留环境设置：</p>\n<div><pre><code><span>></span> def-env foo <span>[</span><span>]</span> <span>{</span>\n    let-env FOO <span>=</span> <span>'BAR'</span>\n<span>}</span>\n\n<span>></span> foo\n\n<span>></span> <span>$env</span>.FOO\nBAR\n</code></pre></div><h2 id=\"环境变量转换\" tabindex=\"-1\"> 环境变量转换</h2>\n<p>你可以通过设置<code>ENV_CONVERSIONS</code>环境变量，来在字符串和值之间转换其他环境变量。\n例如，<a href=\"https://github.com/nushell/nushell/blob/main/docs/sample_config/default_env.nu\" target=\"_blank\" rel=\"noopener noreferrer\">默认环境配置</a>包括将<code>PATH</code>（和 Windows 上使用的<code>Path</code>）环境变量从一个字符串转换为一个列表。\n在 <code>env.nu</code> 和 <code>config.nu</code> 配置文件加载后，任何在<code>ENV_CONVERSIONS</code>内指定的现有环境变量将根据其<code>from_string</code>字段被转换为任何类型的值。\n外部工具要求环境变量是字符串，因此，任何非字符串的环境变量需要先进行转换：\n值-&gt;字符串的转换由<code>ENV_CONVERSIONS</code>的<code>to_string</code>字段设置，每次运行外部命令时都会进行转换。</p>\n<p>让我们用一个例子来说明转换的情况。\n把以下内容放在你的<code>config.nu</code>中：</p>\n<div><pre><code>let-env ENV_CONVERSIONS <span>=</span> <span>{</span>\n    <span># ... you might have Path and PATH already there, add:</span>\n    FOO <span>:</span> <span>{</span>\n        from_string: <span>{</span> <span>|</span>s<span>|</span> <span>$s</span> <span>|</span> <span>split</span> row <span>'-'</span> <span>}</span>\n        to_string: <span>{</span> <span>|</span><span>v</span><span>|</span> <span>$v</span> <span>|</span> str collect <span>'-'</span> <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre></div><p>现在，在一个 Nushell 实例内执行：</p>\n<div><pre><code><span>></span> with-env <span>{</span> FOO <span>:</span> <span>'a-b-c'</span> <span>}</span> <span>{</span> nu <span>}</span>  <span># runs Nushell with FOO env. var. set to 'a-b-c'</span>\n\n<span>></span> <span>$env</span>.FOO\n  <span>0</span>   a\n  <span>1</span>   b\n  <span>2</span>   c\n</code></pre></div><p>你可以看到<code>$env.FOO</code>现在是一个新的 Nushell 实例中的列表，配置已经更新。\n你也可以通过以下方式手动测试转换：</p>\n<div><pre><code><span>></span> <span>do</span> <span>$env</span>.ENV_CONVERSIONS.FOO.from_string <span>'a-b-c'</span>\n</code></pre></div><p>现在，为了测试列表-&gt;字符串的转换，运行：</p>\n<div><pre><code><span>></span> nu -c <span>'$env.FOO'</span>\na-b-c\n</code></pre></div><p>因为<code>nu</code>是一个外部程序，Nushell 根据<code>ENV_CONVERSIONS.FOO.to_string</code>翻译了 <code>[ a b c ]</code> 列表，并把它传递给<code>nu</code>进程。\n用<code>nu -c</code>运行命令不会加载配置文件，因此<code>FOO</code>的环境转换没有了，它被显示为一个普通的字符串 —— 这样我们可以验证转换是否成功。\n你也可以通过<code>do $env.ENV_CONVERSIONS.FOO.to_string [a b c]</code>手动运行这个步骤。</p>\n<p>如果我们回头看一下<a href=\"/book/commands/env.html\"><code>env</code></a>命令，<code>raw</code>列显示由<code>ENV_CONVERSIONS.&lt;name&gt;.to_string</code>翻译的值，<code>value</code>列显示 Nushell 中使用的值（在<code>FOO</code>的情况下是<code>ENV_CONVERSIONS.&lt;name&gt;.from_string</code>的结果）。\n如果这个值不是字符串，并且没有<code>to_string</code>的转换，它就不会被传递给外部（见<code>PROMPT_COMMAND</code>的<code>raw</code>列）。\n一个例外是<code>PATH</code>（Windows 上的<code>Path</code>）。默认情况下，它在启动时将字符串转换为列表，在运行外部程序时，如果没有指定手动转换，则从列表转换为字符串。</p>\n<p><em>(重要! 环境转换字符串-&gt;值发生在 <code>env.nu</code> 和 <code>config.nu</code> 被运行<strong>之后</strong>。<code>env.nu</code> 和 <code>config.nu</code> 中的所有环境变量仍然是字符串，除非你手动将它们设置为一些其他的值。)</em></p>\n<h2 id=\"删除环境变量\" tabindex=\"-1\"> 删除环境变量</h2>\n<p>只有当一个环境变量被设置在当前作用域中时，你才能通过 <a href=\"/book/commands/hide.html\"><code>hide</code></a> 命令“删除”它：</p>\n<div><pre><code><span>></span> let-env FOO <span>=</span> <span>'BAR'</span>\n<span>..</span>.\n<span>></span> hide FOO\n</code></pre></div><p>隐藏也是有作用域的，这既允许你暂时删除一个环境变量，又可以防止你从子作用域内修改父环境：</p>\n<div><pre><code><span>></span> let-env FOO <span>=</span> <span>'BAR'</span>\n<span>></span> <span>do</span> <span>{</span>\n    hide FOO\n    <span># $env.FOO does not exist</span>\n  <span>}</span>\n<span>></span> <span>$env</span>.FOO\nBAR\n</code></pre></div><p>关于隐藏的更多细节，请参考 <a href=\"/zh-CN/book/modules.html#%E9%9A%90%E8%97%8F\">模块</a></p>\n",
      "date_modified": "2022-06-03T06:25:20.483Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "转移到系统",
      "url": "www.nushell.sh/zh-CN/book/escaping.html",
      "id": "www.nushell.sh/zh-CN/book/escaping.html",
      "content_html": "<h1 id=\"转移到系统\" tabindex=\"-1\"> 转移到系统</h1>\n<p>Nu 提供了一套你可以在不同操作系统中使用的命令（也成为&quot;内部&quot;命令），而且具备这种一致性是很有帮助的。但有时，你需要运行一个与 Nu 内部命令同名的外部命令。例如，要运行外部的<code>ls</code>或<code>date</code>命令，你可以使用脱字符 (^) 命令。用 <code>^</code> 前缀 可以转移调用用户 PATH 中的命令（例如：<code>/bin/ls</code>，而不是 Nu 内部的 <a href=\"/book/commands/ls.html\"><code>ls</code></a> 命令）。</p>\n<p>Nu 的内部命令：</p>\n<div><pre><code><span>></span> <span>ls</span>\n</code></pre></div><p>转移到外部命令：</p>\n<div><pre><code><span>></span> ^ls\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.483Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "外部命令",
      "url": "www.nushell.sh/zh-CN/book/externs.html",
      "id": "www.nushell.sh/zh-CN/book/externs.html",
      "content_html": "<h1 id=\"外部命令\" tabindex=\"-1\"> 外部命令</h1>\n<p>调用外部命令是将 Nushell 作为一个 Shell 使用的基本部分（通常也将 Nushell 作为一种语言使用）。但是有一个问题，对于 Nushell 之外的命令而言，Nushell 不能帮助寻找调用中的错误，或者自动补全，或者语法高亮。</p>\n<p>这就是 <code>extern</code> 的作用。<code>extern</code>关键字允许你为 Nushell 之外的命令写一个完整的签名，这样你就能得到上述所有的好处。如果你看一下默认配置，你会发现其中有一些<code>extern</code>调用。下面是其中之一：</p>\n<div><pre><code>  <span>export</span> extern <span>\"git push\"</span> <span>[</span>\n    remote?: string@<span>\"nu-complete git remotes\"</span>,   <span># the name of the remote</span>\n    refspec?: string@<span>\"nu-complete git branches\"</span>  <span># the branch / refspec</span>\n    --verbose<span>(</span>-v<span>)</span>                                <span># be more verbose</span>\n    --quiet<span>(</span>-q<span>)</span>                                  <span># be more quiet</span>\n    --repo: string                               <span># repository</span>\n    --all                                        <span># push all refs</span>\n    --mirror                                     <span># mirror all refs</span>\n    --delete<span>(</span>-d<span>)</span>                                 <span># delete refs</span>\n    --tags                                       <span># push tags (can't be used with --all or --mirror)</span>\n    --dry-run<span>(</span>-n<span>)</span>                                <span># dry run</span>\n    --porcelain                                  <span># machine-readable output</span>\n    --force<span>(</span>-f<span>)</span>                                  <span># force updates</span>\n    --force-with-lease: string                   <span># require old value of ref to be at this value</span>\n    --recurse-submodules: string                 <span># control recursive pushing of submodules</span>\n    --thin                                       <span># use thin pack</span>\n    --receive-pack: string                       <span># receive pack program</span>\n    --exec: string                               <span># receive pack program</span>\n    --set-upstream<span>(</span>-u<span>)</span>                           <span># set upstream for git pull/status</span>\n    --progress                                   <span># force progress reporting</span>\n    --prune                                      <span># prune locally removed refs</span>\n    --no-verify                                  <span># bypass pre-push hook</span>\n    --follow-tags                                <span># push missing but relevant tags</span>\n    --signed: string                             <span># GPG sign the push</span>\n    --atomic                                     <span># request atomic transaction on remote side</span>\n    --push-option<span>(</span>-o<span>)</span>: string                    <span># option to transmit</span>\n    --ipv4<span>(</span>-4<span>)</span>                                   <span># use IPv4 addresses only</span>\n    --ipv6<span>(</span>-6<span>)</span>                                   <span># use IPv6 addresses only</span>\n  <span>]</span>\n</code></pre></div><p>你会注意到这给了你所有与内部命令相同的描述性语法，让你描述标志(Flags)、短标志(Short Flags)、位置参数、类型等等。</p>\n<h2 id=\"类型和自定义补全\" tabindex=\"-1\"> 类型和自定义补全</h2>\n<p>在上面的例子中，你会注意到有些类型后面有<code>@</code>，接着后面是命令的名称。我们有独立的章节进一步谈论 <a href=\"/zh-CN/book/custom_completions.html\">自定义补全</a>。</p>\n<p>参数的类型（或形状）和自定义补全都告诉 Nushell 如何完成对该标志或位置值的补全。例如，将类型设置为<code>path</code>允许 Nushell 为你将值补全为一个文件路径。使用<code>@</code>和一个自定义的补全方式覆盖了这个默认行为，让该自定义补全方式返回给你完整的补全列表。</p>\n<h2 id=\"局限性\" tabindex=\"-1\"> 局限性</h2>\n<p>目前的<code>extern</code>语法有一些限制。在 Nushell 中，标志和位置参数是非常灵活的：标志可以在位置参数之前, 也可以与位置参数混合, 还可以跟随位置参数。许多外部命令没有这种灵活性。目前还没有一种方法来确保标志和位置参数的特定顺序与外部命令所要求的风格保持一致。</p>\n<p>第二个限制是，有些外部命令要求使用<code>=</code>来传递标志和值。在 Nushell 中，<code>=</code>是一种方便的可选默认参数语法，目前还没有办法按要求使用它。</p>\n",
      "date_modified": "2022-06-03T06:25:20.483Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "安装 Nu",
      "url": "www.nushell.sh/zh-CN/book/installation.html",
      "id": "www.nushell.sh/zh-CN/book/installation.html",
      "content_html": "<h1 id=\"安装-nu\" tabindex=\"-1\"> 安装 Nu</h1>\n<p>有很多方法可以获取并使用 Nu。你可以从我们的<a href=\"https://github.com/nushell/nushell/releases\" target=\"_blank\" rel=\"noopener noreferrer\">发布页面</a>下载预编译的二进制文件，也可以 <a href=\"https://repology.org/project/nushell/versions\" target=\"_blank\" rel=\"noopener noreferrer\">使用你喜欢的软件包管理器</a>，或者从源码构建。</p>\n<h2 id=\"预编译二进制包\" tabindex=\"-1\"> 预编译二进制包</h2>\n<p>Nu 二进制文件在 <a href=\"https://github.com/nushell/nushell/releases\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub 的 Release 页</a>发布，适用于 Linux、macOS 和 Windows。只需下载并解压二进制文件，然后将其复制到你的系统<code>PATH</code>上的某个位置即可。</p>\n<h2 id=\"软件包管理器\" tabindex=\"-1\"> 软件包管理器</h2>\n<p>Nu 可以通过几个软件包管理器获得：</p>\n<p><a href=\"https://repology.org/project/nushell/versions\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://repology.org/badge/vertical-allrepos/nushell.svg\" alt=\"打包状态\"></a></p>\n<p>对于 macOS 和 Linux，<a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Homebrew</a>是一个流行的选择（<code>brew install nushell</code>）。</p>\n<p>对于 Windows 用户：</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/windows/package-manager/winget/\" target=\"_blank\" rel=\"noopener noreferrer\">Winget</a> (<code>winget install nushell</code>)</li>\n<li><a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Chocolatey</a> (<code>choco install nushell</code>)</li>\n<li><a href=\"https://scoop.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Scoop</a> (<code>scoop install nu</code>)</li>\n</ul>\n<h2 id=\"从源码构建\" tabindex=\"-1\"> 从源码构建</h2>\n<p>你也可以从源代码构建<code>Nu</code>。首先，你需要设置 Rust 工具链和它的依赖项。</p>\n<h3 id=\"安装编译器套件\" tabindex=\"-1\"> 安装编译器套件</h3>\n<p>为了使 Rust 能够正常工作，你需要在你的系统上安装一个兼容的编译器套件。以下是推荐的编译器套件：</p>\n<ul>\n<li>Linux：GCC 或 Clang</li>\n<li>macOS：Clang (安装 Xcode)</li>\n<li>Windows：MSVC（安装 <a href=\"https://visualstudio.microsoft.com/vs/community/\" target=\"_blank\" rel=\"noopener noreferrer\">Visual Studio</a> 或 <a href=\"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022\" target=\"_blank\" rel=\"noopener noreferrer\">Visual Studio Build Tools</a>)\n<ul>\n<li>请确保安装 &quot;用 C++进行桌面开发&quot; 相关包</li>\n<li>任何 Visual Studio 版本都可以(社区版是免费的)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装-rust\" tabindex=\"-1\"> 安装 Rust</h3>\n<p>如果我们的系统中还没有 Rust，最好的方法是通过 <a href=\"https://rustup.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">rustup</a> 来安装它。Rustup 是一种管理 Rust 安装的工具，可以管理使用不同的 Rust 版本。</p>\n<p>Nu 目前需要 <strong>最新（1.60 或更高）的稳定</strong> 版本的 Rust。最好的方法是让<code>rustup</code>为你找到正确的版本。当你第一次打开<code>rustup</code>时，它会询问你想安装哪个版本的 Rust：</p>\n<div><pre><code>Current installation options:\n\ndefault <span>host</span> triple: x86_64-unknown-linux-gnu\ndefault toolchain: stable\nprofile: default\nmodify <span>PATH</span> variable: <span>yes</span>\n\n<span>1</span><span>)</span> Proceed with installation <span>(</span>default<span>)</span>\n<span>2</span><span>)</span> Customize installation\n<span>3</span><span>)</span> Cancel installation\n</code></pre></div><p>一旦我们准备好了，我们就按 <code>1</code>，然后回车。</p>\n<p>如果你不愿意通过<code>rustup</code>来安装 Rust，你也可以通过其他方法来安装它（比如从 Linux 发行版的软件包中）。只要确保安装 1.60 或更高版本的 Rust 即可。</p>\n<h3 id=\"依赖\" tabindex=\"-1\"> 依赖</h3>\n<h4 id=\"debian-ubuntu\" tabindex=\"-1\"> Debian/Ubuntu</h4>\n<p>你将需要安装 &quot;pkg-config&quot; 和 &quot;libssl-dev&quot; 包：</p>\n<div><pre><code><span>apt</span> <span>install</span> pkg-config libssl-dev\n</code></pre></div><p>对于希望使用 &quot;rawkey&quot; 或 &quot;clipboard&quot; 可选功能的 Linux 用户，需要安装 &quot;libx11-dev&quot; 和 &quot;libxcb-composite0-dev&quot; 软件包。</p>\n<div><pre><code><span>apt</span> <span>install</span> libxcb-composite0-dev libx11-dev\n</code></pre></div><h4 id=\"基于-rhel-的发行版\" tabindex=\"-1\"> 基于 RHEL 的发行版</h4>\n<p>你需要安装 &quot;libxcb&quot;、&quot;openssl-devel&quot; 和 &quot;libX11-devel&quot;：</p>\n<div><pre><code>yum <span>install</span> libxcb openssl-devel libX11-devel\n</code></pre></div><h4 id=\"macos\" tabindex=\"-1\"> macOS</h4>\n<p>使用 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Homebrew</a>，你需要通过如下方式安装 &quot;openssl&quot; 和 &quot;cmake&quot; ：</p>\n<div><pre><code>brew <span>install</span> openssl cmake\n</code></pre></div><h3 id=\"使用-crates-io进行构建\" tabindex=\"-1\"> 使用 <a href=\"https://crates.io\" target=\"_blank\" rel=\"noopener noreferrer\">crates.io</a>进行构建</h3>\n<p>Nu 发行版会作为源码发布到流行的 Rust 包仓库 <a href=\"https://crates.io/\" target=\"_blank\" rel=\"noopener noreferrer\">crates.io</a>，这使得使用 <code>cargo</code> 构建并安装最新的 Nu 版本变得很容易：</p>\n<div><pre><code><span>></span> cargo <span>install</span> nu\n</code></pre></div><p>如此即可! <code>cargo</code>工具将完成下载 Nu 及其源码依赖，构建并将其安装到 cargo bin 路径中，以便我们能够运行它。</p>\n<p>如果你想安装更多的功能，你可以使用：</p>\n<div><pre><code><span>></span> cargo <span>install</span> nu --features<span>=</span>extra\n</code></pre></div><p>安装完毕后，我们可以使用 <code>nu</code> 命令运行 Nu：</p>\n<div><pre><code>$ nu\n/home/jt/Source<span>></span>\n</code></pre></div><h3 id=\"从-github-仓库构建\" tabindex=\"-1\"> 从 GitHub 仓库构建</h3>\n<p>我们也可以从 GitHub 上的最新源码构建自己的 Nu。这让我们可以立即获得最新的功能和错误修复。首先，克隆源码仓库：</p>\n<div><pre><code><span>></span> <span>git</span> clone https://github.com/nushell/nushell.git\n</code></pre></div><p>然后，我们可以用以下方式构建和运行 Nu：</p>\n<div><pre><code><span>></span> <span>cd</span> nushell\nnushell<span>></span> cargo build --workspace --features<span>=</span>extra <span>&amp;&amp;</span> cargo run --features<span>=</span>extra\n</code></pre></div><p>你也可以在<strong>发布</strong>模式下构建和运行 Nu：</p>\n<div><pre><code>nushell<span>></span> cargo build --release --workspace --features<span>=</span>extra <span>&amp;&amp;</span> cargo run --release --features<span>=</span>extra\n</code></pre></div><p>熟悉 Rust 的人可能会问，如果 &quot;run&quot; 默认会构建，为什么我们还要做 &quot;build&quot; 和 &quot;run&quot; 这两个步骤？这是为了解决 Cargo 中新的 <code>default-run</code> 选项的缺陷，并确保所有插件都被构建，尽管这在将来可能不再需要。</p>\n<h2 id=\"设置登录-shell-nix\" tabindex=\"-1\"> 设置登录 Shell (*nix)</h2>\n<p><strong>!!! Nu 仍在开发中，对于日常使用可能并不稳定。!!!</strong></p>\n<p>要设置登录 Shell，你可以使用<a href=\"https://linux.die.net/man/1/chsh\" target=\"_blank\" rel=\"noopener noreferrer\"><code>chsh</code></a>命令。\n一些 Linux 发行版有一个位于<code>/etc/shells</code>的有效 Shell 列表，在 Nu 被列入白名单之前不允许改变 Shell。如果你没有更新<code>shells</code>文件，你可能会看到类似于下面的错误：</p>\n<div><pre><code>chsh: /home/username/.cargo/bin/nu is an invalid shell\n</code></pre></div><p>你可以通过在<code>shells</code>文件中添加你的 Nu 二进制文件来把 Nu 添加到允许的 Shells 列表中。\n添加的路径可以用<code>which nu</code>命令找到，通常是<code>$HOME/.cargo/bin/nu</code>。</p>\n<h2 id=\"设置默认的-shell-windows-终端\" tabindex=\"-1\"> 设置默认的 Shell (Windows 终端)</h2>\n<p>如果你使用的是 <a href=\"https://github.com/microsoft/terminal\" target=\"_blank\" rel=\"noopener noreferrer\">Windows Terminal</a>，你可以通过添加如下内容到你的终端设置<code>&quot;profiles&quot;</code>（JSON 文件）中来设置<code>nu</code>作为你的默认 Shell：</p>\n<div><pre><code><span>{</span>\n  <span>\"guid\"</span><span>:</span> <span>\"{2b372ca1-1ee2-403d-a839-6d63077ad871}\"</span>,\n  <span>\"hidden\"</span><span>:</span> false,\n  <span>\"icon\"</span><span>:</span> <span>\"https://www.nushell.sh/icon.png\"</span>,\n  <span>\"name\"</span><span>:</span> <span>\"Nu Shell\"</span>,\n  <span>\"commandline\"</span><span>:</span> <span>\"nu.exe\"</span>\n<span>}</span>\n</code></pre></div><p>最后需要做的是将 <code>&quot;defaultProfile&quot;</code> 改为:</p>\n<div><pre><code><span>\"defaultProfile\"</span><span>:</span> <span>\"{2b372ca1-1ee2-403d-a839-6d63077ad871}\"</span>,\n</code></pre></div><p>之后，<code>nu</code> 应该会在 <strong>Windows Terminal</strong> 启动时被加载。</p>\n",
      "image": "https://repology.org/badge/vertical-allrepos/nushell.svg",
      "date_modified": "2022-06-03T06:25:20.483Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "介绍",
      "url": "www.nushell.sh/zh-CN/book/introduction.html",
      "id": "www.nushell.sh/zh-CN/book/introduction.html",
      "content_html": "<h1 id=\"介绍\" tabindex=\"-1\"> 介绍</h1>\n<p>大家好，欢迎来到 Nushell 项目。这个项目的目标是彰显 Shell 的 Unix 哲学，就是用管道将简单的命令连接在一起，并且带来现代的开发风格。</p>\n<p>Nu 从许多熟悉的领域中汲取了线索：bash 等传统 shell，PowerShell 等高级 shell，函数式编程，系统编程等。但是 Nu 并没有试图成为所有行业的杰作，而是将精力集中在做好一些事情上：</p>\n<ul>\n<li>创建具有现代感的灵活的跨平台 Shell</li>\n<li>允许你将命令行应用程序与可理解数据结构的 Shell 进行混合和匹配</li>\n<li>具有现代命令行应用程序提供的用户体验优化</li>\n</ul>\n<p>了解 Nu 可以做什么的最简单方式就是通过一些例子，所以让我们沉浸进去吧。</p>\n<p>当你运行一个类似 <code>ls</code> 的命令时，第一个注意到的是所得到的不是一个文本块，而是一个结构化的表。</p>\n<div><pre><code>> ls\n────┬────────────────────┬──────┬────────┬────────────\n #  │ name               │ type │ size   │ modified\n────┼────────────────────┼──────┼────────┼────────────\n  0 │ 404.html           │ File │  429 B │ 3 days ago\n  1 │ CONTRIBUTING.md    │ File │  955 B │ 8 mins ago\n  2 │ Gemfile            │ File │ 1.1 KB │ 3 days ago\n  3 │ Gemfile.lock       │ File │ 6.9 KB │ 3 days ago\n  4 │ LICENSE            │ File │ 1.1 KB │ 3 days ago\n  5 │ README.md          │ File │  213 B │ 3 days ago\n...\n</code></pre></div><p>这个表不仅仅是用另一种方式显示了当前目录。就像电子表格中的表一样，我们可以更加交互性地处理数据。</p>\n<p>我们做的第一件事是将表格通过尺寸来排序。为了做到这点，我们将会把 <code>ls</code> 的输出喂给一个可以根据列的内容来排序表格的命令。</p>\n<div><pre><code>> ls | sort-by size | reverse\n────┬────────────────────┬──────┬────────┬────────────\n #  │ name               │ type │ size   │ modified\n────┼────────────────────┼──────┼────────┼────────────\n  0 │ Gemfile.lock       │ File │ 6.9 KB │ 3 days ago\n  1 │ SUMMARY.md         │ File │ 3.7 KB │ 3 days ago\n  2 │ Gemfile            │ File │ 1.1 KB │ 3 days ago\n  3 │ LICENSE            │ File │ 1.1 KB │ 3 days ago\n  4 │ CONTRIBUTING.md    │ File │  955 B │ 9 mins ago\n  5 │ books.md           │ File │  687 B │ 3 days ago\n...\n</code></pre></div><p>你可以看到我们没有给 <code>ls</code> 传递命令行参数。作为代替，我们使用了 Nu 提供的 <code>sort-by</code> 命令来排序 <code>ls</code> 的输出。为了让最大的文件位于顶部，我们还使用了 <code>reverse</code>。</p>\n<p>Nu 提供了许多可在表格上工作的命令。例如，我们可以过滤 <code>ls</code> 表格，只显示大于 1 KB 的文件：</p>\n<div><pre><code>> ls | where size > 1kb\n───┬──────────────┬──────┬────────┬────────────\n # │ name         │ type │ size   │ modified\n───┼──────────────┼──────┼────────┼────────────\n 0 │ Gemfile      │ File │ 1.1 KB │ 3 days ago\n 1 │ Gemfile.lock │ File │ 6.9 KB │ 3 days ago\n 2 │ LICENSE      │ File │ 1.1 KB │ 3 days ago\n 3 │ SUMMARY.md   │ File │ 3.7 KB │ 3 days ago\n───┴──────────────┴──────┴────────┴────────────\n</code></pre></div><p>就像 Unix 哲学所体现的那样，作为可以相互交流的命令，为我们提供了许多种不同的配对。让我们看一个不同的命令：</p>\n<div><pre><code>> ps\n─────┬───────┬──────────────────┬─────────┬─────────┬──────────┬─────────\n #   │ pid   │ name             │ status  │ cpu     │ mem      │ virtual\n─────┼───────┼──────────────────┼─────────┼─────────┼──────────┼─────────\n   0 │ 33155 │ nu_plugin_core_p │ Running │  3.8496 │   1.8 MB │  4.4 GB\n   1 │ 32841 │ mdworker_shared  │ Running │  0.0000 │  19.3 MB │  4.4 GB\n   2 │ 32829 │ CoreServicesUIAg │ Running │  0.0000 │  16.1 MB │  4.5 GB\n   3 │ 32828 │ mdworker_shared  │ Running │  0.0000 │  23.0 MB │  4.4 GB\n</code></pre></div><p>如果你使用过 Linux，可能会对 <code>ps</code> 命令相当熟悉。这个命令为我们展示了系统所有正在运行的进程和它们的状态与名称。我们同样可以查看到它们的 CPU 占用。</p>\n<p>如果我们想显示正在使用 CPU 的进程怎么办？ 就像我们之前使用 <code>ls</code> 命令一样，我们也可以使用 <code>ps</code> 命令返回的表：</p>\n<div><pre><code>> ps | where cpu > 10\n───┬──────┬──────────────────┬─────────┬────────┬──────────┬─────────\n # │ pid  │ name             │ status  │ cpu    │ mem      │ virtual\n───┼──────┼──────────────────┼─────────┼────────┼──────────┼─────────\n 0 │ 3971 │ Google Chrome He │ Running │ 5.1263 │  99.4 MB │  5.5 GB\n 1 │  360 │ iTerm2           │ Running │ 6.6635 │ 218.6 MB │  6.0 GB\n───┴──────┴──────────────────┴─────────┴────────┴──────────┴─────────\n</code></pre></div><p>到目前为止，我们已经看到使用 <code>ls</code> 和 <code>ps</code> 列出文件和进程。 Nu 还提供了其他可以创建有用信息表的命令。 接下来，让我们探索<code>date</code> 和 <code>sys</code>。</p>\n<p>运行 <code>date</code> 将给出当前日期与时间的信息：</p>\n<div><pre><code>> date\n──────────┬────────\n year     │ 2020\n month    │ 5\n day      │ 5\n hour     │ 21\n minute   │ 13\n second   │ 17\n timezone │ +02:00\n──────────┴────────\n</code></pre></div><p>运行 <code>sys</code> 将给出 Nu 所运行的系统的信息：</p>\n<div><pre><code>> sys\n─────────┬─────────────────────────────────────────\n host    │ [row 7 columns]\n cpu     │ [row cores current ghz max ghz min ghz]\n disks   │ [table 2 rows]\n mem     │ [row free swap free swap total total]\n net     │ [table 11 rows]\n battery │ [table 1 rows]\n─────────┴─────────────────────────────────────────\n</code></pre></div><p>和之前的表有些不一样， <code>sys</code> 命令给出的表在单元格内包含了另一些结构化的表格，而非简单的数值。为了查看到这些数据，我们需要选择要看的列：</p>\n<div><pre><code>> sys | get host\n──────────┬─────────────────────────────────────────────\n name     │ Linux\n release  │ 5.3.0-1019-azure\n version  │ #20-Ubuntu SMP Fri Mar 27 23:54:23 UTC 2020\n hostname │ lifeless\n arch     │ x86_64\n uptime   │ 8:03:47:32\n sessions │ [table 2 rows]\n──────────┴─────────────────────────────────────────────\n</code></pre></div><p><code>get</code> 命令让我们跳入表格中一列的内容。这样，我们正在观看 &quot;host&quot; 列，它包含了关于 Nu 所运行的主机的信息。操作系统的名字、主机名、CPU 架构等等。让我们看看系统上的用户名：</p>\n<div><pre><code>> sys | get host.sessions\n───┬─────────\n # │ &lt;value>\n───┼─────────\n 0 │ jonathan\n───┴─────────\n</code></pre></div><p>目前，系统上只有一个用户，名为 <code>jonathan</code>。 你会注意到，我们可以传递路径（ <code>host.sessions</code> 部分），而不仅仅是传递列名。 Nu 将采用该路径并转到表中的相应数据位置。</p>\n<p>您可能已经注意到其他的不同之处。 我们没有一个数据表，而是只有一个元素：字符串 &quot;jonathan&quot;。 Nu 使用数据表和字符串。 字符串是在 Nu 之外使用命令的重要组成部分。</p>\n<p>让我们看看字符串如何在 Nu 之外起作用。 我们将从前面的示例开始，并运行外部的 <code>echo</code> 命令（ <code>^</code> 告诉 nu 不要使用内置的 <code>echo</code> 命令）：</p>\n<div><pre><code>> sys | get host.sessions | ^echo $it\njonathan\n</code></pre></div><p>如果这看起来与我们以前的传统 Shell 非常相似，那么就说明你拥有敏锐的眼睛！ 相似，但是有一个重要的区别：我们对前面看到的值调用了 <code>^echo</code> 。 这允许我们将数据从 Nu 传递到 <code>echo</code>（或 Nu 外部的任何命令，例如 <code>git</code>）。</p>\n<p><em>注意：Nu 的内建命令的帮助文本可以用 <code>help</code> 来浏览</em>:</p>\n<div><pre><code>> help config\nConfiguration management.\n\nUsage:\n  > config &lt;subcommand> {flags}\n\nSubcommands:\n  config get - Gets a value from the config\n  config set - Sets a value in the config\n  config set_into - Sets a value in the config\n  config clear - clear the config\n  config load - Loads the config from the path given\n  config remove - Removes a value from the config\n  config path - return the path to the config file\n\nFlags:\n  -h, --help: Display this help message\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.484Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Reedline，Nu 的行编辑器",
      "url": "www.nushell.sh/zh-CN/book/line_editor.html",
      "id": "www.nushell.sh/zh-CN/book/line_editor.html",
      "content_html": "<h1 id=\"reedline-nu-的行编辑器\" tabindex=\"-1\"> Reedline，Nu 的行编辑器</h1>\n<p>Nushell 的行编辑器 <a href=\"https://github.com/nushell/reedline\" target=\"_blank\" rel=\"noopener noreferrer\">Reedline</a> 是一个跨平台的行读取器，它被设计为模块化且颇具灵活性的。该引擎的作用是负责控制命令历史，验证，自动补全，提示以及屏幕绘制。</p>\n<h2 id=\"配置\" tabindex=\"-1\"> 配置</h2>\n<h3 id=\"编辑模式\" tabindex=\"-1\"> 编辑模式</h3>\n<p>Reedline 允许你使用两种模式来编辑文本：vi 和 emacs。如果没有指定，默认的编辑模式是 emacs 模式。若要自行设置喜欢的模式，你可以修改配置文件为相应模式。比如：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n    edit_mode: emacs\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div><h4 id=\"默认键盘绑定\" tabindex=\"-1\"> 默认键盘绑定</h4>\n<p>每种编辑模式都有相应的 vi 或 emacs 文本编辑的常用快捷键设置。</p>\n<p>Emacs 和 Vi 快捷键绑定</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Esc</td>\n<td>Esc</td>\n</tr>\n<tr>\n<td>Backspace</td>\n<td>退格</td>\n</tr>\n<tr>\n<td>End</td>\n<td>移至行尾</td>\n</tr>\n<tr>\n<td>End</td>\n<td>补全历史提示</td>\n</tr>\n<tr>\n<td>Home</td>\n<td>移至行首</td>\n</tr>\n<tr>\n<td>Ctr + c</td>\n<td>取消当前行</td>\n</tr>\n<tr>\n<td>Ctr + l</td>\n<td>清除屏幕</td>\n</tr>\n<tr>\n<td>Ctr + r</td>\n<td>搜索历史</td>\n</tr>\n<tr>\n<td>Ctr + Right</td>\n<td>Complete history word</td>\n</tr>\n<tr>\n<td>Ctr + Right</td>\n<td>右移一个词</td>\n</tr>\n<tr>\n<td>Ctr + Left</td>\n<td>左移一个词</td>\n</tr>\n<tr>\n<td>Up</td>\n<td>菜单上移</td>\n</tr>\n<tr>\n<td>Up</td>\n<td>上移</td>\n</tr>\n<tr>\n<td>Down</td>\n<td>菜单下移</td>\n</tr>\n<tr>\n<td>Down</td>\n<td>下移</td>\n</tr>\n<tr>\n<td>Left</td>\n<td>菜单左移</td>\n</tr>\n<tr>\n<td>Left</td>\n<td>左移</td>\n</tr>\n<tr>\n<td>Right</td>\n<td>完成历史提示</td>\n</tr>\n<tr>\n<td>Right</td>\n<td>菜单右移</td>\n</tr>\n<tr>\n<td>Right</td>\n<td>右移</td>\n</tr>\n<tr>\n<td>Ctr + b</td>\n<td>菜单左移</td>\n</tr>\n<tr>\n<td>Ctr + b</td>\n<td>左移</td>\n</tr>\n<tr>\n<td>Ctr + f</td>\n<td>完成历史提示</td>\n</tr>\n<tr>\n<td>Ctr + f</td>\n<td>菜单右移</td>\n</tr>\n<tr>\n<td>Ctr + f</td>\n<td>右移</td>\n</tr>\n<tr>\n<td>Ctr + p</td>\n<td>菜单上移</td>\n</tr>\n<tr>\n<td>Ctr + p</td>\n<td>上移</td>\n</tr>\n<tr>\n<td>Ctr + n</td>\n<td>菜单下移</td>\n</tr>\n<tr>\n<td>Ctr + n</td>\n<td>下移</td>\n</tr>\n</tbody>\n</table>\n<p>Vi 普通键绑定</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctr + c</td>\n<td>取消当前行</td>\n</tr>\n<tr>\n<td>Ctr + l</td>\n<td>清除屏幕</td>\n</tr>\n<tr>\n<td>Up</td>\n<td>菜单上移</td>\n</tr>\n<tr>\n<td>Up</td>\n<td>上移</td>\n</tr>\n<tr>\n<td>Down</td>\n<td>菜单下移</td>\n</tr>\n<tr>\n<td>Down</td>\n<td>下移</td>\n</tr>\n<tr>\n<td>Left</td>\n<td>菜单左移</td>\n</tr>\n<tr>\n<td>Left</td>\n<td>左移</td>\n</tr>\n<tr>\n<td>Right</td>\n<td>菜单右移</td>\n</tr>\n<tr>\n<td>Right</td>\n<td>右移</td>\n</tr>\n</tbody>\n</table>\n<p>除了之前的键盘绑定，在正常 Vi 模式下，你可以使用经典的 Vi 快捷键来进行移动或者执行相应的动作。可用的组合的选项是：</p>\n<p>Vi 正常移动快捷键</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>移动</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>w</td>\n<td>前移一个单词</td>\n</tr>\n<tr>\n<td>d</td>\n<td>移动到行尾</td>\n</tr>\n<tr>\n<td>0</td>\n<td>移动到行首</td>\n</tr>\n<tr>\n<td>$</td>\n<td>移动到行尾</td>\n</tr>\n<tr>\n<td>f</td>\n<td>行内向右查找字符</td>\n</tr>\n<tr>\n<td>t</td>\n<td>行内右移到指定字符前</td>\n</tr>\n<tr>\n<td>F</td>\n<td>行内向左查找字符</td>\n</tr>\n<tr>\n<td>T</td>\n<td>行内左移到指定字符前</td>\n</tr>\n</tbody>\n</table>\n<p>Vi 正常操作快捷键</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>p</td>\n<td>在光标之后粘贴</td>\n</tr>\n<tr>\n<td>P</td>\n<td>在光标之前粘贴</td>\n</tr>\n<tr>\n<td>h</td>\n<td>左移</td>\n</tr>\n<tr>\n<td>l</td>\n<td>右移</td>\n</tr>\n<tr>\n<td>j</td>\n<td>下移</td>\n</tr>\n<tr>\n<td>k</td>\n<td>上移</td>\n</tr>\n<tr>\n<td>w</td>\n<td>右移一个单词</td>\n</tr>\n<tr>\n<td>b</td>\n<td>左移一个单词</td>\n</tr>\n<tr>\n<td>i</td>\n<td>在光标前插入</td>\n</tr>\n<tr>\n<td>a</td>\n<td>在光标后插入</td>\n</tr>\n<tr>\n<td>0</td>\n<td>移到行首</td>\n</tr>\n<tr>\n<td>^</td>\n<td>移到行首</td>\n</tr>\n<tr>\n<td>$</td>\n<td>移到行尾</td>\n</tr>\n<tr>\n<td>u</td>\n<td>撤销</td>\n</tr>\n<tr>\n<td>c</td>\n<td>修改</td>\n</tr>\n<tr>\n<td>x</td>\n<td>删除字符</td>\n</tr>\n<tr>\n<td>s</td>\n<td>搜索历史</td>\n</tr>\n<tr>\n<td>D</td>\n<td>删除当前位置到行尾</td>\n</tr>\n<tr>\n<td>A</td>\n<td>在当前行最后插入</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"命令历史\" tabindex=\"-1\"> 命令历史</h3>\n<p>如前所述，Reedline 管理并存储所有被编辑并发送给 Nushell 的命令。要配置 Reedline 可以存储的最大记录数，你需要在配置文件中调整这个值：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n    max_history_size: <span>1000</span>\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div><h3 id=\"定制你的提示\" tabindex=\"-1\"> 定制你的提示</h3>\n<p>Reedline 的提示语也是高度可定制的。为了构建你的完美提示符，你可以在配置文件中定义下面的环境变量：</p>\n<div><pre><code><span># Use nushell functions to define your right and left prompt</span>\ndef create_left_prompt <span>[</span><span>]</span> <span>{</span>\n    <span>let</span> path_segment <span>=</span> <span>(</span><span>$env</span><span>.</span><span>PWD</span><span>)</span>\n\n    <span>$path_segment</span>\n<span>}</span>\n\ndef create_right_prompt <span>[</span><span>]</span> <span>{</span>\n    <span>let</span> time_segment <span>=</span> <span>(</span><span>[</span>\n        <span>(</span>date now <span>|</span> <span>date</span> <span>format</span> <span>'%m/%d/%Y %r'</span><span>)</span>\n    <span>]</span> <span>|</span> str collect<span>)</span>\n\n    <span>$time_segment</span>\n<span>}</span>\n\nlet-env PROMPT_COMMAND <span>=</span> <span>{</span> create_left_prompt <span>}</span>\nlet-env PROMPT_COMMAND_RIGHT <span>=</span> <span>{</span> create_right_prompt <span>}</span>\n</code></pre></div><div><p>TIP</p>\n<p>你并非必须要用 Nushell 的函数来定义环境变量，也可以使用简单的字符串来定义它们。</p>\n</div>\n<p>你也可以通过修改以下环境变量来定制行编辑器的提示符：</p>\n<div><pre><code>let-env PROMPT_INDICATOR <span>=</span> <span>\"〉\"</span>\nlet-env PROMPT_INDICATOR_VI_INSERT <span>=</span> <span>\": \"</span>\nlet-env PROMPT_INDICATOR_VI_NORMAL <span>=</span> <span>\"〉\"</span>\nlet-env PROMPT_MULTILINE_INDICATOR <span>=</span> <span>\"::: \"</span>\n</code></pre></div><div><p>TIP</p>\n<p>提示符是环境变量，它代表了提示的状态</p>\n</div>\n<h2 id=\"按键绑定\" tabindex=\"-1\"> 按键绑定</h2>\n<p>Reedline 按键绑定是一个强大的结构，它允许你建立一连串的事件，而且这些事件可以通过特定的按键组合来触发。</p>\n<p>例如，我们假设你想把补全菜单绑定到 <code>Ctrl + t</code> 这组快捷键上（默认是<code>tab</code>）。你可以添加下面的条目到你的配置文件：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    keybindings: <span>[</span>\n      <span>{</span>\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: <span>{</span> send: menu name: completion_menu <span>}</span>\n      <span>}</span>\n    <span>]</span>\n\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div><p>在加载这个新的 <code>config.nu</code> 之后，你的新键盘绑定（<code>Ctrl + t</code>）将打开命令自动补全。</p>\n<p>每个按键绑定都需要以下元素：</p>\n<ul>\n<li>name: 为你的绑定键取一个独特的名字，以便于在<code>$config.keybindings</code>中引用</li>\n<li>modifier: 绑定键的修饰符。选项有：\n<ul>\n<li>none</li>\n<li>control</li>\n<li>alt</li>\n<li>shift</li>\n<li>control | alt</li>\n<li>control | alt | shift</li>\n</ul>\n</li>\n<li>keycode: 这代表要按下的键</li>\n<li>mode: emacs, vi_insert, vi_normal (一个单独的字符串或一个列表，例如： [<code>vi_insert</code> <code>vi_normal</code>])</li>\n<li>event: 键盘绑定要发送的事件的类型。选项包括：\n<ul>\n<li>send</li>\n<li>edit</li>\n<li>until</li>\n</ul>\n</li>\n</ul>\n<div><p>TIP</p>\n<p>所有可用的修饰键、键码和事件都可以通过<code>keybindings list</code>命令找到。</p>\n</div>\n<div><p>TIP</p>\n<p>添加到 <code>vi_insert</code> 模式中的按键绑定将在行编辑器处于插入模式（可以写入文本）时可用，而标有 <code>vi_normal</code> 模式的按键绑定将在正常模式下（当光标使用 h、j、k 或 l 移动时）可用。</p>\n</div>\n<p>键盘绑定条目的事件部分是定义要执行的动作的地方。在这个字段，你可以使用一个记录或一个记录列表。比如这样：</p>\n<div><pre><code>  <span>..</span>.\n  event: <span>{</span> send: Enter <span>}</span>\n  <span>..</span>.\n</code></pre></div><p>或者</p>\n<div><pre><code>  <span>..</span>.\n  event: <span>[</span>\n    <span>{</span> edit: Clear <span>}</span>\n    <span>{</span> send: Enter <span>}</span>\n  <span>]</span>\n  <span>..</span>.\n</code></pre></div><p>上述第一个按键绑定例子遵循第一种情况，只有一个事件被发送到引擎。</p>\n<p>后一个按键绑定的例子是向引擎发送一系列的事件。它首先清除提示，插入一个字符串，然后输入该值。</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    keybindings: <span>[</span>\n    <span>{</span>\n      name: change_dir_with_fzf\n      modifier: CONTROL\n      keycode: Char_t\n      mode: emacs\n      event:<span>[</span>\n          <span>{</span> edit: Clear <span>}</span>\n          <span>{</span> edit: InsertString,\n            value: <span>\"cd (ls | where type == dir | each { |it| <span>$it</span>.name} | str collect (char nl) | fzf | decode utf-8 | str trim)\"</span>\n\n          <span>}</span>\n          <span>{</span> send: Enter <span>}</span>\n        <span>]</span>\n    <span>}</span>\n\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div><p>上面按键绑定的缺点是，插入的文本将被验证处理并保存在历史记录中，这使得按键绑定的执行速度有点慢，而且会用相同的命令来填充命令历史。出于这个原因，可以采用 <code>ExecuteHostCommand</code> 类型的事件。下一个例子以更简单的方式做了与前一个相同的事情，发送了一个单一的事件给引擎：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    keybindings: <span>[</span>\n    <span>{</span>\n      name: change_dir_with_fzf\n      modifier: CONTROL\n      keycode: Char_y\n      mode: emacs\n      event: <span>{</span>\n        send: ExecuteHostCommand,\n        cmd: <span>\"cd (ls | where type == dir | each { |it| <span>$it</span>.name} | str collect (char nl) | fzf | decode utf-8 | str trim)\"</span>\n      <span>}</span>\n    <span>}</span>\n  <span>]</span>\n\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div><p>在我们继续之前，你一定已经注意到，编辑和发送的语法发生了变化，因此有必要对它们进行更多的解释。 <code>send</code> 是所有可以被引擎处理的 <code>Reedline</code> 事件，而 <code>edit</code> 是所有可以被引擎处理的 <code>EditCommands</code>。</p>\n<h3 id=\"send类型\" tabindex=\"-1\"> <code>send</code>类型</h3>\n<p>要找到 <code>send</code> 的所有可用选项，你可以使用：</p>\n<div><pre><code>keybindings list <span>|</span> where <span>type</span> <span>==</span> events\n</code></pre></div><p>而 <code>send</code> 事件的语法如下：</p>\n<div><pre><code>    <span>..</span>.\n      event: <span>{</span> send: <span>&lt;</span>NAME OF EVENT FROM LIST<span>></span> <span>}</span>\n    <span>..</span>.\n</code></pre></div><div><p>TIP</p>\n<p>你可以用大写字母来命名事件的名称，键盘绑定解析器是不区分大小写的。</p>\n</div>\n<p>这条规则有两个例外：<code>Menu</code>和<code>ExecuteHostCommand</code>。这两个事件需要一个额外的字段来完成，<code>Menu</code> 需要有一个菜单的名称才能触发（自动补全菜单或历史命令菜单）：</p>\n<div><pre><code>    <span>..</span>.\n      event: <span>{</span>\n        send: menu\n        name: completion_menu\n      <span>}</span>\n    <span>..</span>.\n</code></pre></div><p>而 <code>ExecuteHostCommand</code> 需要一个有效的命令，它将被发送到引擎：</p>\n<div><pre><code>    <span>..</span>.\n      event: <span>{</span>\n        send: ExecuteHostCommand\n        cmd: <span>\"cd ~\"</span>\n      <span>}</span>\n    <span>..</span>.\n</code></pre></div><p>值得一提的是，在事件列表中，你还会看到<code>Edit([])</code>，<code>Multiple([])</code>和<code>UntilFound([])</code>。这些选项对解析器是不可见的，因为它们是基于键盘绑定的定义来构建的。例如，当你在键盘绑定事件里面定义了一个记录列表时，就会为你建立一个<code>Multiple([])</code>事件。<code>Edit([])</code>事件与前面提到的<code>edit</code>类型相同。<code>UntilFound([])</code>事件和前面提到的<code>until</code>类型一样。</p>\n<h3 id=\"edit类型\" tabindex=\"-1\"> <code>edit</code>类型</h3>\n<p><code>edit</code>类型是<code>Edit([])</code>事件的简化。<code>event</code>类型简化了定义复杂编辑事件的按键绑定。要列出可用的选项，你可以使用下面的命令：</p>\n<div><pre><code>keybindings list <span>|</span> where <span>type</span> <span>==</span> edits\n</code></pre></div><p>以下是编辑的常用语法：</p>\n<div><pre><code>    <span>..</span>.\n      event: <span>{</span> edit: <span>&lt;</span>NAME OF EDIT FROM LIST<span>></span> <span>}</span>\n    <span>..</span>.\n</code></pre></div><p>列表中带有 <code>()</code> 的编辑的语法有一点变化，因为这些编辑需要一个额外的值来进行完全定义。例如，如果我们想在提示符所在的位置插入一个字符串，那么你将不得不使用如下方式：</p>\n<div><pre><code>    <span>..</span>.\n      event: <span>{</span>\n        edit: InsertString\n        value: <span>\"MY NEW STRING\"</span>\n      <span>}</span>\n    <span>..</span>.\n</code></pre></div><p>或者说你想向右移动，直到第一个<code>S</code>：</p>\n<div><pre><code>    <span>..</span>.\n      event: <span>{</span>\n        edit: MoveRightUntil\n        value: <span>\"S\"</span>\n      <span>}</span>\n    <span>..</span>.\n</code></pre></div><p>正如你所看到的，这两种类型将允许你构建你需要的任何类型的按键绑定。</p>\n<h3 id=\"until类型\" tabindex=\"-1\"> <code>until</code>类型</h3>\n<p>为了完成这个按键绑定之旅，我们需要讨论事件的<code>until</code>类型。正如你到目前为止所看到的，你可以发送一个单一的事件或一个事件列表。而当一个事件列表被发送时，每一个事件都会被处理。</p>\n<p>然而，在有些情况下，你可能想把不同的事件分配给同一个键盘绑定。这在 Nushell 菜单中特别有用。例如，假设你仍然想用<code>Ctrl + t</code>激活你的补全菜单，但你也想在菜单被激活后用同一个快捷键移动到下一个元素。</p>\n<p>对于这些情况，我们有<code>until</code>关键字。在<code>until</code>事件中列出的事件将被逐一处理，不同的是，一旦一个事件被成功处理，事件处理就会停止。</p>\n<p>下一个键盘绑定就是这种情况：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    keybindings: <span>[</span>\n      <span>{</span>\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: <span>{</span>\n          until: <span>[</span>\n            <span>{</span> send: menu name: completion_menu <span>}</span>\n            <span>{</span> send: MenuNext <span>}</span>\n          <span>]</span>\n        <span>}</span>\n      <span>}</span>\n    <span>]</span>\n\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div><p>上面的按键绑定将首先尝试打开一个补全菜单。如果菜单没有激活，它将激活它并发送一个成功信号。如果再次按下按键绑定，因为已经有一个激活的菜单，那么它将发送的下一个事件是<code>MenuNext</code>，这意味着它将把选择器移动到菜单的下一个元素。</p>\n<p>正如你所看到的，<code>until</code>关键字允许我们为同一个键盘绑定定义两个事件。在写这篇文章的时候，只有菜单事件允许这种类型的分层。其他非菜单事件类型将总是返回一个成功值，这意味着<code>until</code>事件在到达第一个命令时就会停止。</p>\n<p>例如，下一个按键绑定将总是发送一个<code>down</code>，因为该事件总是成功的。</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    keybindings: <span>[</span>\n      <span>{</span>\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: <span>{</span>\n          until: <span>[</span>\n            <span>{</span> send: down <span>}</span>\n            <span>{</span> send: menu name: completion_menu <span>}</span>\n            <span>{</span> send: menunext <span>}</span>\n          <span>]</span>\n        <span>}</span>\n      <span>}</span>\n    <span>]</span>\n\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div><h3 id=\"移除一个默认的按键绑定\" tabindex=\"-1\"> 移除一个默认的按键绑定</h3>\n<p>如果你想删除某个默认的按键绑定，而不打算使用不同的动作来替代它，你可以设置<code>event: null</code>。</p>\n<p>例如，在所有的编辑模式下，禁用 <code>Ctrl + l</code> 清除屏幕：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    keybindings: <span>[</span>\n      <span>{</span>\n        modifier: control\n        keycode: char_l\n        mode: <span>[</span>emacs, vi_normal, vi_insert<span>]</span>\n        event: null\n      <span>}</span>\n    <span>]</span>\n\n    <span>..</span>.\n  <span>}</span>\n\n</code></pre></div><h3 id=\"排查键盘绑定问题\" tabindex=\"-1\"> 排查键盘绑定问题</h3>\n<p>你的终端环境可能并不总是以你期望的方式将你的组合键冒泡到 Nushell 上。\n你可以使用<code>keybindings listen</code>命令来确定 Nushell 是否真的收到了某些按键，以及如何收到的。</p>\n<h2 id=\"菜单\" tabindex=\"-1\"> 菜单</h2>\n<p>感谢 Reedline，Nushell 的菜单可以帮助你完成日常的 Shell 脚本操作。接下来我们介绍一下在使用 Nushell 时一直可用的默认菜单。</p>\n<h3 id=\"帮助菜单\" tabindex=\"-1\"> 帮助菜单</h3>\n<p>帮助菜单的存在是为了方便你过渡到 Nushell。假设你正在组建一个惊人的管道，然后你忘记了反转一个字符串的内部命令。你可以用<code>ctr+q</code>来激活帮助菜单，而不是删除你的管道。一旦激活，只需输入你要找的命令的关键词，菜单就会显示与你的输入相匹配的命令，而匹配的依据就是命令的名称或描述。</p>\n<p>要浏览菜单，你可以用<code>tab</code>选择下一个元素，你可以按左键或右键滚动描述，你甚至可以在行中粘贴可用的命令例子。</p>\n<p>帮助菜单可以通过修改以下参数进行配置：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    menus <span>=</span> <span>[</span>\n      <span>..</span>.\n      <span>{</span>\n        name: help_menu\n        only_buffer_difference: <span>true</span> <span># Search is done on the text written after activating the menu</span>\n        marker: <span>\"? \"</span>                 <span># Indicator that appears with the menu is active</span>\n        type: <span>{</span>\n            layout: description      <span># Type of menu</span>\n            columns: <span>4</span>               <span># Number of columns where the options are displayed</span>\n            col_width: <span>20</span>            <span># Optional value. If missing all the screen width is used to calculate column width</span>\n            col_padding: <span>2</span>           <span># Padding between columns</span>\n            selection_rows: <span>4</span>        <span># Number of rows allowed to display found options</span>\n            description_rows: <span>10</span>     <span># Number of rows allowed to display command description</span>\n        <span>}</span>\n        style: <span>{</span>\n            text: green                   <span># Text style</span>\n            selected_text: green_reverse  <span># Text style for selected option</span>\n            description_text: yellow      <span># Text style for description</span>\n        <span>}</span>\n      <span>}</span>\n      <span>..</span>.\n    <span>]</span>\n    <span>..</span>.\n</code></pre></div><h3 id=\"补全菜单\" tabindex=\"-1\"> 补全菜单</h3>\n<p>补全菜单是一个上下文敏感的菜单，它将根据提示的状态给出建议。这些建议的范围包括从路径建议到替代命令。在编写命令时，你可以激活该菜单以查看内部命令的可用选项。另外，如果你已经为外部命令定义了你的自定义补全方式，这些补全提示也会出现在菜单中。</p>\n<p>默认情况下，补全菜单是通过按<code>tab</code>访问的，它可以通过修改配置对象中的这些值来进行配置：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    menus <span>=</span> <span>[</span>\n      <span>..</span>.\n      <span>{</span>\n        name: completion_menu\n        only_buffer_difference: <span>false</span> <span># Search is done on the text written after activating the menu</span>\n        marker: <span>\"| \"</span>                  <span># Indicator that appears with the menu is active</span>\n        type: <span>{</span>\n            layout: columnar          <span># Type of menu</span>\n            columns: <span>4</span>                <span># Number of columns where the options are displayed</span>\n            col_width: <span>20</span>             <span># Optional value. If missing all the screen width is used to calculate column width</span>\n            col_padding: <span>2</span>            <span># Padding between columns</span>\n        <span>}</span>\n        style: <span>{</span>\n            text: green                   <span># Text style</span>\n            selected_text: green_reverse  <span># Text style for selected option</span>\n            description_text: yellow      <span># Text style for description</span>\n        <span>}</span>\n      <span>}</span>\n      <span>..</span>.\n    <span>]</span>\n    <span>..</span>.\n</code></pre></div><p>通过修改这些参数，你可以根据自己的喜好定制你的菜单布局。</p>\n<h3 id=\"历史菜单\" tabindex=\"-1\"> 历史菜单</h3>\n<p>历史菜单是访问编辑器命令历史的一个便捷方法。当激活菜单时(默认为<code>Ctrl+x</code>)，命令的历史会以时间倒序显示，这使得选择前一个命令变得非常容易。</p>\n<p>历史菜单可以通过修改配置对象中的这些值进行配置：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    menus <span>=</span> <span>[</span>\n      <span>..</span>.\n      <span>{</span>\n        name: help_menu\n        only_buffer_difference: <span>true</span> <span># Search is done on the text written after activating the menu</span>\n        marker: <span>\"? \"</span>                 <span># Indicator that appears with the menu is active</span>\n        type: <span>{</span>\n            layout: list             <span># Type of menu</span>\n            page_size: <span>10</span>            <span># Number of entries that will presented when activating the menu</span>\n        <span>}</span>\n        style: <span>{</span>\n            text: green                   <span># Text style</span>\n            selected_text: green_reverse  <span># Text style for selected option</span>\n            description_text: yellow      <span># Text style for description</span>\n        <span>}</span>\n      <span>}</span>\n      <span>..</span>.\n    <span>]</span>\n    <span>..</span>.\n</code></pre></div><p>当历史菜单被激活时，它从历史中拉出<code>page_size</code>个记录并在菜单中呈现。如果终端还有空间，当你再次按<code>Ctrl+x</code>时，菜单将拉出相同数量的记录，并将它们追加到当前页。如果不可能呈现所有拉出的记录，菜单将创建一个新的页面。可以通过按<code>Ctrl+z</code>转到上一页或<code>Ctrl+x</code>转到下一页来浏览这些页面。</p>\n<h4 id=\"搜索历史记录\" tabindex=\"-1\"> 搜索历史记录</h4>\n<p>要在你的命令历史中搜索，你可以开始输入你要找的命令的关键词。一旦菜单被激活，你输入的任何内容都会被历史记录中选定的命令所取代。例如，假设你已经输入了以下内容：</p>\n<div><pre><code><span>let</span> a <span>=</span> <span>(</span><span>)</span>\n</code></pre></div><p>你可以把光标放在 <code>()</code> 内并激活菜单，你可以通过输入关键词来过滤历史记录，一旦你选择了一个条目，输入的词就会被替换：</p>\n<div><pre><code><span>let</span> a <span>=</span> <span>(</span>ls <span>|</span> where size <span>></span> 10MiB<span>)</span>\n</code></pre></div><h4 id=\"菜单快速选择\" tabindex=\"-1\"> 菜单快速选择</h4>\n<p>菜单的另一个很好的特性是能够快速选择其中的内容。假设你已经激活了你的菜单，它看起来像这样：</p>\n<div><pre><code><span>></span>\n<span>0</span>: <span>ls</span> <span>|</span> where size <span>></span> 10MiB\n<span>1</span>: <span>ls</span> <span>|</span> where size <span>></span> 20MiB\n<span>2</span>: <span>ls</span> <span>|</span> where size <span>></span> 30MiB\n<span>3</span>: <span>ls</span> <span>|</span> where size <span>></span> 40MiB\n</code></pre></div><p>你可以输入<code>!3</code>，然后按回车，而不是按向下键去选择第四个条目。这将在提示位置插入选定的文本，节省你向下滚动菜单的时间。</p>\n<p>历史搜索和快速选择可以一起使用。你可以激活菜单，进行快速搜索，然后使用前面的方法进行快速选择。</p>\n<h3 id=\"用户定义菜单\" tabindex=\"-1\"> 用户定义菜单</h3>\n<p>如果你发现默认的菜单对你来说是不够的，你需要要创建自己的菜单，Nushell 也可以帮你做到这点。</p>\n<p>为了添加一个满足你需求的新菜单，你可以使用其中一个默认的布局作为模板。Nushell 中可用的模板有列式、列表式或描述式。</p>\n<p>列式菜单将以列的方式向你显示数据，并根据你的列中显示的文本大小调整列数。</p>\n<p>列表类型的菜单将总是以列表的形式显示建议，你可以通过使用<code>!</code>加数字的组合来选择值。</p>\n<p>描述类型将给你更多的空间来显示一些值的描述，以及可以插入到缓冲区的额外信息。</p>\n<p>假设我们想创建一个菜单，用于显示在你的会话中创建的所有变量，我们将把它称为<code>vars_menu</code>。这个菜单将使用一个列表布局 (layout: list)。为了搜索值，我们希望只使用菜单激活后输入的东西(only_buffer_difference: true)。</p>\n<p>满足这些所需的菜单将看起来像这样：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    menus <span>=</span> <span>[</span>\n      <span>..</span>.\n      <span>{</span>\n        name: vars_menu\n        only_buffer_difference: <span>true</span>\n        marker: <span>\"# \"</span>\n        type: <span>{</span>\n            layout: list\n            page_size: <span>10</span>\n        <span>}</span>\n        style: <span>{</span>\n            text: green\n            selected_text: green_reverse\n            description_text: yellow\n        <span>}</span>\n        source: <span>{</span> <span>|</span>buffer, position<span>|</span>\n            <span>$nu</span>.scope.vars\n            <span>|</span> where name <span>=~</span> <span>$buffer</span>\n            <span>|</span> sort-by name\n            <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> <span>{</span>value: <span>$it</span>.name description: <span>$it</span>.type<span>}</span> <span>}</span>\n        <span>}</span>\n      <span>}</span>\n      <span>..</span>.\n    <span>]</span>\n    <span>..</span>.\n</code></pre></div><p>正如你所看到的，新的菜单与之前描述的<code>history_menu</code>是相同的，唯一的区别是新的字段叫<code>source</code>。<code>source</code>字段是 Nushell 所定义的，它包含了你想在菜单中显示的值。对于这个菜单，我们从<code>$nu.scope.vars</code>中提取数据，然后用它来创建记录并填充菜单。</p>\n<p>记录所需的结构如下：</p>\n<div><pre><code><span>{</span>\n  value:       <span># The value that will be inserted in the buffer</span>\n  description: <span># Optional. Description that will be display with the selected value</span>\n  span: <span>{</span>      <span># Optional. Span indicating what section of the string will be replaced by the value</span>\n    start:\n    end:\n  <span>}</span>\n  extra: <span>[</span>string<span>]</span> <span># Optional. A list of strings that will be displayed with the selected value. Only works with a description menu</span>\n<span>}</span>\n</code></pre></div><p>为了让菜单显示一些东西，至少<code>value</code>字段必须存在于结果记录中。</p>\n<p>为了使菜单具有交互性，这两个变量在块中可用：<code>$buffer</code>和<code>$position</code>。<code>$buffer</code>包含菜单捕获的值，当选项<code>only_buffer_difference</code>为真时，<code>$buffer</code>是菜单被激活后输入的文本。如果<code>only_buffer_difference</code>是假的，<code>$buffer</code>是行中所有的字符串。<code>$position</code>变量可以用来根据你对菜单的设想创建替换范围。<code>$position</code>的值会随着<code>only_buffer_difference</code>是真还是假而改变。当为真时，<code>$position</code>是在菜单激活后插入文本的字符串的起始位置；当值为 false 时，<code>$position</code>表示实际的光标位置。</p>\n<p>利用这些信息，你可以设计你的菜单来呈现你所需要的信息，并在需要的位置替换该值。之后，玩转你的菜单唯一额外需要做的事情是定义一个按键绑定，并用于激活你的全新菜单。</p>\n<h3 id=\"菜单按键绑定\" tabindex=\"-1\"> 菜单按键绑定</h3>\n<p>如果你想改变两个菜单的默认激活方式，可以通过定义新的按键绑定来实现。例如，接下来的两个按键绑定设置分别将<code>Ctrl+t</code>和<code>Ctrl+y</code>定义为触发自动补全和历史菜单：</p>\n<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>\n    <span>..</span>.\n\n    keybindings: <span>[</span>\n      <span>{</span>\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: <span>[</span>vi_insert vi_normal<span>]</span>\n        event: <span>{</span>\n          until: <span>[</span>\n            <span>{</span> send: menu name: completion_menu <span>}</span>\n            <span>{</span> send: menupagenext <span>}</span>\n          <span>]</span>\n        <span>}</span>\n      <span>}</span>\n      <span>{</span>\n        name: history_menu\n        modifier: control\n        keycode: char_y\n        mode: <span>[</span>vi_insert vi_normal<span>]</span>\n        event: <span>{</span>\n          until: <span>[</span>\n            <span>{</span> send: menu name: history_menu <span>}</span>\n            <span>{</span> send: menupagenext <span>}</span>\n          <span>]</span>\n        <span>}</span>\n      <span>}</span>\n    <span>]</span>\n\n    <span>..</span>.\n  <span>}</span>\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.485Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "加载数据",
      "url": "www.nushell.sh/zh-CN/book/loading_data.html",
      "id": "www.nushell.sh/zh-CN/book/loading_data.html",
      "content_html": "<h1 id=\"加载数据\" tabindex=\"-1\"> 加载数据</h1>\n<p>之前我们使用了<a href=\"/book/commands/ls.html\"><code>ls</code></a>、<a href=\"/book/commands/ps.html\"><code>ps</code></a>、<a href=\"/book/commands/date.html\"><code>date</code></a>和<a href=\"/book/commands/sys.html\"><code>sys</code></a>等命令来加载关于文件、进程、日期时间和系统本身的信息。每条命令都会给我们提供一个信息表，以对其进行探索。我们也可以通过其他方式将数据载入表格以供使用。</p>\n<h2 id=\"打开文件\" tabindex=\"-1\"> 打开文件</h2>\n<p>Nu 在处理数据方面最强大的能力之一是<a href=\"/book/commands/open.html\"><code>open</code></a>命令。它是一个多功能命令，可以处理许多不同的数据格式。为了说明这一点让我们试着打开一个 JSON 文件：</p>\n<div><pre><code>> open editors/vscode/package.json\n──────────────────┬───────────────────────────────────────────────────────────────────────────────\n name             │ lark\n description      │ Lark support for VS Code\n author           │ Lark developers\n license          │ MIT\n version          │ 1.0.0\n repository       │ [row type url]\n publisher        │ vscode\n categories       │ [table 0 rows]\n keywords         │ [table 1 rows]\n engines          │ [row vscode]\n activationEvents │ [table 1 rows]\n main             │ ./out/extension\n contributes      │ [row configuration grammars languages]\n scripts          │ [row compile postinstall test vscode:prepublish watch]\n devDependencies  │ [row @types/mocha @types/node tslint typescript vscode vscode-languageclient]\n──────────────────┴───────────────────────────────────────────────────────────────────────────────\n</code></pre></div><p>与<a href=\"/book/commands/ls.html\"><code>ls</code></a>类似，打开一个 Nu 支持的文件类型，会返回一些不仅仅是文本（或一个字节流）的东西。这里我们打开了一个来自 JavaScript 项目的 &quot;package.json&quot; 文件。Nu 可以识别 JSON 文本并将其解析为一个数据表。</p>\n<p>如果我们想查看当前项目的版本，我们可以使用<a href=\"/book/commands/get.html\"><code>get</code></a>命令：</p>\n<div><pre><code>> open editors/vscode/package.json | get version\n1.0.0\n</code></pre></div><p>Nu 目前支持直接从以下格式加载表数据：</p>\n<ul>\n<li>csv</li>\n<li>eml</li>\n<li>ics</li>\n<li>ini</li>\n<li>json</li>\n<li>nuon</li>\n<li>ods</li>\n<li>ssv</li>\n<li>toml</li>\n<li>tsv</li>\n<li>url</li>\n<li>vcf</li>\n<li>xlsx / xls</li>\n<li>xml</li>\n<li>yaml / yml</li>\n</ul>\n<p>但是，当你加载其他的文本文件时会发生什么呢？让我们试一试：</p>\n<div><pre><code><span>></span> <span>open</span> README.md\n</code></pre></div><p>我们会看到该文件的内容，如果文件太大则会得到一个方便的滚动视图来查看文件，然后再跳回终端。为了提高可读性，Nu 还将语法高亮显示常见的文件格式，如源码文件、Markdown 等等。</p>\n<p>本质上，这些文本文件对 Nu 来说就是一个大字符串。接下来，我们将讨论如何处理这些字符串，以便从中获得我们需要的数据。</p>\n<h2 id=\"处理字符串\" tabindex=\"-1\"> 处理字符串</h2>\n<p>处理来自 Nu 外部数据时一个普遍情况是，它并不总是以 Nu 理解的格式出现。通常这些数据是以字符串的形式提供给我们的。</p>\n<p>想象一下，我们得到了这个数据文件：</p>\n<div><pre><code>> open people.txt\nOctavia | Butler | Writer\nBob | Ross | Painter\nAntonio | Vivaldi | Composer\n</code></pre></div><p>我们想要的数据都由管道（<code>|</code>）符号隔开，每人单独一行。由于 Nu 没有默认的以管道分隔的文件格式，所以我们必须自己来解析。</p>\n<p>当我们引入这个文件时，我们需要做的第一件事是确保后续每次只处理一行：</p>\n<div><pre><code>> open people.txt | lines\n───┬──────────────────────────────\n 0 │ Octavia | Butler | Writer\n 1 │ Bob | Ross | Painter\n 2 │ Antonio | Vivaldi | Composer\n───┴──────────────────────────────\n</code></pre></div><p>可以看到，我们正在处理这些行，因为我们又回到了一个表中。下一步是看看是否可以把行分割成更有用的东西。为此，我们将使用<a href=\"/book/commands/split.html\"><code>split</code></a>命令。<a href=\"/book/commands/split.html\"><code>split</code></a>，顾名思义，为我们提供了一种分割字符串的方法。我们将使用<a href=\"/book/commands/split.html\"><code>split</code></a>的<code>column</code>子命令，将内容分成多列。我们会告诉它分隔符是什么，剩下的就由它来完成：</p>\n<div><pre><code>> open people.txt | lines | split column \"|\"\n───┬──────────┬───────────┬───────────\n # │ column1  │ column2   │ column3\n───┼──────────┼───────────┼───────────\n 0 │ Octavia  │  Butler   │  Writer\n 1 │ Bob      │  Ross     │  Painter\n 2 │ Antonio  │  Vivaldi  │  Composer\n───┴──────────┴───────────┴───────────\n</code></pre></div><p>这看起来差不多了，只是还有一些额外的空白字符，让我们 <a href=\"/book/commands/str_trim.html\"><code>trim</code></a> 掉这些空格：</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" | str trim\n───┬─────────┬─────────┬──────────\n # │ column1 │ column2 │ column3\n───┼─────────┼─────────┼──────────\n 0 │ Octavia │ Butler  │ Writer\n 1 │ Bob     │ Ross    │ Painter\n 2 │ Antonio │ Vivaldi │ Composer\n───┴─────────┴─────────┴──────────\n</code></pre></div><p>还不错，<a href=\"/book/commands/split.html\"><code>split</code></a>命令返回给我们可以使用的数据，还预设了默认的列名：</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" | str trim | get column1\n───┬─────────\n 0 │ Octavia\n 1 │ Bob\n 2 │ Antonio\n───┴─────────\n</code></pre></div><p>我们也可以用自定义的列名代替默认的：</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" first_name last_name job | str trim\n───┬────────────┬───────────┬──────────\n # │ first_name │ last_name │ job\n───┼────────────┼───────────┼──────────\n 0 │ Octavia    │ Butler    │ Writer\n 1 │ Bob        │ Ross      │ Painter\n 2 │ Antonio    │ Vivaldi   │ Composer\n───┴────────────┴───────────┴──────────\n</code></pre></div><p>现在，我们的数据加载到一个表中了，我们可以使用之前对表所用的各种命令来处理它：</p>\n<div><pre><code>> open people.txt | lines | split column \"|\" first_name last_name job | str trim | sort-by first_name\n───┬────────────┬───────────┬──────────\n # │ first_name │ last_name │ job\n───┼────────────┼───────────┼──────────\n 0 │ Antonio    │ Vivaldi   │ Composer\n 1 │ Bob        │ Ross      │ Painter\n 2 │ Octavia    │ Butler    │ Writer\n───┴────────────┴───────────┴──────────\n</code></pre></div><p>其他可用于字符串的命令有：</p>\n<ul>\n<li><code>str</code></li>\n<li><a href=\"/book/commands/lines.html\"><code>lines</code></a></li>\n<li><a href=\"/book/commands/size.html\"><code>size</code></a></li>\n</ul>\n<p>如果我们已经知道待处理的数据具有 Nu 能够理解的格式，则可以使用一些辅助命令，例如，我们打开一个 Rust 的 Cargo.lock 文件：</p>\n<div><pre><code>> open Cargo<span>.</span>lock\n<span># This file is automatically @generated by Cargo.</span>\n<span># It is not intended for manual editing.</span>\n<span>[</span><span>[</span><span>package</span><span>]</span><span>]</span>\n<span>name</span> <span>=</span> <span>\"adhoc_derive\"</span>\n<span>version</span> <span>=</span> <span>\"0.1.2\"</span>\n</code></pre></div><p>&quot;Cargo.lock&quot; 实际上是一个 .toml 文件，但是文件扩展名不是 .toml。没关系，我们可以使用 <code>from toml</code> 命令：</p>\n<div><pre><code>> open Cargo.lock | from toml\n──────────┬───────────────────\n metadata │ [row 107 columns]\n package  │ [table 130 rows]\n──────────┴───────────────────\n</code></pre></div><p>每种 Nu 能打开并理解的结构化数据文本格式都有对应的 <code>from</code> 命令可以使用，只需要把支持的格式作为子命令传给 <code>from</code> 就可以了。</p>\n<h2 id=\"以原始模式打开\" tabindex=\"-1\"> 以原始模式打开</h2>\n<p>虽然能够打开一个文件并立即使用其数据表很有帮助，但这并不总是我们想要的。为了获得原始文本，<a href=\"/book/commands/open.html\"><code>open</code></a>命令可以接受一个可选的<code>--raw</code>标志：</p>\n<div><pre><code>> open Cargo<span>.</span>toml --raw\n<span>[</span><span>package</span><span>]</span>\n<span>name</span> <span>=</span> <span>\"nu\"</span>\n<span>version</span> <span>=</span> <span>\"0.1.3\"</span>\n<span>authors</span> <span>=</span> <span>[</span><span>\"Yehuda Katz &lt;wycats@gmail.com>\"</span><span>,</span> <span>\"Jonathan Turner &lt;jonathan.d.turner@gmail.com>\"</span><span>]</span>\n<span>description</span> <span>=</span> <span>\"A shell for the GitHub era\"</span>\n<span>license</span> <span>=</span> <span>\"MIT\"</span>\n</code></pre></div><h2 id=\"获取-urls\" tabindex=\"-1\"> 获取 URLs</h2>\n<p>除了从文件系统中加载文件，你还可以通过使用<a href=\"/book/commands/fetch.html\"><code>fetch</code></a>命令来加载 URLs。这将从互联网上获取 URL 的内容并返回：</p>\n<div><pre><code>> fetch https://blog.rust-lang.org/feed.xml\n──────┬───────────────────\n feed │ {record 2 fields}\n──────┴───────────────────\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.485Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "元数据",
      "url": "www.nushell.sh/zh-CN/book/metadata.html",
      "id": "www.nushell.sh/zh-CN/book/metadata.html",
      "content_html": "<h1 id=\"元数据\" tabindex=\"-1\"> 元数据</h1>\n<p>在使用 Nu 的过程中，你可能遇到过这样的情况：你觉得有一些额外的事情在幕后进行。例如，假设你试图打开一个 Nu 支持的文件，但却忘记了它已被 Nu 支持并试图再次转换：</p>\n<div><pre><code>> open Cargo.toml | from toml\nerror: Expected a string from pipeline\n- shell:1:18\n1 | open Cargo.toml | from toml\n  |                   ^^^^^^^^^ requires string input\n- shell:1:5\n1 | open Cargo.toml | from toml\n  |      ---------- object originates from here\n</code></pre></div><p>这个错误信息不仅告诉我们，我们给 <code>from toml</code> 的不是一个字符串，还告诉我们这个值最初来自哪里。那么它是如何知道的呢？</p>\n<p>在 Nu 中流经管道的值通常有一些额外信息，或元数据，附加在它们身上。这些通常被称为标签，就像商店里商品上的标签一样。这些标签并不影响数据，但它们给了 Nu 一种方法来改善使用这些数据的体验。</p>\n<p>让我们再次运行<a href=\"/book/commands/open.html\"><code>open</code></a>命令，但这一次，我们将看一下它所反馈的标签：</p>\n<div><pre><code>> open Cargo.toml | metadata\n────────┬───────────────────────────────────────────\n span   │ {record 2 fields}\n────────┴───────────────────────────────────────────\n</code></pre></div><p>目前，我们只追踪值来自何处的起止范围(span)。让我们进一步仔细看看：</p>\n<div><pre><code><span>></span> <span>open</span> Cargo.toml <span>|</span> metadata <span>|</span> get span\n───────┬────\n start │ <span>5</span>\n end   │ <span>15</span>\n───────┴────\n</code></pre></div><p>这里的范围 &quot;start&quot; 和 &quot;end&quot; 指的是下划线将标记在行中的位置。如果你数到 5，然后再数到 15，就会看到它与 &quot;Cargo.toml&quot; 文件名一致。这就是我们之前看到的错误是如何知道在何处标注下划线的。</p>\n",
      "date_modified": "2022-06-03T06:25:20.486Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "模块",
      "url": "www.nushell.sh/zh-CN/book/modules.html",
      "id": "www.nushell.sh/zh-CN/book/modules.html",
      "content_html": "<h1 id=\"模块\" tabindex=\"-1\"> 模块</h1>\n<p>与其他许多编程语言类似，Nushell 也有模块，可以让你将自定义的命令导入到当前作用域中。\n然而，由于 Nushell 也是一个 Shell，模块还允许你导入环境变量，可以用来方便地激活/停用各种环境配置。</p>\n<p><em>注意! 目前对模块的实现是相当基本的，并将在未来进一步扩展。例如，目前还不能从一个模块中导入另一个模块。</em></p>\n<h2 id=\"基础知识\" tabindex=\"-1\"> 基础知识</h2>\n<p>一个简单的模块可以像这样定义：</p>\n<div><pre><code><span>></span> module greetings <span>{</span>\n     <span>export</span> def hello <span>[</span>name: string<span>]</span> <span>{</span>\n         $<span>\"hello (<span>$name</span>)!\"</span>\n     <span>}</span>\n\n     <span>export</span> def hi <span>[</span>where: string<span>]</span> <span>{</span>\n         $<span>\"hi (<span>$where</span>)!\"</span>\n     <span>}</span>\n<span>}</span>\n</code></pre></div><p>或者在一个与你要创建的模块名相同的文件中：</p>\n<div><pre><code><span># greetings.nu</span>\n\n<span>export</span> def hello <span>[</span>name: string<span>]</span> <span>{</span>\n    $<span>\"hello (<span>$name</span>)!\"</span>\n<span>}</span>\n\n<span>export</span> def hi <span>[</span>where: string<span>]</span> <span>{</span>\n    $<span>\"hi (<span>$where</span>)!\"</span>\n<span>}</span>\n</code></pre></div><p>我们在 <code>greetings</code> 模块中定义了 <code>hello</code> 和 <code>hi</code> 两个自定义命令。<code>export</code>关键字使得以后可以从模块中导入该命令。</p>\n<p>与<a href=\"/book/commands/def.html\"><code>def</code></a>类似，也可以用<code>export</code>关键字标记<a href=\"/book/commands/def-env.html\"><code>def-env</code></a>（你可以在<a href=\"/zh-CN/book/environment.html\">环境</a>章节中了解更多关于<a href=\"/book/commands/def-env.html\"><code>def-env</code></a>的信息）。</p>\n<h2 id=\"使用模块\" tabindex=\"-1\"> 使用模块</h2>\n<p>模块本身并不做任何事情，要使用模块导出的定义，我们需要<a href=\"/book/commands/use.html\"><code>use</code></a>它：</p>\n<div><pre><code><span>></span> use greetings\n\n<span>></span> greetings hello <span>\"world\"</span>\nhello world<span>!</span>\n\n<span>></span> greetings hi <span>\"there\"</span>\nhi there<span>!</span>\n</code></pre></div><p><code>hello</code>和<code>hi</code>命令现在可以通过<code>greetings</code>前缀被调用。</p>\n<h2 id=\"导入符号\" tabindex=\"-1\"> 导入符号</h2>\n<p>一般来说，<a href=\"/book/commands/use.html\"><code>use</code></a>关键词后面的任何内容都会形成一个<strong>导入模式</strong>，它控制着符号的导入方式。\n导入模式可以是以下的一种：</p>\n<p><code>use greetings</code></p>\n<p>导入所有以模块名称为前缀的符号（我们在前面的例子中看到了这个）。</p>\n<p><code>use greetings hello</code></p>\n<p><code>hello</code>符号将被直接导入，没有任何前缀。</p>\n<p><code>use greetings [ hello, hi ] </code></p>\n<p>直接导入多个符号，没有任何前缀。</p>\n<p><code>use greetings *</code></p>\n<p>你也可以使用模块名称和<code>*</code> glob 来直接导入所有的名称，且不需要任何前缀。</p>\n<h2 id=\"模块文件\" tabindex=\"-1\"> 模块文件</h2>\n<p>Nushell 让你隐含地把一个源文件当作一个模块。\n让我们先把模块定义的主体保存到一个文件中：</p>\n<div><pre><code><span># greetings.nu</span>\n\n<span>export</span> def hello <span>[</span>name: string<span>]</span> <span>{</span>\n    $<span>\"hello (<span>$name</span>)!\"</span>\n<span>}</span>\n\n<span>export</span> def hi <span>[</span>where: string<span>]</span> <span>{</span>\n    $<span>\"hi (<span>$where</span>)!\"</span>\n<span>}</span>\n</code></pre></div><p>现在，你可以直接在文件上调用<a href=\"/book/commands/use.html\"><code>use</code></a>：</p>\n<div><pre><code><span>></span> use greetings.nu\n\n<span>></span> greetings hello <span>\"world\"</span>\nhello world<span>!</span>\n\n<span>></span> greetings hi <span>\"there\"</span>\nhi there<span>!</span>\n</code></pre></div><p>Nushell 会自动从文件名（&quot;greetings&quot;，没有&quot;.nu&quot;扩展名）推断出模块的名称。所以你可以通过文件名而不是模块名配合使用上述任何导入模式来完成导入。</p>\n<h2 id=\"本地自定义命令\" tabindex=\"-1\"> 本地自定义命令</h2>\n<p>任何在模块中定义的自定义命令，如果没有<code>export</code>关键字，将只在该模块的作用域内工作：</p>\n<div><pre><code><span># greetings.nu</span>\n\n<span>export</span> def hello <span>[</span>name: string<span>]</span> <span>{</span>\n    greetings-helper <span>\"hello\"</span> <span>\"world\"</span>\n<span>}</span>\n\n<span>export</span> def hi <span>[</span>where: string<span>]</span> <span>{</span>\n    greetings-helper <span>\"hi\"</span> <span>\"there\"</span>\n<span>}</span>\n\ndef greetings-helper <span>[</span>greeting: string, subject: string<span>]</span> <span>{</span>\n    $<span>\"(<span>$greeting</span>) (<span>$subject</span>)!\"</span>\n<span>}</span>\n</code></pre></div><p>然后，在 Nushell 里我们可以从 &quot;greetings.nu&quot; 中导入所有定义：</p>\n<div><pre><code><span>></span> use greetings.nu *\n\n<span>></span> hello <span>\"world\"</span>\nhello world<span>!</span>\n\n<span>></span> hi <span>\"there\"</span>\nhi there<span>!</span>\n\n<span>></span> greetings-helper <span>\"foo\"</span> <span>\"bar\"</span>  <span># fails because 'greetings-helper' is not exported</span>\n</code></pre></div><h2 id=\"环境变量\" tabindex=\"-1\"> 环境变量</h2>\n<p>到目前为止，我们只是用模块来导入自定义命令，用同样的方法导出环境变量也是可能的。\n其语法与你可能习惯的<a href=\"/book/commands/let-env.html\"><code>let-env</code></a>或<a href=\"/book/commands/load-env.html\"><code>load-env</code></a>等命令略有不同：</p>\n<div><pre><code><span># greetings.nu</span>\n\n<span>export</span> <span>env</span> MYNAME <span>{</span> <span>\"Arthur, King of the Britons\"</span> <span>}</span>\n\n<span>export</span> def hello <span>[</span>name: string<span>]</span> <span>{</span>\n    $<span>\"hello (<span>$name</span>)\"</span>\n<span>}</span>\n</code></pre></div><p><code>use</code> 的工作方式与自定义命令相同：</p>\n<div><pre><code><span>></span> use greetings.nu\n\n<span>></span> <span>$env</span><span>.</span><span>\"greetings MYNAME\"</span>\nArthur, King of the Britons\n\n<span>></span> greetings hello <span>$env</span><span>.</span><span>\"greetings MYNAME\"</span>\nhello Arthur, King of the Britons<span>!</span>\n</code></pre></div><p>你可能注意到我们没有直接给<code>MYNAME</code>赋值，相反，我们给了它一个代码块（<code>{ ...}</code>），它在我们每次调用<a href=\"/book/commands/use.html\"><code>use</code></a>时都会被执行。例如，我们可以用<a href=\"/book/commands/random.html\"><code>random</code></a>命令来演示这一点：</p>\n<div><pre><code><span>></span> module roll <span>{</span> <span>export</span> <span>env</span> ROLL <span>{</span> random dice <span>|</span> into string <span>}</span> <span>}</span>\n\n<span>></span> use roll ROLL\n\n<span>></span> <span>$env</span>.ROLL\n<span>4</span>\n\n<span>></span> <span>$env</span>.ROLL\n<span>4</span>\n\n<span>></span> use roll ROLL\n\n<span>></span> <span>$env</span>.ROLL\n<span>6</span>\n\n<span>></span> <span>$env</span>.ROLL\n<span>6</span>\n</code></pre></div><h2 id=\"导出符号\" tabindex=\"-1\"> 导出符号</h2>\n<p>如上所述，你可以从模块中导出定义和环境变量。这可以让你更容易地将相关的定义分组，并导出你想公开的定义。</p>\n<p>你还可以导出别名和外部声明(extern)，并在需要时才使用这些功能。导出外部声明也让你有能力隐藏模块中的自定义自动补全命令，这样它们就不必成为全局命名空间的一部分。</p>\n<p>下面是所有你可以导出的列表：</p>\n<ul>\n<li><code>export def</code> - 导出一个自定义命令</li>\n<li><code>export def-env</code> - 导出一个自定义环境命令</li>\n<li><code>export env</code> - 导出一个环境变量</li>\n<li><code>export alias</code> - 导出一个别名</li>\n<li><code>export extern</code> - 导出一个已知外部命令的定义</li>\n</ul>\n<h2 id=\"隐藏\" tabindex=\"-1\"> 隐藏</h2>\n<p>任何自定义命令、别名或环境变量, 无论是否从模块中导入, 都可以被 &quot;隐藏&quot;, 以恢复之前的定义。\n(注意，现在还不能从模块中导出别名，但它们仍然可以被隐藏。)\n我们用<a href=\"/book/commands/hide.html\"><code>hide</code></a>命令来实现隐藏：</p>\n<div><pre><code><span>></span> def foo <span>[</span><span>]</span> <span>{</span> <span>\"foo\"</span> <span>}</span>\n\n<span>></span> foo\nfoo\n\n<span>></span> hide foo\n\n<span>></span> foo  <span># error! command not found!</span>\n</code></pre></div><p><a href=\"/book/commands/hide.html\"><code>hide</code></a>命令也接受导入模式，就像<a href=\"/book/commands/use.html\"><code>use</code></a>那样。不过，导入模式的解释略有不同。它可以是下面中的一种：</p>\n<p><code>hide foo</code> 或者 <code>hide greetings</code></p>\n<ul>\n<li>如果该名称是一个自定义的命令或环境变量，则直接隐藏它。否则：</li>\n<li>如果名字是一个模块的名称，则隐藏所有以模块名称为前缀的导出。</li>\n</ul>\n<p><code>hide greetings hello</code></p>\n<ul>\n<li>隐藏带前缀的命令或环境变量</li>\n</ul>\n<p><code>hide greetings [hello, hi]</code></p>\n<ul>\n<li>隐藏带前缀的若干个命令或环境变量</li>\n</ul>\n<p><code>hide greetings *</code></p>\n<ul>\n<li>隐藏模块的所有的导出，不含前缀</li>\n</ul>\n<p>让我们看几个例子。前面已经看到了直接隐藏一个自定义命令的例子，现在让我们试试环境变量：</p>\n<div><pre><code><span>></span> let-env FOO <span>=</span> <span>\"FOO\"</span>\n\n<span>></span> <span>$env</span>.FOO\nFOO\n\n<span>></span> hide FOO\n\n<span>></span> <span>$env</span>.FOO  <span># error! environment variable not found!</span>\n</code></pre></div><p>第一种情况也适用于从一个模块导入的命令/环境变量（使用上面定义的 &quot;greetings.nu&quot; 文件）：</p>\n<div><pre><code><span>></span> use greetings.nu *\n\n<span>></span> <span>$env</span>.MYNAME\nArthur, King of the Britons\n\n<span>></span> hello <span>\"world\"</span>\nhello world<span>!</span>\n\n<span>></span> hide MYNAME\n\n<span>></span> <span>$env</span>.MYNAME  <span># error! environment variable not found!</span>\n\n<span>></span> hide hello\n\n<span>></span> hello <span>\"world\"</span> <span># error! command not found!</span>\n</code></pre></div><p>最后，当名称为模块名时（假设是之前的<code>greetings</code>模块）：</p>\n<div><pre><code><span>></span> use greetings.nu\n\n<span>></span> <span>$env</span><span>.</span><span>\"greetings MYNAME\"</span>\nArthur, King of the Britons\n\n<span>></span> greetings hello <span>\"world\"</span>\nhello world<span>!</span>\n\n<span>></span> hide greetings\n\n<span>></span> <span>$env</span><span>.</span><span>\"greetings MYNAME\"</span>  <span># error! environment variable not found!</span>\n\n<span>></span> greetings hello <span>\"world\"</span> <span># error! command not found!</span>\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.486Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "在系统中四处移动",
      "url": "www.nushell.sh/zh-CN/book/moving_around.html",
      "id": "www.nushell.sh/zh-CN/book/moving_around.html",
      "content_html": "<h1 id=\"在系统中四处移动\" tabindex=\"-1\"> 在系统中四处移动</h1>\n<p>早期的 Shell 允许你在文件系统中进行目录跳转并运行命令，而现代的 Shell 如 Nu 也允许你这样做。让我们来看看你在与系统交互时可能会用到的一些常用命令。</p>\n<h2 id=\"查看目录内容\" tabindex=\"-1\"> 查看目录内容</h2>\n<div><pre><code><span>></span> <span>ls</span>\n</code></pre></div><p>正如我们在其他章节中所看到的，<a href=\"/book/commands/ls.html\"><code>ls</code></a>是一个用于查看路径内容的命令。Nu 将以表格的形式返回内容并供我们使用。</p>\n<p><a href=\"/book/commands/ls.html\"><code>ls</code></a>命令还需要一个可选的参数，以改变你想查看的内容。例如，我们可以列出以 &quot;.md &quot; 结尾的文件：</p>\n<div><pre><code><span>></span> <span>ls</span> *.md\n───┬────────────────────┬──────┬─────────┬────────────\n <span># │ name               │ type │ size    │ modified </span>\n───┼────────────────────┼──────┼─────────┼────────────\n <span>0</span> │ CODE_OF_CONDUCT.md │ File │  <span>3.4</span> KB │ <span>5</span> days ago \n <span>1</span> │ CONTRIBUTING.md    │ File │   <span>886</span> B │ <span>5</span> days ago \n <span>2</span> │ README.md          │ File │ <span>15.0</span> KB │ <span>5</span> days ago \n <span>3</span> │ TODO.md            │ File │  <span>1.6</span> KB │ <span>5</span> days ago \n───┴────────────────────┴──────┴─────────┴────────────\n</code></pre></div><p>上述可选参数 &quot;<strong>*.md</strong>&quot; 中的星号（*）有时被称为通配符或 Glob，它让我们可以匹配任何东西。你可以把 glob &quot;*.md&quot; 理解为 &quot;匹配以 '.md' 结尾的任何文件名&quot;</p>\n<p>Nu 也使用现代 Globs，它允许你访问更深的目录：</p>\n<div><pre><code> <span>ls</span> **/*.md\n────┬───────────────────────────────────────────┬──────┬─────────┬────────────\n <span>#  │ name                                      │ type │ size    │ modified </span>\n────┼───────────────────────────────────────────┼──────┼─────────┼────────────\n  <span>0</span> │ .github/ISSUE_TEMPLATE/bug_report.md      │ File │   <span>592</span> B │ <span>5</span> days ago \n  <span>1</span> │ .github/ISSUE_TEMPLATE/feature_request.md │ File │   <span>595</span> B │ <span>5</span> days ago \n  <span>2</span> │ CODE_OF_CONDUCT.md                        │ File │  <span>3.4</span> KB │ <span>5</span> days ago \n  <span>3</span> │ CONTRIBUTING.md                           │ File │   <span>886</span> B │ <span>5</span> days ago \n  <span>4</span> │ README.md                                 │ File │ <span>15.0</span> KB │ <span>5</span> days ago \n  <span>5</span> │ TODO.md                                   │ File │  <span>1.6</span> KB │ <span>5</span> days ago \n  <span>6</span> │ crates/nu-source/README.md                │ File │  <span>1.7</span> KB │ <span>5</span> days ago \n  <span>7</span> │ docker/packaging/README.md                │ File │  <span>1.5</span> KB │ <span>5</span> days ago \n  <span>8</span> │ docs/commands/README.md                   │ File │   <span>929</span> B │ <span>5</span> days ago \n  <span>9</span> │ docs/commands/alias.md                    │ File │  <span>1.7</span> KB │ <span>5</span> days ago \n <span>10</span> │ docs/commands/append.md                   │ File │  <span>1.4</span> KB │ <span>5</span> days ago\n</code></pre></div><p>在这里，我们要寻找任何以&quot;.md&quot; 结尾的文件，两个星号进一步表示 &quot;从这里开始的任何目录中&quot;。</p>\n<h2 id=\"改变当前目录\" tabindex=\"-1\"> 改变当前目录</h2>\n<div><pre><code><span>></span> <span>cd</span> new_directory\n</code></pre></div><p>要从当前目录换到一个新目录，我们使用<code>cd</code>命令。就像在其他 Shells 中一样，我们可以使用目录的名称，或者如果我们想进入父目录，我们可以使用<code>..</code>的快捷方式。</p>\n<p>如果<code>cd</code>被省略，只给出一个路径本身，也可以改变当前工作目录：</p>\n<div><pre><code><span>></span> ./new_directory\n</code></pre></div><p><strong>注意：</strong> 用<code>cd</code>改变目录会改变<code>PWD</code>环境变量。这意味着目录的改变会保留到当前代码块中，一旦你退出这个代码块，你就会返回到以前的目录。你可以在 <a href=\"/zh-CN/book/environment.html\">环境篇</a> 中了解更多关于这方面的信息。</p>\n<h2 id=\"文件系统命令\" tabindex=\"-1\"> 文件系统命令</h2>\n<p>Nu 还提供了一些基本的文件系统命令，并且可以跨平台工作。</p>\n<p>我们可以使用<code>mv</code>命令将一个目录或文件从一个地方移动到另一个地方：</p>\n<div><pre><code><span>></span> <span>mv</span> item location\n</code></pre></div><p>我们可以把一个目录或文件从一个地方复制到另一个地方：</p>\n<div><pre><code><span>></span> <span>cp</span> item location\n</code></pre></div><p>我们也可以删除一个目录或文件：</p>\n<div><pre><code><span>></span> <span>rm</span> item\n</code></pre></div><p>这三个命令也可以使用我们先前看到的<a href=\"/book/commands/ls.html\"><code>ls</code></a>的 Glob 功能。</p>\n<p>最后，我们可以使用<code>mkdir</code>命令创建一个新目录：</p>\n<div><pre><code><span>></span> <span>mkdir</span> new_directory\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.486Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "从其他 Shell 或 DSL 到 Nu",
      "url": "www.nushell.sh/zh-CN/book/nushell_map.html",
      "id": "www.nushell.sh/zh-CN/book/nushell_map.html",
      "content_html": "<h1 id=\"从其他-shell-或-dsl-到-nu\" tabindex=\"-1\"> 从其他 Shell 或 DSL 到 Nu</h1>\n<p>这个表格背后的想法是帮助你了解 Nu 的内置和插件所提供命令与其他已知的 Shell 和特定领域语言(DSL)的关系。我们试图制作一张所有 Nu 命令和它们在其他语言中的对应关系的表。欢迎大家参与贡献。</p>\n<p>注意：此表针对 Nu 0.43 或更高版本。</p>\n<table>\n<thead>\n<tr>\n<th>Nushell</th>\n<th>SQL</th>\n<th>.Net LINQ (C#)</th>\n<th>PowerShell (without external modules)</th>\n<th>Bash</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alias</td>\n<td>-</td>\n<td>-</td>\n<td>alias</td>\n<td>alias</td>\n</tr>\n<tr>\n<td>append</td>\n<td>-</td>\n<td>Append</td>\n<td>-Append</td>\n<td></td>\n</tr>\n<tr>\n<td>args</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>autoview</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>math avg</td>\n<td>avg</td>\n<td>Average</td>\n<td>Measure-Object, measure</td>\n<td></td>\n</tr>\n<tr>\n<td>calc, <code>&lt;math expression&gt;</code></td>\n<td>math operators</td>\n<td>Aggregate, Average, Count, Max, Min, Sum</td>\n<td></td>\n<td>bc</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>-</td>\n<td>-</td>\n<td>Set-Location, cd</td>\n<td>cd</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>-</td>\n<td>-</td>\n<td>Clear-Host</td>\n<td>clear</td>\n</tr>\n<tr>\n<td>compact</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>config</td>\n<td>-</td>\n<td>-</td>\n<td>$Profile</td>\n<td>vi .bashrc, .profile</td>\n</tr>\n<tr>\n<td>count</td>\n<td>count</td>\n<td>Count</td>\n<td>Measure-Object, measure</td>\n<td>wc</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>-</td>\n<td>-</td>\n<td>Copy-Item, cp, copy</td>\n<td>cp</td>\n</tr>\n<tr>\n<td>date</td>\n<td>NOW() / getdate()</td>\n<td>DateTime class</td>\n<td>Get-Date</td>\n<td>date</td>\n</tr>\n<tr>\n<td>debug</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>drop</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>du</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td>du</td>\n</tr>\n<tr>\n<td>each</td>\n<td>cursor</td>\n<td></td>\n<td>ForEach-Object, foreach, for</td>\n<td></td>\n</tr>\n<tr>\n<td>echo</td>\n<td>print, union all</td>\n<td>-</td>\n<td>Write-Output, write</td>\n<td>echo</td>\n</tr>\n<tr>\n<td>enter</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>exit</td>\n<td>-</td>\n<td></td>\n<td>exit</td>\n<td>exit</td>\n</tr>\n<tr>\n<td>fetch</td>\n<td>-</td>\n<td>HttpClient,WebClient, HttpWebRequest/Response</td>\n<td>Invoke-WebRequest</td>\n<td>wget</td>\n</tr>\n<tr>\n<td>first</td>\n<td>top, limit</td>\n<td>First, FirstOrDefault</td>\n<td>Select-Object -First</td>\n<td>head</td>\n</tr>\n<tr>\n<td>format</td>\n<td></td>\n<td>String.Format</td>\n<td>String.Format</td>\n<td></td>\n</tr>\n<tr>\n<td>from</td>\n<td>import flatfile, openjson, cast(variable as xml)</td>\n<td>-</td>\n<td>Import/ConvertFrom-{Csv,Xml,Html,Json}</td>\n<td></td>\n</tr>\n<tr>\n<td>get</td>\n<td></td>\n<td>Select</td>\n<td>(cmd).column</td>\n<td></td>\n</tr>\n<tr>\n<td>group-by</td>\n<td>group by</td>\n<td>GroupBy, group</td>\n<td>Group-Object, group</td>\n<td></td>\n</tr>\n<tr>\n<td>headers</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>help</td>\n<td>sp_help</td>\n<td>-</td>\n<td>Get-Help, help, man</td>\n<td>man</td>\n</tr>\n<tr>\n<td>histogram</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>history</td>\n<td>-</td>\n<td>-</td>\n<td>Get-History, history</td>\n<td>history</td>\n</tr>\n<tr>\n<td>inc(<code>*</code>)</td>\n<td>-</td>\n<td></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>is_empty</td>\n<td>is null</td>\n<td>String.InNullOrEmpty</td>\n<td>String.InNullOrEmpty</td>\n<td></td>\n</tr>\n<tr>\n<td>keep, =take</td>\n<td>top, limit</td>\n<td>Take</td>\n<td>Select-Object -First</td>\n<td>head</td>\n</tr>\n<tr>\n<td>keep-until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>keep-while</td>\n<td></td>\n<td>TakeWhile</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>kill</td>\n<td>-</td>\n<td>-</td>\n<td>Stop-Process, kill</td>\n<td>kill</td>\n</tr>\n<tr>\n<td>last</td>\n<td></td>\n<td>Last, LastOrDefault</td>\n<td>Select-Object -Last</td>\n<td>tail</td>\n</tr>\n<tr>\n<td>lines</td>\n<td>-</td>\n<td>-</td>\n<td>File.ReadAllLines</td>\n<td></td>\n</tr>\n<tr>\n<td>ls</td>\n<td>-</td>\n<td>-</td>\n<td>Get-ChildItem, dir, ls</td>\n<td>ls</td>\n</tr>\n<tr>\n<td>match(<code>*</code>)</td>\n<td>case when</td>\n<td>Regex.IsMatch</td>\n<td>[regex]</td>\n<td></td>\n</tr>\n<tr>\n<td>merge</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>-</td>\n<td>-</td>\n<td>mkdir, md</td>\n<td>mkdir</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>-</td>\n<td>-</td>\n<td>Move-Item, mv, move, mi</td>\n<td>mv</td>\n</tr>\n<tr>\n<td>next</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>nth</td>\n<td>limit x offset y, rownumber =</td>\n<td>ElementAt</td>\n<td>[x], indexing operator, ElementAt</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td></td>\n<td></td>\n<td>Get-Content, gc, cat, type</td>\n<td>cat</td>\n</tr>\n<tr>\n<td>parse</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>transpose</td>\n<td>pivot</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>post(<code>*</code>)</td>\n<td>-</td>\n<td>HttpClient,WebClient, HttpWebRequest/Response</td>\n<td>Invoke-WebRequest</td>\n<td></td>\n</tr>\n<tr>\n<td>prepend</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prev</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ps(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>Get-Process, ps, gps</td>\n<td>ps</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>-</td>\n<td>-</td>\n<td>Get-Location, pwd</td>\n<td>pwd</td>\n</tr>\n<tr>\n<td>range</td>\n<td></td>\n<td>Range</td>\n<td>1..10, 'a'..'f'</td>\n<td></td>\n</tr>\n<tr>\n<td>reduce</td>\n<td></td>\n<td>Aggregate</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>reject</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>rename</td>\n<td>-</td>\n<td>-</td>\n<td>Rename-Item, ren, rni</td>\n<td>mv</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td></td>\n<td>Reverse</td>\n<td>[Array]::Reverse($var)</td>\n<td></td>\n</tr>\n<tr>\n<td>rm</td>\n<td>-</td>\n<td>-</td>\n<td>Remove-Item, del, erase, rd, ri, rm, rmdir</td>\n<td>rm</td>\n</tr>\n<tr>\n<td>save</td>\n<td>-</td>\n<td>-</td>\n<td>Write-Output, Out-File</td>\n<td>&gt; foo.txt</td>\n</tr>\n<tr>\n<td>select</td>\n<td>select</td>\n<td>Select</td>\n<td>Select-Object, select</td>\n<td></td>\n</tr>\n<tr>\n<td>shells</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>shuffle</td>\n<td></td>\n<td>Random</td>\n<td>Sort-Object {Get-Random}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>size</td>\n<td></td>\n<td></td>\n<td>Measure-Object, measure</td>\n<td>wc</td>\n</tr>\n<tr>\n<td>skip</td>\n<td>where row_number()</td>\n<td>Skip</td>\n<td>Select-Object -Skip</td>\n<td></td>\n</tr>\n<tr>\n<td>skip until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip while</td>\n<td></td>\n<td>SkipWhile</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>sort-by</td>\n<td>order by</td>\n<td>OrderBy, OrderByDescending, ThenBy, ThenByDescending</td>\n<td>Sort-Object, sort</td>\n<td></td>\n</tr>\n<tr>\n<td>split-by</td>\n<td></td>\n<td>Split</td>\n<td>Split</td>\n<td></td>\n</tr>\n<tr>\n<td>split column</td>\n<td></td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>split row</td>\n<td></td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>str(<code>*</code>)</td>\n<td>string functions</td>\n<td>String class</td>\n<td>String class</td>\n<td></td>\n</tr>\n<tr>\n<td>str collect</td>\n<td>concat_ws</td>\n<td>Join</td>\n<td>Join-String</td>\n<td></td>\n</tr>\n<tr>\n<td>str trim</td>\n<td>rtrim, ltrim</td>\n<td>Trim, TrimStart, TrimEnd</td>\n<td>Trim</td>\n<td></td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum</td>\n<td>Sum</td>\n<td>Measure-Object, measure</td>\n<td></td>\n</tr>\n<tr>\n<td>sys(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>Get-ComputerInfo</td>\n<td>uname, lshw, lsblk, lscpu, lsusb, hdparam, free</td>\n</tr>\n<tr>\n<td>table</td>\n<td></td>\n<td></td>\n<td>Format-Table, ft, Format-List, fl</td>\n<td></td>\n</tr>\n<tr>\n<td>tags</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>textview(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>Get-Content, cat</td>\n<td></td>\n</tr>\n<tr>\n<td>tree(<code>*</code>)</td>\n<td>-</td>\n<td>-</td>\n<td>tree</td>\n<td></td>\n</tr>\n<tr>\n<td>to</td>\n<td>-</td>\n<td>-</td>\n<td>Export/ConvertTo-{Csv,Xml,Html,Json}</td>\n<td></td>\n</tr>\n<tr>\n<td>touch</td>\n<td>-</td>\n<td>-</td>\n<td>Set-Content</td>\n<td>touch</td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>distinct</td>\n<td>Distinct</td>\n<td>Get-Unique, gu</td>\n<td>uniq</td>\n</tr>\n<tr>\n<td>upsert</td>\n<td>As</td>\n<td>-</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>version</td>\n<td>select @@version</td>\n<td>-</td>\n<td>$PSVersionTable</td>\n<td></td>\n</tr>\n<tr>\n<td>with_env</td>\n<td>-</td>\n<td>-</td>\n<td>$env:FOO = 'bar'</td>\n<td>export foo = &quot;bar&quot;</td>\n</tr>\n<tr>\n<td>where</td>\n<td>where</td>\n<td>Where</td>\n<td>Where-Object, where, &quot;?&quot; operator</td>\n<td></td>\n</tr>\n<tr>\n<td>which</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>which</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>*</code> - 这些命令是标准插件的一部分</li>\n</ul>\n",
      "date_modified": "2022-06-03T06:25:20.487Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "从函数式语言到 Nu",
      "url": "www.nushell.sh/zh-CN/book/nushell_map_functional.html",
      "id": "www.nushell.sh/zh-CN/book/nushell_map_functional.html",
      "content_html": "<h1 id=\"从函数式语言到-nu\" tabindex=\"-1\"> 从函数式语言到 Nu</h1>\n<p>这个表格的目的是帮助你了解 Nu 的内置和插件所提供命令与函数式语言的关系。我们试图制作一张所有 Nu 命令和它们在其他语言中的映射关系的表。欢迎大家参与贡献。</p>\n<p>注意：此表针对 Nu 0.43 或更高版本。</p>\n<table>\n<thead>\n<tr>\n<th>Nushell</th>\n<th>Clojure</th>\n<th>Tablecloth (Ocaml / Elm)</th>\n<th>Haskell</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alias</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>append</td>\n<td>conj, into, concat</td>\n<td>append, (++), concat, concatMap</td>\n<td>(++)</td>\n<td></td>\n</tr>\n<tr>\n<td>args</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>autoview</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>math avg</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>into binary</td>\n<td>Integer/toHexString</td>\n<td></td>\n<td>showHex</td>\n<td></td>\n</tr>\n<tr>\n<td>calc, <code>&lt;math expression&gt;</code></td>\n<td>math operators</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>cd</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>clear</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>clip</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>compact</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>config</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>count</td>\n<td>length, size</td>\n<td>length, size</td>\n<td></td>\n</tr>\n<tr>\n<td>cp</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>java.time.LocalDate/now</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>debug</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>drop</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>du</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>each</td>\n<td>map, mapv, iterate</td>\n<td>map, forEach</td>\n<td>map</td>\n<td></td>\n</tr>\n<tr>\n<td>echo</td>\n<td>println</td>\n<td></td>\n<td>putStrLn, print</td>\n<td></td>\n</tr>\n<tr>\n<td>enter</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>exit</td>\n<td>System/exit</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>fetch(<code>*</code>)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>first</td>\n<td>first</td>\n<td>head</td>\n<td>head</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>format</td>\n<td></td>\n<td>Text.Printf.printf</td>\n<td></td>\n</tr>\n<tr>\n<td>from</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>group-by</td>\n<td>group-by</td>\n<td></td>\n<td>group, groupBy</td>\n<td></td>\n</tr>\n<tr>\n<td>headers</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>help</td>\n<td>doc</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>histogram</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>history</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>inc(<code>*</code>)</td>\n<td>inc</td>\n<td></td>\n<td>succ</td>\n<td></td>\n</tr>\n<tr>\n<td>insert</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>empty?</td>\n<td>empty?</td>\n<td>isEmpty</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>keep</td>\n<td>take, drop-last, pop</td>\n<td>take, init</td>\n<td>take, init</td>\n<td></td>\n</tr>\n<tr>\n<td>keep-until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>keep-while</td>\n<td>take-while</td>\n<td>takeWhile</td>\n<td>takeWhile</td>\n<td></td>\n</tr>\n<tr>\n<td>kill</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>last</td>\n<td>last, peek, take-last</td>\n<td>last</td>\n<td>last</td>\n<td></td>\n</tr>\n<tr>\n<td>lines</td>\n<td></td>\n<td></td>\n<td>lines, words, split-with</td>\n<td></td>\n</tr>\n<tr>\n<td>ls</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>match(<code>*</code>)</td>\n<td>re-matches, re-seq, re-find</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>merge</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mv</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>next</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>nth</td>\n<td>nth</td>\n<td>Array.get</td>\n<td>lookup</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>with-open</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>parse</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>transpose</td>\n<td>(apply mapv vector matrix)</td>\n<td></td>\n<td>transpose</td>\n<td></td>\n</tr>\n<tr>\n<td>post(<code>*</code>)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prepend</td>\n<td>cons</td>\n<td>cons, ::</td>\n<td>::</td>\n<td></td>\n</tr>\n<tr>\n<td>prev</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ps</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pwd</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>range, 1..10</td>\n<td>range</td>\n<td>range</td>\n<td>1..10, 'a'..'f'</td>\n<td></td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>reduce, reduce-kv</td>\n<td>foldr</td>\n<td>foldr</td>\n<td></td>\n</tr>\n<tr>\n<td>reject</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>rename</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>reverse, rseq</td>\n<td>reverse, reverseInPlace</td>\n<td>reverse</td>\n<td></td>\n</tr>\n<tr>\n<td>rm</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>save</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>select</td>\n<td>select-keys</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shells</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shuffle</td>\n<td>shuffle</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>count</td>\n<td></td>\n<td>size, length</td>\n<td></td>\n</tr>\n<tr>\n<td>skip</td>\n<td>rest</td>\n<td>tail</td>\n<td>tail</td>\n<td></td>\n</tr>\n<tr>\n<td>skip until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip while</td>\n<td>drop-while</td>\n<td>dropWhile</td>\n<td>dropWhile, dropWhileEnd</td>\n<td></td>\n</tr>\n<tr>\n<td>sort-by</td>\n<td>sort, sort-by, sorted-set-by</td>\n<td>sort, sortBy, sortWith</td>\n<td>sort, sortBy</td>\n<td></td>\n</tr>\n<tr>\n<td>split-by</td>\n<td>split, split-{at,with,lines}</td>\n<td>split, words, lines</td>\n<td>split, words, lines</td>\n<td></td>\n</tr>\n<tr>\n<td>split column</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>split row</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>str(<code>*</code>)</td>\n<td>clojure.string functions</td>\n<td>String functions</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>str collect</td>\n<td>join</td>\n<td>concat</td>\n<td>intercalate</td>\n<td></td>\n</tr>\n<tr>\n<td>str trim</td>\n<td>trim, triml, trimr</td>\n<td>trim, trimLeft, trimRight</td>\n<td>strip</td>\n<td></td>\n</tr>\n<tr>\n<td>sum</td>\n<td>apply +</td>\n<td>sum</td>\n<td>sum</td>\n<td></td>\n</tr>\n<tr>\n<td>sys</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>table</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>tags</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>tree(<code>*</code>)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>to</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>touch</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>set</td>\n<td>Set.empty</td>\n<td>Data.Set</td>\n<td></td>\n</tr>\n<tr>\n<td>upsert</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>version</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>with_env</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>what</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>where</td>\n<td>filter, filterv, select</td>\n<td>filter, filterMap</td>\n<td>filter</td>\n<td></td>\n</tr>\n<tr>\n<td>which</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>wrap</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>*</code> - 这些命令是标准插件的一部分</li>\n</ul>\n",
      "date_modified": "2022-06-03T06:25:20.487Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "从命令式语言到 Nu",
      "url": "www.nushell.sh/zh-CN/book/nushell_map_imperative.html",
      "id": "www.nushell.sh/zh-CN/book/nushell_map_imperative.html",
      "content_html": "<h1 id=\"从命令式语言到-nu\" tabindex=\"-1\"> 从命令式语言到 Nu</h1>\n<p>这个表格的目的是帮助你了解 Nu 的内置和插件所提供的命令与命令式语言的关系。我们试图制作一张所有 Nu 命令和它们在其他语言中的对应关系的表。欢迎大家参与贡献。</p>\n<p>注意：此表假设 Nu 0.43 或更高版本。</p>\n<table>\n<thead>\n<tr>\n<th>Nushell</th>\n<th>Python</th>\n<th>Kotlin (Java)</th>\n<th>C++</th>\n<th>Rust</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alias</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>append</td>\n<td>list.append, set.add</td>\n<td>add</td>\n<td>push_back, emplace_back</td>\n<td>push, push_back</td>\n</tr>\n<tr>\n<td>args</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>autoview</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>math avg</td>\n<td>statistics.mean</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>calc, = math</td>\n<td>math operators</td>\n<td>math operators</td>\n<td>math operators</td>\n<td>math operators</td>\n</tr>\n<tr>\n<td>cd</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>clear</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>clip</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>compact</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>config</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>len</td>\n<td>size, length</td>\n<td>length</td>\n<td>len</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>shutil.copy</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>datetime.date.today</td>\n<td>java.time.LocalDate.now</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>debug</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>drop</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>du</td>\n<td>shutil.disk_usage</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>each</td>\n<td>for</td>\n<td>for</td>\n<td>for</td>\n<td>for</td>\n</tr>\n<tr>\n<td>echo</td>\n<td>print</td>\n<td>println</td>\n<td>printf</td>\n<td>println!</td>\n</tr>\n<tr>\n<td>enter</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>exit</td>\n<td>exit</td>\n<td>System.exit, kotlin.system.exitProcess</td>\n<td>exit</td>\n<td>exit</td>\n</tr>\n<tr>\n<td>fetch</td>\n<td>urllib.request.urlopen</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>first</td>\n<td>list[0]</td>\n<td>List[0], peek</td>\n<td>vector[0], top</td>\n<td>Vec[0]</td>\n</tr>\n<tr>\n<td>format</td>\n<td>format</td>\n<td>format</td>\n<td>format</td>\n<td>format!</td>\n</tr>\n<tr>\n<td>from</td>\n<td>csv, json, sqlite3</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>get</td>\n<td>dict[&quot;key&quot;]</td>\n<td>Map[&quot;key&quot;]</td>\n<td>map[&quot;key&quot;]</td>\n<td>HashMap[&quot;key&quot;], get, entry</td>\n</tr>\n<tr>\n<td>group-by</td>\n<td>itertools.groupby</td>\n<td>groupBy</td>\n<td></td>\n<td>group_by</td>\n</tr>\n<tr>\n<td>headers</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>help</td>\n<td>help</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>histogram</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>history</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>inc(<code>*</code>)</td>\n<td>x += 1</td>\n<td>x++</td>\n<td>x++</td>\n<td>x += 1</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>list.insert</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>empty?</td>\n<td>is None</td>\n<td>isEmpty</td>\n<td>empty</td>\n<td>is_empty</td>\n</tr>\n<tr>\n<td>keep</td>\n<td>list[:x]</td>\n<td></td>\n<td></td>\n<td>&amp;Vec[..x]</td>\n</tr>\n<tr>\n<td>keep until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>keep while</td>\n<td>itertools.takewhile</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>kill</td>\n<td>os.kill</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>last</td>\n<td>list[-1]</td>\n<td></td>\n<td></td>\n<td>&amp;Vec[Vec.len()-1]</td>\n</tr>\n<tr>\n<td>lines</td>\n<td>split, splitlines</td>\n<td>split</td>\n<td>views::split</td>\n<td>split, split_whitespace, rsplit, lines</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>os.listdir</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>match(<code>*</code>)</td>\n<td>re.findall</td>\n<td>Regex.matches</td>\n<td>regex_match</td>\n<td></td>\n</tr>\n<tr>\n<td>merge</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>os.mkdir</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mv</td>\n<td>shutil.move</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>next</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>nth</td>\n<td>list[x]</td>\n<td>List[x]</td>\n<td>vector[x]</td>\n<td>Vec[x]</td>\n</tr>\n<tr>\n<td>open</td>\n<td>open</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>parse</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>transpose</td>\n<td>zip(*matrix)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>post(<code>*</code>)</td>\n<td>urllib.request.urlopen</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prepend</td>\n<td>deque.appendleft</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prev</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ps(<code>*</code>)</td>\n<td>os.listdir('/proc')</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>os.getcwd</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>range</td>\n<td>range</td>\n<td>.., until, downTo, step</td>\n<td>iota</td>\n<td>..</td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>functools.reduce</td>\n<td>reduce</td>\n<td>reduce</td>\n<td>fold, rfold, scan</td>\n</tr>\n<tr>\n<td>reject</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>rename</td>\n<td>shutil.move</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>reversed, list.reverse</td>\n<td>reverse, reversed, asReversed</td>\n<td>reverse</td>\n<td>rev</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>os.remove</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>save</td>\n<td>io.TextIOWrapper.write</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>select</td>\n<td>{k:dict[k] for k in keylist}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shells</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shuffle</td>\n<td>random.shuffle</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>len</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip</td>\n<td>list[x:]</td>\n<td></td>\n<td></td>\n<td>&amp;Vec[x..],skip</td>\n</tr>\n<tr>\n<td>skip until</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>skip while</td>\n<td>itertools.dropwhile</td>\n<td></td>\n<td></td>\n<td>skip_while</td>\n</tr>\n<tr>\n<td>sort-by</td>\n<td>sorted, list.sort</td>\n<td>sortedBy, sortedWith, Arrays.sort, Collections.sort</td>\n<td>sort</td>\n<td>sort</td>\n</tr>\n<tr>\n<td>split-by</td>\n<td>str.split{,lines}, re.split</td>\n<td>split</td>\n<td>views::split</td>\n<td>split</td>\n</tr>\n<tr>\n<td>split column</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>split row</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>str(<code>*</code>)</td>\n<td>str functions</td>\n<td>String functions</td>\n<td>string functions</td>\n<td>&amp;str, String functions</td>\n</tr>\n<tr>\n<td>str collect</td>\n<td>str.join</td>\n<td>joinToString</td>\n<td></td>\n<td>join</td>\n</tr>\n<tr>\n<td>str trim</td>\n<td>strip, rstrip, lstrip</td>\n<td>trim, trimStart, trimEnd</td>\n<td>regex</td>\n<td>trim, trim*{start,end}, strip*{suffix,prefix}</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum</td>\n<td>sum</td>\n<td>reduce</td>\n<td>sum</td>\n</tr>\n<tr>\n<td>sys(<code>*</code>)</td>\n<td>sys</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>table</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>tags</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>tree(<code>*</code>)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>to</td>\n<td>csv, json, sqlite3</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>touch</td>\n<td>open(path, 'a').close()</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>set</td>\n<td>Set</td>\n<td>set</td>\n<td>HashSet</td>\n</tr>\n<tr>\n<td>upsert</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>version</td>\n<td>sys.version, sys.version_info</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>with-env</td>\n<td>os.environ</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>where</td>\n<td>filter</td>\n<td>filter</td>\n<td>filter</td>\n<td>filter</td>\n</tr>\n<tr>\n<td>which</td>\n<td>shutil.which</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>wrap</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>*</code> - 这些命令是标准插件的一部分</li>\n</ul>\n",
      "date_modified": "2022-06-03T06:25:20.488Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Nushell 运算符",
      "url": "www.nushell.sh/zh-CN/book/nushell_operator_map.html",
      "id": "www.nushell.sh/zh-CN/book/nushell_operator_map.html",
      "content_html": "<h1 id=\"nushell-运算符\" tabindex=\"-1\"> Nushell 运算符</h1>\n<p>这个表格的目的是帮助你了解 Nu 运算符与其他语言运算符的关系。我们试图制作一张包含所有 Nushell 运算符的表，以及它们在其他语言中的对应关系。欢迎大家参与贡献。</p>\n<p>注意：此表针对 Nu 0.14.1 或更高版本。</p>\n<table>\n<thead>\n<tr>\n<th>Nushell</th>\n<th>SQL</th>\n<th>Python</th>\n<th>.NET LINQ (C#)</th>\n<th>PowerShell</th>\n<th>Bash</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>=</td>\n<td>==</td>\n<td>==</td>\n<td>-eq, -is</td>\n<td>-eq</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>!=, &lt;&gt;</td>\n<td>!=</td>\n<td>!=</td>\n<td>-ne, -isnot</td>\n<td>-ne</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>&lt;</td>\n<td>&lt;</td>\n<td>&lt;</td>\n<td>-lt</td>\n<td>-lt</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>&lt;=</td>\n<td>&lt;=</td>\n<td>&lt;=</td>\n<td>-le</td>\n<td>-le</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>&gt;</td>\n<td>&gt;</td>\n<td>&gt;</td>\n<td>-gt</td>\n<td>-gt</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>&gt;=</td>\n<td>&gt;=</td>\n<td>&gt;=</td>\n<td>-ge</td>\n<td>-ge</td>\n</tr>\n<tr>\n<td>=~</td>\n<td>like</td>\n<td>re, in, startswith</td>\n<td>Contains, StartsWith</td>\n<td>-like, -contains</td>\n<td>=~</td>\n</tr>\n<tr>\n<td>!~</td>\n<td>not like</td>\n<td>not in</td>\n<td>Except</td>\n<td>-notlike, -notcontains</td>\n<td>! &quot;str1&quot; =~ &quot;str2&quot;</td>\n</tr>\n<tr>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n</tr>\n<tr>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n<td>/</td>\n</tr>\n<tr>\n<td>**</td>\n<td>pow</td>\n<td>**</td>\n<td>Power</td>\n<td>Pow</td>\n<td>**</td>\n</tr>\n<tr>\n<td>in</td>\n<td>in</td>\n<td>re, in, startswith</td>\n<td>Contains, StartsWith</td>\n<td>-In</td>\n<td>case in</td>\n</tr>\n<tr>\n<td>not-in</td>\n<td>not in</td>\n<td>not in</td>\n<td>Except</td>\n<td>-NotIn</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>and</td>\n<td>and</td>\n<td>&amp;&amp;</td>\n<td>-And, &amp;&amp;</td>\n<td>-a, &amp;&amp;</td>\n</tr>\n<tr>\n<td>||</td>\n<td>or</td>\n<td>or</td>\n<td>||</td>\n<td>-Or, ||</td>\n<td>-o, ||</td>\n</tr>\n</tbody>\n</table>\n",
      "date_modified": "2022-06-03T06:25:20.488Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "运算符",
      "url": "www.nushell.sh/zh-CN/book/operators.html",
      "id": "www.nushell.sh/zh-CN/book/operators.html",
      "content_html": "<h1 id=\"运算符\" tabindex=\"-1\"> 运算符</h1>\n<p>Nushell 支持以下常见的数学、逻辑和字符串操作的运算符：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+</code></td>\n<td>加</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>减</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>乘</td>\n</tr>\n<tr>\n<td><code>/</code></td>\n<td>除</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数 (幂)</td>\n</tr>\n<tr>\n<td><code>mod</code></td>\n<td>取模</td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>等于</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>不等于</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>小于</td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>大于</td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td><code>=~</code></td>\n<td>正则匹配 / 字符串包含另一个字符串</td>\n</tr>\n<tr>\n<td><code>!~</code></td>\n<td>正则不匹配 / 字符串<em>不</em>包含另一个</td>\n</tr>\n<tr>\n<td><code>in</code></td>\n<td>列表包含值</td>\n</tr>\n<tr>\n<td><code>not-in</code></td>\n<td>列表不包含值</td>\n</tr>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td>两个布尔值与运算</td>\n</tr>\n<tr>\n<td>`</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>圆括号可用于分组以指定求值顺序，或用于调用命令并在表达式中使用结果。</p>\n<h2 id=\"运算符结合顺序\" tabindex=\"-1\"> 运算符结合顺序</h2>\n<p>数学运算的结合顺序如下（从最高优先级到最低）：</p>\n<ul>\n<li>圆括号 (<code>()</code>)</li>\n<li>乘 (<code>*</code>) 、 除 (<code>/</code>) 和幂 (<code>**</code>)</li>\n<li>加 (<code>+</code>) 和减 (<code>-</code>)</li>\n</ul>\n<div><pre><code>> 3 * (1 + 2)\n9\n</code></pre></div><h2 id=\"正则表达式-字符串包含运算符\" tabindex=\"-1\"> 正则表达式 / 字符串包含运算符</h2>\n<p><code>=~</code>和<code>!~</code>运算符提供了一种更方便的方法来评估 <a href=\"https://cheatography.com/davechild/cheat-sheets/regular-expressions/\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>。你不需要知道正则表达式就可以使用它们 —— 它们也是检查一个字符串是否包含另一个的简单方法：</p>\n<ul>\n<li><code>string =~ pattern</code> 如果 <code>string</code> 包含 <code>pattern</code> 的匹配返回 <strong>true</strong>, 反之返回 <strong>false</strong>；</li>\n<li><code>string !~ pattern</code> 如果 <code>string</code> 包含 <code>pattern</code> 的匹配返回 <strong>false</strong>, 反之返回 <strong>true</strong>；</li>\n</ul>\n<p>例如:</p>\n<div><pre><code>foobarbaz <span>=~</span> bar <span># returns true</span>\nfoobarbaz <span>!</span>~ bar <span># returns false</span>\n<span>ls</span> <span>|</span> where name <span>=~</span> ^nu <span># returns all files whose names start with \"nu\"</span>\n</code></pre></div><p>两个运算符都使用了 <a href=\"https://docs.rs/regex/latest/regex/struct.Regex.html#method.is_match\" target=\"_blank\" rel=\"noopener noreferrer\">Rust regex 包的 <code>is_match()</code> 函数</a>。</p>\n<h2 id=\"大小写敏感性\" tabindex=\"-1\"> 大小写敏感性</h2>\n<p>对字符串进行操作时，运算符通常是区分大小写的。有几种方法可以处理大小写不敏感的场景：</p>\n<ol>\n<li>在正则表达式运算符中，指定<code>(?i)</code>不区分大小写的模式修饰器：</li>\n</ol>\n<div><pre><code><span>\"FOO\"</span> <span>=~</span> <span>\"foo\"</span> <span># returns false</span>\n<span>\"FOO\"</span> <span>=~</span> <span>\"(?i)foo\"</span> <span># returns true</span>\n</code></pre></div><ol start=\"2\">\n<li>使用<a href=\"/book/commands/str_contains.html\"><code>str contains</code></a> 命令的<code>--insensitive</code>标志：</li>\n</ol>\n<div><pre><code><span>\"FOO\"</span> <span>|</span> str contains --insensitive <span>\"foo\"</span>\n</code></pre></div><ol start=\"3\">\n<li>在比较前用<a href=\"/book/commands/str_downcase.html\"><code>str downcase</code></a>将字符串转换为小写：</li>\n</ol>\n<div><pre><code><span>(</span><span>\"FOO\"</span> <span>|</span> str downcase<span>)</span> <span>==</span> <span>(</span><span>\"Foo\"</span> <span>|</span> str downcase<span>)</span>\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.488Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "并行",
      "url": "www.nushell.sh/zh-CN/book/parallelism.html",
      "id": "www.nushell.sh/zh-CN/book/parallelism.html",
      "content_html": "<h1 id=\"并行\" tabindex=\"-1\"> 并行</h1>\n<p>Nushell 现在已经初步支持并行运行代码了，这允许你使用更多的计算机硬件资源来处理一个流的各个元素。</p>\n<p>你会注意到这些命令包含其特有的<code>par-</code>命名，每一个都对应着一个非并行的版本，这允许你先轻松地以串行的风格写代码，然后再回头用几个额外的字符轻松地将串行脚本转换成并行脚本。</p>\n<h2 id=\"par-each\" tabindex=\"-1\"> <code>par-each</code></h2>\n<p>最常见的并行命令是<a href=\"/book/commands/par-each.html\"><code>par-each</code></a>，它是<a href=\"/book/commands/each.html\"><code>each</code></a>命令的搭档。</p>\n<p>与<a href=\"/book/commands/each.html\"><code>each</code></a>一样，<a href=\"/book/commands/par-each.html\"><code>par-each</code></a>对管道中流入的元素进行处理，在每个元素上运行一个代码块。与<a href=\"/book/commands/each.html\"><code>each</code></a>不同，<a href=\"/book/commands/par-each.html\"><code>par-each</code></a>将并行地进行这些操作。</p>\n<p>假设你想计算当前目录下每个子目录下的文件数量。使用<a href=\"/book/commands/each.html\"><code>each</code></a>你可以这样写。</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> where <span>type</span> <span>==</span> <span>dir</span> <span>|</span> each <span>{</span> <span>|</span>it<span>|</span>\n    <span>{</span> name: <span>$it</span>.name, len: <span>(</span>ls <span>$it</span>.name <span>|</span> length<span>)</span> <span>}</span>\n<span>}</span>\n</code></pre></div><p>我们为每个条目创建一条记录，并在其中填入目录的名称和该子目录中的文件数。</p>\n<p>在你的机器上，时间可能有所不同。对于这台机器的当前目录来说，需要 21 毫秒的时间。</p>\n<p>现在，由于这个操作可以并行运行，让我们把上面的操作转换为并行的，把<a href=\"/book/commands/each.html\"><code>each</code></a>改为<a href=\"/book/commands/par-each.html\"><code>par-each</code></a>：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> where <span>type</span> <span>==</span> <span>dir</span> <span>|</span> par-each <span>{</span> <span>|</span>it<span>|</span>\n    <span>{</span> name: <span>$it</span>.name, len: <span>(</span>ls <span>$it</span>.name <span>|</span> length<span>)</span> <span>}</span>\n<span>}</span>\n</code></pre></div><p>在这台机器上，现在它的运行时间为 6 毫秒。这是一个相当大的差异!</p>\n<p>顺便提一下：由于 <a href=\"/zh-CN/book/environment.html#%E4%BD%9C%E7%94%A8%E5%9F%9F\">环境变量是有作用域的</a>，你可以使用<code>par-each</code>在多个目录中并行工作（注意 <code>cd</code> 命令）：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> where <span>type</span> <span>==</span> <span>dir</span> <span>|</span> par-each <span>{</span> <span>|</span>it<span>|</span>\n    <span>{</span> name: <span>$it</span>.name, len: <span>(</span>cd <span>$it</span>.name<span>;</span> <span>ls</span> <span>|</span> length<span>)</span> <span>}</span>\n<span>}</span>\n</code></pre></div><p>如果你看一下结果，你会注意到，它们每次运行返回的顺序是不同的（这取决于你系统上的硬件线程数量）。随着任务的完成，我们得到了正确的结果，如果我们希望得到结果以特定的顺序出现，我们可能需要添加额外的步骤。例如，对于上述情况，我们可能想按 &quot;name&quot; 字段对结果进行排序。这样，我们的脚本的<a href=\"/book/commands/each.html\"><code>each</code></a>和<a href=\"/book/commands/par-each.html\"><code>par-each</code></a>版本都能得到相同的结果。</p>\n",
      "date_modified": "2022-06-03T06:25:20.489Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "管道",
      "url": "www.nushell.sh/zh-CN/book/pipeline.html",
      "id": "www.nushell.sh/zh-CN/book/pipeline.html",
      "content_html": "<h1 id=\"管道\" tabindex=\"-1\"> 管道</h1>\n<p>Nu 的核心设计之一是管道，这个设计思想可以追溯到几十年前 Unix 背后的一些原始理念。正如 Nu 拓展了 Unix 的单一字符串数据类型一样，Nu 也扩展了管道的概念，使其不仅仅包含文本。</p>\n<h2 id=\"基础\" tabindex=\"-1\"> 基础</h2>\n<p>一个管道由三部分组成：输入、过滤器和输出。</p>\n<div><pre><code><span>></span> <span>open</span> <span>\"Cargo.toml\"</span> <span>|</span> inc package.version --minor <span>|</span> save <span>\"Cargo_new.toml\"</span>\n</code></pre></div><p>第一条命令：<code>open &quot;Cargo.toml&quot;</code> 是一个输入（有时也称为 &quot;源&quot; 或 &quot;生产者&quot;），它创建或加载数据，并将其送入管道。管道待处理的值正是来自于此输入。像<a href=\"/book/commands/ls.html\"><code>ls</code></a>这样的命令也是输入，因为它们从文件系统中获取数据，并通过管道发送以便能被后续使用。</p>\n<p>第二个命令：<code>inc package.version --minor</code> 是一个过滤器。过滤器获取输入的数据并对其进行处理。它们可能会修改它（如我们例子中的<a href=\"/book/commands/inc.html\"><code>inc</code></a>命令），或者在值通过时对其做其他操作，如记录。</p>\n<p>最后一条命令：<code>save &quot;Cargo_new.toml&quot;</code> 是一个输出（有时称为 &quot;接收者&quot;）。输出从管道中获取输入，并对其进行一些最终操作。在我们的例子中，我们在最后一步把通过管道的内容保存到一个文件中。还有一些其他类型的输出命令可以获取数值并供用户查看。</p>\n<p><code>$in</code> 变量可以将管道收集成一个值，允许你将整个流作为一个参数访问，比如：</p>\n<div><pre><code><span>></span> <span>echo</span> <span>1</span> <span>2</span> <span>3</span> <span>|</span> <span>$in</span>.1 * <span>$in</span>.2\n<span>6</span>\n</code></pre></div><h2 id=\"多行管道\" tabindex=\"-1\"> 多行管道</h2>\n<p>如果一个管道对一行来说有些长，你可以把它放在<code>(</code>和<code>)</code>里，以创建一个子表达式：</p>\n<div><pre><code><span>(</span>\n    <span>\"01/22/2021\"</span> <span>|</span>\n    parse <span>\"{month}/{day}/{year}\"</span> <span>|</span>\n    get year\n<span>)</span>\n</code></pre></div><p>也可以参考 <a href=\"/zh-CN/book/variables_and_subexpressions.html#%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F\">子表达式</a></p>\n<h2 id=\"与外部命令交互\" tabindex=\"-1\"> 与外部命令交互</h2>\n<p>Nu 命令之间使用 Nu 的数据类型进行通信（见<a href=\"/zh-CN/book/types_of_data.html\">数据类型</a>），但 Nu 之外的命令呢？让我们看看一些与外部命令交互的例子：</p>\n<p><code>internal_command | external_command</code></p>\n<p>数据将从 <code>internal_command</code> 流向 <code>external_command</code>。这些数据将被转换为字符串，以便它们可以被发送到外部命令的<code>stdin</code>。</p>\n<p><code>external_command | internal_command</code></p>\n<p>从外部命令进入 Nu 的数据将以字节的形式流入，Nushell 将尝试自动将其转换为 UTF-8 文本。如果成功，一个文本数据流将被发送到<code>internal_command</code>；如果不成功，一个二进制数据流将被发送到<code>internal_command</code>。像<a href=\"/book/commands/lines.html\"><code>lines</code></a>这样的命令有助于从外部命令接收数据，因为它提供了分离的数据行以供后续使用。</p>\n<p><code>external_command_1 | external_command_2</code></p>\n<p>Nu 在两个外部命令之间以与其他 Shell 相同的方式处理数据管道，比如 Bash。<code>external_command_1</code>的<code>stdout</code>与<code>external_command_2</code>的<code>stdin</code>相连，这让数据在两个命令之间自然流动。</p>\n<h2 id=\"幕后解说\" tabindex=\"-1\"> 幕后解说</h2>\n<p>你可能想知道，既然<a href=\"/book/commands/ls.html\"><code>ls</code></a>是一个输入而不是一个输出，我们为何能看到一个表格？其实 Nu 使用了另一个叫做<a href=\"/book/commands/table.html\"><code>table</code></a>的命令为我们自动添加了这个输出。<a href=\"/book/commands/table.html\"><code>table</code></a>命令被附加到任何没有输出的管道上，这使得我们可以看到结果。</p>\n<p>实际上，该命令：</p>\n<div><pre><code>> ls\n</code></pre></div><p>和以下管道：</p>\n<div><pre><code>> ls | table\n</code></pre></div><p>是一样的。</p>\n",
      "date_modified": "2022-06-03T06:25:20.489Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "插件",
      "url": "www.nushell.sh/zh-CN/book/plugins.html",
      "id": "www.nushell.sh/zh-CN/book/plugins.html",
      "content_html": "<h1 id=\"插件\" tabindex=\"-1\"> 插件</h1>\n<p>Nu 可以通过插件进行扩展。插件的行为与 Nu 的内置命令很相似，另外的好处是它们可以与 Nu 本身分开添加。</p>\n<p>Nu 的插件是可执行的；Nu 在需要时启动它们，并通过 <a href=\"https://en.wikipedia.org/wiki/Standard_streams\" target=\"_blank\" rel=\"noopener noreferrer\">stdin, stdout 和 stderr</a> 与它们进行通信。Nu 的插件可以使用 JSON 或 <a href=\"https://capnproto.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Cap'n Proto</a> 作为它们的通信编码方式。</p>\n<h2 id=\"添加一个插件\" tabindex=\"-1\"> 添加一个插件</h2>\n<p>要添加一个插件，请调用<a href=\"/book/commands/register.html\"><code>register</code></a>命令来告诉 Nu 在哪里可以找到它，与此同时，你还需要告诉 Nushell 这个插件使用什么方式进行编码。</p>\n<p>Linux+macOS:</p>\n<div><pre><code><span>></span> register --encoding<span>=</span>capnp ./my_plugins/my-cool-plugin\n</code></pre></div><p>Windows:</p>\n<div><pre><code><span>></span> register --encoding<span>=</span>capnp .<span>\\</span>my_plugins<span>\\</span>my-cool-plugin.exe\n</code></pre></div><p>当 <a href=\"/book/commands/register.html\"><code>register</code></a> 被调用时：</p>\n<ol>\n<li>Nu 启动该插件并通过 stdin 向其发送 &quot;签名&quot; 信息；</li>\n<li>插件通过 stdout 响应，包含其签名（名称、描述、参数、标志等）的消息；</li>\n<li>Nu 将插件的签名保存在<code>$nu.plugin-path</code>位置的文件中，因此在注册之后的多次启动中都是有效的；</li>\n</ol>\n<p>一旦注册，该插件就可以作为你的命令集的一部分被使用：</p>\n<div><pre><code><span>></span> <span>help</span> commands <span>|</span> where is_plugin <span>==</span> <span>true</span>\n</code></pre></div><h2 id=\"示例\" tabindex=\"-1\"> 示例</h2>\n<p>Nu 的主版本中包含了一些插件的例子，这些例子对学习插件协议的工作方式很有帮助：</p>\n<ul>\n<li><a href=\"https://github.com/nushell/nushell/tree/main/crates/nu_plugin_example\" target=\"_blank\" rel=\"noopener noreferrer\">Rust</a></li>\n<li><a href=\"https://github.com/nushell/nushell/blob/main/crates/nu_plugin_python/plugin.py\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a></li>\n</ul>\n<h2 id=\"调试\" tabindex=\"-1\"> 调试</h2>\n<p>调试插件的最简单方法是打印到 stderr；插件的标准错误流会通过 Nu 重定向并显示给用户。</p>\n<h2 id=\"帮助\" tabindex=\"-1\"> 帮助</h2>\n<p>Nu 的插件文档尚在撰写中，如果你对某件事情不确定 <a href=\"https://discord.gg/NtAbbGn\" target=\"_blank\" rel=\"noopener noreferrer\">Nu Discord</a>上的 #plugins 频道是一个提问的好地方!</p>\n",
      "date_modified": "2022-06-03T06:25:20.489Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "正则表达式",
      "url": "www.nushell.sh/zh-CN/book/regular_expressions.html",
      "id": "www.nushell.sh/zh-CN/book/regular_expressions.html",
      "content_html": "<h1 id=\"正则表达式\" tabindex=\"-1\"> 正则表达式</h1>\n<p>Nushell 命令中的正则表达式是由 <code>rust-lang/regex</code> 包处理的。如果你想了解更多，请查看 crate 的文档：&quot;<a href=\"https://github.com/rust-lang/regex\" target=\"_blank\" rel=\"noopener noreferrer\">Regex</a>&quot;。</p>\n",
      "date_modified": "2022-06-03T06:25:20.489Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "脚本",
      "url": "www.nushell.sh/zh-CN/book/scripts.html",
      "id": "www.nushell.sh/zh-CN/book/scripts.html",
      "content_html": "<h1 id=\"脚本\" tabindex=\"-1\"> 脚本</h1>\n<p>在 Nushell 中，你可以用 Nushell 语言编写和运行脚本。要运行一个脚本，你可以把它作为一个参数传递给<code>nu</code>命令行程序：</p>\n<div><pre><code><span>></span> nu myscript.nu\n</code></pre></div><p>这将在一个新的 Nu 实例中运行脚本直至完成。你也可以使用<a href=\"/book/commands/source.html\"><code>source</code></a>在 Nu 的 <strong>当前</strong> 实例中运行脚本：</p>\n<div><pre><code><span>></span> <span>source</span> myscript.nu\n</code></pre></div><p>我们来看一个脚本文件的例子吧：</p>\n<div><pre><code><span># myscript.nu</span>\ndef greet <span>[</span>name<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello\"</span> <span>$name</span>\n<span>}</span>\n\ngreet <span>\"world\"</span>\n</code></pre></div><p>脚本文件包含了自定义命令的定义以及主脚本本身，它将在自定义命令定义后运行。</p>\n<p>在上面的例子中，首先<code>greet</code>是由 Nushell 解释器定义的，这使得我们之后可以调用这个定义，我们可以把上面的内容写成：</p>\n<div><pre><code>greet <span>\"world\"</span>\n\ndef greet <span>[</span>name<span>]</span> <span>{</span>\n  <span>echo</span> <span>\"hello\"</span> <span>$name</span>\n<span>}</span>\n</code></pre></div><p>Nushell 并不要求定义必须放在脚本中调用该定义之前，你可以把定义放在你觉得舒服的地方。</p>\n<h2 id=\"脚本是如何被处理的\" tabindex=\"-1\"> 脚本是如何被处理的</h2>\n<p>在一个脚本中定义总是先运行，这样我们就可以在脚本中调用定义。</p>\n<p>在定义运行之后, 我们从脚本文件的顶部开始, 一个接一个地运行每一组命令。</p>\n<h2 id=\"脚本行\" tabindex=\"-1\"> 脚本行</h2>\n<p>为了更好地理解 Nushell 是如何看待代码行的, 我们来看一个脚本的例子：</p>\n<div><pre><code>a\nb<span>;</span> c <span>|</span> d\n</code></pre></div><p>当这个脚本运行时，Nushell 将首先运行<code>a</code>命令至完成并查看其结果。接下来，Nushell 将按照<a href=\"/zh-CN/book/types_of_data.html#%E7%BB%84\">&quot;组&quot;部分</a>中的规则运行<code>b; c | d</code>。</p>\n<h2 id=\"参数化脚本\" tabindex=\"-1\"> 参数化脚本</h2>\n<p>脚本文件可以选择性地包含一个特殊的 &quot;main&quot; 命令。<code>main</code>将在任何其他 Nu 代码之后运行，主要用于向脚本添加参数。你可以在脚本名称后面传递参数（<code>nu &lt;script name&gt; &lt;script args&gt;</code>）。比如：</p>\n<div><pre><code><span># myscript.nu</span>\n\ndef main <span>[</span>x: int<span>]</span> <span>{</span>\n  <span>$x</span> + <span>10</span>\n<span>}</span>\n</code></pre></div><div><pre><code>> nu myscript.nu 100\n110\n</code></pre></div><h2 id=\"shebangs\" tabindex=\"-1\"> Shebangs (<code>!#</code>)</h2>\n<p>在 Linux 和 macOS 上，你可以选择使用 <a href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\" target=\"_blank\" rel=\"noopener noreferrer\">Shebang</a>来告诉操作系统一个文件应该被 <code>Nu</code> 解释。例如，在一个名为 <code>myscript</code> 的文件中包含以下内容：</p>\n<div><pre><code><span>#!/usr/bin/env nu</span>\n<span>echo</span> <span>\"Hello World!\"</span>\n</code></pre></div><p>此时你可以直接运行该脚本(注意：前面并没有加<code>nu</code>)：</p>\n<div><pre><code><span>></span> ./myscript\nHello World<span>!</span>\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.489Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Shell 中的 Shell",
      "url": "www.nushell.sh/zh-CN/book/shells_in_shells.html",
      "id": "www.nushell.sh/zh-CN/book/shells_in_shells.html",
      "content_html": "<h1 id=\"shell-中的-shell\" tabindex=\"-1\"> Shell 中的 Shell</h1>\n<h2 id=\"在多个目录下工作\" tabindex=\"-1\"> 在多个目录下工作</h2>\n<p>虽然在一个目录下工作很常见，但同时在多个路径工作也很方便。为此，Nu 提供了 &quot;Shells&quot; 的概念。顾名思义，它们是一种在一个 Shell 中运行多个 Shell 的方法，允许你在多个工作目录之间快速跳转。</p>\n<p>作为开始，让我们进入一个目录：</p>\n<div><pre><code>/home/jonathant/Source/nushell<span>(</span>main<span>)</span><span>></span> enter <span>..</span>/book\n/home/jonathant/Source/book<span>(</span>main<span>)</span><span>></span> <span>ls</span>\n────┬────────────────────┬──────┬────────┬─────────────\n <span>#  │ name               │ type │ size   │ modified</span>\n────┼────────────────────┼──────┼────────┼─────────────\n  <span>0</span> │ <span>404</span>.html           │ File │  <span>429</span> B │ <span>2</span> hours ago\n  <span>1</span> │ CONTRIBUTING.md    │ File │  <span>955</span> B │ <span>2</span> hours ago\n  <span>2</span> │ Gemfile            │ File │ <span>1.1</span> KB │ <span>2</span> hours ago\n  <span>3</span> │ Gemfile.lock       │ File │ <span>6.9</span> KB │ <span>2</span> hours ago\n</code></pre></div><p>进入(<code>enter</code>)类似于改变目录（正如我们在<code>cd</code>命令中看到的那样）。这允许你跳入一个目录，在其中工作。我们现在是在两个目录中，而不是改变目录。为了更清楚地看到这一点，我们可以使用<a href=\"/book/commands/shells.html\"><code>shells</code></a>命令来列出我们当前的活动目录：</p>\n<div><pre><code>/home/jonathan/Source/book<span>(</span>main<span>)</span><span>></span> shells\n───┬────────┬────────────┬─────────────────────────\n <span># │ active │    name    │          path</span>\n───┼────────┼────────────┼─────────────────────────\n <span>0</span> │ <span>false</span>  │ filesystem │ /home/jt/Source/nushell\n <span>1</span> │ <span>true</span>   │ filesystem │ /home/jt/Source/book\n <span>2</span> │ <span>false</span>  │ filesystem │ /home/jt/Source/music\n───┴────────┴────────────┴─────────────────────────\n\n</code></pre></div><p><a href=\"/book/commands/shells.html\"><code>shells</code></a>命令显示目前有三个 Shells 处于活动状态：我们最初的 &quot;nushell&quot; 源目录和现在的新 &quot;book&quot; 目录。</p>\n<p>我们可以用 <code>n</code>, <code>p</code> 和 <code>g</code> 的快捷命令在这些 Shell 之间跳转，这是 &quot;next&quot;、&quot;previous&quot; 和 &quot;go&quot; 的缩写：</p>\n<div><pre><code>/home/jonathant/Source/book(main)> n\n/home/jonathant/Source/nushell(main)> p\n/home/jonathant/Source/book(main)> g 2\n/home/jonathant/Source/music(main)>\n</code></pre></div><p>我们可以看到目录在变化，但我们总是能够回到我们正在工作的前一个目录。这使我们能够在同一个会话的多个目录中工作。</p>\n<h2 id=\"退出-shell\" tabindex=\"-1\"> 退出 Shell</h2>\n<p>你可以使用 <code>exit</code> 命令离开一个你已经 &quot;进入(<code>enter</code>)&quot; 的 Shell。如果这是最后一个打开的 Shell，Nu 将退出。</p>\n<p>你可以随时退出 Nu，即使有多个 Shell 处于活动状态，只需要在<code>exit</code>命令中传递<code>--now</code>标志。像这样：<code>exit --now</code></p>\n",
      "date_modified": "2022-06-03T06:25:20.489Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "标准输入、输出和退出码",
      "url": "www.nushell.sh/zh-CN/book/stdout_stderr_exit_codes.html",
      "id": "www.nushell.sh/zh-CN/book/stdout_stderr_exit_codes.html",
      "content_html": "<h1 id=\"标准输入、输出和退出码\" tabindex=\"-1\"> 标准输入、输出和退出码</h1>\n<p>Nushell 和外部命令之间互操作的一个重要部分是与来自外部的标准数据流一起工作。</p>\n<p>这些重要数据流中的第一个是标准输出流(stdout)。</p>\n<h2 id=\"标准输出流\" tabindex=\"-1\"> 标准输出流</h2>\n<p>标准输出流(stdout)是大多数外部应用程序将数据发送到管道或屏幕上的方式。如果由外部应用发送到其 stdout 的数据是管道的一部分，Nushell 会默认接收。</p>\n<div><pre><code><span>></span> external <span>|</span> str collect\n</code></pre></div><p>以上将调用名为<code>external</code>的外部命令，并将 stdout 输出流重定向到管道中。有了这个重定向，Nushell 就可以把数据传递给管道中的下一个命令，这里是<code>str collect</code>。</p>\n<p>如果没有管道，Nushell 将不做任何重定向，允许它直接打印到屏幕上。</p>\n<h2 id=\"标准错误流\" tabindex=\"-1\"> 标准错误流</h2>\n<p>另一个外部应用程序经常用来打印错误信息的常见流是标准错误流(stderr)。默认情况下，Nushell 不会对 stderr 做任何重定向，这意味着它会默认打印到屏幕上。</p>\n<p>你可以通过使用<code>do -i { ... }</code>来强制 Nushell 做一个重定向。例如，如果我们想调用上面的外部程序并重定向其 stderr，我们可以这样写：</p>\n<div><pre><code><span>></span> <span>do</span> -i <span>{</span> external <span>}</span>\n</code></pre></div><h2 id=\"退出码\" tabindex=\"-1\"> 退出码</h2>\n<p>最后，外部命令有一个 &quot;退出代码(exit code)&quot;。这些代码有助于给调用者一个提示，说明该命令是否运行成功。</p>\n<p>Nushell 通过两种方式之一跟踪最近完成的外部命令的最后退出代码。第一种方式是使用<code>LAST_EXIT_CODE</code>环境变量。</p>\n<div><pre><code><span>></span> <span>do</span> -i <span>{</span> external <span>}</span>\n<span>></span> <span>echo</span> <span>$env</span>.LAST_EXIT_CODE\n</code></pre></div><p>第二种是使用一个叫做<a href=\"/book/commands/complete.html\"><code>complete</code></a>的命令。</p>\n<h2 id=\"使用-complete-命令\" tabindex=\"-1\"> 使用 <a href=\"/book/commands/complete.html\"><code>complete</code></a> 命令</h2>\n<p><a href=\"/book/commands/complete.html\"><code>complete</code></a>命令允许你运行一个外部程序直到完成，并将 stdout, stderr, 和退出代码收集在一条记录中。</p>\n<p>如果我们尝试在一个不存在的文件上运行外部的<code>cat</code>，我们可以看到<a href=\"/book/commands/complete.html\"><code>complete</code></a>对流的处理，包括重定向的 stderr：</p>\n<div><pre><code><span>></span> <span>do</span> -i <span>{</span> <span>cat</span> unknown.txt <span>}</span> <span>|</span> complete\n╭───────────┬─────────────────────────────────────────────╮\n│ stdout    │                                             │\n│ stderr    │ cat: unknown.txt: No such <span>file</span> or directory │\n│ exit_code │ <span>1</span>                                           │\n╰───────────┴─────────────────────────────────────────────╯\n</code></pre></div><h2 id=\"原始流\" tabindex=\"-1\"> 原始流</h2>\n<p>在 Nushell 中，stdout 和 stderr 都表现为 &quot;原始流&quot;。这些流是字节流，而不是结构化的流，而后者才是 Nushell 内部命令所使用的。</p>\n<p>因为字节流可能很难处理，特别是考虑到使用输出作为文本数据是很常见的，Nushell 试图将原始流转换为文本数据。这使得其他命令可以拉取外部命令的输出，并接收他们可以进一步处理的字符串。</p>\n<p>Nushell 试图将流转换为 UTF-8 文本，如果在任何时候转换失败，流的其余部分就会被假定为始终是字节。</p>\n<p>如果你想对字节流的解码有更多的控制，你可以使用 <a href=\"/book/commands/decode.html\"><code>decode</code></a> 命令。<a href=\"/book/commands/decode.html\"><code>decode</code></a>命令可以插入到外部或其他原始流创建命令之后的管道中，它将根据你给<code>decode</code>的参数来处理字节的解码。例如，你可以这样对 shift-jis 文本进行解码：</p>\n<div><pre><code><span>></span> 0x<span>[</span>8a 4c<span>]</span> <span>|</span> decode shift-jis\n貝\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.490Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Table of Contents",
      "url": "www.nushell.sh/zh-CN/book/table_of_contents.html",
      "id": "www.nushell.sh/zh-CN/book/table_of_contents.html",
      "content_html": "<h1 id=\"table-of-contents\" tabindex=\"-1\"> Table of Contents</h1>\n<ul>\n<li><a href=\"/zh-CN/book/installation.html\">安装</a> - 安装 Nushell</li>\n<li><a href=\"/zh-CN/book/introduction.html\">介绍</a> - 开始使用</li>\n<li><a href=\"/zh-CN/book/thinking_in_nushell.html\">Nushell 开发思想</a> - Nushell 开发思想</li>\n<li><a href=\"/zh-CN/book/moving_around.html\">四处移动</a> - 在 Nushell 里四处移动</li>\n<li><a href=\"/zh-CN/book/types_of_data.html\">数据类型</a> - Nushell 中的数据类型</li>\n<li><a href=\"/zh-CN/book/loading_data.html\">加载数据</a> - 加载及使用数据</li>\n<li><a href=\"/zh-CN/book/strings.html\">字符串</a> - 字符串、转义字符和字符串插值</li>\n<li><a href=\"/zh-CN/book/working_with_lists.html\">使用列表</a> - 使用 Nushell 的列表</li>\n<li><a href=\"/zh-CN/book/working_with_tables.html\">使用表格</a> - 使用 Nushell 的表格</li>\n<li><a href=\"/zh-CN/book/pipeline.html\">管道</a> - 管道是如何运作的</li>\n<li><a href=\"/zh-CN/book/configuration.html\">配置</a> - 如何配置 Nushell</li>\n<li><a href=\"/zh-CN/book/3rdpartyprompts.html\">第三方命令行提示</a> - 如何配置第三方命令行提示</li>\n<li><a href=\"/zh-CN/book/custom_commands.html\">自定义命令</a> - 创建你自己的命令</li>\n<li><a href=\"/zh-CN/book/aliases.html\">别名</a> - 如何为命令添加别名</li>\n<li><a href=\"/zh-CN/book/operators.html\">运算符</a> - Nushell 支持的运算符</li>\n<li><a href=\"/zh-CN/book/math.html\">数学</a> - Nushell 里的数学计算</li>\n<li><a href=\"/zh-CN/book/variables_and_subexpressions.html\">变量和子表达式</a> - 使用变量和子表达式</li>\n<li><a href=\"/zh-CN/book/environment.html\">环境变量</a> - 使用环境变量</li>\n<li><a href=\"/zh-CN/book/stdout_stderr_exit_codes.html\">标准输出、错误和退出码</a> - 使用标准输出、错误和退出码</li>\n<li><a href=\"/zh-CN/book/modules.html\">模块</a> - 创建和使用你自己的模块</li>\n<li><a href=\"/zh-CN/book/scripts.html\">脚本</a> - 创建你自己的脚本</li>\n<li><a href=\"/zh-CN/book/metadata.html\">元数据</a> - 细说 Nushell 的元数据系统</li>\n<li><a href=\"/zh-CN/book/creating_errors.html\">创建你自己的<code>错误</code></a> - 创建你自己的错误信息</li>\n<li><a href=\"/zh-CN/book/shells_in_shells.html\">Shells</a> - 同时在多个 Shell 里面工作</li>\n<li><a href=\"/zh-CN/book/escaping.html\">命令转移</a> - 转移到同名的本机原生命令</li>\n<li><a href=\"/zh-CN/book/plugins.html\">插件</a> - 通过插件增强 Nushell 并添加更多功能</li>\n<li><a href=\"/zh-CN/book/parallelism.html\">平行</a> - 并行运行你的代码</li>\n<li><a href=\"/zh-CN/book/line_editor.html\">行编辑器</a> - Nushell 的行编辑器</li>\n<li><a href=\"/zh-CN/book/dataframes.html\">数据帧</a> - 在 Nushell 里使用数据帧</li>\n<li><a href=\"/zh-CN/book/coloring_and_theming.html\">配色和主题</a> - 如何改变 Nushell 的颜色和主题</li>\n<li><a href=\"/zh-CN/book/regular_expressions.html\">正则表达式</a> - 正则使用指南</li>\n<li><a href=\"/zh-CN/book/coming_from_bash.html\">Bash 用户上手指南</a> - 帮助 Bash 用户快速上手 Nushell</li>\n<li><a href=\"/zh-CN/book/nushell_map.html\">从 shells/DSL 到 Nushell</a> - Nushell 与 SQL, Linq, PowerShell 及 Bash 的差异</li>\n<li><a href=\"/zh-CN/book/nushell_map_imperative.html\">从命令式语言到 Nushell</a> - Nushell 与 Python, Kotlin, C++, C# 和 Rust 的差异</li>\n<li><a href=\"/zh-CN/book/nushell_map_functional.html\">从函数式编程语言到 Nushell</a> - Nushell 与 Clojure, Tablecloth (Ocaml / Elm) 和 Haskell 的差异</li>\n<li><a href=\"/zh-CN/book/nushell_operator_map.html\">Nushell 运算符映射</a> - 比较 Nushell 与通用编程语言中的运算符</li>\n<li><a href=\"/zh-CN/book/command_reference.html\">命令参考</a> - Nushell 所有命令清单</li>\n</ul>\n",
      "date_modified": "2022-06-03T06:25:20.490Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "以 Nushell 的方式思考",
      "url": "www.nushell.sh/zh-CN/book/thinking_in_nushell.html",
      "id": "www.nushell.sh/zh-CN/book/thinking_in_nushell.html",
      "content_html": "<h1 id=\"以-nushell-的方式思考\" tabindex=\"-1\"> 以 Nushell 的方式思考</h1>\n<p>为了帮助你理解并充分利用 Nushell，我们把这部分内容一起放入&quot;以 Nushell 的方式思考&quot;这一节。通过学习 Nushell 的思考方式，并使用它提供的模式，你会在开始时遇到更少的问题，并为接下来的成功做好准备。</p>\n<p>那么，用 Nushell 的方式思考是什么意思呢？下面是一些 Nushell 新用户常见的问题。</p>\n<h2 id=\"nushell-不是-bash\" tabindex=\"-1\"> Nushell 不是 Bash</h2>\n<p>Nushell 既是一种编程语言，也是一种 Shell，正因为如此，它有自己的方式来处理文件、目录、网站等等。我们对其进行了建模，以使其与你可能熟悉的其他 Shell 的工作方式接近。其中管道用于将两个命令连接在一起：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> length\n</code></pre></div><p>Nushell 也支持其他常见的功能，例如从之前运行的命令中获取退出代码(Exit Code)。</p>\n<p>虽然它确实有这些功能，但 Nushell 并不是 Bash。Bash 的工作方式以及一般的 POSIX 风格，并不是 Nushell 所支持的。例如，在 Bash 中你可以使用：</p>\n<div><pre><code><span>></span> <span>echo</span> <span>\"hello\"</span> <span>></span> output.txt\n</code></pre></div><p>在 Nushell 中，我们使用<code>&gt;</code>作为大于运算符，这与 Nushell 的语言特质比较吻合。取而代之的是，你需要用管道将其连接到一个可以保存内容的命令：</p>\n<div><pre><code><span>></span> <span>echo</span> <span>\"hello\"</span> <span>|</span> save output.txt\n</code></pre></div><p><strong>以 Nushell 的方式思考：</strong> Nushell 看待数据的方式是，数据在管道中流动，直到它到达用户或由最后的命令处理。Nushell 使用命令来完成工作，学习这些命令以及何时使用它们有助于你组合使用多种管道。</p>\n<h2 id=\"把-nushell-想象成一种编译型语言\" tabindex=\"-1\"> 把 Nushell 想象成一种编译型语言</h2>\n<p>Nushell 设计的一个重要部分，特别是它与许多动态语言不同的地方是，Nushell 将你提供给它的源代码转换成某种可执行产物，然后再去运行它。Nushell 没有 <code>eval</code> 功能，因此也不允许你在运行时继续拉入新的源代码。这意味着对于诸如引入文件使其成为你项目的一部分这样的任务，需要知道文件的具体路径，就如同 C++或 Rust 等编译语言中的文件引入一样。</p>\n<p>例如，下面的代码在 Nushell 中是没有意义的，如果作为脚本将无法执行：</p>\n<div><pre><code><span>echo</span> <span>\"def abc [] { 1 + 2 }\"</span> <span>|</span> save output.nu\n<span>source</span> <span>\"output.nu\"</span>\nabc\n</code></pre></div><p><code>source</code> 命令将引入被编译的源码，但前面那行 <code>save</code> 命令还没有机会运行。Nushell 运行整个程序块就像运行一个文件一样，而不是一次运行一行。在这个例子中，由于<code>output.nu</code>文件是在 &quot;编译&quot; 步骤之后才创建的，因此 <code>source</code> 命令在解析时无法从其中读取定义。</p>\n<p>另一个常见的问题是试图动态地创建文件名并<code>source</code>，如下：</p>\n<div><pre><code><span>></span> <span>source</span> $<span>\"(<span>$my</span>-path)/common.nu\"</span>\n</code></pre></div><p>这就需要求值器(Evaluator)运行并对字符串进行求值(Evaluate)，但不幸的是，Nushell 在编译时就需要这些信息。</p>\n<p><strong>以 Nushell 的方式思考：</strong> Nushell 被设计为对你输入的所有源代码使用一个单一的“编译”步骤，这与求值是分开的。这将允许强大的 IDE 支持，准确的错误提示，并成为第三方工具更容易使用的语言，以及在未来甚至可以有更高级的输出，比如能够直接将 Nushell 编译为二进制文件等。</p>\n<h2 id=\"变量是不可变的\" tabindex=\"-1\"> 变量是不可变的</h2>\n<p>对于来自其他语言的人来说，另一个常见的令人惊愕之处是 Nushell 的变量是不可变的（事实上，有些人已经开始称它们为 &quot;<strong>常量</strong>&quot; 来反映这一点）。接触 Nushell，你需要花一些时间来熟悉更多的函数式风格，因为这往往有助于写出与<strong>不可变的变量</strong>最相容的代码。</p>\n<p>你可能想知道为什么 Nushell 使用不可变的变量，在 Nushell 开发的早期，我们决定看看我们能在语言中使用多长时间的以数据为中心的函数式风格。最近，我们在 Nushell 中加入了一个关键的功能，使这些早期的实验显示出其价值：并行性。通过在任何 Nushell 脚本中将<a href=\"/book/commands/each.html\"><code>each</code></a>切换到<a href=\"/book/commands/par-each.html\"><code>par-each</code></a>，你就能够在 “输入” 上并行地运行相应的代码块。这是可能的，因为 Nushell 的设计在很大程度上依赖于不可变性、组合和流水线。</p>\n<p>Nushell 的变量是不可变的，但这并不意味着无法表达变化。Nushell 大量使用了 &quot;Shadowing&quot; 技术（变量隐藏）。变量隐藏是指创建一个与之前声明的变量同名的新变量，例如，假设你有一个<code>$x</code>在当前作用域内，而你想要一个新的<code>$x</code>并将其加 1：</p>\n<div><pre><code><span>let</span> x <span>=</span> <span>$x</span> + <span>1</span>\n</code></pre></div><p>这个新的<code>x</code>对任何跟在这一行后面的代码都是可见的。谨慎地使用变量隐藏可以使变量的使用变得更容易，尽管这不是必须的。</p>\n<p>循环计数器是可变变量的另一种常见模式，它被内置于大多数迭代命令中，例如，你可以使用<a href=\"/book/commands/each.html\"><code>each</code></a>上的<code>-n</code>标志同时获得每个元素的值和索引：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> each -n <span>{</span> <span>|</span>it<span>|</span> $<span>\"Number (<span>$it</span>.index) is size (<span>$it</span>.item.size)\"</span> <span>}</span>\n</code></pre></div><p>你也可以使用<a href=\"/book/commands/reduce.html\"><code>reduce</code></a>命令来达到上述目的，其方式与你在循环中修改一个变量相同。例如，如果你想在一个字符串列表中找到最长的字符串，你可以这样做：</p>\n<div><pre><code><span>></span> <span>[</span>one, two, three, four, five, six<span>]</span> <span>|</span> reduce <span>{</span><span>|</span>curr, max<span>|</span>\n    <span>if</span> <span>(</span><span>$curr</span> <span>|</span> str length<span>)</span> <span>></span> <span>(</span><span>$max</span> <span>|</span> str length<span>)</span> <span>{</span>\n        <span>$curr</span>\n    <span>}</span> <span>else</span> <span>{</span>\n        <span>$max</span>\n    <span>}</span>\n<span>}</span>\n</code></pre></div><p><strong>以 Nushell 的方式思考：</strong> 如果你习惯于使用可变的变量来完成不同的任务，那么你将需要一些时间来学习如何以更加函数式的方式来完成每个任务。Nushell 有一套内置的能力来帮助处理这样的模式，学习它们将帮助你以更加 Nushell 的风格来写代码。由此带来的额外的好处是你可以通过并行运行你的部分代码来加速脚本执行。</p>\n<h2 id=\"nushell-的环境是有作用域的\" tabindex=\"-1\"> Nushell 的环境是有作用域的</h2>\n<p>Nushell 从编译型语言中获得了很多设计灵感，其中一个是语言应该避免全局可变状态。Shell 经常通过修改全局变量来更新环境，但 Nushell 避开了这种方法。</p>\n<p>在 Nushell 中，代码块可以控制自己的环境，因此对环境的改变是发生在代码块范围内的。</p>\n<p>在实践中，这可以让你用更简洁的代码来处理子目录，例如，如果你想在当前目录下构建每个子项目，你可以运行：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> each <span>{</span> <span>|</span>it<span>|</span>\n    <span>cd</span> <span>$it</span>.name\n    <span>make</span>\n<span>}</span>\n</code></pre></div><p><code>cd</code>命令改变了<code>PWD</code>环境变量，这个变量的改变只在当前代码块有效，如此即可允许每次迭代都从当前目录开始，进入下一个子目录。</p>\n<p>环境变量具有作用域使命令更可预测，更容易阅读，必要时也更容易调试。Nushell 还提供了一些辅助命令，如<a href=\"/book/commands/def-env.html\"><code>def-env</code></a>、<a href=\"/book/commands/load-env.html\"><code>load-env</code></a>，作为对环境变量进行批量更新的辅助方法。</p>\n<p><code>*</code> - 这里有一个例外，<a href=\"/book/commands/def-env.html\"><code>def-env</code></a>允许你创建一个可以修改并保留调用者环境的命令</p>\n<p><strong>以 Nushell 的方式思考：</strong> 在 Nushell 中，没有全局可修改变量的编码最佳实践延伸到了环境变量。使用内置的辅助命令可以让你更容易地处理 Nushell 中的环境变量问题。利用环境变量对代码块具有作用范围这一事实，也可以帮助你写出更简洁的脚本，并与外部命令互动，而不需要在全局环境中添加你不需要的东西。</p>\n",
      "date_modified": "2022-06-03T06:25:20.490Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "数据类型",
      "url": "www.nushell.sh/zh-CN/book/types_of_data.html",
      "id": "www.nushell.sh/zh-CN/book/types_of_data.html",
      "content_html": "<h1 id=\"数据类型\" tabindex=\"-1\"> 数据类型</h1>\n<p>传统上，Unix Shell 命令之间使用字符串文本进行通信。一个命令通过标准输出（通常缩写为 &quot;stdout&quot;）输出文本，另一个命令通过标准输入（或 &quot;stdin&quot;）读入文本，以此来让两个命令进行通信。</p>\n<p>我们可以认为这种通信是基于字符串的。</p>\n<p>Nu 在其命令中采用了这种方法，并将其扩展到包括其他类型的数据。目前，Nu 支持两种数据类型：简单的和结构化的数据。</p>\n<p>像许多编程语言一样，Nu 使用一组简单和结构化的数据类型对数据进行建模。简单的数据类型包括整数、浮点数、字符串、布尔、日期和路径。它还包括一个用于表示文件大小的特殊类型。</p>\n<h2 id=\"整数\" tabindex=\"-1\"> 整数</h2>\n<p>整数（或整形）数字：例子包括 1、5 和 100。</p>\n<h2 id=\"小数\" tabindex=\"-1\"> 小数</h2>\n<p>小数是指带有一些小数成分的数字，例如，1.5，2.0，和 15.333。</p>\n<h2 id=\"字符串\" tabindex=\"-1\"> 字符串</h2>\n<p>代表文本的字符串。在 Nushell 中，我们有几种方法可以表示字符串：</p>\n<p><strong>双引号</strong></p>\n<div><pre><code>\"my message\"\n</code></pre></div><p>双引号是最常见的引号形式，只要是需要文字的地方，你都可能看到。</p>\n<p><strong>单引号</strong></p>\n<div><pre><code>'my message'\n</code></pre></div><p>单引号也生成一个字符串值，就像双引号一样。这里的区别是，它们允许你在文本中使用双引号，例如：<code>'他说：&quot;你能帮我拿下杯子吗？&quot;'</code>。</p>\n<p><strong>字符串插值</strong></p>\n<p>Nushell 支持字符串插值，允许你在以<code>$</code>为前缀的字符串中运行子表达式。比如：</p>\n<div><pre><code>> echo $\"6 x 7 = (6 * 7)\"\n6 x 7 = 42\n</code></pre></div><div><pre><code>> ls | each { |it| echo $\"($it.name) is ($it.size)\" }\n───┬─────────────────────\n 0 │ genawait is 4.1 KB\n 1 │ learncpp is 4.1 KB\n 2 │ nuscripts is 4.1 KB\n───┴─────────────────────\n</code></pre></div><p><strong>裸字符串</strong></p>\n<div><pre><code>> echo hello\n</code></pre></div><p>Nushell 的一个独特特征是，你也可以创建一个没有任何引号的单字字符串。</p>\n<p>上面的内容和如下写法是一样的：</p>\n<div><pre><code>> echo \"hello\"\n</code></pre></div><p>另见 <a href=\"/zh-CN/book/loading_data.html#%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串的使用</a>。</p>\n<h2 id=\"文本行\" tabindex=\"-1\"> 文本行</h2>\n<p>文本行(Lines)是具有隐含的操作系统特定行结尾的字符串。使用时需要加上操作系统特定的行尾标识。</p>\n<h2 id=\"列路径\" tabindex=\"-1\"> 列路径</h2>\n<p>列路径(Column Paths)是指通过表格到特定子表、列、行或单元格的路径。</p>\n<p>例如) <code>open data.toml | get foo.0.bar</code>中的值<code>foo.0.bar</code></p>\n<h2 id=\"glob-模式-通配符\" tabindex=\"-1\"> Glob 模式（通配符）</h2>\n<p>在 Nushell 中，文件操作也允许你传入一个 glob 模式，有时被称为 &quot;通配符&quot;。这允许你给出一个可以匹配多个文件路径的模式。</p>\n<p>最常见的模式是 <code>*</code>，它将匹配所有的路径。通常，你会看到这个模式被用作另一个模式的一部分，例如<code>*.bak</code>和<code>temp\\*</code>。</p>\n<p>在 Nushell 中，我们也支持通过双 <code>*</code> 来遍历其他目录内嵌套得更深的路径。例如，<code>ls **/*</code>将列出所有嵌套在当前目录下的非隐藏路径。</p>\n<p>除了<code>*</code>，还有<code>?</code>模式，它将匹配一个单一的字符。例如，你可以通过使用模式<code>p???</code>来匹配 &quot;port&quot;。</p>\n<h2 id=\"布尔类型\" tabindex=\"-1\"> 布尔类型</h2>\n<p>布尔类型是指真或假的状态。它通常用于一个比较的结果，而非直接使用该值。</p>\n<p>布尔类型的两个值是<code>true</code>和<code>false</code>。</p>\n<h2 id=\"日期\" tabindex=\"-1\"> 日期</h2>\n<p>日期和时间被保存在日期(Date)值类型中。系统使用的日期值是有时区的，默认使用 UTC 时区。</p>\n<p>日期有三种形式，基于 RFC 3339 标准：</p>\n<ul>\n<li>日期:\n<ul>\n<li><code>2022-02-02</code></li>\n</ul>\n</li>\n<li>日期和时间 (GMT 格式):\n<ul>\n<li><code>2022-02-02T14:30:00</code></li>\n</ul>\n</li>\n<li>包含时区的日期和时间:\n<ul>\n<li><code>2022-02-02T14:30:00+05:00</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"时间间隔\" tabindex=\"-1\"> 时间间隔</h2>\n<p>时间间隔(Duration)表示时间的长短。一秒钟、五周和一年都是时间间隔。</p>\n<p>Eg) <code>1wk</code>是一个星期的时间间隔。</p>\n<p>下表显示了目前支持的所有时间间隔：</p>\n<table>\n<thead>\n<tr>\n<th>Duration</th>\n<th>时长</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1ns</code></td>\n<td>1 纳秒</td>\n</tr>\n<tr>\n<td><code>1us</code></td>\n<td>1 微秒</td>\n</tr>\n<tr>\n<td><code>1ms</code></td>\n<td>1 毫秒</td>\n</tr>\n<tr>\n<td><code>1sec</code></td>\n<td>1 秒</td>\n</tr>\n<tr>\n<td><code>1min</code></td>\n<td>1 分钟</td>\n</tr>\n<tr>\n<td><code>1hr</code></td>\n<td>1 小时</td>\n</tr>\n<tr>\n<td><code>1day</code></td>\n<td>1 天</td>\n</tr>\n<tr>\n<td><code>1wk</code></td>\n<td>1 周</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"区间\" tabindex=\"-1\"> 区间</h2>\n<p>区间(Ranges)是一种表达从开始到结束的数值序列的方式。它们的形式是<code>'start' + '..' + 'end'</code>。例如，范围 <code>1..3</code>表示数字 1、2、和 3。</p>\n<h2 id=\"闭区间和开区间\" tabindex=\"-1\"> 闭区间和开区间</h2>\n<p>默认情况下，区间是包含性的，也就是说，结束值被算作区间的一部分。区间<code>1..3</code>包括数字<code>3</code>作为区间内的最后一个值。</p>\n<p>有时，你可能想要一个达到某个数字的区间，但在输出中不包含该数字。对于这种情况，你可以使用<code>..&lt;</code>代替<code>..</code>。例如，<code>1..&lt;5</code>包含数字 1、2、3 和 4。</p>\n<h2 id=\"开放式区间\" tabindex=\"-1\"> 开放式区间</h2>\n<p>区间也可以是开放式的。你可以去掉区间的起点或终点，使其成为开放式的。</p>\n<p>比方说，你想从 3 开始计数，但你心里没有一个具体的终点。你可以用 <code>3..</code> 这个区间来表示。当你在右边使用一个无限制的区间时，请记住，这将持续计数尽可能长的时间，这可能是一个非常长的时间，你可能会在 <code>first</code> 这样的命令中使用开放式区间，这样你就可以从区间中取出你想要的指定数量的元素。</p>\n<p>你也可以使区间的开始部分开放。在这种情况下，Nushell 将从<code>0</code>开始向上计数。区间<code>..2</code>包含数字 0、1 和 2。</p>\n<h2 id=\"文件路径\" tabindex=\"-1\"> 文件路径</h2>\n<p>文件路径(File Paths)是在给定的操作系统中代表文件路径的一种与平台无关的方式。比如<code>/usr/bin</code>和<code>C:\\Users\\file.txt</code>。</p>\n<h2 id=\"文件大小\" tabindex=\"-1\"> 文件大小</h2>\n<p>文件大小(File Sizes)保存在一种特殊的称为字节的整数类型中。例如包括 <code>100b</code>, <code>15kb</code>, 和 <code>100mb</code>。</p>\n<p>文件大小单位的完整列表是：</p>\n<ul>\n<li><code>b</code>: bytes</li>\n<li><code>kb</code>: kilobytes (aka 1000 bytes)</li>\n<li><code>mb</code>: megabytes</li>\n<li><code>gb</code>: gigabytes</li>\n<li><code>tb</code>: terabytes</li>\n<li><code>pb</code>: petabytes</li>\n<li><code>kib</code>: kibibytes (aka 1024 bytes)</li>\n<li><code>mib</code>: mebibytes</li>\n<li><code>gib</code>: gibibytes</li>\n<li><code>tib</code>: tebibytes</li>\n<li><code>pib</code>: pebibytes</li>\n</ul>\n<h2 id=\"二进制数据\" tabindex=\"-1\"> 二进制数据</h2>\n<p>二进制数据，像图像文件的数据一样，是一组原始字节。</p>\n<p>你可以使用 <code>0x[...]</code> 或 <code>0b[...]</code> 或 <code>0o[...]</code> 形式将二进制写成一个字面值：</p>\n<div><pre><code>> 0x[1F FF]\n> 0b[1 1010]\n> 0o[777]\n</code></pre></div><p>不完整的字节将用零来填充。</p>\n<h2 id=\"结构化数据\" tabindex=\"-1\"> 结构化数据</h2>\n<p>结构化数据是在简单数据的基础上建立的。例如，结构化数据给我们提供了一种在同一数值中表示多个整数的方法，而不是一个单一的整数。目前支持的结构化数据类型有：记录、列表和表格。</p>\n<h2 id=\"记录\" tabindex=\"-1\"> 记录</h2>\n<p>记录(Records)持有键值对，很像 JSON 中的对象。由于这些记录有时会有很多字段，所以记录是从上到下打印的，而不是从左到右：</p>\n<div><pre><code>> echo {name: sam, rank: 10}\n╭──────┬─────╮\n│ name │ sam │\n│ rank │ 10  │\n╰──────┴─────╯\n</code></pre></div><p>你可以将其转换到一个表然后遍历该记录：</p>\n<div><pre><code>> echo {name: sam, rank: 10} | transpose key value\n╭───┬──────┬───────╮\n│ # │ key  │ value │\n├───┼──────┼───────┤\n│ 0 │ name │  sam  │\n│ 1 │ rank │   10  │\n╰───┴──────┴───────╯\n</code></pre></div><h2 id=\"列表\" tabindex=\"-1\"> 列表</h2>\n<p>列表(Lists)可以容纳一个以上的值。这些可以是简单的值，也可以容纳行，而一组记录的组合通常被称为 &quot;表&quot;。</p>\n<p>例如，一个字符串的列表：</p>\n<div><pre><code>> echo [sam fred george]\n───┬────────\n 0 │ sam\n 1 │ fred\n 2 │ george\n───┴────────\n</code></pre></div><h2 id=\"表\" tabindex=\"-1\"> 表</h2>\n<p>表(Table)是 Nushell 的一个核心数据结构。当你运行 Nushell 命令时，你会发现许多命令都会将表作为输出返回。表由行和列组成。</p>\n<p>我们可以创建自己的表，就像我们创建一个列表一样。因为表也包含列，而不仅仅是值，所以我们需要传入列的名称：</p>\n<div><pre><code>> echo [[column1, column2]; [Value1, Value2]]\n───┬─────────┬─────────\n # │ column1 │ column2\n───┼─────────┼─────────\n 0 │ Value1  │ Value2\n───┴─────────┴─────────\n</code></pre></div><p>我们还可以创建一个有多行数据的表格：</p>\n<div><pre><code>> echo [[column1, column2]; [Value1, Value2] [Value3, Value4]]\n───┬─────────┬─────────\n # │ column1 │ column2\n───┼─────────┼─────────\n 0 │ Value1  │ Value2\n 1 │ Value3  │ Value4\n───┴─────────┴─────────\n</code></pre></div><p>你也可以通过一个记录列表来创建表格:</p>\n<div><pre><code>> echo [{name: sam, rank: 10}, {name: bob, rank: 7}]\n╭───┬──────┬──────╮\n│ # │ name │ rank │\n├───┼──────┼──────┤\n│ 0 │ sam  │   10 │\n│ 1 │ bob  │    7 │\n╰───┴──────┴──────╯\n</code></pre></div><h2 id=\"块\" tabindex=\"-1\"> 块</h2>\n<p>块(Blocks)表示 Nu 中的一个代码块。例如，在命令 <code>each { |it| echo $it }</code> 中，块是包含在大括号中的部分，<code>{ |it| echo $it }</code>。如果有必要，可以在一对管道符号（例如，<code>|it|</code>）之间指定块参数。</p>\n<p>块是表示可以在每行数据上执行的代码的一种有效方法。在<a href=\"/book/commands/each.html\"><code>each</code></a>块中使用<code>$it</code>作为参数名是惯例，但并不是必须的：<code>each { |x| echo $x }</code>与<code>each { |it| echo $it }</code>的结果相同。</p>\n<h2 id=\"组\" tabindex=\"-1\"> 组</h2>\n<p>以此为例：</p>\n<div><pre><code>foo <span>{</span>\n  line1\n  line2<span>;</span> line3 <span>|</span> line4\n<span>}</span>\n</code></pre></div><p>在该代码块内，你有两个独立的组(Groups)直到运行完毕。组是一个以分号分隔的管道集合，其中最后一个管道会输出到屏幕。</p>\n<ul>\n<li><code>line1</code> 是一个独立的组，所以该命令将运行到结束并显示在屏幕上。</li>\n<li><code>line2</code> 是第二组中的一个管道。它会运行，但其内容不会在屏幕上显示。</li>\n<li><code>line3</code> | <code>line4</code> 是第二组中的第二个管道。它会运行并且它的内容会在屏幕上显示。</li>\n</ul>\n",
      "date_modified": "2022-06-03T06:25:20.490Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "变量和子表达式",
      "url": "www.nushell.sh/zh-CN/book/variables_and_subexpressions.html",
      "id": "www.nushell.sh/zh-CN/book/variables_and_subexpressions.html",
      "content_html": "<h1 id=\"变量和子表达式\" tabindex=\"-1\"> 变量和子表达式</h1>\n<p>在 Nushell 中有两种类型的求值表达式：变量和子表达式。如果你看到一个以美元符号（<code>$</code>）开头的字符串的话，你就应该知道你看到的是一个求值表达式。这表明当 Nushell 运行到此处时需要执行一个求值操作来处理这个表达式并使用此结果值。这两种求值表达式都支持一个简单形式和一个&quot;路径&quot;形式，用于处理更复杂的数据。</p>\n<h2 id=\"变量\" tabindex=\"-1\"> 变量</h2>\n<p>在两种求值表达式中比较简单的是变量。在求值过程中，变量被其值所取代。</p>\n<p>如果我们创建了一个变量，我们可以通过使用<code>$</code>来引用它并打印其内容：</p>\n<div><pre><code><span>></span> <span>let</span> my-value <span>=</span> <span>4</span>\n<span>></span> <span>echo</span> <span>$my</span>-value\n<span>4</span>\n</code></pre></div><p>Nushell 中的变量是不可变的，这意味着你不能在声明后修改它的值。\n不过它们可以在嵌套块中被隐藏，这导致：</p>\n<div><pre><code><span>></span> <span>let</span> my-value <span>=</span> <span>4</span>\n<span>></span> <span>do</span> <span>{</span> <span>let</span> my-value <span>=</span> <span>5</span><span>;</span> <span>echo</span> <span>$my</span>-value <span>}</span>\n<span>5</span>\n<span>></span> <span>echo</span> <span>$my</span>-value\n<span>4</span>\n</code></pre></div><h2 id=\"变量路径\" tabindex=\"-1\"> 变量路径</h2>\n<p>变量路径通过深入变量的内容，找到其中的列，并最终获得一个值。比如，对于前面的例子如果我们不是赋值<code>4</code>，而是赋值了一个表的值：</p>\n<div><pre><code><span>></span> <span>let</span> my-value <span>=</span> <span>[</span><span>[</span>name<span>]</span><span>;</span> <span>[</span>testuser<span>]</span><span>]</span>\n</code></pre></div><p>我们可以使用一个变量路径来访问变量<code>$my-value</code>并只用一步从<code>name</code>列获得数值：</p>\n<div><pre><code><span>></span> <span>echo</span> <span>$my</span>-value.name\ntestuser\n</code></pre></div><h2 id=\"子表达式\" tabindex=\"-1\"> 子表达式</h2>\n<p>你总是可以通过用圆括号<code>()</code>来执行一个子表达式并使用其结果。请注意，Nushell 以前的版本（0.32 以前）使用<code>$()</code>。</p>\n<p>括号中包含了一个流水线，该流水线将被执行完毕然后使用结果值。例如，<code>(ls)</code>将运行<a href=\"/book/commands/ls.html\"><code>ls</code></a>命令并返回结果表格，<code>(git branch --show-current)</code>运行外部<code>git</code>命令并返回一个包含当前分支名称的字符串。你也可以使用括号来运行数学表达式，如<code>(2 + 3)</code>。</p>\n<p>子表达式也可以是管道，而不仅仅是单个命令。如果我们想得到一个大于 10KB 的文件名列表，我们可以使用子表达式来运行一个管道，并将其赋值给一个变量：</p>\n<div><pre><code><span>></span> <span>let</span> names-of-big-files <span>=</span> <span>(</span>ls <span>|</span> where size <span>></span> 10kb<span>)</span>\n<span>></span> <span>echo</span> <span>$names</span>-of-big-files\n───┬────────────┬──────┬──────────┬──────────────\n <span># │    name    │ type │   size   │   modified</span>\n───┼────────────┼──────┼──────────┼──────────────\n <span>0</span> │ Cargo.lock │ File │ <span>155.3</span> KB │ <span>17</span> hours ago\n <span>1</span> │ README.md  │ File │  <span>15.9</span> KB │ <span>17</span> hours ago\n───┴────────────┴──────┴──────────┴──────────────\n</code></pre></div><h2 id=\"子表达式和路径\" tabindex=\"-1\"> 子表达式和路径</h2>\n<p>子表达式也支持路径，例如，假设我们想获得当前目录下的文件名列表，其中一个办法是使用管道：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> get name\n</code></pre></div><p>我们也可以使用子表达式路径只需一步即可：</p>\n<div><pre><code><span>></span> <span>echo</span> <span>(</span>ls<span>)</span>.name\n</code></pre></div><p>这取决于代码的需要和你个人喜欢的编码风格。</p>\n<h2 id=\"简化子表达式-行条件\" tabindex=\"-1\"> 简化子表达式 (行条件)</h2>\n<p>Nushell 支持使用一种简化的方式访问子表达式中的列，你可能已经使用过这个功能了。例如，如果我们想只看到<a href=\"/book/commands/ls.html\"><code>ls</code></a>中大小至少为 10KB 的行，我们可以通过：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> where size <span>></span> 10kb\n</code></pre></div><p><code>where size &gt; 10kb</code>是一个由两部分组成的命令：命令名<a href=\"/book/commands/where.html\"><code>where</code></a>和简化的表达式<code>size &gt; 10kb</code>。我们说简化是因为这里的<code>size</code>是<code>$it.size</code>的简洁版。也可以用以下任何一种方式来写：</p>\n<div><pre><code><span>></span> <span>ls</span> <span>|</span> where <span>$it</span>.size <span>></span> 10kb\n<span>></span> <span>ls</span> <span>|</span> where <span>(</span><span>$it</span>.size <span>></span> 10kb<span>)</span>\n<span>></span> <span>ls</span> <span>|</span> where <span>{</span><span>|</span><span>$it</span><span>|</span> <span>$it</span>.size <span>></span> 10kb <span>}</span>\n</code></pre></div><p>为了使简化语法正常工作，列名必须出现在操作的左侧（如<code>size &gt; 10kb</code>中的<code>size</code>）。</p>\n",
      "date_modified": "2022-06-03T06:25:20.491Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "处理列表",
      "url": "www.nushell.sh/zh-CN/book/working_with_lists.html",
      "id": "www.nushell.sh/zh-CN/book/working_with_lists.html",
      "content_html": "<h1 id=\"处理列表\" tabindex=\"-1\"> 处理列表</h1>\n<h2 id=\"创建列表\" tabindex=\"-1\"> 创建列表</h2>\n<p>列表(<code>List</code>)是一个有序的值的集合。\n你可以用方括号创建一个列表，周围的值用空格和/或逗号隔开 (以方便阅读)。\n例如，<code>[foo bar baz]</code> 或 <code>[foo, bar, baz]</code>。</p>\n<h2 id=\"更新列表\" tabindex=\"-1\"> 更新列表</h2>\n<p>当列表数据从管道流入时，你可以向列表中更新(<code>update</code>)和插入(<code>insert</code>)值，例如，让我们在列表的中间插入值<code>10</code>：</p>\n<div><pre><code><span>></span> <span>[</span><span>1</span>, <span>2</span>, <span>3</span>, <span>4</span><span>]</span> <span>|</span> insert <span>2</span> <span>10</span>\n<span># [1, 2, 10, 3, 4]</span>\n</code></pre></div><p>我们也可以使用<code>update</code>将第二个元素的值替换为<code>10</code>：</p>\n<div><pre><code><span>></span> <span>[</span><span>1</span>, <span>2</span>, <span>3</span>, <span>4</span><span>]</span> <span>|</span> update <span>1</span> <span>10</span>\n<span># [1, 10, 3, 4]</span>\n</code></pre></div><p>除了 <code>update</code> 和 <code>insert</code> 之外，还有 <code>prepend</code> 和 <code>append</code>，它们分别让你插入到列表的开头或列表的结尾。例如：</p>\n<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>yellow green<span>]</span>\n<span>let</span> colors <span>=</span> <span>(</span><span>$colors</span> <span>|</span> prepend red<span>)</span>\n<span>let</span> colors <span>=</span> <span>(</span><span>$colors</span> <span>|</span> append purple<span>)</span>\n<span>echo</span> <span>$colors</span> <span># [red yellow green purple]</span>\n</code></pre></div><h2 id=\"迭代列表\" tabindex=\"-1\"> 迭代列表</h2>\n<p>要遍历一个列表中的元素，可以使用<a href=\"/book/commands/each.html\"><code>each</code></a>命令和 <a href=\"/zh-CN/book/types_of_data.html#%E5%9D%97\">Nu 代码块</a> 指定对每一个元素做什么操作。块参数（例如<code>{ |it| echo $it }</code>中的<code>|it|</code>）通常是当前的列表元素，但如果需要，通过 <code>--numbered</code>(<code>-n</code>) 标志可以将其改为包含<code>index</code>和<code>item</code>值的元素。比如：</p>\n<div><pre><code><span>let</span> names <span>=</span> <span>[</span>Mark Tami Amanda Jeremy<span>]</span>\n<span>$names</span> <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> $<span>\"Hello, (<span>$it</span>)!\"</span> <span>}</span>\n<span># Outputs \"Hello, Mark!\" and three more similar lines.</span>\n\n<span>$names</span> <span>|</span> each -n <span>{</span> <span>|</span>it<span>|</span> $<span>\"(<span>$it</span>.index + 1) - (<span>$it</span>.item)\"</span> <span>}</span>\n<span># Outputs \"1 - Mark\", \"2 - Tami\", etc.</span>\n</code></pre></div><p><a href=\"/book/commands/where.html\"><code>where</code></a>命令可以用来创建一个列表的子集，高效地根据一个条件过滤列表。</p>\n<p>下面的例子得到所有名称以 &quot;e&quot; 结尾的颜色：</p>\n<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>red orange yellow green blue purple<span>]</span>\n<span>echo</span> <span>$colors</span> <span>|</span> where <span>(</span><span>$it</span> <span>|</span> str ends-with <span>'e'</span><span>)</span>\n</code></pre></div><p>在这个例子中，我们只保留大于<code>7</code>的数字：</p>\n<div><pre><code><span># The block passed to where must evaluate to a boolean.</span>\n<span># This outputs the list [orange blue purple].</span>\n\n<span>let</span> scores <span>=</span> <span>[</span><span>7</span> <span>10</span> <span>8</span> <span>6</span> <span>7</span><span>]</span>\n<span>echo</span> <span>$scores</span> <span>|</span> where <span>$it</span> <span>></span> <span>7</span> <span># [10 8]</span>\n</code></pre></div><p><a href=\"/book/commands/reduce.html\"><code>reduce</code></a>命令从一个列表计算一个单一的值。\n它使用了一个代码块，该块有两个参数：当前元素（即 <code>it</code>）和一个累加器 (即 <code>acc</code>)。如果想要给累加器指定一个初始值，请使用 <code>--fold</code> (<code>-f</code>) 标志。\n若要改变<code>it</code>使其具有<code>index</code>和<code>item</code>两个值，请添加<code>--numbered</code>（<code>-n</code>）标志。\n例如：</p>\n<div><pre><code><span>let</span> scores <span>=</span> <span>[</span><span>3</span> <span>8</span> <span>4</span><span>]</span>\n<span>echo</span> <span>\"total =\"</span> <span>(</span><span>$scores</span> <span>|</span> reduce <span>{</span> <span>|</span>it, acc<span>|</span> <span>$acc</span> + <span>$it</span> <span>}</span><span>)</span> <span># 15</span>\n\n<span>echo</span> <span>\"total =\"</span> <span>(</span><span>$scores</span> <span>|</span> math <span>sum</span><span>)</span> <span># easier approach, same result</span>\n\n<span>echo</span> <span>\"product =\"</span> <span>(</span><span>$scores</span> <span>|</span> reduce --fold <span>1</span> <span>{</span> <span>|</span>it, acc<span>|</span> <span>$acc</span> * <span>$it</span> <span>}</span><span>)</span> <span># 96</span>\n\n<span>echo</span> <span>$scores</span> <span>|</span> reduce -n <span>{</span> <span>|</span>it, acc<span>|</span> <span>$acc</span> + <span>$it</span>.index * <span>$it</span>.item <span>}</span> <span># 3 + 1*8 + 2*4 = 19</span>\n</code></pre></div><h2 id=\"访问列表\" tabindex=\"-1\"> 访问列表</h2>\n<p>要访问一个给定索引的列表元素, 可以使用<code>$name.index</code>形式, 其中<code>$name</code>是持有列表的变量。</p>\n<p>例如，下面列表中的第二个元素可以用<code>$names.1</code>来访问：</p>\n<div><pre><code><span>let</span> names <span>=</span> <span>[</span>Mark Tami Amanda Jeremy<span>]</span>\n<span>$names</span>.1 <span># gives Tami</span>\n</code></pre></div><p>如果索引在某个变量<code>$index</code>中，我们可以使用<code>get</code>命令从列表中提取该元素：</p>\n<div><pre><code><span>let</span> names <span>=</span> <span>[</span>Mark Tami Amanda Jeremy<span>]</span>\n<span>let</span> index <span>=</span> <span>1</span>\n<span>$names</span> <span>|</span> get <span>$index</span> <span># gives Tami</span>\n</code></pre></div><p><a href=\"/book/commands/length.html\"><code>length</code></a>命令返回列表中的元素个数。例如，<code>[red green blue] | length</code>输出<code>3</code>。</p>\n<p><a href=\"/book/commands/empty.html\"><code>empty?</code></a> 命令确定一个字符串、列表或表格是否为空。它可以与列表一起使用，如下所示：</p>\n<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>red green blue<span>]</span>\n<span>$colors</span> <span>|</span> empty? <span># false</span>\n\n<span>let</span> colors <span>=</span> <span>[</span><span>]</span>\n<span>$colors</span> <span>|</span> empty? <span># true</span>\n</code></pre></div><p><code>in</code> 和 <code>not-in</code> 运算符用于测试一个值是否在一个列表中，例如：</p>\n<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>red green blue<span>]</span>\n<span>'blue'</span> <span>in</span> <span>$colors</span> <span># true</span>\n<span>'yellow'</span> <span>in</span> <span>$colors</span> <span># false</span>\n<span>'gold'</span> not-in <span>$colors</span> <span># true</span>\n</code></pre></div><p><a href=\"/book/commands/any.html\"><code>any?</code></a>命令用于确定一个列表中是否有任意一个元素匹配给定的条件，例如：</p>\n<div><pre><code><span># Do any color names end with \"e\"?</span>\n<span>echo</span> <span>$colors</span> <span>|</span> any? <span>(</span><span>$it</span> <span>|</span> str ends-with <span>\"e\"</span><span>)</span> <span># true</span>\n\n<span># Is the length of any color name less than 3?</span>\n<span>echo</span> <span>$colors</span> <span>|</span> any? <span>(</span><span>$it</span> <span>|</span> str length<span>)</span> <span>&lt;</span> <span>3</span> <span># false</span>\n\n<span># Are any scores greater than 7?</span>\n<span>echo</span> <span>$scores</span> <span>|</span> any? <span>$it</span> <span>></span> <span>7</span> <span># true</span>\n\n<span># Are any scores odd?</span>\n<span>echo</span> <span>$scores</span> <span>|</span> any? <span>$it</span> mod <span>2</span> <span>==</span> <span>1</span> <span># true</span>\n</code></pre></div><p><a href=\"/book/commands/all.html\"><code>all?</code></a>命令确定一个列表中是否所有元素都匹配给定的条件。例如：</p>\n<div><pre><code><span># Do all color names end with \"e\"?</span>\n<span>echo</span> <span>$colors</span> <span>|</span> all? <span>(</span><span>$it</span> <span>|</span> str ends-with <span>\"e\"</span><span>)</span> <span># false</span>\n\n<span># Is the length of all color names greater than or equal to 3?</span>\n<span>echo</span> <span>$colors</span> <span>|</span> all? <span>(</span><span>$it</span> <span>|</span> str length<span>)</span> <span>>=</span> <span>3</span> <span># true</span>\n\n<span># Are all scores greater than 7?</span>\n<span>echo</span> <span>$scores</span> <span>|</span> all? <span>$it</span> <span>></span> <span>7</span> <span># false</span>\n\n<span># Are all scores even?</span>\n<span>echo</span> <span>$scores</span> <span>|</span> all? <span>$it</span> mod <span>2</span> <span>==</span> <span>0</span> <span># false</span>\n</code></pre></div><h2 id=\"转换列表\" tabindex=\"-1\"> 转换列表</h2>\n<p><a href=\"/book/commands/flatten.html\"><code>flatten</code></a>命令通过将嵌套列表中的元素添加到顶层列表中来从现有的列表创建一个新列表。这条命令可以被多次调用，以使任意嵌套深度的列表变平。例如：</p>\n<div><pre><code><span>echo</span> <span>[</span><span>1</span> <span>[</span><span>2</span> <span>3</span><span>]</span> <span>4</span> <span>[</span><span>5</span> <span>6</span><span>]</span><span>]</span> <span>|</span> flatten <span># [1 2 3 4 5 6]</span>\n\n<span>echo</span> <span>[</span><span>[</span><span>1</span> <span>2</span><span>]</span> <span>[</span><span>3</span> <span>[</span><span>4</span> <span>5</span> <span>[</span><span>6</span> <span>7</span> <span>8</span><span>]</span><span>]</span><span>]</span><span>]</span> <span>|</span> flatten <span>|</span> flatten <span>|</span> flatten <span># [1 2 3 4 5 6 7 8]</span>\n</code></pre></div><p><a href=\"/book/commands/wrap.html\"><code>wrap</code></a>命令将一个列表转换为一个表格。每个列表的值将都会被转换为一个单独的行和列：</p>\n<div><pre><code><span>let</span> zones <span>=</span> <span>[</span>UTC CET Europe/Moscow Asia/Yekaterinburg<span>]</span>\n\n<span># Show world clock for selected time zones</span>\n<span>$zones</span> <span>|</span> wrap <span>'Zone'</span> <span>|</span> upsert Time <span>{</span><span>|</span>it<span>|</span>\n    <span>(</span>\n        <span>date</span> now\n            <span>|</span> <span>date</span> to-timezone <span>$it</span>.Zone\n            <span>|</span> <span>date</span> <span>format</span> <span>'%Y.%m.%d %H:%M'</span>\n    <span>)</span>\n<span>}</span>\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.491Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "处理字符串",
      "url": "www.nushell.sh/zh-CN/book/working_with_strings.html",
      "id": "www.nushell.sh/zh-CN/book/working_with_strings.html",
      "content_html": "<h1 id=\"处理字符串\" tabindex=\"-1\"> 处理字符串</h1>\n<p>Nushell 中的字符串用于保存文本数据以便后续使用，其中可以包括文件名、文件路径、列名以及更多。字符串是如此地普遍，以至于 Nushell 提供了几种处理它们的方法，你可以从中选择最合适的。</p>\n<h2 id=\"单引号字符串\" tabindex=\"-1\"> 单引号字符串</h2>\n<p>Nushell 中最简单的字符串是单引号字符串。这种字符串使用<code>'</code>字符来包裹文本。下面是作为单引号字符串的<code>hello world</code>示例：</p>\n<div><pre><code><span>></span> <span>'hello world'</span>\nhello world\n</code></pre></div><p>单引号字符串不会对它们所给予的文本做任何事情，这使得它们成为容纳广泛文本数据的理想选择。</p>\n<h2 id=\"双引号字符串\" tabindex=\"-1\"> 双引号字符串</h2>\n<p>对于更复杂的字符串，Nushell 也提供双引号字符串。这些字符串使用<code>&quot;</code>字符来包裹文本。它们还支持使用<code>\\</code>字符在文本中转义。</p>\n<p>例如，我们可以用转义字符和双引号字符串写出文字 hello，然后换行，再写上 world：</p>\n<div><pre><code><span>></span> <span>\"hello<span title=\"\\n\">\\n</span>world\"</span>\nhello\nworld\n</code></pre></div><p>转义字符让你快速添加一个非此难以输入的字符。</p>\n<p>Nushell 目前支持以下转义字符：</p>\n<ul>\n<li><code>\\&quot;</code> - 双引号</li>\n<li><code>\\'</code> - 单引号</li>\n<li><code>\\\\</code> - 反斜杠</li>\n<li><code>\\/</code> - 斜杠</li>\n<li><code>\\b</code> - 退格字符</li>\n<li><code>\\f</code> - 换页符</li>\n<li><code>\\r</code> - 回车符</li>\n<li><code>\\n</code> - 换行符 (line feed)</li>\n<li><code>\\t</code> - 制表符</li>\n<li><code>\\uXXXX</code> - Unicode 字符 (用 Unicode 字符的编号替换 XXXX)</li>\n</ul>\n<h2 id=\"字符串插值\" tabindex=\"-1\"> 字符串插值</h2>\n<p>更复杂的字符串用例还需要一种新的字符串形式：字符串插值。这是一种从原始文本和执行表达式的结果中构建文本的方法。字符串插值将这些结果结合在一起，返回一个新的字符串。</p>\n<p>字符串插值使用 <code>$&quot; &quot;</code> 和 <code>$' '</code> 作为包裹插值文本的方式。</p>\n<p>例如，假设我们有一个叫做<code>$name</code>的变量，我们想问候这个变量中所包含的人：</p>\n<div><pre><code><span>></span> <span>let</span> name <span>=</span> <span>\"Alice\"</span>\n<span>></span> $<span>\"greetings, (<span>$name</span>)\"</span>\ngreetings, Alice\n</code></pre></div><p>通过使用<code>()</code>包裹表达式，我们可以运行它们并使用结果来帮助生成字符串。</p>\n<p>字符串插值有单引号：<code>$' '</code> 和双引号：<code>$&quot; &quot;</code> 这两种形式，分别对应于单引号和双引号字符串 —— 单引号字符串插值不支持转义字符，而双引号字符串插值支持。</p>\n<p>从 0.61 版开始，字符串插值支持转义小括号，所以<code>(</code>和<code>)</code>字符可以在一个字符串中使用，而 Nushell 不会试图计算它们之间出现的内容：</p>\n<div><pre><code><span>></span> $<span>\"2 + 2 is (2 + 2) \\(you guessed it!)\"</span>\n<span>2</span> + <span>2</span> is <span>4</span> <span>(</span>you guessed it<span>!</span><span>)</span>\n</code></pre></div><h2 id=\"分割字符串\" tabindex=\"-1\"> 分割字符串</h2>\n<p><a href=\"/book/commands/split_row.html\"><code>split row</code></a>命令从一个基于分隔符的字符串创建一个列表。\n例如，<code>let colors = (&quot;red,green,blue&quot; | split row &quot;,&quot;)</code> 创建列表<code>[red green blue]</code>。</p>\n<p><a href=\"/book/commands/split_column.html\"><code>split column</code></a>命令将从一个基于分隔符的字符串中创建一个表。例如，<code>let colors = (&quot;red,green,blue&quot; | split column &quot;,&quot;)</code> 创建一个表格，并为每个元素添加一列。</p>\n<p>最后, <a href=\"/book/commands/split_chars.html\"><code>split chars</code></a>命令将一个字符串分割成一个字符列表。</p>\n<h2 id=\"str-命令\" tabindex=\"-1\"> <code>str</code> 命令</h2>\n<p>许多字符串函数是<code>str</code>命令的子命令，你可以使用<code>help str</code>来获得一个完整的 <code>str</code> 命令列表。</p>\n<p>例如, 你可以使用<code>str contains</code>来检查一个字符串是否包含某个特定的字符：</p>\n<div><pre><code><span>></span> <span>\"hello world\"</span> <span>|</span> str contains <span>\"w\"</span>\n<span>true</span>\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.492Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "处理表格",
      "url": "www.nushell.sh/zh-CN/book/working_with_tables.html",
      "id": "www.nushell.sh/zh-CN/book/working_with_tables.html",
      "content_html": "<h1 id=\"处理表格\" tabindex=\"-1\"> 处理表格</h1>\n<p>在 Nu 中查看数据的一种常见方式是通过表格。Nu 提供了许多处理表格的命令以方便找到你想要的内容以及将数据缩小到你需要的范围。</p>\n<p>首先，让我们获得一个可用的表：</p>\n<div><pre><code>> ls\n───┬───────────────┬──────┬─────────┬────────────\n # │ name          │ type │ size    │ modified\n───┼───────────────┼──────┼─────────┼────────────\n 0 │ files.rs      │ File │  4.6 KB │ 5 days ago\n 1 │ lib.rs        │ File │   330 B │ 5 days ago\n 2 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago\n 3 │ parse.rs      │ File │ 49.8 KB │ 1 day ago\n 4 │ path.rs       │ File │  2.1 KB │ 5 days ago\n 5 │ shapes.rs     │ File │  4.7 KB │ 5 days ago\n 6 │ signature.rs  │ File │  1.2 KB │ 5 days ago\n───┴───────────────┴──────┴─────────┴────────────\n</code></pre></div><h2 id=\"排序\" tabindex=\"-1\"> 排序</h2>\n<p>我们可以通过调用<a href=\"/book/commands/sort-by.html\"><code>sort-by</code></a>命令对一个表进行排序，并指定需要排序的列。比如，按照文件的大小对表格进行排序：</p>\n<div><pre><code>> ls | sort-by size\n───┬───────────────┬──────┬─────────┬────────────\n # │ name          │ type │ size    │ modified\n───┼───────────────┼──────┼─────────┼────────────\n 0 │ lib.rs        │ File │   330 B │ 5 days ago\n 1 │ signature.rs  │ File │  1.2 KB │ 5 days ago\n 2 │ path.rs       │ File │  2.1 KB │ 5 days ago\n 3 │ files.rs      │ File │  4.6 KB │ 5 days ago\n 4 │ shapes.rs     │ File │  4.7 KB │ 5 days ago\n 5 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago\n 6 │ parse.rs      │ File │ 49.8 KB │ 1 day ago\n───┴───────────────┴──────┴─────────┴────────────\n</code></pre></div><p>我们可以通过任何可以比较的列来对一个表进行排序。例如，我们也可以用 &quot;name&quot;, &quot;accessed&quot; 或者 &quot;modified&quot; 列对上述内容进行排序。</p>\n<h2 id=\"选取\" tabindex=\"-1\"> 选取</h2>\n<p>我们可以从表中通过选择特定的列或行来获得数据。让我们从表中选择（<a href=\"/book/commands/select.html\"><code>select</code></a>）几列吧：</p>\n<div><pre><code>> ls | select name size\n───┬───────────────┬─────────\n # │ name          │ size\n───┼───────────────┼─────────\n 0 │ files.rs      │  4.6 KB\n 1 │ lib.rs        │   330 B\n 2 │ lite_parse.rs │  6.3 KB\n 3 │ parse.rs      │ 49.8 KB\n 4 │ path.rs       │  2.1 KB\n 5 │ shapes.rs     │  4.7 KB\n 6 │ signature.rs  │  1.2 KB\n───┴───────────────┴─────────\n</code></pre></div><p>这有助于创建一个更专注于我们所需的表格。接下来，假设我们只想看这个目录中最小的 5 个文件：</p>\n<div><pre><code>> ls | sort-by size | first 5\n───┬──────────────┬──────┬────────┬────────────\n # │ name         │ type │ size   │ modified\n───┼──────────────┼──────┼────────┼────────────\n 0 │ lib.rs       │ File │  330 B │ 5 days ago\n 1 │ signature.rs │ File │ 1.2 KB │ 5 days ago\n 2 │ path.rs      │ File │ 2.1 KB │ 5 days ago\n 3 │ files.rs     │ File │ 4.6 KB │ 5 days ago\n 4 │ shapes.rs    │ File │ 4.7 KB │ 5 days ago\n───┴──────────────┴──────┴────────┴────────────\n</code></pre></div><p>你会注意到我们首先按大小对表进行排序以得到最小的文件，然后我们用<code>first 5</code>来返回表的前 5 行。</p>\n<p>你也可以跳过(<code>skip</code>)不需要的行，让我们跳过上面所得 5 行中的前两行：</p>\n<div><pre><code>> ls | sort-by size | first 5 | skip 2\n───┬───────────┬──────┬────────┬────────────\n # │ name      │ type │ size   │ modified\n───┼───────────┼──────┼────────┼────────────\n 0 │ path.rs   │ File │ 2.1 KB │ 5 days ago\n 1 │ files.rs  │ File │ 4.6 KB │ 5 days ago\n 2 │ shapes.rs │ File │ 4.7 KB │ 5 days ago\n───┴───────────┴──────┴────────┴────────────\n</code></pre></div><p>我们已将其缩小为我们关心的三行。</p>\n<p>让我们看看其他几个用于选择数据的命令。您可能想知道为什么选取表格的行是通过数字，这是选择单行数据的便捷方式。让我们按文件名对表进行排序，然后使用 <code>select</code> 命令通过行号来选择其中的一行：</p>\n<div><pre><code>> ls | sort-by name\n───┬───────────────┬──────┬─────────┬────────────\n # │ name          │ type │ size    │ modified\n───┼───────────────┼──────┼─────────┼────────────\n 0 │ files.rs      │ File │  4.6 KB │ 5 days ago\n 1 │ lib.rs        │ File │   330 B │ 5 days ago\n 2 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago\n 3 │ parse.rs      │ File │ 49.8 KB │ 1 day ago\n 4 │ path.rs       │ File │  2.1 KB │ 5 days ago\n 5 │ shapes.rs     │ File │  4.7 KB │ 5 days ago\n 6 │ signature.rs  │ File │  1.2 KB │ 5 days ago\n───┴───────────────┴──────┴─────────┴────────────\n\n> ls | sort-by name | select 5\n───┬───────────────┬──────┬─────────┬────────────\n # │ name          │ type │ size    │ modified\n───┼───────────────┼──────┼─────────┼────────────\n 0 │ shapes.rs     │ File │  4.7 KB │ 5 days ago\n───┴───────────────┴──────┴─────────┴────────────\n</code></pre></div><h2 id=\"从表格提取数据\" tabindex=\"-1\"> 从表格提取数据</h2>\n<p>到目前为止，我们在处理表格时都是将表格修剪成我们需要的样子。有时我们可能想更进一步，只看单元格本身的值，而不是取整列。比如，我们只想得到一个包含所有文件名的列表。在此，我们使用<a href=\"/book/commands/get.html\"><code>get</code></a> 命令：</p>\n<div><pre><code>> ls | get name\n───┬───────────────\n 0 │ files.rs\n 1 │ lib.rs\n 2 │ lite_parse.rs\n 3 │ parse.rs\n 4 │ path.rs\n 5 │ shapes.rs\n 6 │ signature.rs\n───┴───────────────\n</code></pre></div><p>现在我们获得了每一个文件的文件名。</p>\n<p>这可能看起来很像我们之前使用的<a href=\"/book/commands/select.html\"><code>select</code></a>命令，所以也把它放在这里以便于比较：</p>\n<div><pre><code>> ls | select name\n───┬───────────────\n # │ name\n───┼───────────────\n 0 │ files.rs\n 1 │ lib.rs\n 2 │ lite_parse.rs\n 3 │ parse.rs\n 4 │ path.rs\n 5 │ shapes.rs\n 6 │ signature.rs\n───┴───────────────\n</code></pre></div><p>这看起来非常相似！让我们看看能不能把这两个命令的区别说清楚：</p>\n<ul>\n<li><a href=\"/book/commands/select.html\"><code>select</code></a> - 创建一个只包括指定列的新表；</li>\n<li><a href=\"/book/commands/get.html\"><code>get</code></a> - 以列表形式返回指定列内的值；</li>\n</ul>\n<p>区分这些表格的方法是 —— 列名没有了，也让我们知道这是一个我们可以处理的值的列表。</p>\n<p><a href=\"/book/commands/get.html\"><code>get</code></a>命令可以更进一步，它可以接受表中更深的数据路径。这简化了对复杂数据的处理，比如那些你可能在.json 文件中发现的结构。</p>\n<h2 id=\"修改表格数据\" tabindex=\"-1\"> 修改表格数据</h2>\n<p>除了从表中选择数据外，还可以更新其中的数据。我们可能想合并表格，添加新的列，或编辑单元格的内容等。在 Nushell 中，本节中的每个命令都会在管道中返回一个新的表而非对原表进行编辑。</p>\n<h3 id=\"拼接表格\" tabindex=\"-1\"> 拼接表格</h3>\n<p>我们可以使用<a href=\"/book/commands/append.html\"><code>append</code></a>将列名相同的表拼接起来：</p>\n<div><pre><code>> let $first = [[a b]; [1 2]]\n> let $second = [[a b]; [3 4]]\n> $first | append $second\n───┬───┬───\n # │ a │ b\n───┼───┼───\n 0 │ 1 │ 2\n 1 │ 3 │ 4\n───┴───┴───\n</code></pre></div><h3 id=\"合并表格\" tabindex=\"-1\"> 合并表格</h3>\n<p>我们可以使用<a href=\"/book/commands/merge.html\"><code>merge</code></a>命令将两个（或多个）表格合并在一起：</p>\n<div><pre><code><span>></span> <span>let</span> <span>$first</span> <span>=</span> <span>[</span><span>[</span>a b<span>]</span><span>;</span> <span>[</span><span>1</span> <span>2</span><span>]</span><span>]</span>\n<span>></span> <span>let</span> <span>$second</span> <span>=</span> <span>[</span><span>[</span>c d<span>]</span><span>;</span> <span>[</span><span>3</span> <span>4</span><span>]</span><span>]</span>\n<span>></span> <span>$first</span> <span>|</span> merge <span>{</span> <span>$second</span> <span>}</span>\n───┬───┬───┬───┬───\n <span># │ a │ b │ c │ d</span>\n───┼───┼───┼───┼───\n <span>0</span> │ <span>1</span> │ <span>2</span> │ <span>3</span> │ <span>4</span>\n───┴───┴───┴───┴───\n</code></pre></div><p>让我们再加一个表格吧：</p>\n<div><pre><code><span>></span> <span>let</span> <span>$third</span> <span>=</span> <span>[</span><span>[</span>e f<span>]</span><span>;</span> <span>[</span><span>5</span> <span>6</span><span>]</span><span>]</span>\n</code></pre></div><p>我们可以将以上三个表格合并在一起，操作如下：</p>\n<div><pre><code><span>></span> <span>$first</span> <span>|</span> merge <span>{</span> <span>$second</span> <span>}</span> <span>|</span> merge <span>{</span> <span>$third</span> <span>}</span>\n───┬───┬───┬───┬───┬───┬───\n <span># │ a │ b │ c │ d │ e │ f</span>\n───┼───┼───┼───┼───┼───┼───\n <span>0</span> │ <span>1</span> │ <span>2</span> │ <span>3</span> │ <span>4</span> │ <span>5</span> │ <span>6</span>\n───┴───┴───┴───┴───┴───┴───\n</code></pre></div><p>或者我们可以使用<a href=\"/book/commands/reduce.html\"><code>reduce</code></a>命令来动态地合并所有的表格：</p>\n<div><pre><code><span>></span> <span>[</span><span>$first</span> <span>$second</span> <span>$third</span><span>]</span> <span>|</span> reduce <span>{</span><span>|</span>it, acc<span>|</span> <span>$acc</span> <span>|</span> merge <span>{</span> <span>$it</span> <span>}</span><span>}</span>\n───┬───┬───┬───┬───┬───┬───\n <span># │ a │ b │ c │ d │ e │ f</span>\n───┼───┼───┼───┼───┼───┼───\n <span>0</span> │ <span>1</span> │ <span>2</span> │ <span>3</span> │ <span>4</span> │ <span>5</span> │ <span>6</span>\n───┴───┴───┴───┴───┴───┴───\n</code></pre></div><h3 id=\"添加新列\" tabindex=\"-1\"> 添加新列</h3>\n<p>我们可以使用<a href=\"/book/commands/insert.html\"><code>insert</code></a>命令在表中增加新列，让我们看一个例子：</p>\n<div><pre><code>> open rustfmt.toml\n─────────┬──────\n edition │ 2018\n─────────┴──────\n</code></pre></div><p>让我们添加一个名为 &quot;next_edition&quot; 的列并将 2021 作为值：</p>\n<div><pre><code>> open rustfmt.toml | insert next_edition 2021\n──────────────┬──────\n edition      │ 2018\n next_edition │ 2021\n──────────────┴──────\n</code></pre></div><p>注意，我们如果打开原始文件，会发现内容没变：</p>\n<div><pre><code>> open rustfmt.toml\n─────────┬──────\n edition │ 2018\n─────────┴──────\n</code></pre></div><p>Nu 的更改是函数性更改，这意味着它们只在值上起作用，而不是试图引起永久性变更。这使我们可以在管道中进行许多不同类型的操作直到我们准备好将结果输出(如果我们选择这样做的话)。这里我们可以使用 <a href=\"/book/commands/save.html\"><code>save</code></a> 命令保存结果：</p>\n<div><pre><code>> open rustfmt.toml | insert next_edition 2021 | save rustfmt2.toml\n> open rustfmt2.toml\n──────────────┬──────\n edition      │ 2018\n next_edition │ 2021\n──────────────┴──────\n</code></pre></div><h3 id=\"更新一列\" tabindex=\"-1\"> 更新一列</h3>\n<p>与<a href=\"/book/commands/insert.html\"><code>insert</code></a>命令类似，我们也可以使用<a href=\"/book/commands/update.html\"><code>update</code></a>命令将某一列的内容修改为新值。为了看看效果，让我们打开同一个文件：</p>\n<div><pre><code>> open rustfmt.toml\n─────────┬──────\n edition │ 2018\n─────────┴──────\n</code></pre></div><p>现在，用我们希望支持的下一个版本更新 edition：</p>\n<div><pre><code>> open rustfmt.toml | update edition 2021\n─────────┬──────\n edition │ 2021\n─────────┴──────\n</code></pre></div><p>你也可以使用<a href=\"/book/commands/upsert.html\"><code>upsert</code></a>命令来插入或更新，这取决于该列是否已经存在。</p>\n<h3 id=\"移动列\" tabindex=\"-1\"> 移动列</h3>\n<p>你可以使用<code>move</code>来移动表中的列。例如，如果想把<code>ls</code>中的 &quot;name&quot; 列移到 &quot;size&quot; 列之后，我们可以这样做：</p>\n<div><pre><code>> ls | move name --after size\n╭────┬──────┬─────────┬───────────────────┬──────────────╮\n│ #  │ type │  size   │       name        │   modified   │\n├────┼──────┼─────────┼───────────────────┼──────────────┤\n│  0 │ dir  │   256 B │ Applications      │ 3 days ago   │\n│  1 │ dir  │   256 B │ Data              │ 2 weeks ago  │\n│  2 │ dir  │   448 B │ Desktop           │ 2 hours ago  │\n│  3 │ dir  │   192 B │ Disks             │ a week ago   │\n│  4 │ dir  │   416 B │ Documents         │ 4 days ago   │\n...\n</code></pre></div><h3 id=\"重命名列\" tabindex=\"-1\"> 重命名列</h3>\n<p>你也可以通过<code>rename</code>命令对表中的列进行<strong>重命名</strong>。我们可以使用这个例子来运行<code>ls</code>并重命名这些列：</p>\n<div><pre><code>> ls | rename filename filetype filesize date\n╭────┬───────────────────┬──────────┬──────────┬──────────────╮\n│ #  │     filename      │ filetype │ filesize │     date     │\n├────┼───────────────────┼──────────┼──────────┼──────────────┤\n│  0 │ Applications      │ dir      │    256 B │ 3 days ago   │\n│  1 │ Data              │ dir      │    256 B │ 2 weeks ago  │\n│  2 │ Desktop           │ dir      │    448 B │ 2 hours ago  │\n│  3 │ Disks             │ dir      │    192 B │ a week ago   │\n│  4 │ Documents         │ dir      │    416 B │ 4 days ago   │\n...\n</code></pre></div>",
      "date_modified": "2022-06-03T06:25:20.492Z",
      "authors": [],
      "tags": []
    }
  ]
}