<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="www.nushell.sh/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Nushell</title>
    <link>www.nushell.sh/</link>
    <description>A new type of shell.</description>
    <language>English</language>
    <pubDate>Sat, 04 Jun 2022 13:35:55 GMT</pubDate>
    <lastBuildDate>Sat, 04 Jun 2022 13:35:55 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>Contributing</title>
      <link>www.nushell.sh/CONTRIBUTING.html</link>
      <guid isPermaLink="false">www.nushell.sh/CONTRIBUTING.html</guid>
      <source url="www.nushell.sh/rss.xml">Contributing</source>
      <content:encoded><![CDATA[<h1 id="contributing" tabindex="-1"> Contributing</h1>
<p>If you want to contribute to nushell itself, see <a href="https://github.com/nushell/nushell/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">nushell/nushell/CONTRIBUTING.md</a> and the <a href="https://www.nushell.sh/contributor-book/" target="_blank" rel="noopener noreferrer">contributor-book</a>.</p>
<p>This website is based on Vuepress.</p>
<h2 id="running-vuepress-locally" tabindex="-1"> Running Vuepress locally</h2>
<ol>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener noreferrer">Install Node.js</a></li>
<li><a href="https://yarnpkg.com/getting-started/install" target="_blank" rel="noopener noreferrer">Install yarn</a></li>
<li>Run <code>yarn vuepress dev</code></li>
</ol>
<h2 id="translation-guide" tabindex="-1"> Translation Guide</h2>
<ol>
<li>First of all, make sure you have installed <code>node.js</code>, <code>yarn</code>, and then clone the doc repo locally:
<code>git clone git@github.com:nushell/nushell.github.io.git nu-docs</code>;</li>
<li>Run <code>yarn install</code> in <code>nu-docs</code> dir after your cloning;</li>
<li>Add a book dir(if not exists) for the specified locale in the docs' root folder, say <code>zh-CN</code>, and then create a <code>book</code> child folder for all your translated documents, and a README.md for the home page of your locale;</li>
<li>Modify the vuepress config file <code>nu-docs/.vuepress/config.js</code>, add <code>zh-CN</code> related configs, here is a <a href="https://github.com/nushell/nushell.github.io/commit/46d1672" target="_blank" rel="noopener noreferrer">commit</a> for reference;</li>
<li>Add README.md in the <code>book</code> dir, and that will be the default introduction page of Nushell. Note: Please <strong>DO NOT</strong> translate the file name of the docs.</li>
<li>Run <code>yarn vuepress dev</code>, then open <strong>http://localhost:8080/</strong> in your browser, switch to the language you are going to translate into, and you will see the introduction page you have just created. You can translate the docs and save them to get a preview in the browser;</li>
<li>Update the <code>nu-docs/i18n-meta.json</code> file, fill the locale value of the doc you have just finished. It's recommend to use <code>commit_id@author</code> or simply a <code>commit_id</code> to indicate your translation end to the specified commit;</li>
<li>Commit your changes, It's recommend to squash all your commit in one commit with a commit message like this: <code>Translate your_doc_file.md to zh-CN from commit: f3dc86d3d</code>;</li>
<li>Send a Pull Request;</li>
<li>Check outdated translations: You can use command like <code>nu ./i18n.nu outdated zh-CN</code> to check the outdated translations(documents have been changed after your last translation) for the specified locale.</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Introducing nushell</title>
      <link>www.nushell.sh/blog/2019-08-23-introducing-nushell.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-08-23-introducing-nushell.html</guid>
      <source url="www.nushell.sh/rss.xml">Introducing nushell</source>
      <content:encoded><![CDATA[<h1 id="introducing-nushell" tabindex="-1"> Introducing nushell</h1>
<p>Today, we're introducing a new shell, written in Rust. It draws inspiration from the classic Unix philosophy of pipelines, the structured data approach of PowerShell, functional programming, systems programming, and more.</p>
<p>It's called Nushell, or just Nu for short. We have a <a href="https://book.nushell.sh/en" target="_blank" rel="noopener noreferrer">book</a> (¡también se habla <a href="https://book.nushell.sh/es" target="_blank" rel="noopener noreferrer">Español</a>!). We have a <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">repo</a>.</p>
<p>This release was made by Jonathan Turner (me), Yehuda Katz, and Andrés Robalino, with contributions from Odin Dutton.</p>
<p><img src="@source/assets/images/nushell-autocomplete4.gif" alt="Nu in action"></p>
<h1 id="but-why" tabindex="-1"> But why?</h1>
<p>Many of us have gotten used to bash (or zsh/fish/etc), and don't understand why you would need another kind of shell. That was me, too, a few months ago before I started working on this. My friend Yehuda had discovered PowerShell and was going on and on about how amazing it was to do more with the shell, but until he actually gave me a demo, I didn't really believe him.</p>
<p>Then he talked me into joining him on an idea he had. What if we could take the ideas of a structured shell and make it more functional (as opposed to object-oriented)? What if, like PowerShell, it worked on Windows, Linux, and macOS? What if it had great error messages? I fell in love with the project ideas, made a few new friends, and many nights and weekends later I'd like to show you what we've made.</p>
<p>In this post, I'll talk about how a few simple ideas drive how Nu works, what Nu can do with them, and where we hope to go in the future.</p>
<h1 id="simple-ideas" tabindex="-1"> Simple ideas</h1>
<p>To Nu, everything is data. When you type <code>ls</code>, you're given a table of information about the directory you're listing:</p>
<p><img src="@source/assets/images/nu_ls.png" alt="ls command"></p>
<p>Rather than having to remember different flags to <code>ls</code>, we can just work with the data it gives back. We can find the files greater than a certain size:</p>
<p><img src="@source/assets/images/nu_ls_filter.png" alt="ls with filtering"></p>
<p>Or we could choose to sort it by a column, or only show directories, or more. That by itself is fun but perhaps not compelling enough.</p>
<p><img src="@source/assets/images/nu_ps_filter.png" alt="ps with filtering"></p>
<p>Where this simple concept - that everything in Nu is data - starts to shine when we try other commands and realize that we're using the same commands to filter, to sort, etc. Rather than having the need to remember all the parameters to all the commands, we can just use the same verbs to act over our data, regardless of where the data came from. Nu pushes this idea even further.</p>
<p><img src="@source/assets/images/open_cargo.png" alt="opening toml file"></p>
<p>Nu also understands structured text files like JSON, TOML, YAML, and more. Opening these files gives us the same tables we saw with <code>ls</code> and <code>ps</code>. Again, this lets us use the same commands to filter our data, explore it, and use it.</p>
<h1 id="working-with-the-outside-world" tabindex="-1"> Working with the outside world</h1>
<p>The above approach could be fun, but if we're not careful, it could become a walled garden. What happens outside of the commands Nu comes with?</p>
<p>First, let's take a look at working with a file that Nu doesn't understand.</p>
<div><pre><code>> open people.psv
Octavia | Butler | Writer
Bob | Ross | Painter
Antonio | Vivaldi | Composer
</code></pre></div><p>To work with this in Nu, we need to do two steps: figure out where the rows are, and then figure out what the columns are. The rows are pretty easy, we just have one record per row:</p>
<div><pre><code>> open people.psv | lines
---+------------------------------
 # | value
---+------------------------------
 0 | Octavia | Butler | Writer
 1 | Bob | Ross | Painter
 2 | Antonio | Vivaldi | Composer
---+------------------------------
</code></pre></div><p>Next, we can create our columns by splitting each row at the pipe (<code>|</code>) symbol:</p>
<div><pre><code>> open people.psv | lines | split-column "|"
---+----------+-----------+-----------
 # | Column1  | Column2   | Column3
---+----------+-----------+-----------
 0 | Octavia  |  Butler   |  Writer
 1 | Bob      |  Ross     |  Painter
 2 | Antonio  |  Vivaldi  |  Composer
---+----------+-----------+-----------
</code></pre></div><p>That's already good enough that we can work with the data. We can go a step further and name the columns if we want:</p>
<div><pre><code>> open people.psv | lines | split-column " | " firstname lastname job
---+-----------+----------+----------
 # | firstname | lastname | job
---+-----------+----------+----------
 0 | Octavia   | Butler   | Writer
 1 | Bob       | Ross     | Painter
 2 | Antonio   | Vivaldi  | Composer
---+-----------+----------+----------
</code></pre></div><p>But what about working with commands outside of Nu? Let's first call the native version of <code>ls</code> instead of the Nu version:</p>
<div><pre><code>> ^ls
assets	     Cargo.lock  docs	images	 Makefile.toml	README.md     rustfmt2.toml  src     tests
Cargo2.toml  Cargo.toml  extra	LICENSE  open		readonly.txt  rustfmt.toml   target
</code></pre></div><p>We'll use the same commands we used on data to bring it into Nu:</p>
<div><pre><code>^ls | split-row " " file
----+---------------
 #  | value
----+---------------
 0  | assets
 1  | Cargo2.toml
 2  | Cargo.lock
 3  | Cargo.toml
 4  | docs
 5  | extra
 6  | images
 7  | LICENSE
 8  | Makefile.toml
 9  | open
 10 | README.md
 11 | readonly.txt
 12 | rustfmt2.toml
 13 | rustfmt.toml
 14 | src
 15 | target
 16 | tests
----+---------------
</code></pre></div><p>Or maybe we want to work with the native <code>ls -la</code>:</p>
<div><pre><code>^ls -la | lines | split-column " "
----+------------+---------+----------+----------+---------+---------+---------+---------+---------------
 #  | Column1    | Column2 | Column3  | Column4  | Column5 | Column6 | Column7 | Column8 | Column9
----+------------+---------+----------+----------+---------+---------+---------+---------+---------------
 0  | total      | 296     |          |          |         |         |         |         |
 1  | drwxr-xr-x | 13      | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | .
 2  | drwxr-xr-x | 21      | jonathan | jonathan | 4096    | Aug     | 22      | 17:00   | ..
 3  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Aug     | 3       | 05:39   | assets
 4  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Aug     | 21      | 19:29   | .azure
 5  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Jun     | 23      | 05:09   | .cargo
 6  | -rw-r--r-- | 1       | jonathan | jonathan | 2963    | Aug     | 22      | 20:17   | Cargo2.toml
 7  | -rw-r--r-- | 1       | jonathan | jonathan | 201255  | Aug     | 24      | 03:24   | Cargo.lock
 8  | -rw-r--r-- | 1       | jonathan | jonathan | 3127    | Aug     | 24      | 03:24   | Cargo.toml
 9  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Jun     | 17      | 15:32   | docs
 10 | -rw-r--r-- | 1       | jonathan | jonathan | 148     | Jun     | 17      | 15:32   | .editorconfig
 11 | drwxr-xr-x | 4       | jonathan | jonathan | 4096    | Aug     | 22      | 19:29   | extra
 12 | drwxr-xr-x | 8       | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | .git
 13 | -rw-r--r-- | 1       | jonathan | jonathan | 58      | Aug     | 10      | 11:08   | .gitignore
 14 | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | images
 15 | -rw-r--r-- | 1       | jonathan | jonathan | 1085    | Jun     | 17      | 15:32   | LICENSE
 16 | -rw-r--r-- | 1       | jonathan | jonathan | 614     | Jun     | 17      | 15:32   | Makefile.toml
 17 | -rw-r--r-- | 1       | jonathan | jonathan | 0       | Aug     | 23      | 04:58   | open
 18 | -rw-r--r-- | 1       | jonathan | jonathan | 11375   | Aug     | 24      | 03:24   | README.md
 19 | -r--r--r-- | 1       | jonathan | jonathan | 0       | Jul     | 4       | 03:51   | readonly.txt
 20 | -rw-r--r-- | 1       | jonathan | jonathan | 37      | Aug     | 23      | 04:54   | rustfmt2.toml
 21 | -rw-r--r-- | 1       | jonathan | jonathan | 16      | Aug     | 1       | 19:45   | rustfmt.toml
 22 | drwxr-xr-x | 10      | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | src
 23 | drwxr-xr-x | 4       | jonathan | jonathan | 4096    | Aug     | 22      | 19:22   | target
 24 | drwxr-xr-x | 4       | jonathan | jonathan | 4096    | Aug     | 22      | 04:15   | tests
 25 | drwxrwxr-x | 2       | jonathan | jonathan | 4096    | Jul     | 19      | 15:18   | .vscode
----+------------+---------+----------+----------+---------+---------+---------+---------+---------------
</code></pre></div><p>After a bit of experimenting, we might come up with a command like this:</p>
<div><pre><code>> ^ls -la | lines | skip 1 | split-column " " perms files group user size month day time name
----+------------+-------+----------+----------+--------+-------+-----+-------+---------------
 #  | perms      | files | group    | user     | size   | month | day | time  | name
----+------------+-------+----------+----------+--------+-------+-----+-------+---------------
 0  | drwxr-xr-x | 13    | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | .
 1  | drwxr-xr-x | 21    | jonathan | jonathan | 4096   | Aug   | 22  | 17:00 | ..
 2  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Aug   | 3   | 05:39 | assets
 3  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Aug   | 21  | 19:29 | .azure
 4  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Jun   | 23  | 05:09 | .cargo
 5  | -rw-r--r-- | 1     | jonathan | jonathan | 2963   | Aug   | 22  | 20:17 | Cargo2.toml
 6  | -rw-r--r-- | 1     | jonathan | jonathan | 201255 | Aug   | 24  | 03:24 | Cargo.lock
 7  | -rw-r--r-- | 1     | jonathan | jonathan | 3127   | Aug   | 24  | 03:24 | Cargo.toml
 8  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Jun   | 17  | 15:32 | docs
 9  | -rw-r--r-- | 1     | jonathan | jonathan | 148    | Jun   | 17  | 15:32 | .editorconfig
 10 | drwxr-xr-x | 4     | jonathan | jonathan | 4096   | Aug   | 22  | 19:29 | extra
 11 | drwxr-xr-x | 8     | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | .git
 12 | -rw-r--r-- | 1     | jonathan | jonathan | 58     | Aug   | 10  | 11:08 | .gitignore
 13 | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | images
 14 | -rw-r--r-- | 1     | jonathan | jonathan | 1085   | Jun   | 17  | 15:32 | LICENSE
 15 | -rw-r--r-- | 1     | jonathan | jonathan | 614    | Jun   | 17  | 15:32 | Makefile.toml
 16 | -rw-r--r-- | 1     | jonathan | jonathan | 0      | Aug   | 23  | 04:58 | open
 17 | -rw-r--r-- | 1     | jonathan | jonathan | 11375  | Aug   | 24  | 03:24 | README.md
 18 | -r--r--r-- | 1     | jonathan | jonathan | 0      | Jul   | 4   | 03:51 | readonly.txt
 19 | -rw-r--r-- | 1     | jonathan | jonathan | 37     | Aug   | 23  | 04:54 | rustfmt2.toml
 20 | -rw-r--r-- | 1     | jonathan | jonathan | 16     | Aug   | 1   | 19:45 | rustfmt.toml
 21 | drwxr-xr-x | 10    | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | src
 22 | drwxr-xr-x | 4     | jonathan | jonathan | 4096   | Aug   | 22  | 19:22 | target
 23 | drwxr-xr-x | 4     | jonathan | jonathan | 4096   | Aug   | 22  | 04:15 | tests
 24 | drwxrwxr-x | 2     | jonathan | jonathan | 4096   | Jul   | 19  | 15:18 | .vscode
----+------------+-------+----------+----------+--------+-------+-----+-------+---------------
</code></pre></div><p>Because Nu let's you manipulate your data until it's how you want it, there's a feeling of playing with your data. You get used to using the verbs, and then you can use them on anything. When you're ready, you can write it back to disk.</p>
<p>Oh, before I forget - I wanted to quickly show how to get data from Nu back out into the outside world. Here's an example of calling <code>echo</code> on each filename in a directory:</p>
<div><pre><code>> ls | get name | echo $it
</code></pre></div><p>You can see that we can mix-and-match commands that are inside of Nu with those that are outside, and data will still flow between them as expected. But Nu is more than just a pipeline.</p>
<h1 id="more-than-a-pipeline" tabindex="-1"> More than a pipeline</h1>
<p>As we built Nu, we realized we could experiment with other parts of how a shell works. The first of these experiments lead us to an observation: if everything is data in Nu, we should be able to view this data.</p>
<p><img src="@source/assets/images/view_source.png" alt="viewing source file"></p>
<p>We've seen the tables. Nu also supports opening and looking at text and binary data. If we open a source file, we can scroll around in a syntax-highlighted file. If we open an xml, we can look at its data. We can even open a binary file and look at what's inside (hint: there's even a fun easter egg if you open certain kinds binary files, especially if you've installed Nu with the optional <code>rawkey</code> feature).</p>
<p>Being able to view data is helpful, and this kind of polish extends to other aspects, like error messages:</p>
<p><img src="@source/assets/images/nu_error2.png" alt="simple error"></p>
<p>Nu takes heavy inspiration from the <a href="https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html" target="_blank" rel="noopener noreferrer">error messages in Rust</a>. As much as possible, draw your eyes to the problem.</p>
<p>Combined with the pipeline, some pretty interesting errors are possible:</p>
<p><img src="@source/assets/images/nu_error_metadata.png" alt="error with metadata"></p>
<p>You might wonder how does that even work. Nu has a metadata system (still early!) that you can read about in the <a href="https://book.nushell.sh/en/metadata" target="_blank" rel="noopener noreferrer">Metadata chapter</a> of the <a href="https://book.nushell.sh" target="_blank" rel="noopener noreferrer">Nu book</a>. Let's just take a quick peek at it:</p>
<div><pre><code>> open Cargo.toml
------------+--------------+------------------+----------+----------
 bin        | dependencies | dev-dependencies | lib      | package
------------+--------------+------------------+----------+----------
 [11 items] | [object]     | [object]         | [object] | [object]
------------+--------------+------------------+----------+----------
> open Cargo.toml | tags
----------+------------------------------------------
 span     | origin
----------+------------------------------------------
 [object] | /home/jonathan/Source/nushell/Cargo.toml
----------+------------------------------------------
</code></pre></div><p>Data that flows through the pipeline gets a set of additional metadata tagged to it. We can use this later to figure out how to display the contents, show a better error message, and more.</p>
<h1 id="shells-plural" tabindex="-1"> Shells, plural</h1>
<p>Let's say you're in a directory, but you'd really like to flip back and forth between it and one or two others. You could open up multiple tabs, multiple terminals, if you're on a Unix system you could use &quot;screen&quot;, and probably even more than that. What if the shells were just built in?</p>
<p>In Nu, we can <code>enter</code> a directory, which adds it to a ring of shells we can bounce between:</p>
<div><pre><code>> enter ../rhai/
/home/jonathan/Source/rhai(master)> shells
---+---+------------+-------------------------------
 # |   | name       | path
---+---+------------+-------------------------------
 0 |   | filesystem | /home/jonathan/Source/nushell
 1 | X | filesystem | /home/jonathan/Source/rhai
---+---+------------+-------------------------------
</code></pre></div><p>Using <code>n</code> and <code>p</code> we can jump back and forth between the shells. <code>exit</code> gets us out of a shell.</p>
<p>You might noticed that <code>name</code> column in the <code>shells</code> table. Why's that there? Oh no... oh yes.</p>
<div><pre><code>> enter Cargo.toml
/> shells
---+---+--------------------------------------------+-------------------------------
 # |   | name                                       | path
---+---+--------------------------------------------+-------------------------------
 0 |   | filesystem                                 | /home/jonathan/Source/nushell
 1 |   | filesystem                                 | /home/jonathan/Source/rhai
 2 | X | {/home/jonathan/Source/nushell/Cargo.toml} | /
---+---+--------------------------------------------+-------------------------------
</code></pre></div><p>That's right, we're in the file. Can we <code>cd</code>? Oh yes, we can:</p>
<div><pre><code>/> ls
------------+--------------+------------------+----------+----------
 bin        | dependencies | dev-dependencies | lib      | package
------------+--------------+------------------+----------+----------
 [11 items] | [object]     | [object]         | [object] | [object]
------------+--------------+------------------+----------+----------
/> cd bin
/bin> ls
----+----------------------+---------------------------
 #  | name                 | path
----+----------------------+---------------------------
 0  | nu_plugin_inc        | src/plugins/inc.rs
 1  | nu_plugin_sum        | src/plugins/sum.rs
 2  | nu_plugin_add        | src/plugins/add.rs
 3  | nu_plugin_edit       | src/plugins/edit.rs
 4  | nu_plugin_str        | src/plugins/str.rs
 5  | nu_plugin_skip       | src/plugins/skip.rs
 6  | nu_plugin_sys        | src/plugins/sys.rs
 7  | nu_plugin_tree       | src/plugins/tree.rs
 8  | nu_plugin_binaryview | src/plugins/binaryview.rs
 9  | nu_plugin_textview   | src/plugins/textview.rs
 10 | nu                   | src/main.rs
----+----------------------+---------------------------
</code></pre></div><h1 id="plugins" tabindex="-1"> Plugins</h1>
<p>Nu can't come with everything you might want to do with it, so we're releasing Nu with the ability to extend it with plugins. There's more information in the <a href="https://book.nushell.sh/en/plugins" target="_blank" rel="noopener noreferrer">plugins chapters</a>. Nu will look for these plugins in your path, and load them up on startup.</p>
<h1 id="all-because-of-rust" tabindex="-1"> All because of Rust</h1>
<p>Nu would not have been possible without Rust. Internally, it uses async/await, async streams, and liberal use of &quot;serde&quot; to manage serializing and deserializing into the common data format and to communicate with plugins.</p>
<p>We also heavily leveraged <a href="https://crates.io" target="_blank" rel="noopener noreferrer">crates.io</a>. The ability to load numerous file formats, display messages, draw tables, and more all came from the hundreds (thousands?) of generous developers who wrote the crates we use in Nu. A <strong>huge</strong> thank you to everyone who contributed to Nu without ever knowing it.</p>
<h1 id="what-s-next" tabindex="-1"> What's next?</h1>
<p>Nu is just getting started. In this release, we have a foundation to build on. Next, we'll work towards stability, the abilty to use Nu as your main shell, the ability to write functions and scripts in Nu, and much more.</p>
<p>If you want to give it a spin, the <a href="https://book.nushell.sh/en/installation" target="_blank" rel="noopener noreferrer">installation instructions</a> will help you get started. If you want to chat come by our <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.3.0</title>
      <link>www.nushell.sh/blog/2019-09-24-nushell_0_3_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-09-24-nushell_0_3_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.3.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-3-0" tabindex="-1"> Nushell 0.3.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce that today we're releasing Nushell 0.3.0. Nu has seen numerous bugfixes, performance improvements, and features added since its initial public release (which was only a few weeks ago!)</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.3.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.3.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo +nightly install nu</code> (or if you want all the features <code>cargo +nightly install nu --all-features</code>).</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="new-table-design-porges-jonathandturner" tabindex="-1"> New table design (Porges, jonathandturner)</h2>
<p><img src="@source/assets/images/utf8_table.png" alt="Table with utf8 box drawing"></p>
<p>One of the most striking differences is that Nu now uses UTF-8 box drawing to draw its tables.</p>
<p><img src="@source/assets/images/utf8_light_table.png" alt="Table with utf8 box drawing in light mode"></p>
<p>The table is also configurable. If you feel like the table is a bit too heavy, you can also configure it to work in light mode using this command:</p>
<div><pre><code>> config --set [table_mode light]
</code></pre></div><h2 id="new-file-formats-pmeredit-est31-andrasio-jonathandturner" tabindex="-1"> New file formats (pmeredit, est31, andrasio, jonathandturner)</h2>
<p>Nu now natively supports new file formats, including: bson, tsv, sqlite, and url-encoded strings.</p>
<h2 id="new-commands-incrop-ramonsnir-ijt-jonathandturner-andrasio-jonnywalker81-chhetripradeep-pka" tabindex="-1"> New commands (incrop, ramonsnir, ijt, jonathandturner, andrasio, JonnyWalker81, chhetripradeep, pka)</h2>
<p>Since the 0.2.0 release, Nu has gained a set of additional commands, including:</p>
<ul>
<li><code>help</code> - built-in help system</li>
<li><code>reverse</code> - reverse a table</li>
<li><code>last</code> - like the <code>first</code> command, but working from the bottom of the table, return n rows</li>
<li><code>embed</code> - create a new table using the current table as a start</li>
<li><code>fetch</code> - get the contents of a URL (this originally lived in <code>open</code>)</li>
<li><code>post</code> - post to a URL and get the results</li>
<li><code>pwd</code> - print the working directory</li>
<li><code>env</code> - give access to a number of important paths and environment settings</li>
<li><code>pivot</code> - pivot a table so that rows become columns and vice-versa</li>
<li><code>echo</code> - a built-in echo command</li>
</ul>
<h2 id="error-improvements-jonathandturner" tabindex="-1"> Error improvements (jonathandturner)</h2>
<p><img src="@source/assets/images/did_you_mean.png" alt="Improve error messages"></p>
<p>We've made steady progress on improving error messages. Recently, we added &quot;did you mean?&quot; errors to help when you mistype the name of columns. Nu 0.3.0 also has gone through a few passes to generally polish the errors to include more information when an error occurs.</p>
<h2 id="shell-features-pka-wycats-twe4ked-andrasio-iamcodemaker" tabindex="-1"> Shell features (pka, wycats, twe4ked, andrasio, iamcodemaker)</h2>
<p>Nu now supports <code>~</code> to refer to your home directory as part of a path. You can also use <code>cd -</code> to return to a previous directory you were working in.</p>
<p>The shell itself also got a few updates. You can now enable 'vi' mode, if you'd prefer vi-like bindings (by running <code>config --set [edit_mode vi]</code>). On non-Windows platforms, you can also use Ctrl-R to enable Sublime-style history searching (we're hoping to enable Windows support for this soon).</p>
<h2 id="plugin-improvements-jonathandturner-andrasio" tabindex="-1"> Plugin improvements (jonathandturner, andrasio)</h2>
<p>Plugins have continued to mature, and it's now possible to use plugins to extend Nu with support for new file formats.</p>
<p>We've also added documentation on how to <a href="https://github.com/nushell/contributor-book/blob/master/en/plugins.md" target="_blank" rel="noopener noreferrer">write Nu plugins in both Rust and Python</a>, with info on Ruby coming soon.</p>
<h2 id="docker-support-vsoch-drsensor" tabindex="-1"> Docker support (vsoch, DrSensor)</h2>
<p>If you're interested in using Nu and Docker together, be sure to check out the <a href="https://github.com/nushell/nushell/blob/master/docs/docker.md" target="_blank" rel="noopener noreferrer">new Docker support</a>.</p>
<h2 id="book-progress" tabindex="-1"> Book progress</h2>
<p>The <a href="http://book.nushell.sh" target="_blank" rel="noopener noreferrer">Nu book</a> is now available in <em>three</em> languages: English, Spanish, and Japanese.</p>
<p>We've also created a <a href="https://github.com/nushell/contributor-book/blob/master/en/README.md" target="_blank" rel="noopener noreferrer">Nu contributor book</a>, which will help developers who want to contribute to Nu learn about its philosophy, design, and how to create plugins.</p>
<h2 id="acknowledgements" tabindex="-1"> Acknowledgements</h2>
<p>est31, pmeredit, twe4ked, DrSensor, vsoch, pka, jankoprowski, Porges, max-sixty, ijt, djc, vthriller, taiki-e, oskarskog, iamcodemaker, JonnyWalker81, yaahc, tim77, svartalf, ramonsnir, orf, lesichkovm, ineol, incrop, eoinkelly, devnought, chhetripradeep, aidanharris, GuillaumeGomez, and BatmanAod for contributing to the Nu codebase. Also a <em>big</em> thanks to our issue reporters!</p>
<p>ymgyt - for the Japanese version of the Nu book!</p>
<p>mistydemeo, romanlevin, ralvessa, pka, lord, kkalyan, jankprowski, and boisgera for helping with the book.</p>
<h2 id="looking-ahead" tabindex="-1"> Looking ahead</h2>
<p>We're hard at work on the <a href="https://github.com/nushell/nushell/issues/261" target="_blank" rel="noopener noreferrer">upcoming milestone release</a>. If you'd like to help, feel free to jump in! We have an active <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> you can join for both users and contributors.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.4.0</title>
      <link>www.nushell.sh/blog/2019-10-15-nushell-0_4_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-10-15-nushell-0_4_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.4.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-4-0" tabindex="-1"> Nushell 0.4.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today we're happy to announce the 0.4.0 release of Nushell. The <a href="https://github.com/nushell/nushell/releases/tag/0.4.0" target="_blank" rel="noopener noreferrer">0.4.0 release</a> marks a continually maturing shell that is now starting to show signs of stability. And, of course, a few fun features along the way.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.4.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.4.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo +beta install nu</code> (or if you want all the features <code>cargo +beta install nu --all-features</code>).</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="new-colors-wycats" tabindex="-1"> New Colors (wycats)</h2>
<p><img src="@source/assets/images/0_4_0_new_colors.png" alt="Example of nushell">
New colors!</p>
<p>With 0.4.0, we're adding some new colors to show off different types of the command, where errors might be happening, and if the command is internal or external. The coloring is just the tip of the iceberg, as it were, and builds from a reworking of the parser to make it more accurate, more stable, and more feature-complete.</p>
<h2 id="streaming-table-jonathandturner" tabindex="-1"> Streaming table (jonathandturner)</h2>
<p><img src="@source/assets/images/0_4_0_streaming_table.gif" alt="Animation of a long table streaming out">
Streaming tables</p>
<p>Up to this point, we've taken a few shortcuts with how streams worked in Nushell. We knew that a table, in theory, was a stream of rows. In practice, though, this wasn't the case as the code has lots of assumptions about how tables worked.</p>
<p>With the 0.4.0, we're taking a big step in the direction of full support for streams. You'll see that now data will start being printed as it becomes available, with tables printing pages of 50 rows at a time (by default). This allows you to get deep listings of files (eg using <code>ls **</code>), work with streams from external sources, and more.</p>
<h2 id="better-ctrl-c-support-jonathandturner-landaire" tabindex="-1"> Better ctrl-c support (jonathandturner, landaire)</h2>
<p>As part of having streams of tables, it's always helpful to be able to say &quot;stop!&quot; when you need to. With 0.4.0, using ctrl-c to stop the output should be a lot more responsive and will take you back to the prompt.</p>
<h2 id="textview-gets-vi-keys-jonnywalker81" tabindex="-1"> Textview gets VI keys (JonnyWalker81)</h2>
<p>The built-in text viewer now lets you use vi keys for navigation thanks to JonnyWalker81's work.</p>
<h2 id="onto-the-beta-compiler-est31" tabindex="-1"> Onto the Beta compiler (est31)</h2>
<p>For those of you wondering if and when Nu was going to be usable on stable Rust, you need but wait just a little longer. Contributer est31 has been hard at work at moving Nu onto stable Rust and has now successfully moved Nu off of nightly and onto beta. As beta matures and becomes the next release of Rust, we'll be able to move Nu onto stable. This should help people who are working to distribute Nu on various distributions.</p>
<h2 id="brazilian-portuguese-book-marcelocg" tabindex="-1"> Brazilian Portuguese book (marcelocg)</h2>
<p>Contributor marcelocg surprised us with a translation of the Nu book into Brazillian Portuguese. Obrigado, Marcelo!</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="from-ssv-t-hart" tabindex="-1"> from-ssv (t-hart)</h3>
<p>To follow along with our <code>from-csv</code> (comma-separated-values) and <code>from-tsv</code> (tab-separated-values), we now have a new way of handle importing content from commands that output their own tables: <code>from-ssv</code>. Like its siblings, it looks for values separated by a separator, using the spaces to show where the breaks between cells should be.</p>
<h3 id="match-rnxpyke" tabindex="-1"> match (rnxpyke)</h3>
<p>We're continuing to evolve our support for matching string data. Recently, we began experimenting with a <code>match</code> command that can find matches in strings for you. We plan to continue experimenting and exploring what's possible in this space in the future.</p>
<h2 id="lots-of-new-documentation-sdfnz-twe4ked-chhetripradeep-mfarberbrodsky-cristicismas-charles-schleich-coolshaurya-notryanb-pema99-gilesv-yahsinhuangtw-jesterornot-nalshihabi-marcelocg-sorrell-pizzafox-iggy14750-drsensor-mlbright-bradybromley-andrasio-piotrek-szczygiel" tabindex="-1"> Lots of new documentation (sdfnz, twe4ked, chhetripradeep, mfarberbrodsky, cristicismas, Charles-Schleich, coolshaurya, notryanb, pema99, gilesv, yahsinhuangtw, JesterOrNot, nalshihabi, marcelocg, sorrell, pizzafox, iggy14750, DrSensor, mlbright, BradyBromley, andrasio, piotrek-szczygiel)</h2>
<p>Happy hacktoberfest! Lots of people wanted to jump in and help document all of our commands, help fix docs that are already there, and generally give things a bit of polish. Much appreciated everyone who came by and contributed.</p>
<h2 id="tons-of-stability-fixes-thegedge-jonathandturner-wycats-jonnywalker81-vsoch-pka" tabindex="-1"> Tons of stability fixes (thegedge, jonathandturner, wycats, JonnyWalker81, vsoch, pka)</h2>
<p>As always, there were a bunch of stability and correctness both in Nu and in the CI that support Nu's development</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We'll continuing filling out the features that will let folks use Nu as their everyday shell. Coming up are better support for the environment, path, and for command aliases.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.5.0</title>
      <link>www.nushell.sh/blog/2019-11-05-nushell-0_5_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-11-05-nushell-0_5_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.5.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-5-0" tabindex="-1"> Nushell 0.5.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're happy to announce the 0.5.0 release for Nu. We've got lots of new features, including some long-requested ones, in this release.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.5.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0_5_0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo +beta install nu</code> (or if you want all the features <code>cargo +beta install nu --all-features</code>).</p>
<h1 id="nu-as-a-login-shell-jonathandturner" tabindex="-1"> Nu as a login shell (jonathandturner)</h1>
<p>One of the key features that landed in 0.5.0 is set of new capabilities that work together to allow you to use Nu as a login shell, completely independent of bash or other hosting shells. For this, we've built in support for querying and updating the environment variables and the path.</p>
<p>To get started, you'll need to first copy the environment you're using into the config. Luckily, we've also made some improvements there:</p>
<div><pre><code><span>></span> config --set <span>[</span>path <span>$nu</span>:path<span>]</span>
<span>></span> config --set <span>[</span>env <span>$nu</span>:env<span>]</span>
</code></pre></div><p>Version 0.7.2 and later (added: Dec 24, 2019) :</p>
<div><pre><code><span>></span> config <span>set</span> <span>[</span>path <span>$nu</span>.path<span>]</span>
<span>></span> config <span>set</span> <span>[</span>env <span>$nu</span>.env<span>]</span>
</code></pre></div><p>Once these values are set, you'll be able to use Nu as your login shell.</p>
<h2 id="new-variables" tabindex="-1"> New variables</h2>
<p>As you saw above, we've added a few new built-in variables. These will let you know what the current values that Nu can see are for your environment, path, and the config itself.</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:env
<span>></span> <span>echo</span> <span>$nu</span>:path
<span>></span> <span>echo</span> <span>$nu</span>:config
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.env
<span>></span> <span>echo</span> <span>$nu</span>.path
<span>></span> <span>echo</span> <span>$nu</span>.config
</code></pre></div><h2 id="adding-paths-to-your-path" tabindex="-1"> Adding paths to your PATH</h2>
<p>One of the first things you'll notice is that the new $nu:path is structured. If you run the echo above, you might see something like this:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:path
━━━┯━━━━━━━━━━━━━━━━━━
 <span># │ &lt;value></span>
───┼──────────────────
 <span>0</span> │ /usr/local/sbin
 <span>1</span> │ /usr/local/bin
 <span>2</span> │ /usr/sbin
 <span>3</span> │ /usr/bin
 <span>4</span> │ /sbin
 <span>5</span> │ /bin
 <span>6</span> │ /usr/games
 <span>7</span> │ /usr/local/games
 <span>8</span> │ /snap/bin
━━━┷━━━━━━━━━━━━━━━━━━
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.path
━━━┯━━━━━━━━━━━━━━━━━━
 <span># │ &lt;value></span>
───┼──────────────────
 <span>0</span> │ /usr/local/sbin
 <span>1</span> │ /usr/local/bin
 <span>2</span> │ /usr/sbin
 <span>3</span> │ /usr/bin
 <span>4</span> │ /sbin
 <span>5</span> │ /bin
 <span>6</span> │ /usr/games
 <span>7</span> │ /usr/local/games
 <span>8</span> │ /snap/bin
━━━┷━━━━━━━━━━━━━━━━━━
</code></pre></div><p>We've added two new commands: <code>prepend</code> for adding items to the start of a table and <code>append</code> for adding items to the end of a table. With these commands, we can now query out the path, update it, and save it back.</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:path <span>|</span> prepend <span>"/my/new/directory"</span> <span>|</span> config --set_into path
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.path <span>|</span> prepend <span>"/my/new/directory"</span> <span>|</span> config set_into path
</code></pre></div><h2 id="adding-variables-to-your-environment" tabindex="-1"> Adding variables to your environment</h2>
<p>You can use a similar set of steps to add new variables, or change existing variables, in your environment.</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:env <span>|</span> insert GREETING hello_world <span>|</span> config --set_into <span>env</span>
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.env <span>|</span> insert GREETING hello_world <span>|</span> config set_into <span>env</span>
</code></pre></div><p><em>Note: the previous <code>add</code> command of previous releases has been renamed <code>insert</code> to remove confusion with mathematical functions.</em></p>
<h1 id="on-going-improvements" tabindex="-1"> On-going improvements</h1>
<p>We're continuing to improve the commands we currently ship as part of Nu. Here are a few you might find helpful:</p>
<h2 id="substrings-flare576" tabindex="-1"> Substrings (Flare576)</h2>
<p>The <code>str</code> command now supports being able to retrieve a substring from the strings given, so you could return, for example, the first 5 characters and stop after that.</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> get name
━━━━┯━━━━━━━━━━━━━━━━━━━━
 <span>#  │ &lt;value></span>
────┼────────────────────
  <span>0</span> │ target
  <span>1</span> │ CODE_OF_CONDUCT.md
  <span>2</span> │ .cargo
  <span>3</span> │ src
  <span>4</span> │ features.toml
  <span>5</span> │ rustfmt.toml
</code></pre></div><div><pre><code><span>></span> <span>ls</span> <span>|</span> get name <span>|</span> str --substring <span>"0,3"</span>
━━━━┯━━━━━━━━━
 <span>#  │ &lt;value></span>
────┼─────────
  <span>0</span> │ <span>tar</span>
  <span>1</span> │ COD
  <span>2</span> │ .ca
  <span>3</span> │ src
  <span>4</span> │ fea
  <span>5</span> │ rus
</code></pre></div><h2 id="recycling-jdvr" tabindex="-1"> Recycling (jdvr)</h2>
<p>Ever wish you could <code>rm</code> things, but not forever? You can now tell <code>rm</code> to send items to your platform's recycle bin rather than deleting them forever. As with our other commands, this works across all the platforms that Nu supports.</p>
<div><pre><code><span>></span> <span>rm</span> myfile.txt --trash
</code></pre></div><h2 id="parameter-descriptions-jonathandturner" tabindex="-1"> Parameter descriptions (jonathandturner)</h2>
<p>We're also continuing to improve the built-in help system. New in this release are descriptions for the flags and parameters that the command uses. For example, here's a look at what the help for <code>rm</code> now looks like:</p>
<div><pre><code><span>></span> <span>help</span> <span>rm</span>
Remove a <span>file</span>

Usage:
  <span>></span> <span>rm</span> <span>&lt;</span>path<span>></span> <span>{</span>flags<span>}</span>

parameters:
  <span>&lt;</span>path<span>></span> the <span>file</span> path to remove

flags:
  --trash: use the recycle bin on the platform instead of permanently deleting
  --recursive: delete subdirectories recursively
</code></pre></div><h1 id="new-commands" tabindex="-1"> New commands</h1>
<p>In addition to the new <code>append</code> and <code>prepend</code> we mentioned earlier, we've added a few new commands to Nu.</p>
<h2 id="average-notryanb" tabindex="-1"> Average (notryanb)</h2>
<p>Growing our set of mathematics functions for working with numbers, we now have an <code>average</code> command which will take the average of values given to it.</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> get size <span>|</span> average
</code></pre></div><h2 id="read-jonathandturner" tabindex="-1"> Read (jonathandturner)</h2>
<p>We've also introduced a new command to load in strings as tables. This new <code>read</code> command will take a pattern that describes the columns, their names, and where they are in each row of the string.</p>
<div><pre><code><span>></span> <span>open</span> .editorconfig
root <span>=</span> <span>true</span>

<span>[</span>*<span>]</span>
indent_style <span>=</span> space
indent_size <span>=</span> <span>4</span>
charset <span>=</span> utf-8
trim_trailing_whitespace <span>=</span> <span>true</span>
insert_final_newline <span>=</span> <span>false</span>
end_of_line <span>=</span> lf
</code></pre></div><div><pre><code><span>></span> <span>open</span> .editorconfig <span>|</span> <span>read</span> <span>"{variable} = {value}"</span>
━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━
 <span># │ variable                 │ value</span>
───┼──────────────────────────┼───────
 <span>0</span> │ root                     │ <span>true</span>
 <span>1</span> │ indent_style             │ space
 <span>2</span> │ indent_size              │ <span>4</span>
 <span>3</span> │ charset                  │ utf-8
 <span>4</span> │ trim_trailing_whitespace │ <span>true</span>
 <span>5</span> │ insert_final_newline     │ <span>false</span>
 <span>6</span> │ end_of_line              │ lf
</code></pre></div><h1 id="bugfixes-jonathandturner-jesterornot-thegedge-andrasio-wycats-notryanb-detegr-t-hart" tabindex="-1"> Bugfixes (jonathandturner, JesterOrNot, thegedge, andrasio, wycats, notryanb, Detegr, t-hart)</h1>
<p>As always, we've had lots of bugfixes. A <em>huge</em> &quot;thank you!&quot; to folks who reported issues, fixed issues, and just generally shared their experience with the shell. It's much appreciated and helps to continue making Nu that much better.</p>
<h1 id="survey" tabindex="-1"> Survey</h1>
<p>If you haven't already taken it, we'd love to hear your feedback in a quick (roughly 3 question) <a href="https://t.co/nujSjnI0dr?amp=1" target="_blank" rel="noopener noreferrer">survey</a>.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>There are a bunch of areas we're currently working on to make Nu more stable and feature complete. Until this work is finished, please consider Nu to be somewhere in the <em>pre-alpha</em> to <em>alpha</em> quality level.</p>
<p>That said, we're excited to merge this work and continue to take steps towards a more full-featured shell. Soon to be coming will be Nu working on stable Rust(!!), some improvements in the Nu internal engine which will make it possible to have better streaming and cleaner commands, and features like aliases.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 2019 Survey Results</title>
      <link>www.nushell.sh/blog/2019-11-23-nushell-survey-results.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-11-23-nushell-survey-results.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 2019 Survey Results</source>
      <content:encoded><![CDATA[<h1 id="nushell-2019-survey-results" tabindex="-1"> Nushell 2019 Survey Results</h1>
<p>Recently, we ran a short survey to see how you were feeling about <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">Nushell</a>. We wanted to give a very hearty &quot;thank you!&quot; to everyone who participated. These surveys are a great way to gather information about how people are feeling, where they're happy, and where they feel there are pain points.</p>
<p>In total, <strong>160</strong> people responded. An impressive amount for a project still in its first few months in the public.</p>
<h1 id="do-you-use-nu" tabindex="-1"> Do you use Nu?</h1>
<p><img src="@source/assets/images/nushell_survey_2019_percent.png" alt="63.1% don't use, 24.4% use but stopped, 12.5% use"></p>
<p>The survey welcomed both users and non-users of Nu. In our first question, we wanted to see how many folks are using Nu already. Perhaps unsurprising for a project still missing major functionality, most respondents aren't users, yet. As we'll see, there are themes around what people are waiting for before they jump in.</p>
<p>But first, let's take a look at the responses from folks how are currently using Nu.</p>
<h1 id="nu-users" tabindex="-1"> Nu users</h1>
<h2 id="what-do-you-like-20-responses" tabindex="-1"> What do you like? (20 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_fave_features.png" alt="favorite features (tables #1 by a long margin)"></p>
<p>Overwhelmingly, Nu users love tables! People currently using Nushell felt that tables and Nu's structured approach were their favorite features.</p>
<p>People also enjoyed the rich support for different file formats that Nu ships with as well as its focus on being cross-platform.</p>
<p>Other topics mentioned: syntax highlighting, good plugins, shells feature, tags feature, and that it is written in Rust.</p>
<h3 id="quotes" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;The structured data handling is awesome!&quot;</em></li>
<li><em>&quot;Tables! \o/&quot;</em></li>
<li><em>&quot;It makes it easier to work with data on the command line. I especially love that it's cross-platform.&quot;</em></li>
</ul>
<h2 id="where-should-nushell-improve-20-responses" tabindex="-1"> Where should Nushell improve? (20 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_needs_work.png" alt="needs work: top ones are autocomplete, shortcuts, tool integration"></p>
<p>Nu users also pointed out a few areas where they hoped Nu would improve over time. Top of mind were improvements around auto-completion, improving the keyboard shortcuts, and better integration with existing shells and tools.</p>
<p>There were also a batch of additional improvements people wished for: full scripting support, better examples/documentation, improved stability, interactive table viewing, more commands, smarter table drawing, better coloring, better error messages, aliases, prompt customization, and general performance improvements.</p>
<h3 id="quotes-1" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;Better documentation for how to write custom wrappers around existing tools.&quot;</em></li>
<li><em>&quot;The coloring and autocomplete and a scripting language&quot;</em></li>
<li><em>&quot;Compatibility with other shells. It's annoying that I often have to add quotes when copying a command from a website.&quot;</em></li>
<li><em>&quot;Honestly, I wish I knew enough about Nu that I could add a bunch of documentation to show others what it could do.&quot;</em></li>
</ul>
<h1 id="nu-non-users" tabindex="-1"> Nu non-users</h1>
<h2 id="what-s-stopping-you-from-using-nu-100-responses" tabindex="-1"> What's stopping you from using Nu? (100 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_blockers.png" alt="blocked adoption: top ones are time and maturity"></p>
<p>We also asked for feedback from people not using Nu what their thoughts were. What are the kinds of things that block them from using Nu?</p>
<p>Top of the list are &quot;time&quot; and &quot;maturity&quot;. Many people mentioned that it takes time to learn a new system, and time is a precious resource (don't we know it!). Maturity also came up for a lot of folks - if it's not mature yet, the time investment might go to waste. In general, there was a sense of waiting until things are further along before jumping in.</p>
<p>We also heard from many people who were perfectly comfortable in their current shells, whether it be zsh, bash, or fish. For these responders, Nu doesn't offer a compelling reason to switch, yet.</p>
<h3 id="quotes-2" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;I'm very invested in bash already, but I love the concept and the work being done.&quot;</em></li>
<li><em>&quot;Too comfy with the current shell, also I am lazy, but the project is awesome&quot;</em></li>
<li><em>&quot;I don’t transform data in the shell much, so the core value proposition of nu shell doesn’t resonate well with me.&quot;</em></li>
<li><em>&quot;I know a lot about traditional shells and don't want to re-learn how to do all that in nushell&quot;</em></li>
</ul>
<h2 id="used-nu-but-stopped-38-responses" tabindex="-1"> Used Nu but stopped (38 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_stoppers.png" alt="made me stop: top ones are maturity, time, and don't need it"></p>
<p>For those folks who tried Nu, but decided it wasn't for them, we also gave them a chance to tell us why. Similarly to the previous question, &quot;stability&quot; and &quot;time&quot; were at the top of the list.</p>
<p>Digging in a bit further, it's not only that Nu itself is changing, but that the package ecosystem hadn't stayed up-to-date with Nu's releases, or didn't yet offer a package. This meant it was easy to not be able to keep up, even if they had time to.</p>
<p>Other topics that came up: needing better autocomplete, needing aliases, better scripting, support for Windows network drives, and improved documentation.</p>
<h3 id="quotes-3" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;It was interesting, but I have a pretty significant ecosystem built around my flows in Bash and Zsh I can't give up just yet. Maybe that's just something I need to work with.&quot;</em></li>
<li><em>&quot;Also the lack of documentation around the different commands is a major impediment.&quot;</em></li>
<li><em>&quot;Lack of middle-of-the-word completion, mostly. Also all the aliases I have defined that I’d need to port over.&quot;</em></li>
</ul>
<h1 id="anything-else-we-should-know-68-responses" tabindex="-1"> Anything else we should know? (68 responses)</h1>
<p><img src="@source/assets/images/nushell_survey_2019_anything_else.png" alt="so much love"></p>
<p>As our final question, we gave responders a chance to give us any last thoughts they felt we should know.</p>
<p>Overwhelming, people sent us love and encouragement. Lots of it. We wanted to take a moment to appreciate everyone who sent us kind notes to keep going, that they loved what we were building and were excited to try it in the future, and how much they loved the concept. Thank you! We're excited to keep going, and it feels great to hear from people who are enthusiastic about the project.</p>
<h3 id="quotes-4" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;Keep going! Will definitely give Nu a try when it's more mature.&quot;</em></li>
<li><em>&quot;I love how much effort is being put into communication and evolution of the tool.&quot;</em></li>
<li><em>&quot;It is an interesting and worthwhile take on the command line environment.&quot;</em></li>
<li><em>&quot;It's a great project, I wanna use it as my daily driver&quot;</em></li>
<li><em>&quot;I'm super super duper excited to use this shell&quot;</em></li>
<li><em>&quot;I think Nushell is an awesome project. Thanks for doing this&quot;</em></li>
</ul>
<p>And thank <em>you</em> for responding to our survey!</p>
<h1 id="conclusions" tabindex="-1"> Conclusions</h1>
<p>The astute reader may already see some of the changes we've done recently were directly inspired by comments in this survey, and more are planned. This has been a great help, and we're looking forward to growing Nu with you in the coming months.</p>
<p>As always, feel free to come by our <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>, say hi on <a href="https://twitter.com/nu_shell" target="_blank" rel="noopener noreferrer">twitter</a>, or drop us a note in our <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.6.0</title>
      <link>www.nushell.sh/blog/2019-11-26-nushell-0_6_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-11-26-nushell-0_6_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.6.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-6-0" tabindex="-1"> Nushell 0.6.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.6.0 release of Nu. This release has a bunch of new features, bugfixes, and general improvements.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.6.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.6.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code> (or if you want all the features <code>cargo install nu --all-features</code>).</p>
<h1 id="starship-support-southclaws-jonathandturner" tabindex="-1"> Starship support (Southclaws, jonathandturner)</h1>
<p><img src="@source/assets/images/0_6_0_starship_prompt.png" alt="Example of starship prompt">
<em>Welcome to the starship!</em></p>
<p>Having a configurable prompt has been a regularly requested feature, dating back to our first release of Nu. With 0.6.0, we're excited to show off the ability to integrate with <a href="https://starship.rs/" target="_blank" rel="noopener noreferrer">starship</a>. Starship is a powerful prompt being built in Rust, and it includes tons of fun features.</p>
<p>To use the Starship support, enable the starship feature (the binary releases will have this on by default). After this, you'll want to <a href="https://starship.rs/config/" target="_blank" rel="noopener noreferrer">configure starship</a> to meet your needs.</p>
<p>Here's the config I use in the screenshot above:</p>
<div><pre><code>❯ cat ~/.config/starship.toml
add_newline = false

[git_branch]
symbol = "📙 "

[git_status]
disabled = true
</code></pre></div><p>To enable Starship support, make sure to enable the <code>starship</code> feature, or to use the all-features build:</p>
<div><pre><code>> cargo install nu --features starship-prompt
</code></pre></div><p>or</p>
<div><pre><code>> cargo install nu --all-features
</code></pre></div><h1 id="stable-rust-est31" tabindex="-1"> Stable Rust (est31)</h1>
<p>Nu now works on stable Rust!</p>
<p>Contributor est31 did a ton of work soon after our first Nu release, but it wasn't until just recently that it fully paid off. With the Rust 1.39 release, Nu now fully works on stable Rust! We're excited for what this means for package authors, as they will now have a stable dependency they can use to build Nu from, rather than tracking nightly.</p>
<h1 id="new-website-new-blog-sebastian-xyz" tabindex="-1"> New website! New blog! (sebastian-xyz)</h1>
<p>We're starting to work on an actual website, complete with a blog. In fact, where you're seeing this now is on our new site. We're excited to finally have something more official, and looking forward to growing the website in the weeks to come.</p>
<p>If you're a web developer or designer and you want to help out, please join us! You can find us on the <a href="https://github.com/nushell/nushell.github.io" target="_blank" rel="noopener noreferrer">website repo</a> and <a href="https://github.com/nushell/blog" target="_blank" rel="noopener noreferrer">blog repo</a>.</p>
<h1 id="new-features" tabindex="-1"> New features</h1>
<h2 id="histogram-andrasio" tabindex="-1"> histogram (andrasio)</h2>
<p>As we extend Nu's ability to function as a shell, we also wanted to include some features that help with doing some data analysis on structured data you're working with. In this release is a new <code>histogram</code> feature which gives a quick histogram of the data you're looking at:</p>
<div><pre><code><span>></span> <span>open</span> tests/fixtures/formats/caco3_plastics.csv <span>|</span> histogram origin
━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 <span># │ origin   │ frequency</span>
───┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────────
 <span>0</span> │ COLOMBIA │ ***********************************************************************************************
   │          │ *****
 <span>1</span> │ SPAIN    │ ************************************************************
 <span>2</span> │ TURKEY   │ ********************
━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
</code></pre></div><h2 id="split-by-andrasio" tabindex="-1"> split-by (andrasio)</h2>
<p>When working with tables inside of tables, it's sometimes helpful to be able to group and regroup data so that the end result can be easily processed or charted. With this release, we've add a new command: <code>split-by</code>. Split-by is similar to <code>group-by</code>, in a way you can think of it as a re-group as it will create new groups to wrap your existing groups.</p>
<p>To see how this works, let's say we have some shipping data, and we want to group these by the region:</p>
<div><pre><code><span>></span> <span>open</span> tests/fixtures/formats/caco3_plastics.csv <span>|</span> group-by origin

━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━
 SPAIN          │ COLOMBIA       │ TURKEY
────────────────┼────────────────┼────────────────
 <span>[</span>table <span>3</span> rows<span>]</span> │ <span>[</span>table <span>5</span> rows<span>]</span> │ <span>[</span>table <span>1</span> rows<span>]</span>
━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━
</code></pre></div><p>Next, let's say we know that inside of these new columns is a table that has a column called <code>shipped_at</code>. What we want to do is to <code>group-by</code> again, but this time use that new column to create new groups:</p>
<div><pre><code>/home/jonathan/Source/nushell<span>(</span>better_duration<span>)</span><span>></span> <span>open</span> tests/fixtures/formats/caco3_plastics.csv <span>|</span> group-by origin <span>|</span> split-by shipped_at
━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━
 <span>18</span>/03/2016  │ <span>27</span>/07/2016  │ <span>24</span>/06/2016  │ 07/07/2016     │ 01/01/1900     │ 01/11/2016     │ 04/10/2016
─────────────┼─────────────┼─────────────┼────────────────┼────────────────┼────────────────┼──────────────
 <span>[</span>row SPAIN<span>]</span> │ <span>[</span>row SPAIN<span>]</span> │ <span>[</span>row SPAIN<span>]</span> │ <span>[</span>row COLOMBIA<span>]</span> │ <span>[</span>row COLOMBIA<span>]</span> │ <span>[</span>row COLOMBIA<span>]</span> │ <span>[</span>row TURKEY<span>]</span>
━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━
</code></pre></div><p>What we have as a result is a kind of (row, column) grouping of the table data, which would allow you to graph for each date on one axis, and for each origin on the other.</p>
<h2 id="default-and-compact-andrasio" tabindex="-1"> default and compact (andrasio)</h2>
<p>One of the sticky issues working with tables is that sometimes you'll have gaps in the data. Perhaps there just isn't a value for that row.</p>
<p>To help with that, we've added two new commands: <code>default</code> and <code>compact</code>.</p>
<p>Default, as the name implies, will allow you to give blank spots a default value. Compact instead will allow you to remove a row if there's a blank in that position.</p>
<p>Here's an example of default:</p>
<div><pre><code><span>></span> <span>open</span> amigos.json <span>|</span> get amigos
━━━┯━━━━━━━━━━━┯━━━━━━━━━━━━
 <span># │ name      │ rusty_luck</span>
───┼───────────┼────────────
 <span>0</span> │ Yehuda    │          <span>1</span>
 <span>1</span> │ Jonathan  │          <span>1</span>
 <span>2</span> │ Andres    │          <span>1</span>
 <span>3</span> │ GorbyPuff │
━━━┷━━━━━━━━━━━┷━━━━━━━━━━━━
</code></pre></div><p>We can default the missing column from the table like this:</p>
<div><pre><code><span>></span> <span>open</span> amigos.json <span>|</span> get amigos <span>|</span> default rusty_luck <span>1</span> giving:

━━━┯━━━━━━━━━━┯━━━━━━━━━━━━
 <span># │ name     │ rusty_luck</span>
───┼──────────┼────────────
 <span>0</span> │ Yehuda   │          <span>1</span>
 <span>1</span> │ Jonathan │          <span>1</span>
 <span>2</span> │ Andres   │          <span>1</span>
 <span>3</span> │ GorbyPuff│          <span>1</span>
━━━┷━━━━━━━━━━┷━━━━━━━━━━━━
</code></pre></div><h2 id="format-jonathandturner" tabindex="-1"> format (jonathandturner)</h2>
<p>To add to the abilities of outputting tables of various into readable strings, we've recently added the <code>format</code> command. This allows you to convert table data into a string by following a formatting pattern:</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> <span>format</span> <span>"name is {name}"</span>
━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 <span>#  │ &lt;value></span>
────┼────────────────────────────
  <span>0</span> │ name is .azure
  <span>1</span> │ name is features.toml
  <span>2</span> │ name is Cargo.toml
  <span>3</span> │ name is LICENSE
  <span>4</span> │ name is target
  <span>5</span> │ name is images
  <span>6</span> │ name is tests
</code></pre></div><h2 id="from-xlsx-jonathandturner" tabindex="-1"> from-xlsx (jonathandturner)</h2>
<p>We now have an early start at Excel support. With it, you can now import Excel files as tables.</p>
<h1 id="on-going-improvements" tabindex="-1"> On-going improvements</h1>
<p>Lots of improvements to existing commands this time around.</p>
<h2 id="simple-and-full-ls-jonathandturner" tabindex="-1"> Simple and full <code>ls</code> (jonathandturner)</h2>
<p>To make <code>ls</code> work better on smaller terminals (including the bog standard 80x24 login size), we've shrunk <code>ls</code> a tiny bit by default. Have no worry, though, the original columns and more are available in the new <code>ls --full</code>.</p>
<h2 id="fuzzy-matching-bndbsh" tabindex="-1"> Fuzzy matching (bndbsh)</h2>
<div><pre><code>❯ <span>ls</span> <span>|</span> where name <span>=~</span> <span>"yml"</span>
━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━
 name        │ <span>type</span> │ size  │ accessed   │ modified
─────────────┼──────┼───────┼────────────┼────────────
 .gitpod.yml │ File │ <span>780</span> B │ a week ago │ a week ago
━━━━━━━━━━━━━┷━━━━━━┷━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━
</code></pre></div><p>A long-requested feature is the ability to match strings a bit more fuzzily. With 0.6.0, you'll be able to do just that with the new <code>=~</code> (fuzzy match to include) and <code>!~</code> (fuzzy match to exclude) commands.</p>
<h2 id="from-csv-now-with-separator-drmason13" tabindex="-1"> <code>from-csv</code>, now with separator (drmason13)</h2>
<p>Sometimes you might find a .csv file in the wild that uses a different separator than comma. You can now configure <code>from-csv</code> to use a different character as the separator using, for example, <code>from-csv --separator &quot;;&quot;</code>.</p>
<h2 id="nth-can-take-multiple-row-numbers-andrasio" tabindex="-1"> nth can take multiple row numbers (andrasio)</h2>
<p>You can now pass multiple row numbers to <code>nth</code>. For example <code>nth 1 3 5</code> will return those three separate rows as a new table.</p>
<h2 id="column-paths-can-now-include-row-numbers-wycats-andrasio" tabindex="-1"> Column paths can now include row numbers (wycats, andrasio)</h2>
<p>Sometimes when you're trying to get to data inside an inner table, you want to describe travelling through a particular row to get there. With recent improvements, you can now include the row number in the column path (assuming it is not the first part of the path).</p>
<h2 id="duration-support-jonathandturner-aloso" tabindex="-1"> Duration support (jonathandturner, Aloso)</h2>
<div><pre><code>❯ <span>ls</span> <span>|</span> where accessed <span>&lt;</span> 1w
━━━┯━━━━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━
 <span># │ name          │ type      │ size     │ accessed    │ modified</span>
───┼───────────────┼───────────┼──────────┼─────────────┼─────────────
 <span>0</span> │ Cargo.toml    │ File      │   <span>4.7</span> KB │ an hour ago │ an hour ago
 <span>1</span> │ Makefile.toml │ File      │    <span>449</span> B │ <span>2</span> days ago  │ <span>2</span> days ago
 <span>2</span> │ README.md     │ File      │  <span>19.5</span> KB │ an hour ago │ an hour ago
 <span>3</span> │ Cargo.lock    │ File      │ <span>170.7</span> KB │ an hour ago │ an hour ago
 <span>4</span> │ crates        │ Directory │   <span>4.1</span> KB │ an hour ago │ an hour ago
 <span>5</span> │ TODO.md       │ File      │   <span>1.3</span> KB │ an hour ago │ an hour ago
━━━┷━━━━━━━━━━━━━━━┷━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━
</code></pre></div><p>It's now possible to use duration values in Nu. This allows us to check for files accessed less than a week ago, as you see in the example above.</p>
<h2 id="renamed-read-to-parse-jonathandturner" tabindex="-1"> Renamed <code>read</code> to <code>parse</code> (jonathandturner)</h2>
<p>To help with at-a-glance readability, we've renamed <code>read</code> to <code>parse</code>. While <code>read</code> felt more friendly, it could easily be confused for reading input, reading a file, etc.</p>
<h1 id="general-improvements-wycats-thegedge-drmason13-jonathandturner-uma1317-jesterornot-andrasio-burniintree" tabindex="-1"> General improvements (wycats, thegedge, drmason13, jonathandturner, uma1317, JesterOrNot, andrasio, BurNiinTRee)</h1>
<p>There has been a ton of work behind the scenes on Nu itself. We now have a much-improved internal debugging system and better module separation courtesy of wycats. There are also a number of general cleanups and bugfixes that have gone into the release.</p>
<h1 id="survey-results" tabindex="-1"> Survey results</h1>
<p>We recently ran a survey to ask Nu users/non-users what they thought of Nu. If you're interested, definitely check out the <a href="https://www.nushell.sh/blog/2019-11-23-nushell-survey-results.html" target="_blank" rel="noopener noreferrer">results of the survey</a></p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're still hard at work on &quot;MVP #2&quot;. It will be the next milestone on our way to the eventual 1.0. If you'd like to help with code, docs, translation, testing, or just want to come chat and throw ideas around, we'd love to have you! You can find us on <a href="">discord</a>, <a href="https://twitter.com/nu_shell" target="_blank" rel="noopener noreferrer">twitter</a>, and <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.7.0</title>
      <link>www.nushell.sh/blog/2019-12-18-nushell-0_7_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-12-18-nushell-0_7_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.7.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-7-0" tabindex="-1"> Nushell 0.7.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.7.0 release of Nu. This release has a couple new features, bugfixes, and lots of internal improvements on the way to upcoming features.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.7.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.7.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code> (or if you want all stable features <code>cargo install nu --features=stable</code>).</p>
<h1 id="ranges-wycats-sebastian-xyz" tabindex="-1"> Ranges (wycats, sebastian-xyz)</h1>
<p>We've added ranges as new fundamental type in Nu. To use it, use <code>&lt;number&gt;..&lt;number&gt;</code>. Currently, you can use it with the new <code>range</code> command, which lets you do commands like:</p>
<div><pre><code>ls | range 3..5
</code></pre></div><p>And return rows 3 through 5 of the table that <code>ls</code> gives you.</p>
<h1 id="autocomplete-improvements-jonathandturner" tabindex="-1"> Autocomplete improvements (jonathandturner)</h1>
<p>As we improve the parser, we are getting more opportunities to do more with the results. One feature we added recently is the ability to autocomplete flags for internal commands.</p>
<p>For example, if you want to see what's available for the <code>config</code> command, you can now type <code>config --</code> and then immediately use the <code>&lt;tab&gt;</code> key to cycle through possible options.</p>
<h1 id="nu-becomes-multiple-crates-wycats-jonathandturner" tabindex="-1"> Nu becomes multiple crates (wycats, jonathandturner)</h1>
<p>Part of a big effort to get Nu ready for script support is to refactor the current codebase to make it cleaner and easier to work with.</p>
<p>For the last few weeks, a big part of this refactor involved splitting our growing monolith of a codebase into separate sub-crates that work together to give the same functionality. As we've done so, we've been able to clean up some of the interfaces between the code. The end result is something that already is easier to work with, and we're excited about what this means for future development.</p>
<p>One side effect of this work is that we've now separated out the plugins from the main <code>nu</code> crate. This gives you more options to configure your Nu setup how you want, as each optional crate can be separately installed.</p>
<p>From cargo, you can install the main crate with:</p>
<div><pre><code>cargo install nu
</code></pre></div><p>Then, you can install the plugins the same way. You can find them because they have a name starting with <code>nu_plugin_</code>. For example, to install the textview plugin:</p>
<div><pre><code>cargo install nu_plugin_textview
</code></pre></div><p>The current set of plugins includes:</p>
<ul>
<li>nu_plugin_average</li>
<li>nu_plugin_binaryview</li>
<li>nu_plugin_fetch</li>
<li>nu_plugin_inc</li>
<li>nu_plugin_match</li>
<li>nu_plugin_post</li>
<li>nu_plugin_ps</li>
<li>nu_plugin_str</li>
<li>nu_plugin_sum</li>
<li>nu_plugin_sys</li>
<li>nu_plugin_textview</li>
<li>nu_plugin_tree</li>
</ul>
<p>By default, Nu will install a small set of these plugins (&quot;sys&quot;, &quot;ps&quot;, &quot;textview&quot;, &quot;inc&quot;, &quot;str&quot;). You can optionally turn this off using:</p>
<div><pre><code>cargo install nu --no-default-features
</code></pre></div><h1 id="introducing-stable-and-unstable-features" tabindex="-1"> Introducing: stable and unstable features</h1>
<p>Another part of the current refactor work is that we're splitting the &quot;stable&quot; and &quot;unstable&quot; features up. This lets us experiment a bit easier before a command becomes a stable part of the releases.</p>
<p>Now, to install all the stable features, you can use:</p>
<div><pre><code>cargo install nu --features=stable
</code></pre></div><p>If you want to get both stable <em>and</em> unstable features, use:</p>
<div><pre><code>cargo install nu --all-features
</code></pre></div><p>Warning: unless you're working on Nu itself you may not want to install all features currently, as you'll see that we're working on an internal tracing tool.</p>
<h1 id="moving-the-book-s-sebastian-xyz" tabindex="-1"> Moving the book(s) (sebastian-xyz)</h1>
<p>We've been hard at working building up the websites. In the previous release, we talked about &quot;nushell.sh&quot; and the new website there. Since then, we've consolidated the books into the new website. Please update your book links to point to the new site:</p>
<ul>
<li>Nu book - <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">nushell.sh/book</a></li>
<li>Contributor book - <a href="https://www.nushell.sh/contributor-book/" target="_blank" rel="noopener noreferrer">nushell.sh/contributor-book</a></li>
<li>Cookbook (in-progress) - <a href="https://www.nushell.sh/cookbook/" target="_blank" rel="noopener noreferrer">nushell.sh/cookbook</a></li>
</ul>
<h1 id="command-improvements" tabindex="-1"> Command improvements</h1>
<h2 id="embed-wrap-jonathandturner-andrasio" tabindex="-1"> Embed -&gt; Wrap (jonathandturner, andrasio)</h2>
<p>For better readability, we've renamed the <code>embed</code> command to <code>wrap</code>. As the name implies, you can now <code>wrap</code> one table with another. You can also use <code>wrap</code> to create a table from a stream of values.</p>
<p>For example, you may have a list of strings you want to turn into a table:</p>
<div><pre><code>> ls | get name
────┬────────────────────
 #  │ &lt;value>
────┼────────────────────
  0 │ target
  1 │ CODE_OF_CONDUCT.md
  2 │ .cargo
  3 │ src
  4 │ features.toml
  5 │ TODO.md
</code></pre></div><p>We can now name this table using <code>wrap</code>:</p>
<div><pre><code>> ls | get name | wrap filename
────┬────────────────────
 #  │ filename
────┼────────────────────
  0 │ target
  1 │ CODE_OF_CONDUCT.md
  2 │ .cargo
  3 │ src
  4 │ features.toml
  5 │ TODO.md
</code></pre></div><h1 id="internal-improvements-wycats-jonathandturner-thibran-thegedge" tabindex="-1"> Internal improvements (wycats, jonathandturner, thibran, thegedge)</h1>
<p>Though not visible as additional new features, a group of us has been at work refactoring and cleaning up Nu's internals. This should help us both fix some long-standing bugs as well as make way for new features in the future.</p>
<p>We've also internally introduced a new &quot;line&quot; type, which represents strings that carry a line ending with them. This helps us more easily traffic string data through the system and know how best to output it at the end of the pipeline.</p>
<h1 id="bugfixes" tabindex="-1"> Bugfixes</h1>
<p>Of course, with each release, there are the usual bugfixes. We've improved tilde expansion (naufraghi), how internal pipelines are handled (thegedge), and more.</p>
<h1 id="improved-docs-tchak-coolshaurya-sebastian-xyz" tabindex="-1"> Improved docs (tchak, coolshaurya, sebastian-xyz)</h1>
<p>A big &quot;thank you!&quot; for folks continuing to work on the on-going command documentation efforts. Already, we're seeing people <a href="/book/command_reference.html">read about the commands</a> on the new website to help them learn Nu, which is great!</p>
<h1 id="what-s-next" tabindex="-1"> What's next?</h1>
<p>You might have noticed that with 0.7.0, we're seemingly getting close to 1.0. What happens after 0.9.0? Are we going to take the leap?</p>
<p>In short, not just yet. After 0.9.0, we'll release 0.10.0. Nu is maturing, but it isn't quite ready for the big One-Point-Oh. We'll continue maturing it until it's ready to make the move.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Happy Nu Year 2020</title>
      <link>www.nushell.sh/blog/2019-12-31-happy-nu-year-2020.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2019-12-31-happy-nu-year-2020.html</guid>
      <source url="www.nushell.sh/rss.xml">Happy Nu Year 2020</source>
      <content:encoded><![CDATA[<h1 id="happy-nu-year-2020" tabindex="-1"> Happy Nu Year 2020</h1>
<p><img src="@source/assets/images/happy_nu_year_2020.png" alt="Happy Nu Year!"></p>
<p>2019 was quite the year for Nushell. We landed the initial commit on May 10th, and 1881 commits later we find ourselves at the end of 2019. What all happened this year?</p>
<p>We started off with quite the bang! After quietly working on Nu for a few months, we wrote up a <a href="https://www.nushell.sh/blog/2019-08-23-introducing-nushell.html" target="_blank" rel="noopener noreferrer">blog post</a> to explain what Nu was. To our surprise, the post got a surprisingly warm reception! Soon, we were recording a podcast with the Changelog to <a href="https://changelog.com/podcast/363" target="_blank" rel="noopener noreferrer">talk about Nu</a>.</p>
<p>As the excitement calmed back to everyday levels, we got to the work of turning this minimum-viable product into the real thing. More than 65 people joined us to help fix bugs, test code, write docs, and explore new directions.</p>
<h2 id="where-are-we" tabindex="-1"> Where are we?</h2>
<p>At the end of 2019, where are we?</p>
<ul>
<li>We now have a <a href="https://nushell.sh" target="_blank" rel="noopener noreferrer">website</a>, a <a href="https://www.nushell.sh/blog" target="_blank" rel="noopener noreferrer">blog</a>, <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">three</a> <a href="https://www.nushell.sh/contributor-book/" target="_blank" rel="noopener noreferrer">different</a> <a href="https://www.nushell.sh/cookbook/" target="_blank" rel="noopener noreferrer">books</a>, and the results of our <a href="https://www.nushell.sh/blog/2019-11-23-nushell-survey-results.html" target="_blank" rel="noopener noreferrer">first survey</a></li>
<li>We released 6 different releases: <a href="https://www.nushell.sh/blog/2019-08-23-introducing-nushell.html" target="_blank" rel="noopener noreferrer">0.2</a>, <a href="https://www.nushell.sh/blog/2019-09-24-nushell_0_3_0.html" target="_blank" rel="noopener noreferrer">0.3</a>, <a href="https://www.nushell.sh/blog/2019-10-15-nushell-0_4_0.html" target="_blank" rel="noopener noreferrer">0.4</a>, <a href="https://www.nushell.sh/blog/2019-11-05-nushell-0_5_0.html" target="_blank" rel="noopener noreferrer">0.5</a>, <a href="https://www.nushell.sh/blog/2019-11-26-nushell-0_6_0.html" target="_blank" rel="noopener noreferrer">0.6</a>, and <a href="https://www.nushell.sh/blog/2019-12-18-nushell-0_7_0.html" target="_blank" rel="noopener noreferrer">0.7</a>.</li>
<li>Nu gained features. Lots of them. New table designs, new file formats, lots of new commands, improvements to error reporting, plugins (in <a href="https://github.com/lefticus/nu_plugin_calc" target="_blank" rel="noopener noreferrer">C++</a>, <a href="https://vsoch.github.io/2019/nushell-plugin-golang/" target="_blank" rel="noopener noreferrer">Go</a>, <a href="https://github.com/vsoch/nushell-plugin-python" target="_blank" rel="noopener noreferrer">Python</a>, and <a href="https://github.com/andrasio/nu-plugin/tree/master/examples" target="_blank" rel="noopener noreferrer">Ruby</a>), new colors, support for streaming tables, vi mode, moved to the stable Rust compiler, login shell support, recycle bin support, starship.rs support, fuzzy matching, duration and date comparison, ranges, improved autocomplete, and a bunch of internal improvements to make way for 2020.</li>
<li>Thanks to all the reports, PRs, and help debugging we've made a ton of progress in making Nu more stable and complete</li>
</ul>
<h2 id="what-s-ahead" tabindex="-1"> What's ahead?</h2>
<p>That said, it's &quot;<a href="https://twitter.com/yoshuawuyts/status/1210367651354161152?s=20" target="_blank" rel="noopener noreferrer">def early days</a>&quot; for Nu, as one recent user put it. We couldn't agree more. It's not <em>quite</em> ready for people to use as their everyday shell. Things we're working on in 2020 to make it possible for everyone to use Nu in their day-to-day work:</p>
<ul>
<li>Stability fixes! We'll be working hard to make Nu rock solid.</li>
<li>Aliases, variables, functions, scripts</li>
<li>Better integration with the native OS</li>
<li>Improved line editing</li>
<li>A better motto (lots of people confused about what &quot;Github-era&quot; means)</li>
</ul>
<p>In short, it's been a lot of fun, a lot of work, and we met some new friends along the way. A very big &quot;thanks!&quot; to all our contributors this year!</p>
<h2 id="nushell-repo" tabindex="-1"> Nushell repo</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/nushell/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
────┬───────────────────
 <span>#  │ &lt;value></span>
────┼───────────────────
  <span>0</span> │ Aloso
  <span>1</span> │ BatmanAoD
  <span>2</span> │ BradyBromley
  <span>3</span> │ BurNiinTRee
  <span>4</span> │ Detegr
  <span>5</span> │ DrSensor
  <span>6</span> │ Flare576
  <span>7</span> │ GuillaumeGomez
  <span>8</span> │ JesterOrNot
  <span>9</span> │ JonnyWalker81
 <span>10</span> │ Paradiesstaub
 <span>11</span> │ Porges
 <span>12</span> │ Southclaws
 <span>13</span> │ aidanharris
 <span>14</span> │ andrasio
 <span>15</span> │ bndbsh
 <span>16</span> │ chhetripradeep
 <span>17</span> │ coolshaurya
 <span>18</span> │ cristicismas
 <span>19</span> │ davidrobertmason
 <span>20</span> │ devnought
 <span>21</span> │ djc
 <span>22</span> │ drmason13
 <span>23</span> │ eoinkelly
 <span>24</span> │ est31
 <span>25</span> │ gilesv
 <span>26</span> │ iamcodemaker
 <span>27</span> │ incrop
 <span>28</span> │ ineol
 <span>29</span> │ jankoprowski
 <span>30</span> │ jdvr
 <span>31</span> │ jerodsanto
 <span>32</span> │ jonathandturner
 <span>33</span> │ landaire
 <span>34</span> │ lesichkovm
 <span>35</span> │ marcelocg
 <span>36</span> │ max-sixty
 <span>37</span> │ mfarberbrodsky
 <span>38</span> │ miller-time
 <span>39</span> │ mlbright
 <span>40</span> │ nalshihabi
 <span>41</span> │ naufraghi
 <span>42</span> │ notryanb
 <span>43</span> │ oknozor
 <span>44</span> │ orf
 <span>45</span> │ oskarskog
 <span>46</span> │ piotrek-szczygiel
 <span>47</span> │ pizzafox
 <span>48</span> │ pka
 <span>49</span> │ pmeredit
────┴───────────────────
────┬───────────────
 <span>#  │ &lt;value></span>
────┼───────────────
 <span>50</span> │ quebin31
 <span>51</span> │ ramonsnir
 <span>52</span> │ rnxpyke
 <span>53</span> │ rtlechow
 <span>54</span> │ sdfnz
 <span>55</span> │ sebastian-xyz
 <span>56</span> │ svartalf
 <span>57</span> │ t-hart
 <span>58</span> │ taiki-e
 <span>59</span> │ tchak
 <span>60</span> │ thegedge
 <span>61</span> │ tim77
 <span>62</span> │ twe4ked
 <span>63</span> │ uma0317
 <span>64</span> │ vsoch
 <span>65</span> │ vthriller
 <span>66</span> │ wycats
 <span>67</span> │ yaahc
 <span>68</span> │ yahsinhuangtw
────┴───────────────
</code></pre></div><h2 id="nushell-book-repo" tabindex="-1"> Nushell book repo</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/book/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
────┬─────────────────
 <span>#  │ &lt;value></span>
────┼─────────────────
  <span>0</span> │ Andrew-Webb
  <span>1</span> │ andrasio
  <span>2</span> │ boisgera
  <span>3</span> │ jankoprowski
  <span>4</span> │ jonathandturner
  <span>5</span> │ landaire
  <span>6</span> │ lord
  <span>7</span> │ marcelocg
  <span>8</span> │ mistydemeo
  <span>9</span> │ mlh758
 <span>10</span> │ pizzafox
 <span>11</span> │ pka
 <span>12</span> │ romanlevin
 <span>13</span> │ rtlechow
 <span>14</span> │ sebastian-xyz
 <span>15</span> │ ymgyt
────┴─────────────────
</code></pre></div><h2 id="contributor-book" tabindex="-1"> Contributor book</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/contributor-book/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
───┬─────────────────
 <span># │ &lt;value></span>
───┼─────────────────
 <span>0</span> │ andrasio
 <span>1</span> │ daveremy
 <span>2</span> │ jankoprowski
 <span>3</span> │ jonathandturner
 <span>4</span> │ sebastian-xyz
───┴─────────────────
</code></pre></div><h2 id="cookbook" tabindex="-1"> Cookbook</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/cookbook/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
───┬─────────────────
 <span># │ &lt;value></span>
───┼─────────────────
 <span>0</span> │ jonathandturner
 <span>1</span> │ notryanb
 <span>2</span> │ sebastian-xyz
───┴─────────────────
</code></pre></div><h2 id="blog" tabindex="-1"> Blog</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/blog/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
───┬─────────────────
 <span># │ &lt;value></span>
───┼─────────────────
 <span>0</span> │ Aloso
 <span>1</span> │ jonathandturner
 <span>2</span> │ sebastian-xyz
 <span>3</span> │ waldyrious
───┴─────────────────
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.8.0</title>
      <link>www.nushell.sh/blog/2020-01-07-nushell-0_8_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-01-07-nushell-0_8_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.8.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-8-0" tabindex="-1"> Nushell 0.8.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.8.0 release of Nu. This continues a series of internal improvements, with better stability and correctness, and, of course, new features.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.8.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.8.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<div><pre><code>❯ ls nu_plugin_* | sort-by name | get name
────┬──────────────────────
 #  │ &lt;value>
────┼──────────────────────
  0 │ nu_plugin_average
  1 │ nu_plugin_binaryview
  2 │ nu_plugin_fetch
  3 │ nu_plugin_inc
  4 │ nu_plugin_match
  5 │ nu_plugin_post
  6 │ nu_plugin_ps
  7 │ nu_plugin_str
  8 │ nu_plugin_sum
  9 │ nu_plugin_sys
 10 │ nu_plugin_textview
 11 │ nu_plugin_tree
────┴──────────────────────
</code></pre></div><h1 id="unwrapping-your-presents-jonathandturner-andrasio-with-help-from-ubsan" tabindex="-1"> Unwrapping your presents (jonathandturner, andrasio, with help from ubsan)</h1>
<p>A classic trick when writing Rust is to use the <code>.unwrap()</code> method. This method gives you a quick way to say &quot;panic if you see this happen&quot;. When prototyping, it's easy to use this as a way to develop code more quickly, but as a codebase matures you move away from it.</p>
<p>It was time for Nu to move away from using this shortcut. Fixing the unwraps is a lot of work, but the end result is a codebase that reports errors more reliably and doesn't panic as often if something unexpected happens -- which just is what you want when you're making a shell!</p>
<p>We're happy to say there are now no more unwraps in the Nu codebase. We have more improvements in mind, but this already is a big upgrade from where we were a few weeks ago.</p>
<h1 id="clippy-cleanliness-thibran-vorot93-jonathandturner" tabindex="-1"> Clippy cleanliness (thibran, vorot93, jonathandturner)</h1>
<p>Along the same theme of making code as clean as we can, we recently adopted using the <code>clippy</code> tool. Clippy is a tool to help point out common mistakes or inefficiencies in your Rust code. The end result of working through its warnings is often a cleaner looking codebase that's also a bit more efficient as a result.</p>
<p>The Nu codebase is now clippy-clean, and we're enforcing this on every new checkin to the codebase.</p>
<h1 id="improved" tabindex="-1"> Improved</h1>
<h2 id="which-gets-better-avandesa" tabindex="-1"> <code>which</code> gets better (avandesa)</h2>
<div><pre><code><span>></span> <span>which</span> <span>which</span>
───────┬──────────────────────────┬─────────
 arg   │ path                     │ <span>builtin</span>
───────┼──────────────────────────┼─────────
 <span>which</span> │ nushell built-in <span>command</span> │ Yes
───────┴──────────────────────────┴─────────
</code></pre></div><p>We're in the process of improving some of our existing built-in commands to make them more Nu-like. In this release, the <code>which</code> command has a bit more of a Nu-feel. It will tell you the path and if the command is an internal builtin command or an external command.</p>
<h2 id="ps-gets-better-jonathandturner" tabindex="-1"> <code>ps</code> gets better (jonathandturner)</h2>
<div><pre><code>─────┬───────┬──────────────────────────────────────┬──────────┬─────────┬──────────┬──────────
 #   │ pid   │ name                                 │ status   │ cpu     │ mem      │ virtual
─────┼───────┼──────────────────────────────────────┼──────────┼─────────┼──────────┼──────────
 250 │  4729 │ ibus-engine-simple                   │ Sleeping │  0.0000 │   3.3 MB │ 176.7 MB
 251 │  5964 │ gedit                                │ Sleeping │  0.0000 │  29.2 MB │ 496.5 MB
 252 │  5860 │ seahorse                             │ Sleeping │  0.0000 │  24.0 MB │ 488.7 MB
 253 │  6594 │ gnome-terminal-server                │ Sleeping │  0.0000 │  47.8 MB │ 675.0 MB
</code></pre></div><p>The <code>ps</code> command has gained a few new columns: &quot;mem&quot; and &quot;virtual&quot; for helping you track memory usage.</p>
<h2 id="openoffice-ods-support-coolshaurya" tabindex="-1"> OpenOffice .ods support (coolshaurya)</h2>
<p>Fresh off the presses is initial support for opening .ods files. Similarly to our xlsx support, this will allow you to open .ods files and read in their data, separated by the sheets.</p>
<h2 id="improved-keyboard-navigation-aloso" tabindex="-1"> Improved keyboard navigation (Aloso)</h2>
<p>We now support moving left by-word using the ctrl+left and ctrl+right keyboard shortcuts.</p>
<h1 id="new-commands" tabindex="-1"> New commands</h1>
<h2 id="uniq-notryanb" tabindex="-1"> uniq (notryanb)</h2>
<p>With 0.8.0, you'll also be able to remove duplicate rows from your tables with the <code>uniq</code> command:</p>
<div><pre><code>> open test.csv
───┬────────────┬───────────┬────────────┬──────
 # │ first_name │ last_name │ rusty_at   │ type
───┼────────────┼───────────┼────────────┼──────
 0 │ Andrés     │ Robalino  │ 10/11/2013 │ A
 1 │ Andrés     │ Robalino  │ 10/11/2013 │ A
 2 │ Jonathan   │ Turner    │ 10/12/2013 │ B
 3 │ Yehuda     │ Katz      │ 10/11/2013 │ A
───┴────────────┴───────────┴────────────┴──────
</code></pre></div><div><pre><code>> open test.csv | uniq
───┬────────────┬───────────┬────────────┬──────
 # │ first_name │ last_name │ rusty_at   │ type
───┼────────────┼───────────┼────────────┼──────
 0 │ Andrés     │ Robalino  │ 10/11/2013 │ A
 1 │ Jonathan   │ Turner    │ 10/12/2013 │ B
 2 │ Yehuda     │ Katz      │ 10/11/2013 │ A
───┴────────────┴───────────┴────────────┴──────
</code></pre></div><h1 id="new-built-in-variable-jonathandturner" tabindex="-1"> New built-in variable (jonathandturner)</h1>
<p>With 0.8.0, we've moved away from the <code>$nu:path</code> built-ins. Now, there's just one built-in for internal values: <code>$nu</code>. Using <code>echo $nu</code> will show you the table of current values.</p>
<h1 id="fixing-bugs-jonathandturner-sandorex-miller-time-quebin31-thegedge" tabindex="-1"> Fixing bugs (jonathandturner, sandorex, miller-time, quebin31, thegedge)</h1>
<p>As always, we also fixed bugs. In 0.8.0, you'll see improvements with UTF-8, the <code>pick</code> command, correctly handling required positional arguments, CTRL+L clear screen, and faster response times for external commands.</p>
<h1 id="what-s-coming" tabindex="-1"> What's coming</h1>
<p>We're well on our way to 0.10.0. That's right, we're not close to our 1.0 release just yet. After 0.9, we'll continue with a release every three weeks. Expect to see Nu continue to mature and stabilize.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.9.0</title>
      <link>www.nushell.sh/blog/2020-01-28-nushell-0_9_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-01-28-nushell-0_9_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.9.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-9-0" tabindex="-1"> Nushell 0.9.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.9.0 release of Nu. This release offers better help and error feedback, better support for the native shell, new commands, lots of command improvements, and bugfixes.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.9.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.9.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="help-available-on-all-commands-amanita-muscaria" tabindex="-1"> <code>--help</code> available on all commands (Amanita-muscaria)</h2>
<p>One of the first things a user might do in a new shell is to type a familiar command and pass it <code>--help</code>. A perfectly reasonable thing to do, and with 0.9.0 it does exactly you'd expect. It will now print out the help information for the given command for all internal commands (much in the same way as using <code>help &lt;command name&gt;</code>)</p>
<h2 id="better-error-feedback-wycats-andrasio" tabindex="-1"> Better error feedback (wycats, andrasio)</h2>
<p><img src="@source/assets/images/0_9_0_error_highlight.png" alt="Better inline errors!"></p>
<p>Our improvements to the parser as part of 0.9.0 also come with some fun perks. One of these is that unknown flags, and similar errors, will now get highlighted red to let you know that this isn't a valid input to the command.</p>
<h2 id="shelling-out-jonathandturner" tabindex="-1"> Shelling out (jonathandturner)</h2>
<p>An early feature of Nu that people that has been a popular request to bring back is &quot;shelling out&quot;. When Nu doesn't recognize a command, it will try to find it as an external command. In the last few versions, this was limited as Nu was not able to execute shell scripts, .cmd scripts... basically anything that wasn't an executable. The problem is that lots of apps use scripts as a way to configure what to execute (commands like <code>code</code>, <code>npm</code>, and others are common scripts behind the scenes).</p>
<p>With 0.9.0, we're returning to our earlier behavior and executing both binaries and shell scripts by calling to the platform-native shell when we call an external command. While this should largely be invisible as a user, more things should &quot;just work&quot; how they would in bash or Windows Terminal.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="du-amanita-muscaria" tabindex="-1"> du (Amanita-muscaria)</h3>
<p>Nu now has its own <code>du</code> command to show the disk usage of a part of the file system. This is a handy way of quickly looking for where all your free space went.</p>
<div><pre><code>❯ du
───┬───────────────┬─────────┬────────────────
 # │ name          │ size    │ contents
───┼───────────────┼─────────┼────────────────
 0 │ .git          │  4.7 MB │ [table 6 rows]
 1 │ .jekyll-cache │ 49.0 KB │ [table 1 rows]
 2 │ _includes     │   881 B │
 3 │ _layouts      │  4.3 KB │
 4 │ _posts        │ 82.4 KB │
 5 │ _sass         │ 21.5 KB │
 6 │ _site         │  5.3 MB │ [table 4 rows]
 7 │ assets        │  2.4 MB │ [table 1 rows]
 8 │ images        │  2.4 MB │
───┴───────────────┴─────────┴────────────────
</code></pre></div><h3 id="clear-jesterornot" tabindex="-1"> clear (JesterOrNot)</h3>
<p>Short, sweet, and to the point, you can now <code>clear</code> your screen with the new <code>clear</code> command. Like our other commands, this works across all the platforms Nu runs on.</p>
<h2 id="new-welcome-message-jonathandturner" tabindex="-1"> New welcome message (jonathandturner)</h2>
<div><pre><code>Welcome to Nushell 0.9.0 (type 'help' for more info)
nushell on 📙 bump_to_0_9_0 is 📦 v0.9.0 via 🦀 v1.40.0
❯
</code></pre></div><p>The first time you open Nu now you'll be greeted by a brief message to tell you the version of Nu and a reminder to use the <code>help</code> command to learn more about Nu and how it works.</p>
<h2 id="improved-table-streaming-jonathandturner" tabindex="-1"> Improved table streaming (jonathandturner)</h2>
<p>If you've used earlier versions of Nu, you may have wondered why every 50 rows we start a new table. This is where the implementation showed through a bit more than it should. As tables are printed, they are created and then displayed as enough rows are available. This means that output will spool to the screen and not wait for the table to finish processing before you see something. In general, it's good to see the tables earlier, but seeing a different shape of table every 50 rows can be annoying.</p>
<p>We've updated table output to be a lot cleaner, using this logic:</p>
<ul>
<li>If rows are being output quickly, build a larger table before outputting it</li>
<li>If rows are being output slowly, buffer a smaller number of rows and display them (just as before)</li>
<li>If rows change shape, switch to showing a different table. This helps you visually see when your data source is giving you a new kind of data</li>
</ul>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<h3 id="ls-and-rm-now-error-when-a-path-isn-t-found-amanita-muscaria" tabindex="-1"> <code>ls</code> and <code>rm</code> now error when a path isn't found (Amanita-muscaria)</h3>
<p>Adding a bit of polish this release, <code>ls</code> and <code>rm</code> will now error if you pass them a path they can't find.</p>
<h3 id="ls-can-optionally-show-just-the-filename-coolshaurya" tabindex="-1"> <code>ls</code> can optionally show just the filename (coolshaurya)</h3>
<p>If you've used <code>ls</code> on your subdirectories, you might have noticed that the subdirectory becomes part of the filename. This can be great for building up a pipeline (and a script in the future), but sometimes all you care about is the filename. You can now pass <code>ls</code> the <code>--short-names</code> command flag to get just the filename.</p>
<h3 id="ls-can-also-optionally-show-symlink-targets-josephtlyons" tabindex="-1"> <code>ls</code> can also optionally show symlink targets (JosephTLyons)</h3>
<p>Further improving <code>ls</code>, you can now see the symlink targets with the <code>--full</code> flag.</p>
<h3 id="ls-smaller-by-default-now-with-more-info-with-full-jonathandturner" tabindex="-1"> <code>ls</code> smaller by default, now with more info with <code>--full</code> (jonathandturner)</h3>
<p>To make Nu easier to use on smaller terminals, the <code>ls</code> command will now try to take up less space by default. The columns from earlier version of Nu (and a few more!) are still available, now behind the <code>--full</code> flag.</p>
<h3 id="from-xml-now-includes-attributes-borimino" tabindex="-1"> <code>from-xml</code> now includes attributes (Borimino)</h3>
<p>One of the first commands we built to import file data into Nu was <code>from-xml</code>. It was good enough to get started, and with 0.9.0 it improves to being a more precise representation of what's in the XML file. The command will now include attribute values as part of the table.</p>
<h3 id="sort-by-works-with-more-value-types-koenaad" tabindex="-1"> <code>sort-by</code> works with more value types (koenaad)</h3>
<p>Our sorting command <code>sort-by</code> can now work over more value types, which simplifies some common sorting tasks.</p>
<h3 id="debug-now-pretty-prints-its-output-sandorex" tabindex="-1"> <code>debug</code> now pretty-prints its output (sandorex)</h3>
<p>When working on Nu itself, there's a handy <code>debug</code> command which gives you all the information about the value coming through the pipeline. This is now prett-printed by default to make it easier to read.</p>
<h3 id="autocompletion-can-now-be-configured-jacobious52" tabindex="-1"> autocompletion can now be configured (Jacobious52)</h3>
<p>Autocompletion at the Nu prompt can now be changed between circular (the default) and list.</p>
<div><pre><code>> config --set [completion_mode list]
</code></pre></div><h3 id="more-improvements-to-which-avandesa" tabindex="-1"> More improvements to <code>which</code> (avandesa)</h3>
<p>The structured <code>which</code> continues to improve 0.9.0 and will now give an error in cases that it could not be performed correctly.</p>
<h3 id="improvements-to-calling-external-commands-thegedge-andrasio-koenaad" tabindex="-1"> Improvements to calling external commands (thegedge, andrasio, koenaad)</h3>
<p>A batch of improvements should allow external commands to feel a bit faster and work more consistently with the pipeline.</p>
<h2 id="documentation" tabindex="-1"> Documentation</h2>
<h3 id="more-command-docs-coolshaurya" tabindex="-1"> More command docs (coolshaurya)</h3>
<p>We're continuing to document the commands that are available and continue filling out command documentation where it's missing.</p>
<h3 id="more-readmes-and-code-documentation-notryanb-jonathandturner" tabindex="-1"> More READMEs and code documentation (notryanb, jonathandturner)</h3>
<p>Contributors to Nu will also appreciate that we're working our way through the code and source repositories and documenting how each part works. This should help developers get used to Nu from the inside and find a much easier path to jump in.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>With 0.9.0, we've added a lot of &quot;quality of life&quot; improvements that we hope you enjoy. We'd love to hear from you how 0.9.0 works for you.</p>
<p>Next release will be 0.10.0, as we continue to improve Nu. We're excited about what's coming, and can't wait to play with it ourselves!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.10.0</title>
      <link>www.nushell.sh/blog/2020-02-18-nushell-0_10_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-02-18-nushell-0_10_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.10.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-10-0" tabindex="-1"> Nushell 0.10.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Greetings and welcome to the 10th release of Nushell! Yes, that's right this is the tenth release of Nu we've put out in the wild, and oh is this release wild. So let's stop dilly-dallying and get right to it, shall we?</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.10.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.10.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="scripts-thegedge-jonathandturner" tabindex="-1"> Scripts! (thegedge, jonathandturner)</h2>
<p>Yes, you read that right, we're just beginning to add support for running Nu scripts. So far, these scripts are simple things. Nu will go line by line and run each line. But we're looking forward to building up support with more features as we go.</p>
<p>To run a script, you just call <code>nu</code> and pass in it the script file:</p>
<div><pre><code><span>></span> <span>cat</span> hello_world.nu
<span>echo</span> hello
<span>echo</span> world

<span>></span> nu hello_world.nu
hello
world
</code></pre></div><h2 id="running-commands-from-outside-nu-jonathandturner" tabindex="-1"> Running commands from outside Nu (jonathandturner)</h2>
<p>Another fun features in this release is the ability to run a Nu command from outside of Nu. Just like shells like Bash and Windows CMD, you can now pass the <code>-c</code> flag and give the pipeline you want to run:</p>
<div><pre><code><span>></span> ./nu -c <span>"ls | get name"</span>
─────┬───────────────────────────────
 <span>#   │ &lt;value></span>
─────┼───────────────────────────────
   <span>0</span> │ .cargo-lock
   <span>1</span> │ .fingerprint
   <span>2</span> │ build
   <span>3</span> │ deps
</code></pre></div><h2 id="shorthand-flags-amanita-muscaria" tabindex="-1"> Shorthand flags (Amanita-muscaria)</h2>
<p>Tired of typing those long flags that every Nu command seems to have? Worry no more! You can now use short flags in many common Nu commands. For example:</p>
<p>Instead of:</p>
<div><pre><code><span>></span> <span>ls</span> --full
</code></pre></div><p>You can now use:</p>
<div><pre><code><span>></span> <span>ls</span> -f
</code></pre></div><p>The shorthand flags are listed as part of the updated help section</p>
<h2 id="did-someone-say-flags-andrasio" tabindex="-1"> Did someone say flags? (andrasio)</h2>
<p>If you're coming to Nu from other CLIs, you might have wondered why you always had to put flags at the end. A little annoying, right? We fixed it.</p>
<div><pre><code><span>></span> <span>ls</span> *.sh --full
</code></pre></div><p>and now:</p>
<div><pre><code>> ls --full *.sh
</code></pre></div><p>Use whichever you like best.</p>
<h2 id="more-plugins-by-default-andrasio" tabindex="-1"> More plugins by default (andrasio)</h2>
<p>We've extended the set of plugins installed with <code>cargo install nu --features=stable</code> to the whole set of stable plugins. This cuts down on the amount of extra plugins to install if you want the full set. It should also help cut down on the confusion when users expected a command to be available but wasn't installed by default. You can still install without these additional commands, if you like, and pick and choose the ones you want.</p>
<h2 id="calc-command-coolshaurya" tabindex="-1"> <code>calc</code> command (coolshaurya)</h2>
<p>There's a new <code>calc</code> command in development that can calculate the result of math expressions in a string.</p>
<div><pre><code><span>></span> <span>echo</span> <span>"2+3"</span> <span>|</span> calc
<span>5.000000000000000</span>
</code></pre></div><h2 id="kill-command-sandorex" tabindex="-1"> <code>kill</code> command (sandorex)</h2>
<p>Nu now also has a cross-platform <code>kill</code> command, for killing processes.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<h3 id="external-commands-can-access-nu-andrasio" tabindex="-1"> External commands can access <code>$nu</code> (andrasio)</h3>
<p>External commands commands can now access the <code>$nu</code> variable that holds internal values for Nu.</p>
<h3 id="datetime-parsing-amanita-muscaria" tabindex="-1"> Datetime parsing (Amanita-muscaria)</h3>
<p>You can now parse datetime strings using the <code>str</code> command.</p>
<h3 id="du-command-now-shows-apparent-and-physical-disk-usage-amanita-muscaria" tabindex="-1"> <code>du</code> command now shows apparent and physical disk usage (Amanita-muscaria)</h3>
<p>The <code>du</code> command now lets you see both the amount of space that directories appear to take as well as the amount of total actual space they take up on the disk.</p>
<h3 id="better-help-message-jonathandturner" tabindex="-1"> Better <code>help</code> message (jonathandturner)</h3>
<p>By default, the <code>help</code> command now prints a little more information by default to help you get started.</p>
<h2 id="lots-of-bugfixes-improvements-thegedge-ultrawelfare-jonathandturner-andrasio-avandesa-notryanb-coolshaurya-twitu" tabindex="-1"> Lots of bugfixes/improvements (thegedge, UltraWelfare, jonathandturner, andrasio, avandesa, notryanb, coolshaurya, twitu)</h2>
<p>Better errors for incorrect <code>mv</code> and incorrect flags, better performance running external commands, better code documentation, plugins can now have numbers in their names, test directories can now have spaces in their names, fixed some issues with <code>cp</code>, moved off of the &quot;futures-preview&quot; crate to &quot;futures&quot; official, fixes to working with external commands that don't send line endings, improvements to <code>textview</code> and more.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>Adding the ability to run scripts gives Nu a lot more potential when used in larger tasks, and we're excited to continue to grow this support. This work comes out of the work to add aliases, which we're currently working on. It also opens up the possibility of running Nu from other hosts in the future.</p>
<p>Scripting also lends itself to needing more structure, variables, and more. We're looking ahead to those, too.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.11.0</title>
      <link>www.nushell.sh/blog/2020-03-10-nushell_0_11_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-03-10-nushell_0_11_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.11.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-11-0" tabindex="-1"> Nushell 0.11.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release the 0.11.0 release of Nu. This release continues to push us forward with new commands, improved engine internals, bugfixes, and more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.11.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.11.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="compound-shorthand-flags-amanita-muscaria" tabindex="-1"> Compound shorthand flags (Amanita-muscaria)</h2>
<p>Over the last few releases, we've seen the ability for flags to have shorthand version. You no longer needed to use <code>--full</code> if the flag supported the shorter <code>-f</code> version.</p>
<p>In this release, we've taken it one step further and allowed you to combine multiple shorthand flags into one group. For example, <code>ls --full --short-names</code> can now be written as <code>ls -fs</code></p>
<h2 id="improvements-and-cleanup-for-ls-bocom-quebin31-lincis-equal-l2" tabindex="-1"> Improvements and cleanup for <code>ls</code> (Bocom, quebin31, lincis, equal-l2)</h2>
<p>A lot of improvements went into <code>ls</code> for this release. The updated <code>ls</code> command is now more forgiving of coming across directories the user can't access and will simply show what it can and continue, it can work with named pipes on systems with them, it shows a more reasonable display for zero-length files, and the internals of <code>ls</code> have been cleaned a bit to make way for future improvements.</p>
<h2 id="external-command-output-no-longer-blocks-thegedge" tabindex="-1"> External command output no longer blocks (thegedge)</h2>
<p>Continuing our series of improvements to working with external commands, we have a few updates in this release. The first of these updates is an improvement to how content streams out of externals. With 0.11.0, this content will no longer block, which allows content to flow more easily between external and internal commands. As a result, some corner cases that came up with a series of commands in a pipeline not working because one blocks no longer is an issue.</p>
<h2 id="allow-externals-to-output-texts-or-binary-jonathandturner-thegedge" tabindex="-1"> Allow externals to output texts or binary (jonathandturner, thegedge)</h2>
<p>The second update to externals now allows externals to freely output either text or strings, and for this content to be read in a block at a time into Nu. This allows externals to stream any content they wish, and for this stream to continue for as long as needed.</p>
<h2 id="new-shuffle-command-hirschenberger" tabindex="-1"> New <code>shuffle</code> command (hirschenberger)</h2>
<p>With 0.11.0, we introduce a new <code>shuffle</code> command that will let you shuffle the rows of a table. This allows you to choose to not always process data the same way, or to search through data more stochastically.</p>
<div><pre><code>❯ help commands | shuffle
─────┬──────────────┬───────────────────────────────────────────────────────────────────────────────────────────────
 #   │ name         │ description
─────┼──────────────┼───────────────────────────────────────────────────────────────────────────────────────────────
   0 │ textview     │ Autoview of text data.
   1 │ pwd          │ Output the current working directory.
   2 │ sort-by      │ Sort by the given columns.
   3 │ tree         │ View the contents of the pipeline as a tree.
   4 │ du           │ Find disk usage sizes of specified items
   5 │ table        │ View the contents of the pipeline as a table.
</code></pre></div><h2 id="new-column-rename-command-andrasio" tabindex="-1"> New column <code>rename</code> command (andrasio)</h2>
<p>You can also now use the new <code>rename</code> command to rename a column to a new name.</p>
<div><pre><code>❯ help commands | rename action description
─────┬──────────────┬───────────────────────────────────────────────────────────────────────────────────────────────
 #   │ action       │ description
─────┼──────────────┼───────────────────────────────────────────────────────────────────────────────────────────────
   0 │ append       │ Append the given row to the table
   1 │ autoview     │ View the contents of the pipeline as a table or list.
   2 │ average      │ Compute the average of a column of numerical values.
   3 │ binaryview   │ Autoview of binary data.
</code></pre></div><h2 id="merge-the-env-command-into-the-nu-variable-jonathandturner" tabindex="-1"> Merge the <code>env</code> command into the <code>$nu</code> variable (jonathandturner)</h2>
<p>The <code>$nu</code> variable has grown to include values that were previously part of <code>env</code>, effectively merging the two into the <code>$nu</code> variable. This allows you to easily find out where the history file is stored, where config is stored, and where a good temp directory are all in one place:</p>
<div><pre><code>❯ echo $nu.home-dir $nu.temp-dir $nu.config-path $nu.history-path
───┬──────────────────────────────────────────────────────────────────────
 # │ &lt;value>
───┼──────────────────────────────────────────────────────────────────────
 0 │ C:\Users\joturner
 1 │ C:\Users\joturner\AppData\Local\Temp\
 2 │ C:\Users\joturner\AppData\Roaming\nu shell developers\nu\config.toml
 3 │ C:\Users\joturner\AppData\Local\nu shell developers\nu\history.txt
───┴──────────────────────────────────────────────────────────────────────
</code></pre></div><h2 id="the-format-command-can-now-use-column-paths-andrasio" tabindex="-1"> The <code>format</code> command can now use column paths (andrasio)</h2>
<p>The <code>format</code> command is a handy way of putting column data into a string for displaying, but it previously had the restriction that you couldn't use it to print out information that was deeper in the table. With 0.11.0, we've removed that restriction.</p>
<div><pre><code>❯ open Cargo.toml | format "The edition is {package.edition}"
The edition is 2018
</code></pre></div><h2 id="allow-help-to-be-printed-with-h-in-more-cases-rabisg0" tabindex="-1"> Allow help to be printed with <code>-h</code> in more cases (rabisg0)</h2>
<p>You should now be able to use <code>-h</code> to reach the help of a command in more cases than was previously allowed, making it a universal way to get to the help text.</p>
<h2 id="improved-documentation-coolshaurya-amanita-muscaria-notryanb" tabindex="-1"> Improved documentation (coolshaurya, Amanita-muscaria, notryanb)</h2>
<p>Documentation for <code>du</code>, <code>uniq</code>, <code>debug</code>, and plugin docs have all been improved in this release.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're excited to continue to polish how Nu works to make it more reliable and more efficient. Of course, we're also working on adding new much-requested features like aliases in upcoming releases. If you'd like to help with aliases or with Nu in general -- even if you want to help with a part of the project outside of just coding -- we'd love to have you. Come visit us on <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a> or the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.12.0</title>
      <link>www.nushell.sh/blog/2020-03-31-nushell_0_12_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-03-31-nushell_0_12_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.12.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-12-0" tabindex="-1"> Nushell 0.12.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release version 0.12.0 of Nu!</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.12.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.12.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="automatic-cd-jonathandturner" tabindex="-1"> Automatic <code>cd</code> (jonathandturner)</h2>
<div><pre><code>nushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0
❯ docs
nushell/docs on 📙 master
❯ ..
nushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0
</code></pre></div><p>Fish and Windows users rejoice, you can now <code>cd</code> to a directory or drive by typing its name in the shell. This also allows Windows users to change drives by giving just the drive name. Now, when you use the drive letter, we'll switch drives and return you to your previous working directory on that drive (eg <code>D:</code> will change to the D: drive and <code>cd</code> to the path you had been at previousy).</p>
<h2 id="type-inference-andrasio" tabindex="-1"> Type inference (andrasio)</h2>
<div><pre><code>❯ open tests/fixtures/formats//caco3_plastics.csv | get cif_per_net_weight
───┬─────────
 # │ &lt;value>
───┼─────────
 0 │  0.2300
 1 │  0.3100
 2 │  0.1400
 3 │  0.2300
 4 │  0.2100
 5 │  0.2800
 6 │  0.3000
 7 │  0.2500
 8 │  0.2800
───┴─────────
nushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0
❯ open tests/fixtures/formats//caco3_plastics.csv | get cif_per_net_weight | sum
2.23
</code></pre></div><p>We've been hard at work at improving how we read in unstructured data. In this release, you'll see the beginning of type inference as data is read in. In the above example, you can see how we now autodetect decimal numbers and then can later sum them together.</p>
<h2 id="jupyter-notebook-support-jonathandturner" tabindex="-1"> Jupyter notebook support (jonathandturner)</h2>
<p><img src="@source/assets/images/0_12_0_jupyter.png" alt="image of Nu in Jupyter notebook"></p>
<p>Nu's core design goal is that it should be easier to work with your system and your data. In this release, we take a step beyond being just a shell with <a href="https://github.com/nushell/nu_jupyter" target="_blank" rel="noopener noreferrer">Jupyter notebook support</a>.</p>
<h2 id="ls-all-quebin31" tabindex="-1"> <code>ls --all</code> (quebin31)</h2>
<div><pre><code>❯ ls
────┬─────────────────────────────────────────────────────┬──────┬──────────┬──────────────
 #  │                        name                         │ type │   size   │   modified
────┼─────────────────────────────────────────────────────┼──────┼──────────┼──────────────
  0 │ CODE_OF_CONDUCT.md                                  │ File │   3.4 KB │ 5 months ago
  1 │ Cargo.lock                                          │ File │ 104.5 KB │ 23 mins ago
  2 │ Cargo.toml                                          │ File │   5.5 KB │ 23 mins ago
...

❯ ls --all
────┬─────────────────────────────────────────────────────┬──────┬──────────┬──────────────
 #  │                        name                         │ type │   size   │   modified
────┼─────────────────────────────────────────────────────┼──────┼──────────┼──────────────
  0 │ .azure                                              │ Dir  │          │ 2 weeks ago
  1 │ .cargo                                              │ Dir  │          │ 2 weeks ago
  2 │ .circleci                                           │ Dir  │          │ 2 weeks ago
...
</code></pre></div><p>With 0.12.0, you can now show hidden files when listing directory contents with <code>ls</code>.</p>
<h2 id="from-ics-and-from-vcf-pulpdrew" tabindex="-1"> <code>from-ics</code> and <code>from-vcf</code> (pulpdrew)</h2>
<p>The file support contines to improve, as we add support for vCard and iCal file formats.</p>
<h2 id="to-md-and-to-html-jonathandturner" tabindex="-1"> <code>to-md</code> and <code>to-html</code> (jonathandturner)</h2>
<div><pre><code>❯ ls | to-md
|name|type|size|modified|
|-|-|-|-|
|CODE_OF_CONDUCT.md|File|3.4 KB|5 months ago|
|Cargo.lock|File|104.5 KB|21 mins ago|
</code></pre></div><p>You can now output to markdown and html using the new converters.</p>
<h2 id="headers-samhedin" tabindex="-1"> <code>headers</code> (samhedin)</h2>
<div><pre><code>❯ open tests/fixtures/formats/sample_data.ods | get SalesOrders
────┬────────────┬─────────┬──────────┬─────────┬─────────┬───────────┬───────────
 #  │  Column0   │ Column1 │ Column2  │ Column3 │ Column4 │  Column5  │  Column6
────┼────────────┼─────────┼──────────┼─────────┼─────────┼───────────┼───────────
  0 │ OrderDate  │ Region  │ Rep      │ Item    │ Units   │ Unit Cost │ Total
  1 │ 2018-01-06 │ East    │ Jones    │ Pencil  │ 95.0000 │    1.9900 │  189.0500

❯ open tests/fixtures/formats/sample_data.ods | get SalesOrders | headers
────┬────────────┬─────────┬──────────┬─────────┬─────────┬───────────┬───────────
 #  │ OrderDate  │ Region  │   Rep    │  Item   │  Units  │ Unit Cost │   Total
────┼────────────┼─────────┼──────────┼─────────┼─────────┼───────────┼───────────
  0 │ 2018-01-06 │ East    │ Jones    │ Pencil  │ 95.0000 │    1.9900 │  189.0500
  1 │ 2018-01-23 │ Central │ Kivell   │ Binder  │ 50.0000 │   19.9900 │  999.4999
</code></pre></div><p>Sometimes when working with data, you've managed to read in columns of data and notice that the first row is the headers you want. Previously, this required a lot of twiddling to lift the row into being the header. With 0.12.0, this has become much simpler with the <code>header</code> command.</p>
<h2 id="ps-full-mode-jonathandturner" tabindex="-1"> <code>ps --full</code> mode (jonathandturner)</h2>
<p>We're extending the information you can get back from <code>ps</code>. You are now able to get the original commandline and more for each process using the new <code>ps --full</code>.</p>
<h2 id="rm-can-now-take-multiple-arguments-to-remove-multiple-files-at-once-pulpdrew" tabindex="-1"> <code>rm</code> can now take multiple arguments to remove multiple files at once (pulpdrew)</h2>
<p>Sometimes we're missing a feature and you wonder how we made it that long 😄. In this release, you can now pass multiple files to <code>rm</code> for deletion.</p>
<h2 id="row-rotation-jonathandturner" tabindex="-1"> Row rotation (jonathandturner)</h2>
<div><pre><code>❯ sys
─────────┬─────────────────────────────────────────
 host    │ [row 7 columns]
 cpu     │ [row cores current ghz max ghz min ghz]
 disks   │ [table 9 rows]
 mem     │ [row free swap free swap total total]
 temp    │ [table 8 rows]
 net     │ [table 4 rows]
 battery │ [table 1 rows]
─────────┴─────────────────────────────────────────
</code></pre></div><p>When working with data with lots of columns, it can sometimes be a pain to watch it print to the screen only to see that the data is missing columns because they won't fit. In this version, we're experimenting with a way to help this by auto-rotating a row when it is printed by itself. This will allow more of the row to fit into the screen.</p>
<h2 id="configurable-table-headers-amanita-muscaria" tabindex="-1"> Configurable table headers (Amanita-muscaria)</h2>
<p>You may have noticed that the headers in the above examples were centered. How's that for sneaking a feature in?</p>
<p>With 0.12.0, you can configure your table look a bit more by changing how the headers are displayed. Here are the new <code>config</code> settings:</p>
<ul>
<li>header_color: Available colors are from term::color module</li>
<li>header_align: Sets header alignment center/left/right</li>
<li>header_style: Sets style bold, underlined, italic. More than one can be used</li>
</ul>
<h2 id="lots-of-bugfixes-improvements-sosthene-guedon-quebin31-neuronull-andrasio-thegedge-vsoch-jonathandturner-jonstodle" tabindex="-1"> Lots of bugfixes/improvements (Sosthene-Guedon, quebin31, neuronull, andrasio, thegedge, vsoch, jonathandturner, jonstodle)</h2>
<p>Open no longer fails silently, improved CSV opening, improve canonicalize of filenames, <code>sys</code> now properly says user sessions, moved <code>shuffle</code> to being an internal command, relaxed file modes, cleaned up <code>which</code> implementation, fix Docker build matrix, streams can now be interrupted, improvements to <code>du</code>, <code>get</code> now will remove blank values for easier processing, respect CARGO_TARGET_DIR when set, allow <code>..</code> and <code>/</code> to be mv targets,</p>
<h2 id="documentation-improvements-pulpdrew-nickgerace-waldyrious-kloun" tabindex="-1"> Documentation improvements (pulpdrew, nickgerace, waldyrious, kloun)</h2>
<p>Docs for <code>from-ics</code> and <code>from-vcf</code>, quickstart section for Docker users, docs for <code>skip</code> and <code>skip-while</code>, typos and whitespace fixes, typo in <code>calc</code> docs</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>&quot;Just keep going!&quot; as Yehuda Katz would say, and we intend to. Lots of internal improvements are coming, and of course aliases which has become a daily request.</p>
<p>We'd also like to hear from you. Let us know what would make Nu work better for your workflows, drop us a line in <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> or <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>. We'd love to hear from you!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.13.0</title>
      <link>www.nushell.sh/blog/2020-04-21-nushell_0_13_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-04-21-nushell_0_13_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.13.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-13-0" tabindex="-1"> Nushell 0.13.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release version 0.13.0 of Nu! This is by <em>far</em> one the the biggest releases, yet. Let's dive in!</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.13.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.13.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="aliases-jonathandturner" tabindex="-1"> Aliases (jonathandturner)</h2>
<p>Yes, it's true. Nu now supports aliases so that those long pipelines now have new life as concise, reusable commands.</p>
<div><pre><code>> alias myecho [msg] { echo $msg }
> myecho "hello world!"
hello world!
</code></pre></div><p>The alias has a name, a list of optional parameters, and the block that will execute. This block can refer to the parameters using their variable names.</p>
<h2 id="startup-commands-jonathandturner" tabindex="-1"> Startup commands (jonathandturner)</h2>
<p>With aliases, it's helpful to be able to start up Nu with your favorite aliases ready to go. To this end, we've now added the <code>startup</code> config variable. Adding a table of strings to this config variable enables you to run all of these commands as Nu starts up.</p>
<div><pre><code>> config --set [startup ["alias myecho [msg] { echo $msg }"]]
</code></pre></div><p>You can read more about setting <code>config</code> variables in <a href="https://www.nushell.sh/book/configuration.html" target="_blank" rel="noopener noreferrer">the book</a></p>
<h2 id="multi-dot-paths-quebin31" tabindex="-1"> Multi-dot paths (quebin31)</h2>
<p>In some shells, you can use multiple dots to mean go back even more directories. In addition to the common <code>..</code>, to go back to the previous directory, you can now also use <code>...</code> to go back two directories, <code>....</code> to go back three, and so on.</p>
<h2 id="semicolon-support-jonathandturner" tabindex="-1"> Semicolon support (jonathandturner)</h2>
<p>A long standing annoyance when using Nu day in and day out is that you can't compose two different pipelines together. Sometimes you want to run a build, and then run the output of the build if it succeeds.</p>
<p>In Bash, you might do something like this:</p>
<div><pre><code>> make &amp;&amp; ./run/my/app
</code></pre></div><p>If make succeeds, then your app runs. We're introducing the ';' separator which does this (beware bash users that this ';' will stop if the left-hand fails). You can write the above bash line as this in Nu 0.13.0:</p>
<div><pre><code>> make; ./run/my/app
</code></pre></div><p>Note that commands that you may be used to printing to the terminal when you run them directly may not print anything when used on the left-hand side of the <code>;</code>. This is because the data comes out and, being structured, it just gets consumed before it's viewed. If you prefer to see the output of a command on the left of the <code>;</code>, you can pass it through <code>autoview</code> to do this for you:</p>
<div><pre><code>> ls | autoview ; echo "done"
</code></pre></div><h2 id="math-operations-jonathandturner" tabindex="-1"> Math operations (jonathandturner)</h2>
<p>Wish you had a calculator or want to do a quick computation on something in your table? With 0.13.0, you can now switch into &quot;math mode&quot; and do a quick calculation. To switch into math mode, use the <code>=</code> operator as the command name.</p>
<div><pre><code>> = 3 + 4
7
</code></pre></div><p>You can use this in pipelines as well, do something like:</p>
<div><pre><code>ls | get size | = $it + 1mb
</code></pre></div><p>It doesn't end there. Not only are the basic +, -, *, and / available, but you can use these new operators:</p>
<h3 id="checking-if-a-value-is-in-a-member-of-the-given-table-with-in" tabindex="-1"> checking if a value is in a member of the given table with <code>in:</code></h3>
<div><pre><code>> = a in: [a b c]
true
> = d in: [a b c]
false
</code></pre></div><h3 id="and-to-create-compound-comparisons" tabindex="-1"> <code>&amp;&amp;</code> and <code>||</code> to create compound comparisons</h3>
<div><pre><code>> ls | where name > 'f' &amp;&amp; size > 1kb
</code></pre></div><h3 id="parens-to-allow-grouping" tabindex="-1"> Parens to allow grouping</h3>
<div><pre><code>= (1 + 2) * (3 + 4)
21
</code></pre></div><h2 id="new-parser-logic-jonathandturner" tabindex="-1"> New parser logic (jonathandturner)</h2>
<p>Early in this release cycle, we began experimenting with different ways we could write the parser going forward. Being able to parse commands, where each command could dictate how the parser works for that command, is a special challenge of how Nu works. After a bit of experimenting, we found a way forward that quickly seemed to fix some of the long-standing bugs. Not only this, but it opened up the way for a set of new features.</p>
<p>If you find issues with this new parser logic where code that used to work no longer works, please let us know. This will help us work out any issues as we build new features on it.</p>
<h2 id="external-improvements-thegedge-jonathandturner" tabindex="-1"> External improvements (thegedge, jonathandturner)</h2>
<p>With 0.13.0, we're taking a big step to making externals work in a way much more in-line with how internals work. This allows us to provide better support for varibles, column paths, coloring, error handling, and more.</p>
<h2 id="many-bugfixes-and-improvements-drsensor-thegedge-quebin31-jonathandturenr-avendesa-and-more" tabindex="-1"> Many bugfixes and improvements (DrSensor, thegedge, quebin31, jonathandturenr, avendesa, and more)</h2>
<ul>
<li>Better docker publish for each release (DrSensor)</li>
<li>Correctly delete symlinks (thegedge)</li>
<li>Better path canonicalization (quebin31)</li>
<li>Simplify <code>cp</code> and allow recursive copying (quebin31)</li>
<li>Make trash optional (jonathandturner)</li>
<li>Add support for <code>$true</code> and <code>$false</code> (jonathandturner)</li>
<li>Fixes for a few path and <code>where</code>-related issues (avendesa)</li>
<li>Plus fixes in our dependencies, many thanks to those crate owners!</li>
</ul>
<h2 id="pipeline-blocks-and-the-new-each-command-jonathandturner" tabindex="-1"> Pipeline blocks and the new <code>each</code> command (jonathandturner)</h2>
<p>Starting with 0.13.0, blocks can now contain pipelines (including <code>;</code>-separated multiple pipeline blocks). This allowed us to create the first command to take advantage of this: <code>each</code>. The new <code>each</code> command will run over each row in a table and do something for each. For example, let's say you wanted to convert each row of a table to separate JSON, rather than converting the whole table:</p>
<div><pre><code>> ls | each { to-json }
</code></pre></div><h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<p>With the math operations above, we're now changing the default type of syntax in a block. Where as before, the expanded version of where was:</p>
<p>(0.12.0)</p>
<div><pre><code>> ls | where { $it.size > 10kb }
</code></pre></div><p>(0.13.0)</p>
<div><pre><code>> ls | where { = $it.size > 10kb }
</code></pre></div><p>This is because blocks are now pipelines by default, so you need the extra <code>=</code> to switch into the math mode, which allows using the comparison operator <code>&gt;</code>.</p>
<p>You can also still use the shorthand versions of these comparisons:</p>
<div><pre><code>> ls | where size > 10kb
> ls | where $it.size > 10kb
</code></pre></div><h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>With 0.13.0, we've landed some important features that fill in gaps for using Nu as your daily driver, and we're excited to hear from our users. Looking forward, there's a lot of polish we'd like to put on these new features, including updating the book, cleaning up the code, writing more test cases, and fixing some of our bug backlog. This will also give us time to &quot;kick the tires&quot; on these new features as well, using them in our day-to-day work. We're currently planning for the following release to be more focused on &quot;polish&quot;. After this, of course, there are many more features to come!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.14.0</title>
      <link>www.nushell.sh/blog/2020-05-12-nushell_0_14_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-05-12-nushell_0_14_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.14.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-14-0" tabindex="-1"> Nushell 0.14.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release version 0.14.0 of Nu!</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.14.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.14.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="temporary-environment-variables-jonathandturner" tabindex="-1"> Temporary environment variables (jonathandturner)</h2>
<p>A feature requested by many, many folks is finally here. Up until now, to change an environment variable, you had to update the <code>config</code> settings, and then these changes would be permanent. This makes working with certain kinds of commands, which need some additional environment information, annoying to use.</p>
<p>With 0.14.0, you'll now be able to temporarily set an environment variable. To do so, you can use the new <code>with-env</code> command. This command takes the variable/value pair and the block to run once the environment is set:</p>
<div><pre><code>> with-env [DEBUG true] { command arg1 arg2 }
</code></pre></div><p>Bash, as well as many other shells, use a handy shorthand form, which we also now support. You can write the above as:</p>
<div><pre><code>> DEBUG=true command arg1 arg2
</code></pre></div><h2 id="starting-things-off-right-1ntegr8" tabindex="-1"> Starting things off right (1ntEgr8)</h2>
<p>Modern desktops have a way to associate file types with applications and often have a way to run that application automatically when you open a file of that type. In macOS, you can use the <code>open</code> command, <code>start</code> on Windows, and a variety of related <code>start</code> command in Linux.</p>
<p>In 0.14.0, we've added a unified <code>start</code> command that works across platforms that will run the associated application for a file type. For example, if you've associated your .py files with VSCode, you can edit them now using <code>start myfile.py</code>.</p>
<h2 id="nu-gets-a-calendar-josephtlyons" tabindex="-1"> Nu gets a calendar (JosephTLyons)</h2>
<p>A fun surprise for this release is the recently-added <code>cal</code> command, which will give you a calendar in table form.</p>
<div><pre><code>> cal
───┬────────┬────────┬─────────┬───────────┬──────────┬────────┬──────────
 # │ sunday │ monday │ tuesday │ wednesday │ thursday │ friday │ saturday
───┼────────┼────────┼─────────┼───────────┼──────────┼────────┼──────────
 0 │        │        │         │           │          │      1 │        2
 1 │      3 │      4 │       5 │         6 │        7 │      8 │        9
 2 │     10 │     11 │      12 │        13 │       14 │     15 │       16
 3 │     17 │     18 │      19 │        20 │       21 │     22 │       23
 4 │     24 │     25 │      26 │        27 │       28 │     29 │       30
 5 │     31 │        │         │           │          │        │
───┴────────┴────────┴─────────┴───────────┴──────────┴────────┴──────────
</code></pre></div><p>You can pass in flags to give you additional columns for the year, month, and even get calendars from the past or future.</p>
<h2 id="commands-get-some-helpful-examples-elichai" tabindex="-1"> Commands get some helpful examples (elichai)</h2>
<p>A last minute update also gave us a big improvement in our built-in help. Starting with 0.14, we'll now have examples as part of the help commands can use:</p>
<p><img src="@source/assets/images/0_14_0_help_examples.png" alt="image of new command help with colored example"></p>
<p>We're working to add examples to all commands. If that's something you're interested in helping with, come join us on <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>.</p>
<h2 id="subcommands-jonathandturner" tabindex="-1"> Subcommands (jonathandturner)</h2>
<p>As we fill out more forms of commands that Nu can represent, one type that we weren't able to do was subcommands. This meant all of our commands were at the top level, making it more difficult to find what you needed. Additionally, many external commands use subcommands, which meant we had no way to effectively wrap them in Nu.</p>
<p>With 0.14, you can now define subcommands. Subcommands each get a unique signature which has its own coloring, autocomplete, etc.</p>
<div><pre><code>> open myfile.txt | from csv --headerless
</code></pre></div><h2 id="breaking-changes-renaming-some-commands-jonathandturner-andrasio" tabindex="-1"> Breaking changes: renaming some commands (jonathandturner, andrasio)</h2>
<p>You may have noticed above that the <code>from-csv</code> is now <code>from csv</code>, that is, the <code>csv</code> part is now a subcommand of the <code>from</code> command. We've moved all <code>from-*</code> and <code>to-*</code> commands to be subcommands. This change was requested by users as part of an effort to streamline how conversion commands work.</p>
<p>Another set of changes requested by users was to update the names of some of the commands to the more common forms:</p>
<ul>
<li><code>pick</code> is now <code>select</code>. This matches more closely with SQL, LINQ, and shells with similar functionality.</li>
<li><code>edit</code> is now <code>update</code></li>
</ul>
<p>While we are cautious to take breaking changes, we're confident - judging from user feedback - that these changes make Nu more ergonomic and easier to learn.</p>
<h2 id="ls-learns-read-directory-sizes-josephtlyons" tabindex="-1"> <code>ls</code> learns read directory sizes (JosephTLyons)</h2>
<p>A few users have wondered why Nu doesn't print the full directory size as part of <code>ls</code>. With 0.14, you'll now be able to get just that with the new <code>--du</code> argument to <code>ls</code>. Note: this isn't enabled by default as calculating the directory size can take quite a lot of processing.</p>
<h2 id="startup-speedups-fdncred" tabindex="-1"> Startup speedups (fdncred)</h2>
<p>It's important to make a good first impression, and with this release Nu gets a speed boost for the initial startup. It will now load plugins in parallel rather than one after another. In some cases, this can lead to startups 3x-4x faster than previous versions.</p>
<h2 id="auto-cd-speedups-quebin31" tabindex="-1"> Auto-cd speedups (quebin31)</h2>
<p>We've also gotten a boost when using the automatic change directory. You'll notice that 0.14 is a lot snappier when you type a directory to automatically jump to.</p>
<h2 id="lots-of-new-commands" tabindex="-1"> Lots of new commands</h2>
<ul>
<li><code>from eml</code> (aeshirey) - have lots of saved emails lying around and want to process them? With 0.14, you can now easily load them into Nu</li>
<li><code>empty?</code> (andrasio) - you can now check multiple columns for emptiness, and if empty, give them a value</li>
<li><code>skip-until</code>, <code>keep-while</code>, <code>keep-until</code> (andrasio) - similar to <code>skip-while</code>, you can optionally <code>skip</code> or <code>keep</code> rows if they meet a condition or until they meet a condition</li>
<li><code>merge</code> (andrasio) - ever have two related tables and wish you could merge them into one? The new <code>merge</code> command can help you do that</li>
<li><code>not-in:</code> operator (jonathandturner) - going along with the <code>in:</code> operator is the new <code>not-in:</code>, which checks that a value isn't in the given list</li>
</ul>
<h2 id="it-expansion-jonathandturner-thegedge" tabindex="-1"> It-expansion (jonathandturner, thegedge)</h2>
<p>We've streamlined how <code>$it</code> is handled. The <code>$it</code> variable has always implied iteration (<code>$it</code> gets the name from iteration, item, and being &quot;it&quot;). In 0.14, we've made this more explicit with an expansion that happens inside of Nu.</p>
<p>Now, with Nu sees an <code>$it</code>, it expands it to a full <code>each</code> call.</p>
<div><pre><code>> ls | echo $it.name
</code></pre></div><p>Internally, now expands to:</p>
<div><pre><code>> ls | each { echo $it.name }
</code></pre></div><p>This helps us be more uniform about when iteration will happen. We've also updated how externals are handled so they can take advantage of this, making them work a lot more closely with how internals work.</p>
<h2 id="doc-and-book-updates-nespera-jonathandturner-fdncred-jzaefferer-siedentop" tabindex="-1"> Doc and book updates (nespera, jonathandturner, fdncred, jzaefferer, siedentop)</h2>
<p>We're continuing to fill out help information on each of the commands. This release adds a few more to the list of documented commands.</p>
<p>The <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">book</a> has also gone through a big revision to bring it up-to-date with the 0.14 release. We've also added tables to help you transition from Bash, PowerShell, SQL, and LINQ. A big thanks to our contributors to help find and fix issues. There's more work to do here. If you're writing-inclined, come join us!</p>
<h2 id="bugfixes-and-polish-quebin31-burniintree-avandesa-pka-homburg-rimathia-thegedge-jonathandturner-mhmdanas-jesterornot" tabindex="-1"> Bugfixes and polish (quebin31, BurNiinTree, avandesa, pka, homburg, rimathia, thegedge, jonathandturner, mhmdanas, JesterOrNot)</h2>
<p>Lots of bugfixes and polish for this release. A big &quot;thanks!&quot; to everyone that joined in and filed bugs, fixed bugs, and gave feedback on discord, github, and twitter.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've got lots of fun things planned for upcoming releases: more intelligent autocomplete, autocomplete for popular external commands, and more streamlining of the engine itself.</p>
<p>If you'd like to help out by writing code, writing docs, helping with the website, or just have an idea, come join us on <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> or <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>. We'd love to hear from you!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.15.0</title>
      <link>www.nushell.sh/blog/2020-06-09-nushell_0_15_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-06-09-nushell_0_15_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.15.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-15-0" tabindex="-1"> Nushell 0.15.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.15 of Nu - and it has a few last-minute surprises we hope you'll find as much fun as we do.</p>
<p>As many of you know, this release was delayed as part of a wide-spread effort to elevate Black voices and raise awareness of police violence, a movement which has now grown worldwide. We encourage you to take time to understand what this movement stands for, why it's happening, and to get involved where you can.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.15.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.15.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="per-directory-environment-variables-samhedin" tabindex="-1"> Per-directory environment variables (samhedin)</h2>
<p>Right before the announcement of 0.15, we had a surprise feature land - per-directory environment variables. This allows you to configure some environment variables specific to the directory (including subdirectories) that you're currently in, and Nu will set these environment variables as you <code>cd</code> into the directory and unset them as you <code>cd</code> out.</p>
<p>How it works:</p>
<p>In your config, create a new config setting called <code>nu_env_dirs</code> and set it to a list of directories you want to allow to control their own environments:</p>
<div><pre><code>> config --set [nu_env_dirs ["/home/sam", "/home/sam/github", "/home/sam/github/test"]
</code></pre></div><p>Note: after setting the above config settings, restart Nu so that they can be picked up.</p>
<p>Once set, you can now create a <code>.nu-env</code> file in the directory that you want to control the environment in:</p>
<div><pre><code>> open .nu-env
[env]
var = "value"
anothervar = "anothervalue"
</code></pre></div><p>With this file in place, you can <code>cd</code> into one of the directories you've configured and see the new environment variables now available.</p>
<h2 id="improvements-to-auto-complete-aaronc81" tabindex="-1"> Improvements to auto-complete (AaronC81)</h2>
<p>Starting with 0.15, you can now get autocompletions for external commands in your PATH.</p>
<p>Additionally, auto-completing a filepath with a space now is handled with cleaner logic than in previous versions.</p>
<h2 id="argument-invocation-jonathandturner-cjpearce" tabindex="-1"> Argument invocation (jonathandturner, cjpearce)</h2>
<p>You're now able to run a pipeline inside of another command as an argument, and then use the results that come out.</p>
<div><pre><code>> echo $(ls | where size > 10kb | count)
3
</code></pre></div><h2 id="string-interpolation-jonathandturner" tabindex="-1"> String interpolation (jonathandturner)</h2>
<p>We also support string interpolation, or building a string from text and running commands. For example, if we wanted to print out the current path to the history file with a message, we could do:</p>
<p>{% raw %}</p>
<div><pre><code>> echo `My current history path is {{$nu.history-path}}`
My current history path is /home/jonathant/.local/share/nu/history.txt
</code></pre></div><p>{% endraw %}</p>
<h2 id="prettier-errors-jonathandturner-brendanzab" tabindex="-1"> Prettier errors (jonathandturner, brendanzab)</h2>
<p>We've switched from language-reporting to codespan, giving us nicer looking errors:</p>
<p><img src="@source/assets/images/0_15_0_prettier_errors.png" alt="image of a prettier error message"></p>
<h2 id="big-history-by-default-aeosynth-lightclient" tabindex="-1"> Big history by default (aeosynth, lightclient)</h2>
<p>Let's start with 100k line history. You can also configure the history size using the new &quot;history_size&quot; config setting.</p>
<h2 id="command-updates" tabindex="-1"> Command updates</h2>
<h3 id="alias-now-has-a-save-flag-to-save-the-alias-to-your-config-startup-1ntegr8" tabindex="-1"> <code>alias</code> now has a <code>--save</code> flag to save the alias to your config startup (1ntEgr8)</h3>
<p>Ever have an alias you wanted to save but then had to look up all the steps to do so? Haven't we all.</p>
<p>With 0.15, it's easy to save an alias you like by using the <code>--save</code> flag.</p>
<h3 id="add-str-to-decimal-k-brk-routrohan" tabindex="-1"> Add <code>str to-decimal</code> (k-brk, routrohan)</h3>
<p>You can now easily parse decimal (sometimes called real or floating point numbers) using the new <code>str</code> subcommand.</p>
<h3 id="fetch-now-can-take-username-password-he4d" tabindex="-1"> <code>fetch</code> now can take username/password (he4d)</h3>
<p>Like its counterpart <code>post</code>, <code>fetch</code> can now accept a username/password to login to fetch URL contents.</p>
<h3 id="average-now-works-over-tables-andrasio" tabindex="-1"> <code>average</code> now works over tables (andrasio)</h3>
<p>In addition to using <code>average</code> on a column, you can now run it over a whole table.</p>
<h3 id="start-now-supports-glob-paths-arashout" tabindex="-1"> <code>start</code> now supports glob paths (arashout)</h3>
<p>You can now pass multiple values to <code>start</code> at one time using the new glob support.</p>
<div><pre><code>> start file*.rs
</code></pre></div><h3 id="plugins-no-longer-scan-whole-path-jonathandturner-fdncred" tabindex="-1"> Plugins no longer scan whole PATH (jonathandturner, fdncred)</h3>
<p>As we looking into startup times, we saw that scanning the whole PATH for plugins is quite costly. Even more, few people had used the feature to put plugins in a different directory than the <code>nu</code> application itself.</p>
<p>With 0.15, by default we will only look in the directory of the <code>nu</code> application. You can still manually store your plugins elsewhere by adding directories to the new &quot;plugin_dirs&quot; config setting.</p>
<h3 id="echo-now-will-iterate-over-a-range-jonathandturner" tabindex="-1"> <code>echo</code> now will iterate over a range (jonathandturner)</h3>
<div><pre><code>> echo 1..3
───┬───
 0 │ 1
 1 │ 2
 2 │ 3
───┴───
</code></pre></div><h3 id="where-command-speedups-jonathandturner" tabindex="-1"> <code>where</code> command speedups (jonathandturner)</h3>
<p>We did some work to optimize how command blocks are executed, which helps to speed up <code>where</code> quite a bit for long running queries.</p>
<h3 id="du-can-now-be-canceled-with-ctrl-c-josephtlyons" tabindex="-1"> <code>du</code> can now be canceled with ctrl-c (JosephTLyons)</h3>
<p>For those long-running <code>du</code> runs that you want to stop short, you can now use <code>ctrl-c</code> to exit back to Nu.</p>
<h3 id="with-env-shorthand-now-works-with-quoted-strings-as-well-k-brk" tabindex="-1"> <code>with-env</code> shorthand now works with quoted strings as well (k-brk)</h3>
<p>Now support: passing a string as a value in environment shorthands:</p>
<div><pre><code>> FOO="My Bar" command arg1 arg2
</code></pre></div><h3 id="add-config-option-for-rm-always-trash-filalex77" tabindex="-1"> Add config option for &quot;rm_always_trash&quot; (filalex77)</h3>
<p>If you'd prefer to always <code>rm</code> to the recycle bin instead of permanently deleting, you can enable the new &quot;rm_always_trash&quot; config setting.</p>
<h3 id="parse-now-also-takes-a-regex-flag-filalex77" tabindex="-1"> <code>parse</code> now also takes a <code>--regex</code> flag (filalex77)</h3>
<p>For when you need to do a bit more serious parsing work, you can now use regex from inside of the <code>parse</code> command.</p>
<h3 id="various-improvements-to-auto-pivot-fdncred-samboy218" tabindex="-1"> Various improvements to auto-pivot (fdncred, Samboy218)</h3>
<p>Previously, we always auto-pivoted the single row. Now, you can configure whether or not you want the row to pivot before it's displayed, including a new heuristic mode that will attempt to only pivot the row if necessary.</p>
<h3 id="histogram-now-has-a-count-josephtlyons" tabindex="-1"> <code>histogram</code> now has a count (JosephTLyons)</h3>
<p>You'll now be able to see the count of each of the rows in the histogram.</p>
<h3 id="format-can-now-access-variables-as-well-as-column-names-jonathandturner" tabindex="-1"> <code>format</code> can now access variables as well as column names (jonathandturner)</h3>
<p>Previously, <code>format</code> would only allow you to pass in column names. This meant that also printing a variable's value was a bit convoluted. With 0.15, you can pass in either a column name, or a variable (including a full variable path like <code>$nu.history-path</code>)</p>
<h3 id="to-json-now-has-pretty-printing-support-josephtlyons" tabindex="-1"> <code>to json</code> now has pretty printing support (JosephTLyons)</h3>
<p>You can now get <code>to json</code> to give you pretty-printed output, using the new <code>--pretty &lt;indent size&gt;</code> flag.</p>
<div><pre><code>> echo $nu | to json --pretty 2
</code></pre></div><h3 id="consumers-of-nu-cli-can-now-register-custom-commands-daschl" tabindex="-1"> Consumers of <code>nu-cli</code> can now register custom commands (daschl)</h3>
<p>If you're building applications and want to use <code>nu</code> as a library instead of directly as a cli, it's now possible to pass in your own set of custom commands that Nu will enable as internal commands.</p>
<h2 id="doc-and-book-updates" tabindex="-1"> Doc and book updates</h2>
<p>Contributor &quot;zombie110year&quot; has been working on translating the book to Simplified Chinese. If you'd like to help, let us know!</p>
<p>Also thanks to mhmdanas, andrasio, shiena, q-b, jzaefferer, Samboy218, ryepesg, 0xABAD, sseering, hilias, Dimagog, and fdncred for contributing to the book and continuing to help make it better.</p>
<h2 id="bugfixes-and-polish-daschl-josephtlyons-utam0k-arashout-andrasio-fdncred-johnae-jonathandturner-thegedge-shaaraddalvi-notryanb-emnudge-kelli314-coolshaurya-johnterickson-klnusbaum-adminxvii-delapouite-hdhoang" tabindex="-1"> Bugfixes and polish (daschl, JosephTLyons, utam0k, arashout, andrasio, fdncred, johnae, jonathandturner, thegedge, shaaraddalvi, notryanb, EmNudge, Kelli314, coolshaurya, johnterickson, klnusbaum, AdminXVII, Delapouite, hdhoang)</h2>
<p>There are <em>far</em> too many improvements and bugfixes to list here, but another <em>huge</em> thank you to everyone who has helped fix an issue, report an issue, chatted with us on twitter and discord, and just shared your love for Nu with others.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>With 0.15, we've closed another set of gaps in what people need in a shell. We're looking to continue improving completions, as well as growing the parser to support Nu scripts not just line-by-line, but as whole source files. We're also working on improving jupyter support, file encoding for better support across languages, and more.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.16.0</title>
      <link>www.nushell.sh/blog/2020-06-30-nushell_0_16_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-06-30-nushell_0_16_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.16.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-16-0" tabindex="-1"> Nushell 0.16.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.16 of Nu</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.16.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.16.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-automated-release-binaries-charlespierce-fdncred-jonathandturner" tabindex="-1"> New automated release binaries (charlespierce, fdncred, jonathandturner)</h2>
<p>Up to this point, we've hand-rolled all the binary releases. The process has been time-consuming and error-prone. Starting with 0.16.0, we'll be releasing using the GitHub release automation. The first benefits you'll see is that we've also added a wix-based installer for Windows users. The second, perhaps harder to see, benefit is a more relaxed release process that's easier on the project maintainers 😃</p>
<p>Please note: as part of this, we took the opportunity to also align the directory structure across platforms. Apologies in advance for any inconvenience this might cause.</p>
<h2 id="new-textview-fdncred" tabindex="-1"> New textview (fdncred)</h2>
<p>We've had a few requests for an improved text viewing experience, so with 0.16.0 we're trying out a new viewer based on the <a href="https://crates.io/crates/bat" target="_blank" rel="noopener noreferrer">bat</a> crate. We also support quite a lot of <a href="https://github.com/nushell/nushell/pull/2010" target="_blank" rel="noopener noreferrer">configuration settings</a> for this new text viewer.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="let-s-get-random-josephtlyons" tabindex="-1"> Let's get <code>random</code> (JosephTLyons)</h3>
<p>We have a new top-level command: <code>random</code>. To start, there are three sub-commands:</p>
<ul>
<li><code>random uuid</code> - generate random UUIDs</li>
<li><code>random bool</code> - a random &quot;coin flip&quot; with optional bias</li>
<li><code>random dice</code> - roll a single or a set of dice, optionally setting the number of sides and number of dices</li>
</ul>
<h3 id="more-math-josephtlyons-arashout-andrasio-amousa11" tabindex="-1"> More <code>math</code> (JosephTLyons, arashout, andrasio, amousa11)</h3>
<p>We've consolidated and added to our math operations. Now available as part of the 0.16.0 release:</p>
<ul>
<li><code>math avg</code> - averages a list of numbers</li>
<li><code>math sum</code> - totals a list of numbers</li>
<li><code>math mode</code> - gets the mode of a list of numbers</li>
<li><code>math median</code> - gets the median of a list of numbers</li>
<li><code>math min</code> - gets the minimum value of a list of numbers</li>
<li><code>math max</code> - gets the maximum value of a list of numbers</li>
</ul>
<h3 id="other-commands" tabindex="-1"> Other commands</h3>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/1992" target="_blank" rel="noopener noreferrer"><code>every</code></a> - lets you skip every n-rows (kubouch)</li>
<li><code>ansi</code> - lets you output ANSI color codes to color your strings (jonathandturner, fdncred)</li>
<li><code>char</code> - makes it possible to output newlines and tabs (jonathandturner)</li>
<li><code>do</code> - runs a block to completion, optionally ignoring errors (jonathandturner)</li>
</ul>
<h2 id="custom-prompts-jonathandturner" tabindex="-1"> Custom prompts (jonathandturner)</h2>
<p>You can now run a pipeline which returns a string, or list of strings, that is used to create a custom prompt. To do so, set the pipeline you want to use in the config for the <code>prompt</code> setting.</p>
<p>A simple example:</p>
<div><pre><code>> config --set [prompt "echo '> '"]
</code></pre></div><p>We've also added a new <code>ansi</code> command to let you change the color. Let's use it to change the prompt to blue:</p>
<div><pre><code>> config --set [prompt "echo $(ansi blue) '> '"]
</code></pre></div><p>You can make the prompt even fancier. For example, this prompt prints the current directory, git branch, and current date and time:</p>
<div><pre><code>> config --set [prompt 'echo [ $(ansi green) $(pwd) $(ansi reset) $(do -i {git rev-parse --abbrev-ref HEAD } | trim | echo [ "(" $(ansi blue) $it $(ansi reset) ")" ] | str collect) $(char newline) $(ansi cyan) $(date --format "%d/%m/%Y %H:%M:%S").formatted $(ansi reset) "> " ]']
</code></pre></div><p><img src="@source/assets/images/0_16_0_prompt_3.png" alt="image of full prompt"></p>
<p><em>Example of full prompt</em></p>
<p>Or update your prompt to show an abbreviated path:</p>
<div><pre><code>> config --set [prompt 'echo [ $(ansi green) $(pwd | split row "/" | first $(pwd | split row "/" | count | = $it - 1 ) | each { str substring "0,1" | format "{$it}/" } | append $(pwd | split row "/" | last ) | str collect) $(do -i { git rev-parse --abbrev-ref HEAD | trim | echo $(ansi reset) "(" $(ansi blue) $it $(ansi reset) ")" | str collect }) $(ansi reset) "> "]']
</code></pre></div><p>(note: the above assumes Unix-based systems, so on Windows use &quot;&quot; as the path separator))</p>
<p><img src="@source/assets/images/0_16_0_prompt_4.png" alt="image of abbreviated prompt"></p>
<p><em>Example of abbreviated prompt</em></p>
<h2 id="rfc-process-jzaefferer" tabindex="-1"> RFC process (jzaefferer)</h2>
<p>We now have an <a href="https://github.com/nushell/rfcs" target="_blank" rel="noopener noreferrer">RFC process</a> if you want to propose new features and breaking changes to Nu. Come let us know what you think and share your vision with us.</p>
<h2 id="starship-becomes-optional-fdncred" tabindex="-1"> Starship becomes optional (fdncred)</h2>
<p>We've made enabling starship a configuration option, rather than always being on. This allows you to opt-in, if you'd like the starship experience, but removes the requirement that you have to know to build without starship if you'd rather not have it (which may not be possible if you're using binary releases).</p>
<p>To enable starship, set the <code>use_starship</code> setting:</p>
<div><pre><code>> config --set [use_starship $true]
</code></pre></div><h2 id="new-table-drawing-jonathandturner" tabindex="-1"> New table drawing (jonathandturner)</h2>
<p>With 0.16.0, we now use a new table drawing algorithm. Here's the before and after for comparison:</p>
<p><img src="@source/assets/images/0_16_0_before_table.png" alt="image of a table before"></p>
<p><em>Table drawn with 0.15.0</em></p>
<p><img src="@source/assets/images/0_16_0_after_table.png" alt="image of a table before"></p>
<p><em>Table drawn with 0.16.0</em></p>
<p>If you're struggling to see much difference, that's a good thing! Where you'll really see the difference is in the time it takes to draw these tables:</p>
<p><img src="@source/assets/images/0_16_0_rendering_time.png" alt="image of a table before"></p>
<p><em>0.16.0 renders tables 40% faster than 0.15.0</em></p>
<h2 id="simplified-chinese-nu-book-zombie110year" tabindex="-1"> Simplified Chinese Nu book (zombie110year)</h2>
<p>Over the past few weeks we've seen steady progress on the Simplified Chinese translation of the Nu book. With this release, another set of translated chapters were added.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><code>to toml</code> now properly disallows incorrect top-level values (arashout)</li>
<li><code>mkdir</code> can now optionally show the names of directories created (utam0k)</li>
<li><code>uniq</code> can now optional provide the counts of each value in the result (siedentop)</li>
<li><code>cal</code> will now allow you to configure the start day of the week (JosephTLyons)</li>
<li>Division by zero is now an error that's caught and shown to the user (bailey-layzer)</li>
<li><code>date</code> can now output formatted datetime strings (fdncred)</li>
<li>Docs added for autoview, touch, and pwd (orientnab)</li>
<li>New <code>str collect</code> allows you to join a list of strings into a single string (jonathandturner)</li>
<li>Wix build support (fdncred)</li>
<li>Fixes for running external commands using the new Windows links feature (fdncred)</li>
<li><code>open</code> can now optionally take an encoding (fdncred)</li>
<li>The <code>config</code> settings file can now be readonly (jonathandturner)</li>
</ul>
<h2 id="internal-improvements" tabindex="-1"> Internal improvements</h2>
<ul>
<li>Replaced use of <code>async_stream</code> macro with creating async streams directly (JosephTLyons, jonathandturner)</li>
<li>Fixes to the <code>ps</code> process time algorithm (svartalf)</li>
<li>Interruptible stream API is now public (daschl)</li>
<li>We now test Windows drive changing during our CI tests (HiranmayaGundu)</li>
<li>Errors are now bubbled up earlier when possible (jonathandturner)</li>
<li>Config loading no longer panics if it doesn't succeed (jonathandturner)</li>
<li>Clean up and formatting of our docs (JosephTLyons)</li>
<li>Optimization work to not clone in some places (utam0k)</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We are looking into a few areas for the next release: further improving our per-directory environments, improving compile times, continuing to do code cleanup and pay down tech debt, and possibly more.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.17.0</title>
      <link>www.nushell.sh/blog/2020-07-21-nushell_0_17_0.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-07-21-nushell_0_17_0.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.17.0</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-17-0" tabindex="-1"> Nushell 0.17.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.17 of Nu, the first Nu to include WebAssembly, custom keybindings, and much more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.17.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.17.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="webassembly-support-jonathandturner-and-upcoming-wasm-based-playground-jzaefferer-jonathandturner" tabindex="-1"> WebAssembly support (jonathandturner) and upcoming wasm-based playground (jzaefferer, jonathandturner)</h2>
<p><img src="@source/assets/images/0_17_0_playground.png" alt="image of a wasm-based Nushell playground"></p>
<p><em>Nu, now in your browser</em></p>
<p>As part of on-going cleanup and portability work, with 0.17 it's now possible to build Nu and target WebAssembly, allowing you to run Nu in the browser and call into it from JavaScript. This is the first (experimental!) step in building towards an interactive playground and possibly more. We're hoping to talk more about this porting process in the coming days.</p>
<p>If you'd like to see what we're building, <a href="https://www.nushell.sh/demo/" target="_blank" rel="noopener noreferrer">check it out</a>.</p>
<h2 id="custom-keybindings-jonathandturner" tabindex="-1"> Custom keybindings (jonathandturner)</h2>
<p>Nushell now also supports custom keybindings. To configure your keybindings, you can add a keybindings.yml file beside your config file. You can find out the location for your system using:</p>
<div><pre><code>> echo $nu.keybinding-path
/home/jonathan/.config/nu/keybindings.yml
</code></pre></div><p>You can base your custom file off this <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/keybindings.yml" target="_blank" rel="noopener noreferrer">example keybindings file</a>.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="benchmark-pag4k" tabindex="-1"> <code>benchmark</code> (pag4k)</h3>
<p>The new <code>benchmark</code> command will time a block and output the length of time it took to run:</p>
<div><pre><code>> benchmark { echo "hello" }
363us 528ns
</code></pre></div><h3 id="str-reverse-josephtlyons" tabindex="-1"> <code>str reverse</code> (JosephTLyons)</h3>
<p>The <code>str reverse</code> command will reverse the characters of a string:</p>
<div><pre><code>> echo "hello world" | str reverse
dlrow olleh
</code></pre></div><h3 id="str-length-jonathandturner" tabindex="-1"> <code>str length</code> (jonathandturner)</h3>
<p>On a related note, you can now also get the length of a string.</p>
<div><pre><code>> echo "hello world" | str length
11
</code></pre></div><h3 id="str-from-bailey-layzer" tabindex="-1"> <code>str from</code> (bailey-layzer)</h3>
<p>In previous versions of Nu, it was difficult to format numbers for precision and digit grouping. Starting with 0.17, there's now a new <code>str from</code> subcommand to help with this.</p>
<div><pre><code>> echo 1.456123 | str from --decimals 2
1.46

> echo 1234567 | str from --group-digits
1,234,567
</code></pre></div><h3 id="math-stddev-and-math-variance-amousa11" tabindex="-1"> <code>math stddev</code> and <code>math variance</code> (amousa11)</h3>
<p>You can now calculate standard deviation and variance in your numeric datasets:</p>
<div><pre><code>> echo [ 1 2 3 4 5 ] | math stddev
1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573

> echo [ 1 2 3 4 5 ] | math variance
2
</code></pre></div><h3 id="if-jonathandturner" tabindex="-1"> <code>if</code> (jonathandturner)</h3>
<p>Ever want to run one block if a condition was true and another if the condition was false? Now you can!</p>
<div><pre><code>> echo 0..5 | if $it > 3 { echo big } { echo small }
───┬───────
 0 │ small
 1 │ small
 2 │ small
 3 │ small
 4 │ big
 5 │ big
───┴───────
</code></pre></div><p>The keen observer might notice we're stealthly sneaking in more commands you might use in future scripting.</p>
<h3 id="split-chars-jonathandturner" tabindex="-1"> <code>split chars</code> (jonathandturner)</h3>
<p>To more easily work with the characters in a string, you can now split the characters into separate items:</p>
<div><pre><code>> echo "hello" | split chars
───┬───
 0 │ h
 1 │ e
 2 │ l
 3 │ l
 4 │ o
───┴───
</code></pre></div><h3 id="move-column-andrasio" tabindex="-1"> <code>move column</code> (andrasio)</h3>
<p>Finally, you can now move columns in your table:</p>
<div><pre><code>> ls
───┬──────────────────────────────────┬──────┬─────────┬────────────
 # │ name                             │ type │ size    │ modified
───┼──────────────────────────────────┼──────┼─────────┼────────────
 0 │ 0.bootstrap.js                   │ File │ 30.9 KB │ 1 hour ago
 1 │ 46a44c28f12d33243854.module.wasm │ File │  5.4 MB │ 1 hour ago
 2 │ bootstrap.js                     │ File │ 16.3 KB │ 1 hour ago
 3 │ index.html                       │ File │  1.4 KB │ 1 hour ago
───┴──────────────────────────────────┴──────┴─────────┴────────────

> ls | move column size --before type
───┬──────────────────────────────────┬─────────┬──────┬────────────
 # │ name                             │ size    │ type │ modified
───┼──────────────────────────────────┼─────────┼──────┼────────────
 0 │ 0.bootstrap.js                   │ 30.9 KB │ File │ 1 hour ago
 1 │ 46a44c28f12d33243854.module.wasm │  5.4 MB │ File │ 1 hour ago
 2 │ bootstrap.js                     │ 16.3 KB │ File │ 1 hour ago
 3 │ index.html                       │  1.4 KB │ File │ 1 hour ago
───┴──────────────────────────────────┴─────────┴──────┴────────────
</code></pre></div><h2 id="early-draft-of-a-new-website-pontaoski" tabindex="-1"> Early draft of a new website (pontaoski)</h2>
<p>We're working on a refresh of our website. If you're interested in giving it a look, we've got an <a href="https://github.com/nushell/website_exploration" target="_blank" rel="noopener noreferrer">early draft started</a>. If you'd like to help us with the design, reach out over github or discord.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><code>sort-by</code> can now sort with case-insensitivity (JosephTLyons)</li>
<li><code>alias</code> of externals should now be improved (bailey-layzer)</li>
<li><code>history</code> should be able to correctly store more than 100 rows now (fdncred)</li>
<li><code>to html</code> will now output pretty hex when given a binary it doesn't recognize (jonathandturner), and now has color themes (fdncred)</li>
<li><code>uniq</code> can now also work with simple values (k-brk)</li>
<li>Completions now have their own abstraction, so we can more easily improve them in the future (thegedge)</li>
<li><code>table</code> now prints column numbers a bit more orderly way (Porges)</li>
<li><code>str</code> made parsing more strict, to let the user know if there were parsing errors (andrasio)</li>
<li><code>group-by</code> can now take a block that allows for deep keying for grouping (andrasio)</li>
<li>autoenv (directory-specific environments) can now run commands on entry/exit (samhedin)</li>
<li><code>str trim</code> can now take an optional character to trim (bailey-layzer)</li>
<li>duration pretty-print is now easier to read (jonathandturner), durations are also now stored as nanoseconds internally (pag4k)</li>
<li><code>str substring</code> supports more argument types now (andrasio)</li>
<li>completions for filepaths should now work in more cases (almindor)</li>
<li><code>rm</code> now gives nicer output (arashout)</li>
<li><code>ls -f</code> will now do a better job of keeping the tables aligned (arashout)</li>
<li>general parser improvements (philip-peterson, jonathandturner)</li>
<li><code>each</code> can now number the outputs it creates, allowing for enumeration (jonathandturner)</li>
</ul>
<h2 id="bug-fixes-tests-and-more-philip-peterson-josephtlyons-u5surf-thegedge-arashout-jonathandturner" tabindex="-1"> Bug fixes, tests and more (philip-peterson, JosephTLyons, u5surf, thegedge, arashout, jonathandturner)</h2>
<p>Parsing now has more test coverage. Internal code cleanups. Command description copy paste issues fixed. Ensure that the MaybeTextCodec gets properly cleared. Fix documentation to renamed subcommands and <code>str to-int</code>. Internally more commands were moved to process their streams lazily. We can now generate documentation from reading the built-in docs on each command.</p>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<h3 id="bson-and-sqlite-move-to-plugins-jonathandturner" tabindex="-1"> BSON and Sqlite move to plugins (jonathandturner)</h3>
<p>As part of the portability work, we've moved the <code>from bson</code>, <code>to bson</code>, <code>from sqlite</code> and <code>to sqlite</code> out of internal commands and into plugins. The functionality should remain largely unchanged, with the only difference being that you'll need to install these plugins for this functionality.</p>
<h3 id="command-renames" tabindex="-1"> Command renames</h3>
<ul>
<li><code>calc</code> is now <code>math eval</code> to join the <code>math</code> subcommand family (coolshaurya)</li>
<li><code>keep-until</code> and <code>keep-while</code> are now subcommands: <code>keep until</code> and <code>keep while</code> (k-brk)</li>
<li><code>skip-while</code> and <code>skip-until</code> are also now subcommands: <code>skip while</code> and skip until (andrasio)</li>
<li><code>config</code> is now split into subcommands based on the command flag, eg) <code>config set</code>, <code>config get</code>, etc. (ritobanrc, jonathandturner)</li>
</ul>
<h2 id="looking-forward" tabindex="-1"> Looking forward</h2>
<p>Just when we think we'll slow down a little, we're surprised by the amount of community feedback and help. This release covered nearly 4(!) pages of pull requests. Not bad for three weeks for work!</p>
<p>There's some parser work coming up to help continue removing roadblocks to using Nu as a scripting language, improving completions, and generally continuing to polish Nu.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.18</title>
      <link>www.nushell.sh/blog/2020-08-11-nushell_0_18.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-08-11-nushell_0_18.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.18</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-18" tabindex="-1"> Nushell 0.18</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.18 of Nu. The focus of this release was largely to polish what is already there, ensuring that internally parts work together better, are more consistent, and are easier to maintain. We've also added new commands for working with paths, URLs, strings, and lists.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.18 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.18.1" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<p><em>Please note:</em> as part of last minute changes, we had to bump the first release version of 0.18 to 0.18.1 instead of 0.18.0.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2292" target="_blank" rel="noopener noreferrer"><code>reduce</code> command</a> to reduce a list of values into a value (bailey-layzer)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2255" target="_blank" rel="noopener noreferrer"><code>path basename</code>, <code>path extension</code>, <code>path expand</code></a> for working with path values (mattyhall)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2264" target="_blank" rel="noopener noreferrer"><code>path type</code> and <code>path exists</code></a> for more path-related functionality (mattyhall)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2262" target="_blank" rel="noopener noreferrer"><code>str ltrim</code> and <code>str rtrim</code></a> to trim off left-hand and right-hand characters (k-brk)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2269" target="_blank" rel="noopener noreferrer"><code>str starts-with</code> and <code>str ends-with</code></a> to check if a string begins or ends with a given substring (k-brk)</li>
<li><strong>New:</strong> the <a href="https://github.com/nushell/nushell/pull/2274" target="_blank" rel="noopener noreferrer"><code>url</code> subcommands</a> for dealing with URLs (mattyhall)</li>
<li>The history file path is <a href="https://github.com/nushell/nushell/pull/2320" target="_blank" rel="noopener noreferrer">now configurable</a> (Amanita-muscaria)</li>
<li>The startup banner can now be <a href="https://github.com/nushell/nushell/pull/2314" target="_blank" rel="noopener noreferrer">turned off</a> (avranju)</li>
<li><code>version</code> now contains the <a href="https://github.com/nushell/nushell/pull/2333" target="_blank" rel="noopener noreferrer">features</a> that Nu was built with (andrasio)</li>
<li><code>math stddev</code> and <code>math variance</code> can now <a href="https://github.com/nushell/nushell/pull/2310" target="_blank" rel="noopener noreferrer">sample the input</a> (andrasio)</li>
<li><code>do -i</code> will also <a href="https://github.com/nushell/nushell/pull/2309" target="_blank" rel="noopener noreferrer">ignore stderr output</a> from external commands (jonathandturner)</li>
<li><code>to html</code> now has <a href="https://github.com/nushell/nushell/pull/2308" target="_blank" rel="noopener noreferrer">many themes to choose from</a> (fdncred)</li>
<li><code>to html</code> also now has <a href="https://github.com/nushell/nushell/pull/2273" target="_blank" rel="noopener noreferrer">list output</a> (coolshaurya)</li>
<li>More of the line editor settings are <a href="https://github.com/nushell/nushell/pull/2238" target="_blank" rel="noopener noreferrer">now configurable</a> (fdncred)</li>
<li><code>str to-datetime</code> can now <a href="https://github.com/nushell/nushell/pull/2303" target="_blank" rel="noopener noreferrer">parse many more date formats</a> (nmandery)</li>
<li><code>str collect</code> now optionally takes <a href="https://github.com/nushell/nushell/pull/2289" target="_blank" rel="noopener noreferrer">a separator value</a> (coolshaurya)</li>
<li><code>histogram</code> can now <a href="https://github.com/nushell/nushell/pull/2300" target="_blank" rel="noopener noreferrer">work with simple values</a> (andrasio)</li>
<li><code>ls -al</code> (and <code>ps -l</code>) are now the preferred way of getting a full listing (JosephTLyons)</li>
<li><code>insert</code> now <a href="https://github.com/nushell/nushell/pull/2265" target="_blank" rel="noopener noreferrer">takes a block</a> to do the work of inserting values (coolshaurya)</li>
</ul>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<p>The flags for --full in <code>ls</code> and <code>ps</code> has been changed to --long (-l) to better align with habits from other shells.</p>
<p>Line editor config settings have <a href="https://github.com/nushell/nushell/pull/2238" target="_blank" rel="noopener noreferrer">moved to their own section</a>.</p>
<h2 id="demo-site-jzaefferer-jonathandturner" tabindex="-1"> Demo site (jzaefferer, jonathandturner)</h2>
<p>There have been a number of improvements to the new wasm-based demo site, including new colors, command improvements, pivoting of long tables, and more.</p>
<h2 id="bugfixes-fdncred-kornelski-josephtlyons-andrasio-thegedge-jonathandturner-jzaefferer-warrenseine-coolshaurya" tabindex="-1"> Bugfixes (fdncred, kornelski, JosephTLyons, andrasio, thegedge, jonathandturner, jzaefferer, warrenseine, coolshaurya)</h2>
<p>Fixed issues with different types of symlinks on Windows, Nu will now used the support app_dirs crate, lots of internal match logic cleanup, internal representation of data summaries got a cleanup, getting ready to add a winget package, the first wave of parser cleanups ahead of future completion work, cleaned up unnecessary extra build steps, new command examples, improvements to the new <code>path</code> command errors, fixed histogram example, and consistency improvements.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We're nearly to the first birthday for Nu! In the near future, we'll continue to improve completions, work on a possible new <a href="https://github.com/nushell/rfcs/pull/3" target="_blank" rel="noopener noreferrer">data frames</a> implementation, continuing to push the wasm implementation futher, and more.</p>
]]></content:encoded>
    </item>
    <item>
      <title>One year of Nushell</title>
      <link>www.nushell.sh/blog/2020-08-23-year_of_nushell.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-08-23-year_of_nushell.html</guid>
      <source url="www.nushell.sh/rss.xml">One year of Nushell</source>
      <content:encoded><![CDATA[<h1 id="one-year-of-nushell" tabindex="-1"> One year of Nushell</h1>
<p>Hard to imagine that it's already been a year since Nu first went public. At the time, it was largely a demo of what could be possible, but still needed quite a bit of work to make it ready for everyday use. A year later and we've learned a lot, and made a few mistakes along the way. In this post, we look back over the year and see how we did and where we might be going in the future.</p>
<h1 id="history" tabindex="-1"> History</h1>
<p>When Nu first started, it started with a simple idea: the output of <code>ls</code>, <code>ps</code>, and <code>sysinfo</code> should all output the same thing. Taking a page from PowerShell, we explored outputting structured data and quickly settled on a table design that would support the output of each of the three commands, with the added ability of streaming the output as it became available.</p>
<p>Around this idea, we then built a set of &quot;filters&quot;, like the <code>where</code> clause, borrowed from SQL, and a growing set of data types we would support natively. Soon, we were able to write more complex statements like <code>ls | where size &gt; 10kb</code>. This became the crux of the idea - commands that output values from a core set of data types into a stream, composed together with the traditional UNIX pipe (<code>|</code>), so that you could build up a complex set of commands that work over the data as it streams through.</p>
<h1 id="nushell-today" tabindex="-1"> Nushell today</h1>
<h2 id="contributors" tabindex="-1"> Contributors</h2>
<p>Before we got started talking about Nushell today, we wanted to give a <em>big</em> &quot;thank you!&quot; to everyone who has contributed to Nu to get us to this point. Nu is what it is because of your help.</p>
<p>1ntEgr8, AaronC81, AdminXVII, aeosynth, aeshirey, aidanharris, almindor, Aloso, Amanita-muscaria, amousa11, andrasio, Andrew-Webb, arashout, arnaldo2792, avandesa, avranju, bailey-layzer, BatmanAoD, bndbsh, Bocom, boisgera, Borimino, BradyBromley, BurNiinTRee, Byron, candostdagdeviren, casidiablo, charlespierce, chhetripradeep, cjpearce, coolshaurya, cristicismas, DangerFunPants, daschl, daveremy, davidrobertmason, Delapouite, dependabot[bot], Detegr, devnought, Dimagog, djc, drmason13, DrSensor, elichai, eltonlaw, EmNudge, eoinkelly, equal-l2, est31, fdncred, filalex77, Flare576, gilesv, gorogoroumaru, GuillaumeGomez, hdhoang, he4d, hilias, HiranmayaGundu, hirschenberger, homburg, iamcodemaker, incrop, ineol, Jacobious52, jankoprowski, JCavallo, jdvr, jerodsanto, JesterOrNot, johnae, johnterickson, jonathandturner, JonnyWalker81, jonstodle, JosephTLyons, jzaefferer, k-brk, Kelli314, klnusbaum, kloun, kornelski, kubouch, kvrhdn, landaire, lesichkovm, LhKipp, lightclient, lincis, lord, luccasmmg, marcelocg, matsuu, mattclarke, mattyhall, max-sixty, mfarberbrodsky, mhmdanas, mike-morr, miller-time, mistydemeo, mlbright, mlh758, morrme, nalshihabi, naufraghi, nespera, neuronull, nickgerace, nmandery, notryanb, oknozor, orf, orientnab, oskarskog, oylenshpeegul, pag4k, Paradiesstaub, philip-peterson, piotrek-szczygiel, pizzafox, pka, pmeredit, pontaoski, Porges, pulpdrew, q-b, quebin31, rabisg0, ramonsnir, rimathia, ritobanrc, rnxpyke, romanlevin, routrohan, rrichardson, rtlechow, rutrum, ryuichi1208, Samboy218, samhedin, sandorex, sdfnz, sebastian-xyz, shaaraddalvi, shiena, siedentop, Sosthene-Guedon, Southclaws, svartalf, taiki-e, Tauheed-Elahee, tchak, thegedge, tim77, Tiwalun, twe4ked, twitu, u5surf, UltraWelfare, uma0317, utam0k, vsoch, vthriller, waldyrious, warrenseine, wycats, yaahc, yahsinhuangtw, yanganto, ymgyt, zombie110year</p>
<h1 id="what-is-nushell" tabindex="-1"> What is Nushell?</h1>
<p>Nushell is an interactive programming language for working with your files, your system, and your data as a shell, a notebook, and more.</p>
<h2 id="nu-is-more-than-a-shell" tabindex="-1"> Nu is more than a shell</h2>
<p>It's easy to think of Nushell as just a shell. It's even got 'shell' in the name. It's the first and probably main way you'll interact with it. So why say it's &quot;more than a shell&quot;?</p>
<p>In truth, Nushell is actually two things at once: Nu and Nushell. Nu is an interactive language for processing streams of structured data, data that you're probably getting from files, your system, a web address, etc.</p>
<p>So what's Nushell?</p>
<p>Nushell is taking the Nu language and putting it into a shell, and building around it a set of shell features to make it feel comfortable to use as a login shell. Completions, pretty error messages, and the like.</p>
<p>When we say that &quot;Nu is more than a shell&quot;, does that imply that Nu can be used in other places, too? Absolutely. We've got two more hosts that let you run Nu, a <a href="https://github.com/nushell/nu_jupyter" target="_blank" rel="noopener noreferrer">jupyter-based</a> host that lets you run Nu in jupyter notebooks, and a <a href="https://github.com/nushell/demo" target="_blank" rel="noopener noreferrer">WebAssembly-based</a> host that we use to create the <a href="https://www.nushell.sh/demo/" target="_blank" rel="noopener noreferrer">Nu playground</a></p>
<p>The idea of Nu runs deeper than just the shell, to being a language that's relatively easy to learn, yet powerful enough to do real work with your system, to process large amounts of data, to interactively let you iterate quickly on an idea, to invite exploration by building up a pipeline one piece at a time. There's really no shortage of ambition for where we hope to go.</p>
<h1 id="the-design-of-nu" tabindex="-1"> The design of Nu</h1>
<p>Nu's original design has proven surprisingly robust thus far. Some of its core ideas are continuing to pay dividends a year later. Let's look at the designs that still feel right.</p>
<h2 id="pipelines-are-infinite" tabindex="-1"> Pipelines are infinite</h2>
<p>When we first started writing Nu, we took a few shortcuts that had us processing all the data in a pipeline at once. Very quickly, we realize this wasn't going to work. External commands (think <code>cat /dev/random</code>) can output an infinite stream of data, and the system needs to be able to handle it. Understanding this, we transitioned to a different model: data flows between command as infinite streams of structured data. As the data is processed, we avoid collecting the data whenever possible to allow this streaming to happen.</p>
<p>Because the streams can be infinite, even the printing out of tables is done a batch at a time.</p>
<h2 id="separating-viewing-data-from-the-data-itself" tabindex="-1"> Separating viewing data from the data itself</h2>
<p>Coming from other shells, the idea of running <code>echo</code> or <code>ls</code> goes hand-in-hand with printing something to the terminal. It's difficult to see that there two steps going on behind the scenes: creating the information and then displaying it to the screen.</p>
<p>In Nu, these two steps are distinct. The <code>echo</code> command gets data ready to output into stream, but doesn't do any work to print it to the screen. Likewise, <code>ls</code> gets ready to output a stream of file and directory entries, but doesn't actually display this information.</p>
<p>That's because both <code>echo</code> and <code>ls</code> are lazy commands. They'll only do the work if the data is pulled from the stream. As a result, the step of viewing the data is separate from the step of creating it.</p>
<p>Behind the scenes, Nu converts a standalone <code>ls</code> to be the pipeline <code>ls | autoview</code>. The work of viewing comes from <code>autoview</code> and it handles working with the data and calling the proper viewer. In this way, we're able to keep things as structured data for as long as possible, and only convert it to be displayed as the final step before being shown to the user. (note: the wasm-based demo and jupyter do a similar step, but instead of adding <code>autoview</code>, they add <code>to html</code>)</p>
<h2 id="rich-data-types" tabindex="-1"> Rich data types</h2>
<p>In a similar way to working with structured data, rather than only plain text, Nu takes a different approach to data types as well. Nu takes the traditional set of basic types, like strings and numbers, and extends them into a richer set of basic data primitives.</p>
<p>Numbers are represented internally as big numbers and big decimals, rather than integers and floating point machine-based representations. This gives us more flexibility to do math more accurately, and generally removes the worry of whether the number you want to work with will fit in the integer or float size you have available.</p>
<p>We carry this further, by also representing values common in modern computer usage: URLs, file paths, file sizes, durations, and dates are all examples of built-in data types. By building them in, Nu can have better syntax and type checking with their use.</p>
<p>For example, in Nu it's possible to write <code>= 1min + 1sec</code> to create a duration that is one minute one second long. You can also use the file sizes, like being able to filter a directory list by the size of the file <code>ls | where size &gt; 10kb</code>.</p>
<p>Nu also can help if you try to mix types that shouldn't. For example, if you had written: <code>= 1min + 1kb</code> it seems you didn't mean to add time and file sizes together, and Nu gives you an error if you do:</p>
<div><pre><code>error: Coercion error
  ┌─ shell:1:3
  │
1 │ = 1min + 1kb
  │   ^^^^   --- filesize(in bytes)
  │   │
  │   duration
</code></pre></div><p><em>note: we'll be making this error better in the future</em></p>
<p>Data in Nu also isn't just the value, but it's also a set of metadata that comes with the value. For example, if you load data from a file using the <code>open</code> command, we track the place that it's loaded along with the data that's loaded. We can see this metadata using the <code>tags</code> command:</p>
<div><pre><code>open package.json | tags
───┬─────────────────┬──────────────────────────────────────────────────────────────────────────────
 # │      span       │                                    anchor
───┼─────────────────┼──────────────────────────────────────────────────────────────────────────────
 0 │ [row end start] │ /home/jonathan/Source/servo/tests/wpt/web-platform-tests/webrtc/tools/packag
   │                 │ e.json
───┴─────────────────┴──────────────────────────────────────────────────────────────────────────────
</code></pre></div><p>This extra information allows us to know how to view the contents, and even save you time when you use the <code>save</code> command, as it will use the original location by default.</p>
<h2 id="keeping-it-fun" tabindex="-1"> Keeping it fun</h2>
<p>Something we attached to early on was the idea that Nu should be fun. It should be fun to work on, it should be fun to contribute to, and it should be fun to use.</p>
<p>Nu is really about play. You play with your data, you play with the structures that make up your files and filesystem, you play with what web services give back to you. Everything about Nu is made to invite you to explore how things work and how data is put together. As you play, you learn more about Nu works and how to better use it. We firmly believe that learning doesn't have to hurt. At its best, the pleasure of exploration over time yields expertise without punishing you along the way. Humans just get better at something when we love to pick it up day after day, experimenting as we go. With Nu, we can ask questions like &quot;what if I do this?&quot; because the system is built to let us ask the question and answer it ourselves.</p>
<p>Nu takes this one step further. The error reporting system comes from the design of <a href="https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html" target="_blank" rel="noopener noreferrer">Rust's error messages</a>, with clear messages to help guide you to success.</p>
<p>The goal for Nu is that it won't require you to be a wiz with the commandline or with complex programming practices. Instead, you start where you feel comfortable, and grow a line at a time. With Nu, as your comfort grows, single lines easily grow to multiple lines, and (eventually) to larger programs. You don't need separate styles of thinking when experimenting and another for building your application. In Nu, these are (or will be) one and the same.</p>
<h2 id="crossplatform" tabindex="-1"> Crossplatform</h2>
<p>One of the first decisions we made in making Nu is that it should not only be cross-platform, but should feel as native as possible across platforms. Commands should work the same, regardless of the platform you're on, without any loss of functionality if you switch from one OS to another. This has meant saying &quot;no&quot; a few times when someone offered to a cool feature, only to find out it didn't work well on one of the supported systems. The benefit, though, is that Nu users can move between OSes comfortably.</p>
<p>Nu lets you use common shortcuts, too. In Windows, you can change drives using the common <code>D:</code> shorthand. You can use <code>cd ~</code> and <code>cd -</code> as easy shorthands to jump between home and previous directories, too.</p>
<h2 id="getting-it-right" tabindex="-1"> Getting <code>$it</code> right</h2>
<p>Early on, when we were first brainstorming how something like Nushell might work, we rediscovered the idea of iteration having its own special variable. The iteration variable, item variable, or simple the &quot;it&quot; variable, gave us a way to talk about the current row of data flowing through the pipeline. When we can talk about the current row, it was then easier to say how to handle the current row.</p>
<p>The simplest version is:</p>
<div><pre><code>ls | echo $it
</code></pre></div><p>To <code>echo $it</code> doesn't really do anything interesting, it just passes along the value it was handed. It's when we combine this with variable paths that things get a little more interesting:</p>
<div><pre><code>ls | echo $it.name
</code></pre></div><p>Now, in 4 words we've asked Nu to list all the files in the current directory and output only the names. This pipeline, if there are 100s of thousands of files, will happily stream out its results as it finds new files. As in this case:</p>
<div><pre><code>ls **/* | echo $it.name
</code></pre></div><p>Once you have a mental model for using <code>$it</code>, it becomes common to grab it when working on data a row at a time.</p>
<p>A note for those wondering how this works under the hood: if an <code>$it</code> is found a part of an argument not otherwise inside of a block, it's &quot;it-expanded&quot;. We replace the command with a call to <code>each</code> and the block.</p>
<p>This turns:</p>
<div><pre><code>ls | echo $it.name
</code></pre></div><p>Into:</p>
<div><pre><code>ls | each { echo $it.name }
</code></pre></div><p>The <code>each</code> command handles walking along each row and calling the block each time, setting the variable <code>$it</code> to the current row value.</p>
<h2 id="everything-is-a-macro" tabindex="-1"> Everything is a macro</h2>
<p>In Nu, a command has the form <code>&lt;cmd&gt; &lt;arg1&gt; &lt;arg2&gt;</code>. To the lisp-lovers among you, this should look very familiar. Slap on a pair of parens and you have yourself an s-expression.</p>
<p>You may be wondering - if you choose a cmd-arg-arg form, how do you write something like:</p>
<div><pre><code>where size > 10kb
</code></pre></div><p>This is where Nu's parser steps up. The parser we use is a type-driven, recursive descent parser. If you look at the signature for the <code>where</code> command in the Rust code, you'll see it says:</p>
<div><pre><code><span>Signature</span><span>::</span><span>build</span><span>(</span><span>"where"</span><span>)</span><span>.</span><span>required</span><span>(</span>
    <span>"condition"</span><span>,</span>
    <span>SyntaxShape</span><span>::</span><span>Math</span><span>,</span>
    <span>"the condition that must match"</span><span>,</span>
<span>)</span>
</code></pre></div><p>That is, the <code>where</code> command takes a single parameter, a <code>condition</code>, which has a SyntaxShape of Math. This shape drives the parser to use different parser logic.</p>
<p>In math mode, we can now parse an expression using operator precedence. The <code>where</code> command tells the parser to treat all of the free parameters as a single expression, to parse that expression, and to pass it as the single argument. The canonical form is more precise, though a bit more cumbersome:</p>
<div><pre><code>where { = $it.size > 10kb }
</code></pre></div><p>You can also see a few other steps thrown in, like the expansion of a short-hand path into the full variable path using <code>$it</code>.</p>
<h2 id="kebabs-and-question-marks" tabindex="-1"> Kebabs and question marks</h2>
<p>Being able to use <code>-</code> in the names of commands, sometimes called &quot;kebab case&quot;, is a handy feature and one we enjoy. In Nu, you can use it whenever you need to pass an identifier. <code>kebab-case-rules</code>.</p>
<p>In addition to kebab case, you can use <code>?</code> as part of the identifier, allowing names in a Ruby-style. We use it in the command <code>empty?</code>.</p>
<h2 id="code-growth" tabindex="-1"> Code growth</h2>
<p>Nushell currently sits at just over 55k lines of code, built from almost 1300 merged pull requests.</p>
<p><img src="@source/assets/images/year_1_kloc.png" alt="image of a Nu growing from under 20000 lines of code to over 55000 lines of code"></p>
<p><em>Growth in code size with each version</em></p>
<h1 id="surprises" tabindex="-1"> Surprises?</h1>
<p>It's funny, when you start working on a shell it's easy to think &quot;it'll be like a REPL&quot;. In fact, it's closer to creating an interactive IDE for the terminal. As people came to Nu from other shells, including shells like fish, there was a strong assumption that completions would be stellar, that it will integrate well with existing workflows, and it will support configuring the prompt, the keybindings, and more.</p>
<p>It also turns out that getting a shell correct is a lot more experimentation and a lot less following what the textbooks say. In practice, things like 'stdout' and 'stderr' are used in a variety of ways, as are the exit codes output by programs. Our initial designs started with a stricter view of these ideas, and softened over time as we saw that the real world is a much fuzzier place than we realized.</p>
<h1 id="quirks" tabindex="-1"> Quirks</h1>
<p>Nu hasn't been without a few quirks. Like any awkward growth spurt, we've had our awkward times and still have a few &quot;curious&quot; areas.</p>
<h2 id="no-variables-yet" tabindex="-1"> No variables, yet</h2>
<p>Had you a time machine and told us a year ago that we still wouldn't have variables today, we probably wouldn't have believed you. Isn't that an important part of a language?</p>
<p>Yes, it's definitely important. But we're also surprised just how far you can get without them. When you think about how you work with a piece of data, maybe you break it apart, maybe you work over the lines, or maybe you search inside of it. Each of these has a built-in way to perform the task in Nu and none require user-defined variables.</p>
<p>That, of course, has its limits. At some point you want to take the result of one batch of commands and store it for later. We're thinking through how to do this, and it comes down to a few basic questions:</p>
<ul>
<li>Should variables work in a traditional way? That is, should we fully evaluate what we pass to the variable during assignment?</li>
<li>Or, should Nu instead &quot;hold&quot; the pipeline you use during the assignment, so that you can run it whenever you want the value of the variable (possibly caching the result if possible)? This is less traditional, but more in line with a language that works lazily on potentially endless streams of data.</li>
</ul>
<p>There are other questions we still need to answer as well, like how do variables and function definitions play together? How do variables shadow each other (or even if they're allowed)?</p>
<h2 id="to-view-or-not-to-view" tabindex="-1"> To view or not to view</h2>
<p>Nushell, being a language focused on working on structured data, has a few quirks with how and when the data is viewed. For one, Nushell has multiple types of data, and different types of data may have different viewing needs. To help with this, we created <code>autoview</code>, a command that will look at the data and detect a variety of different cases. Once it's identified the shape of the data, it will call out to the viewing command that handles viewing that particular kind of data.</p>
<p>Autoview is applied to any of the data being output directly to the user, which is the case for the last step of a pipeline. For example, the pipeline <code>ls</code> is actually <code>ls | autoview</code> behind the scenes. The <code>ls</code> command outputs each row of data corresponding to the files in the directory, creating a table. These rows are passed to <code>autoview</code> which detects that we need to view a table, calls the <code>table</code> command, which then views the data. This generally feels natural, well, most of the time.</p>
<p>It makes sense that <code>ls | where size &gt; 10kb</code> doesn't output the data that flows between the two commands. If we did, it wouldn't be clear what the actual answer was. But what about in this situation: <code>ls; echo &quot;done&quot;</code>? Do we output the result of <code>ls</code> or not?</p>
<p>In the current version of Nu, we don't. We treat anything to the left of <code>;</code> as &quot;do this, finish it, but don't run 'autoview'&quot;. This let's you do a series of different kinds of processing and only then view the end result.</p>
<p>This seems reasonable until you see something like <code>echo &quot;hello&quot;; echo &quot;world&quot;</code> and only see the output &quot;world&quot; and then have to stop and think through all the steps that led to that output.</p>
<h2 id="getting-turned-around" tabindex="-1"> Getting turned around</h2>
<p>As it turns out, the terminal is small. Want to view a few columns? Generally not a problem. Want to open that random CSV file from work with 30 columns? Well, now we might have a problem. How does that 30 column file actually look when you print it out in the terminal, with a nicely drawn table?</p>
<p>For some cases, we found we could be helpful by rotating the table so that the columns go along the side instead of the top. This is especially handy when there's only one row of data as it reads more like a record.</p>
<p>That being said, it's not without its trade-offs. To some folks, rotating the table when they aren't expecting it can be very disorienting. We're still working to figure out the best defaults and heuristics.</p>
<h1 id="future-work" tabindex="-1"> Future work</h1>
<h2 id="focus" tabindex="-1"> Focus</h2>
<p>Nushell is in the stage of the project where we're still experimenting with what the language should be, how it works in practice, and finding out what its most important core values are. Rust, the language Nushell is written in, went through a similar stage. As it found its most important values, it tried on others. Once people started to create real projects in Rust, and show what was possible with this core part of the language, the design began to gel and then solidify as it arrived at 1.0. As part of that, early ideas were modified or discarded altogether.</p>
<p>Nushell will go through a similar stage. As it grows, it will find its sweet spot, its niche that it naturally fills. The design will come from features built to solve real problems, and we'll polish these features, improving their utility, error messages, documentation, and overall flow. The end result will be a sharper, more focused Nushell that feels like the tool you want in your toolbox. Some early adopters are already giving us feedback that Nushell is well on its way of meeting this role, and we're excited to continue to explore and refine as we go.</p>
<h2 id="exploring-the-data-model" tabindex="-1"> Exploring the data model</h2>
<p>There are some really juicy open questions that we'll work on in the coming year. We already have a fairly rich set of data primitives, like strings, dates, file sizes, durations, and more. Figuring out what makes sense to be built-in vs what should be added from outside of the core Nu data model will take a bit of time and finesse as we get more experience working with Nu in the real world.</p>
<h2 id="shifting-to-being-a-full-language" tabindex="-1"> Shifting to being a full language</h2>
<p>Looking at Nu today, you can see some common parts of languages like <code>if</code> or <code>open</code>, but it doesn't yet feel like there's enough syntax to build up full programs. You can't define your own commands, your own variables, and you can't build out a project across multiple files. We're working to address all of these limitations so that Nu can function not only for one-liners, but also for much more.</p>
<h2 id="getting-completions-really-good" tabindex="-1"> Getting completions <em>really</em> good</h2>
<p>A regular point of feedback is that people want completions where possible. We've got some ideas here that will allow us to have completions in far more places, including external commands (think <code>git checkout &lt;TAB&gt;</code>). We're laying the groundwork for this now, and looking forward to rolling out more functionality as we go.</p>
<h1 id="conclusion" tabindex="-1"> Conclusion</h1>
<p>We had far more support and made far more progress than we could have ever predicted a year ago. Today's Nu is something many people use as their daily driver, and it gets stronger with each release. We're excited to bring Nu to a broader audience as we continue to improve usability, grow its feature set, and refine its internals.</p>
<p>If you'd like to try out Nu, you can download it from the <a href="https://github.com/nushell/nushell/releases" target="_blank" rel="noopener noreferrer">github releases page</a>, from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>, or from the many <a href="https://repology.org/project/nushell/versions" target="_blank" rel="noopener noreferrer">other distributions</a>.</p>
<p>If you'd like to help us create Nu, please do! You can find us on the <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">Nushell github</a> and on our <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord server</a>. If you use Twitter, <a href="https://twitter.com/nu_shell" target="_blank" rel="noopener noreferrer">come say hi</a>, we'd love to chat.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.19</title>
      <link>www.nushell.sh/blog/2020-09-01-nushell_0_19.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-09-01-nushell_0_19.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.19</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-19" tabindex="-1"> Nushell 0.19</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.19 of Nu. In this version, we fill some long-lived gaps in Nu, improve completions, theming, and much more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.19 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.19.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-completion-engine-thegedge" tabindex="-1"> New completion engine (thegedge)</h2>
<p><img src="@source/assets/images/0_19_autocomplete.gif" alt="animation of Nu completion"></p>
<p>Nushell's completion suggestions are now built around the nushell parser. This means completers can now use a much richer context to provide relevant suggestions. This is still a work in progress, but one immediate improvement is that we can now complete commands, flags, and arguments in most nested structures. For example, <code>echo $(l&lt;TAB&gt;</code> will show you all commands that start with l.</p>
<p>The completion work is still very &quot;new&quot;, with parts landing in the hours before the release, so please give it a spin and let us know where we can keep improving it.</p>
<h2 id="improved-theming-fdncred" tabindex="-1"> Improved theming (fdncred)</h2>
<p><img src="@source/assets/images/0_19_heart_theme.png" alt="image of a Nu table built with hearts"></p>
<p><em>Nu, with love</em></p>
<p>We're continuing to expand what's possible with Nu's themes, allowing you to configure more areas of how your data is displayed.</p>
<p><img src="@source/assets/images/0_19_table_colors.png" alt="image of a Nu table custom colors"></p>
<p>You can also configure how the various Nu data types are displayed. You can learn about the <a href="https://github.com/nushell/nushell/pull/2449" target="_blank" rel="noopener noreferrer">new custom data colors</a> if you're interested in configuring them for yourself. There's also and example <code>config.toml</code> <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/config.toml" target="_blank" rel="noopener noreferrer">here</a> with an example of how to set the colors you like.</p>
<h2 id="table-literals-jonathandturner" tabindex="-1"> Table literals (jonathandturner)</h2>
<p>Starting with 0.19, you can now write table values like you would other kinds of values. To do so, separate a row of header names from the data using a <code>;</code>. For example:</p>
<div><pre><code>> echo [[name size]; [JT 185] [KJ 160]]
───┬──────┬──────
 # │ name │ size
───┼──────┼──────
 0 │ JT   │  185
 1 │ KJ   │  160
───┴──────┴──────
</code></pre></div><p>To be a valid table, the number of columns needs to line up.</p>
<h2 id="multiline-edits-jonathandturner" tabindex="-1"> Multiline edits (jonathandturner)</h2>
<p>In addition to the new table literals, we're opening up multiline commands. Initially, this will be for the line editor, but we'll extend this further as we improve parser support.</p>
<p>You can now also write the above:</p>
<div><pre><code>> echo [
[name, size];
[JT, 185]
[KJ, 160]
]
───┬──────┬──────
 # │ name │ size
───┼──────┼──────
 0 │ JT   │  185
 1 │ KJ   │  160
───┴──────┴──────
</code></pre></div><p>You might have noticed we now also allow commas to separate cells. These are intended to help readability and give a more familiar syntax for people coming from other languages.</p>
<h2 id="nushell-celebrates-its-first-year-in-the-public" tabindex="-1"> Nushell celebrates its first year in the public</h2>
<p>We recently sat down and wrote about <a href="http://www.nushell.sh/blog/2020/08/23/year_of_nushell.html" target="_blank" rel="noopener noreferrer">where Nushell has come over the last year</a> and some thoughts about where it's going. The blog post is a wealth of information about Nu's philosophy and direction. Well worth a read.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><code>size</code> now gives back <a href="https://github.com/nushell/nushell/pull/2473" target="_blank" rel="noopener noreferrer">simpler columns</a> (gillespiecd)</li>
<li><code>uniqe</code> has <a href="https://github.com/nushell/nushell/pull/2472" target="_blank" rel="noopener noreferrer">more examples</a> (gillespiecd)</li>
<li><code>ls</code> will tolerate more <a href="https://github.com/nushell/nushell/pull/2466" target="_blank" rel="noopener noreferrer">OS errors while listing</a> (gorogoroumaru)</li>
<li><code>cd .</code> now <a href="https://github.com/nushell/nushell/pull/2457" target="_blank" rel="noopener noreferrer">does the expected</a> (VincentWo)</li>
<li><code>math stddev</code> and <code>math variance</code> both received updates (gillespiecd)</li>
<li>List literals can <a href="https://github.com/nushell/nushell/pull/2454" target="_blank" rel="noopener noreferrer">now have commas</a> (jonathandturner)</li>
<li><code>str index-of</code> can now do a <a href="https://github.com/nushell/nushell/pull/2430" target="_blank" rel="noopener noreferrer">reverse find</a> (fdncred)</li>
<li>A new <a href="https://github.com/nushell/nushell/pull/2429" target="_blank" rel="noopener noreferrer">PowerShell plugin sample</a> (fdncred)</li>
<li>New <a href="https://github.com/nushell/nushell/pull/2428" target="_blank" rel="noopener noreferrer"><code>path dirname</code> and <code>path filestem</code> subcommands</a> (fdncred)</li>
<li>The <code>alias</code> command now has <a href="https://github.com/nushell/nushell/pull/2418" target="_blank" rel="noopener noreferrer">optional type inference</a> (bailey-layzer)</li>
<li>The line editor hinter is <a href="https://github.com/nushell/nushell/pull/2405" target="_blank" rel="noopener noreferrer">now configurable</a> (amitdev)</li>
<li><code>version</code> now includes the <a href="https://github.com/nushell/nushell/pull/2390" target="_blank" rel="noopener noreferrer">git hash when built locally</a> (coolshaurya)</li>
<li><code>touch</code> can now take <a href="https://github.com/nushell/nushell/pull/2386" target="_blank" rel="noopener noreferrer">multiple arguments</a> (jzaefferer)</li>
<li><code>date</code> now has <a href="https://github.com/nushell/nushell/pull/2383" target="_blank" rel="noopener noreferrer">subcommands</a> (gorogoroumaru)</li>
<li>A new <a href="https://github.com/nushell/nushell/pull/2381" target="_blank" rel="noopener noreferrer"><code>sleep</code> command</a> (LhKipp)</li>
<li>Improvements to <code>ls</code> and <a href="https://github.com/nushell/nushell/pull/2379" target="_blank" rel="noopener noreferrer">hidden files</a> (mattclarke)</li>
<li><code>sort-by</code> errors <a href="https://github.com/nushell/nushell/pull/2366" target="_blank" rel="noopener noreferrer">now point to mismatched types</a> (luccasmmg)</li>
<li><code>str</code> subcommands for <a href="https://github.com/nushell/nushell/pull/2360" target="_blank" rel="noopener noreferrer">various capitalizations</a> (rrichardson)</li>
<li>Time units are now <a href="https://github.com/nushell/nushell/pull/2356" target="_blank" rel="noopener noreferrer">more readable</a> (mattclarke)</li>
<li>Exit scripts from per-directory environments are now <a href="https://github.com/nushell/nushell/pull/2352" target="_blank" rel="noopener noreferrer">run in the original directory</a> (samhedin)</li>
<li>We've also got a <a href="https://github.com/nushell/contributor-book/pull/29" target="_blank" rel="noopener noreferrer">Portuguese translation of the contributor book(!!)</a> (vpperego)</li>
<li>Improved <a href="https://github.com/nushell/book/pull/126" target="_blank" rel="noopener noreferrer">RHEL installation instructions</a> (arnaldo2792)</li>
</ul>
<h2 id="more-cleanup-and-improvements-gillespiecd-jonathandturner-marcoleni-andrasio-dmeijboom-thegedge-jzaefferer-ryuichi1208-josephtlyons" tabindex="-1"> More cleanup and improvements (gillespiecd, jonathandturner, Marcoleni, andrasio, dmeijboom, thegedge, jzaefferer, ryuichi1208, JosephTLyons)</h2>
<p>Cleanups in math commands, extra bits of command help, reformating of the command list, better email samples, cleaned up spans in pipelines, fix to <code>header</code> command with mismatched columns, cleanup of dependency usage, cleaned up display config, added crossreferences in command help, subcommands are now sorted before being listed, some dockerfile improvements, nu-cli now has nu-data split off from it, column count now won't break on empty tables, wasm is now tested on CI, improvements to <code>histogram</code> and <code>count</code>,</p>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<h3 id="starship-is-now-external" tabindex="-1"> Starship is now external</h3>
<p>To help Nu focus a bit more on the core capabilities, and to free up it to update separate from Nu, Starship is now external. Once you install Starship, you can set your prompt to use starship using:</p>
<div><pre><code>> config set prompt `echo $(starship prompt)`
</code></pre></div><p>You can also set Nu to use other prompts as well. For example, if you like powerline, you can also use this:</p>
<div><pre><code>> config set prompt `echo $(powerline shell left)`
</code></pre></div><h3 id="no-more-auto-pivot-by-default" tabindex="-1"> No more auto-pivot by default</h3>
<p>Based on feedback from users, we've now disabled any auto-pivoting of tables by default. You can still re-enable this behavior in your config, but we will no longer rotate any tables without being explicitly asked.</p>
<div><pre><code># To only rotate large tables:
> config set pivot_mode auto

# To always rotate a single row to be vertical:
> config set pivot_mode always
</code></pre></div><h3 id="time-units-are-now-renamed" tabindex="-1"> Time units are now renamed</h3>
<p>To make it easier, and more readable, to work with a variety of units in the future, we've renamed the time units.</p>
<p>Instead of <code>1s</code>, you'll now use <code>1sec</code>. Most units for time now follow 3 letters instead of a single letter. You can read more about the <a href="https://github.com/nushell/nushell/pull/2356" target="_blank" rel="noopener noreferrer">full change in the PR</a>.</p>
<h3 id="header-colors" tabindex="-1"> Header colors</h3>
<p>With the new theming support, <code>header_color</code>, <code>header_bold</code>, and <code>header_align</code> have moved into the <code>[color_config]</code> section, and out of the root level, of the <code>config.toml</code> file.</p>
<h3 id="simplified-default-build" tabindex="-1"> Simplified default build</h3>
<p>While not technically a breaking change, it's worth a mention that starting with 0.19, you don't need to use <code>--features=stable</code> to get most of Nu's features. We've folded most of the common ones into the default install. For all the bells and whistles, now use <code>--features=extra</code>, which includes additional functionality not part of the original <code>stable</code> release.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>With 0.19, we see the first deeper changes to the completion engine since Nu was first released. These will grow to allow custom completions for commands, and we're looking forward to making these features available.</p>
<p>The new table literal also takes a step in the direction of data frame support in the future, a powerful feature popularized by pandas, R and other data processing libraries and languages. With it, we hope Nu will continue to grow to having a richer, more nuanced, view of data over time.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.20</title>
      <link>www.nushell.sh/blog/2020-09-22-nushell_0_20.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-09-22-nushell_0_20.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.20</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-20" tabindex="-1"> Nushell 0.20</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.20 of Nu. In this version, we're introducing some new features for working with rows, improvements to completions, and more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.20 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.20.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-functionality" tabindex="-1"> New functionality</h2>
<h3 id="each-group-and-each-window-ritobanrc" tabindex="-1"> <code>each group</code> and <code>each window</code> (ritobanrc)</h3>
<p>With 0.20, you can now work with groups of rows at a time easier than ever before.</p>
<p>For example, let's say you have a table like this:</p>
<div><pre><code>───┬───────┬─────
 # │ name  │ age
───┼───────┼─────
 0 │ Joe   │  30
 1 │ Fred  │  40
 2 │ Sally │  40
 3 │ Sean  │  42
 4 │ Gram  │  66
 5 │ Todd  │   1
───┴───────┴─────
</code></pre></div><p>And you wanted to take three rows at a time, and sum the ages. You can now do this using:</p>
<div><pre><code>... | each group 3 { get age | math sum }
───┬─────
 0 │ 110
 1 │ 109
───┴─────
</code></pre></div><p>Or, you can slide a &quot;window&quot; over the data, looking at multiple rows at a time. Let's slide a window of two rows, so that we look at each pair. We can use this to average the adjacent rows:</p>
<div><pre><code>... | each window 2 { get age | math avg }
───┬─────────
 0 │ 35.0000
 1 │ 40.0000
 2 │ 41.0000
 3 │ 54.0000
 4 │ 33.5000
───┴─────────
</code></pre></div><h3 id="completion-improvements-thegedge-rezural" tabindex="-1"> Completion improvements (thegedge, rezural)</h3>
<p>The new completer received a <a href="https://github.com/nushell/nushell/pull/2497" target="_blank" rel="noopener noreferrer">lot of bugfixes</a>, <a href="https://github.com/nushell/nushell/pull/2503" target="_blank" rel="noopener noreferrer">more fixes</a>, and <a href="https://github.com/nushell/nushell/pull/2525" target="_blank" rel="noopener noreferrer">yet more fixes</a> since its initial release with 0.19. We're continuing to improve this experience further.</p>
<p>Completions can <a href="https://github.com/nushell/nushell/pull/2556" target="_blank" rel="noopener noreferrer">now be case-insensitive</a>. This is especially useful for platforms where filepaths are case-insensitive.</p>
<h2 id="command-improvements" tabindex="-1"> Command Improvements</h2>
<ul>
<li>
<p><strong>NEW</strong> <a href="https://github.com/nushell/nushell/pull/2489" target="_blank" rel="noopener noreferrer"><code>random integer</code></a> - create random integers (smaydew)</p>
</li>
<li>
<p><strong>NEW</strong> <a href="https://github.com/nushell/nushell/pull/2495" target="_blank" rel="noopener noreferrer"><code>exec</code></a> - on Unix-based systems with exec support, you can now call the built-in <code>exec</code> command (almindor)</p>
</li>
<li>
<p><strong>NEW</strong> <a href="https://github.com/nushell/nushell/pull/2505" target="_blank" rel="noopener noreferrer"><code>mod</code></a> - a new modulo operator (jonathandturner)</p>
</li>
<li>
<p><code>mv</code> now uses the <a href="https://github.com/nushell/nushell/pull/2487" target="_blank" rel="noopener noreferrer"><code>fs_extra</code> crate for better recursive moves</a> (almindor)</p>
</li>
<li>
<p>More table themes (fdncred)</p>
</li>
<li>
<p><code>ls -l</code> now also lists the <a href="https://github.com/nushell/nushell/pull/2496" target="_blank" rel="noopener noreferrer">number of links</a> (gillespiecd)</p>
</li>
<li>
<p><code>str substring</code> can now <a href="https://github.com/nushell/nushell/pull/2499" target="_blank" rel="noopener noreferrer">optionally take a range</a> (defstryker)</p>
</li>
<li>
<p><code>char</code> gets support for <a href="https://github.com/nushell/nushell/pull/2500" target="_blank" rel="noopener noreferrer">weather characters</a> (fdncred)</p>
</li>
<li>
<p>Ranges can now <a href="https://github.com/nushell/nushell/pull/2506" target="_blank" rel="noopener noreferrer">start or end with variables</a> and can have <a href="https://github.com/nushell/nushell/pull/2509" target="_blank" rel="noopener noreferrer">decimal numbers as boundaries</a> (jonathandturner)</p>
</li>
<li>
<p>Ranges can now <a href="https://github.com/nushell/nushell/pull/2541" target="_blank" rel="noopener noreferrer">also be exclusive</a> using the <code>x..&lt;y</code> syntax (radekvit)</p>
</li>
<li>
<p><code>ps -l</code> now <a href="https://github.com/nushell/nushell/pull/2507" target="_blank" rel="noopener noreferrer">shows cpu time</a> (gillespiecd)</p>
</li>
<li>
<p><code>with-env</code> can now <a href="https://github.com/nushell/nushell/pull/2526" target="_blank" rel="noopener noreferrer">accept multiple variables</a> (itn3000)</p>
</li>
<li>
<p><code>math avg</code> will now <a href="https://github.com/nushell/nushell/pull/2529" target="_blank" rel="noopener noreferrer">also work with durations</a> (gorogoroumaru)</p>
</li>
<li>
<p><code>reduce</code> can now <a href="https://github.com/nushell/nushell/pull/2529" target="_blank" rel="noopener noreferrer">work with table values</a> (andrasio)</p>
</li>
<li>
<p>The active shell in <code>shells</code> is <a href="https://github.com/nushell/nushell/pull/2540" target="_blank" rel="noopener noreferrer">now more clearly shown</a> (gillespiecd)</p>
</li>
<li>
<p><code>sleep</code> now <a href="https://github.com/nushell/nushell/pull/2550" target="_blank" rel="noopener noreferrer">respects Ctrl+C</a> and can <a href="https://github.com/nushell/nushell/pull/2558" target="_blank" rel="noopener noreferrer">pass along the output</a> (radekvit)</p>
</li>
<li>
<p><code>str trim</code> and <code>trim</code> are <a href="https://github.com/nushell/nushell/pull/2576" target="_blank" rel="noopener noreferrer">merged</a> (gillespiecd and radekvit)</p>
</li>
<li>
<p><code>str find-replace</code> can now <a href="https://github.com/nushell/nushell/pull/2569" target="_blank" rel="noopener noreferrer">global search/replace</a> (fdncred)</p>
</li>
<li>
<p><code>open</code> now only streams for <a href="https://github.com/nushell/nushell/pull/2570" target="_blank" rel="noopener noreferrer">non-files and large files</a> (jonathandturner)</p>
</li>
<li>
<p>If supported on the platform, <code>benchmark</code> now gives <a href="https://github.com/nushell/nushell/pull/2571" target="_blank" rel="noopener noreferrer">user/system/idle times as well</a> (radekvit)</p>
</li>
<li>
<p>Ctrl+D now <a href="https://github.com/nushell/nushell/pull/2583" target="_blank" rel="noopener noreferrer">exits the current shell</a> (gillespiecd)</p>
</li>
<li>
<p><code>fetch</code> now <a href="https://github.com/nushell/nushell/pull/2587" target="_blank" rel="noopener noreferrer">supports CSV MIME types</a> (notryanb)</p>
</li>
</ul>
<h2 id="other-improvements-fdncred-gillespiecd-lidin-andrasio-radekvit-jonathandturner-coolshaurya" tabindex="-1"> Other improvements (fdncred, gillespiecd, lidin, andrasio, radekvit, jonathandturner, coolshaurya)</h2>
<p>Removed unnused dependencies, cleanups to duration, some ARM incompatibilites were fixed, some Ctrl+C issues were fixed, optimized some config reading, cleanup code in <code>get</code> and <code>nu-value-ext</code>, rustyline was upgraded (fixing a common instability in Windows), <code>help command</code> get some improvements, <code>random integer</code> got some stability fixes.</p>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<h2 id="in-and-not-in-are-now-in-and-not-in" tabindex="-1"> <code>in:</code> and <code>not-in:</code> are now <code>in</code> and <code>not-in</code></h2>
<p>In working with operators, we've removed the colon from the <code>in</code> and <code>not-in</code> operators.</p>
<h2 id="trim-and-str-trim-are-now-just-str-trim" tabindex="-1"> <code>trim</code> and <code>str trim</code> are now just <code>str trim</code></h2>
<p>We've merged the functionality and now just have the one <code>str trim</code> command.</p>
<h2 id="locale-formatted-numbers-temporarily-not-supported" tabindex="-1"> Locale-formatted numbers temporarily not supported</h2>
<p>As part of updating dependencies, we've had to temporarily disable locale-formatting numbers. We hope to fix this as dependencies update to the latest versions.</p>
<h2 id="change-in-config-location" tabindex="-1"> Change in config location</h2>
<p>We've tried to use a supported 'directories' crate, which has meant having to change until we found a supported one. This, unfortunately, means that this release moves the config location again.</p>
<p>On macOS, <code>config path</code> now points to: &quot;$HOME/Library/Application Support/org.nushell.nu/config.toml&quot;, in 0.19.0 and earlier it was: &quot;$HOME/Library/Preferences/org.nushell.nu/config.toml&quot;.</p>
<h1 id="zulip-chat" tabindex="-1"> Zulip chat</h1>
<p>We're experimenting with using Zulip for our community chat and design discussions. If you want, you can <a href="https://nushell.zulipchat.com/" target="_blank" rel="noopener noreferrer">try the server and tell us what you think</a>. If you'd rather we stick with <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">Discord</a>, you can tell us that, too 😃</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've put a <a href="https://docs.google.com/forms/d/e/1FAIpQLScEFzDh7j3jfAuVMBCQtQE-qfKAhugLCiUaaGL583QtGwz5fw/viewform?usp=sf_link" target="_blank" rel="noopener noreferrer">survey to get feedback from you about Nushell</a>. This will help us focus our efforts in the coming releases to refactor, trim, and polish Nu. Working with a large codebase is always a challenge, and recently we've been thinking through what features really make up the &quot;core&quot; Nu experience and what parts can be moved outside of Nu itself. This may mean making more things plugins, cutting back on the depedencies we use, and more. Getting your feedback makes sure we have a clear picture for what the &quot;core&quot; of Nu is to most people.</p>
<p>Even if you're just curious about Nushell but aren't using it, we'd love to hear from you.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.21</title>
      <link>www.nushell.sh/blog/2020-10-13-nushell_0_21.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-10-13-nushell_0_21.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.21</source>
      <content:encoded><![CDATA[<h1 id="nushell-0-21" tabindex="-1"> Nushell 0.21</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.21 of Nu. In this version, we introduce a charting functionality for quickly exploring data, stability improvements, and some general command cleanups.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.21 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.21.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-functionality" tabindex="-1"> New functionality</h2>
<h3 id="charting-andrasio" tabindex="-1"> Charting (andrasio)</h3>
<p><img src="@source/assets/images/0_21_bar_charts.gif" alt="animation of building different types of bar charts"></p>
<p><em>New charting functionality</em></p>
<p>Nushell now supports bar and line charts for when you want to quickly take a look at data you're exploring. You can reach these through the new <code>chart</code> command.</p>
<p>Here's an example of using <code>chart</code> to chart out contributions to a git repository:</p>
<div><pre><code>> git log "--pretty=format:%h&lt;nu>%aN&lt;nu>%s&lt;nu>%aD" | lines | split column "&lt;nu>" sha1 author desc merged_at | where author == "Andrés N. Robalino" | update merged_at { get merged_at | str to-datetime } | reverse | chart line merged_at -f "%b-%Y"
</code></pre></div><p><img src="@source/assets/images/0_21_line_chart.png" alt="line chart of github contributions"></p>
<p><em>Line chart of GitHub contributions</em></p>
<h3 id="improvements" tabindex="-1"> Improvements</h3>
<ul>
<li><code>rm -f</code> no longer complains if the path can't be found (luccasmg)</li>
<li><code>benchmark</code> now randomizes the environment for more accurate results (tumdum)</li>
<li><code>select</code> now works with columns that have spaces (JonathanArns)</li>
<li>math with duration now properly handles overflow (samualvanderwaal)</li>
<li><code>mv</code> now properly fails if you try to move a directory into itself (luccasmg)</li>
<li>smarter auto-conversion to string where possible, helping with commands like <code>clip</code> (gillespiecd)</li>
<li>added left and right padding for strings via <code>str lpad</code> and <code>str rpad</code> (fdncred)</li>
<li>blink and strikethrough added to colors (fdncred)</li>
<li>initial WASI support (jonathandturner)</li>
<li>inf/nan handled in CSV (gillespiecd)</li>
<li>new <code>xpath</code> command that can search XML documents (fdncred, andrasio)</li>
<li>rustyline paste mode no longer assumes bracketed paste (wcarss)</li>
</ul>
<h3 id="internal-improvements-fdncred-gillespiecd-jonathandturner-josephtlyons-andrasio" tabindex="-1"> Internal improvements (fdncred, gillespiecd, jonathandturner, JosephTLyons, andrasio)</h3>
<p>Windows builds now use a bigger stack, suggestions have been cleaned up, cleaned up unused files in nu-data, some redundant dependencies were simplified, variable scope was improved to make way for variables, internal names for <code>describe</code> have been improved, nu-protocol got a tidy, added example to <code>update</code>, fix for panics in <code>str to-datetime</code>, internal name of <code>to md</code> corrected, <code>empty?</code> got a rewrite, integers are now parsed as BigInt, decimals are now parsed as BigDecimal, cleanup of old files in the root, more tests added,</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We recently finished the Nushell survey and will be working on processing the results, which will help us plan the next few months. Also, if you haven't heard, Nushell is part of the <a href="http://couchbase.sh" target="_blank" rel="noopener noreferrer">new Couchbase CLI experience</a>. There are also lots of big plans for improving core parts of the system, including line editing, completions, and more. If you're interested in helping out, come chat with us on <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.22</title>
      <link>www.nushell.sh/blog/2020-11-03-nushell_0_22.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-11-03-nushell_0_22.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.22</source>
      <description> Nushell 0.22
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.22 of Nu. In this version, we introduce a new flattening command, more math commands, we remove it-expansion, and add a lot of assorted improvements.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-22" tabindex="-1"> Nushell 0.22</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.22 of Nu. In this version, we introduce a new flattening command, more math commands, we remove it-expansion, and add a lot of assorted improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.22 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.22.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-functionality" tabindex="-1"> New functionality</h2>
<h3 id="the-flatten-command-andrasio" tabindex="-1"> The <code>flatten</code> command (andrasio)</h3>
<p><img src="@source/assets/images/0_22_flatten.gif" alt="animation of using the flatten command"></p>
<p><em>New flatten command</em></p>
<p>There's now a flatten command that can take tables nested inside of the main table and flatten their contents into the main table.</p>
<h3 id="more-math-commands-morbatex-gillespiecd-fdncred" tabindex="-1"> More <code>math</code> commands (morbatex, gillespiecd, fdncred)</h3>
<p>You can now use rounding in math operations:</p>
<div><pre><code>> echo [1.5 2.3 -3.1] | math ceil
───┬────
 0 │  2
 1 │  3
 2 │ -3
───┴────

> echo [1.5 2.3 -3.1] | math floor
───┬────
 0 │  1
 1 │  2
 2 │ -4
───┴────

> echo [1.5 2.3 -3.1] | math round
───┬────
 0 │  2
 1 │  2
 2 │ -3
───┴────
</code></pre></div><h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<h3 id="remove-it-expansion-jonathandturner" tabindex="-1"> Remove it-expansion (jonathandturner)</h3>
<p>Previously, we treated the <code>$it</code> variable as a special variable that caused a command to iterate over each element in the row, for example <code>ls | echo $it.name</code> would expand to <code>ls | each { echo $it.name }</code>.</p>
<p>While this was handy in small examples, in the general case it became confusing to remember when and how it-expansion would happen.</p>
<p>In this release, we're trying an experiment of removing it-expansion.</p>
<p>Previously:</p>
<div><pre><code>ls | echo $it.name
</code></pre></div><p>Now:</p>
<div><pre><code>ls | each { echo $it.name }
</code></pre></div><p>Or, you can switch to other forms, like:</p>
<div><pre><code>ls | get name
</code></pre></div><p>We're working towards a simpler mental model, where blocks can have parameters, and <code>$it</code> is the name of the parameter if it's not specified.</p>
<p>Please try it out and let us know what you think.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li><strong>New</strong> - a <code>seq</code> command for working with sequences (fdncred)</li>
<li>bson and sqlite support added to the WiX (fdncred)</li>
<li><code>to md</code> now has a pretty flag (JosephTLyons)</li>
<li><code>ls</code> can now support other number formatting (lucassmmg)</li>
<li>Filesize formats can now be changed via <code>config</code> (fdncred)</li>
<li>Tables can now have heavy or no borders (fdncred)</li>
<li><code>math eval</code> now supports tau (rjboas)</li>
<li><code>char</code> now has simpler weather emoji (gillespiecd, fdncred)</li>
<li><code>str to-int</code> now takes an optional radix for conversion (gillespiecd)</li>
<li><code>char</code> can now print any unicode character (fdncred)</li>
<li><code>alias</code> now has optional type inference based on the recently accepted RFC (LhKipp)</li>
<li><code>ls</code> will also list inode in <code>-l</code> mode on Unix (gillespiecd)</li>
</ul>
<h2 id="internal-improvements-andrasio-jonathandturner-lhkipp-everlastingbugstopper-josephtlyons-fdncred-jjshanks" tabindex="-1"> Internal improvements (andrasio, jonathandturner, LhKipp, EverlastingBugstopper, JosephTLyons, fdncred, jjshanks)</h2>
<p>It's now easier to create column-paths inside of the Nu source, <code>alias</code> got some bugfixes, the parser got some bugfixes, fixed typo in the build message, filesize labels for bytes wasn't showing up (now fixed), internally there are now more helpers for creating the core Value type, bumped the required Rust version, bugfix for <code>;</code> endings, and remove unneeded comments.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We're continuing to work to simplify the internal representation, improve the parser, and work to add support for features like block parameters, variables, and, in the future, custom commands.</p>
<p>If you'd like to help out, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hello!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.23</title>
      <link>www.nushell.sh/blog/2020-11-24-nushell_0_23.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-11-24-nushell_0_23.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.23</source>
      <description> Nushell 0.23
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.23 of Nu. In this version, we continue improving the commands, release a new website, and talk about some of the experiments that will be making their way into Nu in future versions.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-23" tabindex="-1"> Nushell 0.23</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.23 of Nu. In this version, we continue improving the commands, release a new website, and talk about some of the experiments that will be making their way into Nu in future versions.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.23 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.23.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-website-ibraheemdev" tabindex="-1"> New website (ibraheemdev)</h2>
<p><img src="@source/assets/images/0_23_website.png" alt="picture of the new Nushell website"></p>
<p><em>The new website</em></p>
<p>We've just put up the first version of a new website that combines the front site with the books and docs all in one place. We're still continuing to polish this, so if you'd like to help out, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hello!</p>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<p>The <code>from json</code> command used to preserve the order of fields. Unfortunately, unsafe behaviors in one of the dependencies we used for this were recently found and we've had to (perhaps temporarily) remove the order preservation. We'd happily accept PRs that re-enabled this functionality.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li>Better table alignments (fdncred)</li>
<li><code>seq</code> now can do date ranges as well (fdncred)</li>
<li>More refactoring towards script support (jonathandturner)</li>
<li>Some doc naming has been cleaned up (LhKipp)</li>
<li>Lots of <a href="https://github.com/nushell/nushell/pull/2742" target="_blank" rel="noopener noreferrer"><code>path</code> fixes and improvements</a> have now landed (kubouch)</li>
<li>Build artifacts are <a href="https://github.com/nushell/nushell/pull/2747" target="_blank" rel="noopener noreferrer">now smaller</a> (fdncred)</li>
<li>Some broken docs links have been fixed (naufraghi)</li>
<li>A new <code>random decimal</code> command (smaydew)</li>
<li>Some <code>str substring</code> fixes (andrasio)</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've been splitting our efforts between the website, Nushell, and two new side projects that will feed into Nushell in the future: <a href="https://github.com/jonathandturner/nunu/" target="_blank" rel="noopener noreferrer">nunu</a> and <a href="https://github.com/jonathandturner/nunu2" target="_blank" rel="noopener noreferrer">nunu2</a>. The first is investigating some parser improvements we could do in Nushell to better support scripts and more in the future. The second experiments with variables, blocks, and evaluation. Combined, they should some signs of what we hope will be available in Nu in the weeks to come.</p>
<p>As always, if you see somewhere you'd like to help or just want to chat, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hi!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.24</title>
      <link>www.nushell.sh/blog/2020-12-15-nushell_0_24.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2020-12-15-nushell_0_24.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.24</source>
      <description> Nushell 0.24
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.24 of Nu. We've added a few new utilities, improved the existing date functionality, and more.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-24" tabindex="-1"> Nushell 0.24</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.24 of Nu. We've added a few new utilities, improved the existing date functionality, and more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.24 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.24.1" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p><strong>Note:</strong> There was a build issue discovered immediately after release, so we've also released a hotfix (0.24.1) to address this issue.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li>added a <code>hash</code> command for creating hashes (notryanb, andrasio)</li>
<li>impoved the public API by making <code>run_block</code> public (max-sixty)</li>
<li><code>version</code> now shows more information about the build (fdncred)</li>
<li><code>from csv</code> will show where errors happened if they occur (Dietr1ch)</li>
<li><code>date</code> now has some new-and-improved subcommands (jz448)</li>
<li>added a new <code>random chars</code> subcommand (gillespiecd)</li>
<li>gitpod setup got fixed (jankeronmes)</li>
<li>a new <code>math abs</code> command (xolve)</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>Our work on the big update has continued, and we're looking forward to making it available soon. We're now down to the last three known outstanding issues that need to be resolved before the work can be merged into the main Nushell source code.</p>
<p>As it lands, we'll need your help to try it out and give us feedback to help us continue to improve it.</p>
<p>As always, if you see somewhere you'd like to help or just want to chat, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hi!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.25</title>
      <link>www.nushell.sh/blog/2021-01-05-nushell_0_25.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-01-05-nushell_0_25.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.25</source>
      <description> Nushell 0.25
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.25 of Nu. It's one of the largest releases we've ever done. With it Nushell grows from being a shell to being a full scripting language as well.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-25" tabindex="-1"> Nushell 0.25</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.25 of Nu. It's one of the largest releases we've ever done. With it Nushell grows from being a shell to being a full scripting language as well.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.25 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.25.1" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<p>Lots of new features in this release. If you'd like to watch a demonstration, we can also watch a <a href="https://www.youtube.com/watch?v=PO6EW7_a1tE" target="_blank" rel="noopener noreferrer">video showing off the new features</a>.</p>
<h2 id="custom-commands" tabindex="-1"> Custom commands</h2>
<p>A long-requested feature for Nushell is to have scripting capability. A key piece of this story is the ability to make your own commands in addition to those built into Nu.</p>
<p>With 0.25, you can now make your own custom commands:</p>
<div><pre><code>def add [x, y] {
    = $x + $y
}

add 1 5
</code></pre></div><p>The definitions are created in the scope where you define them, and are visible before any of the script body runs. This allows you to have written the above like so:</p>
<div><pre><code>add 1 5

def add [x, y] {
    = $x + $y
}
</code></pre></div><p>There are a few other important features of custom commands. The first is that you can optionally add a type annotation to each parameter you take in. These type annotations tell the parser how to parse arguments given to the function and tell the type checker what is allowed to be passed in.</p>
<div><pre><code>def add [x:int, y] {
    = $x + $y
}

add "bob" 4
</code></pre></div><p>Now if you run the example, you'll see a type error like this:</p>
<div><pre><code>error: Type Error
  ┌─ shell:5:5
  │
5 │ add "bob" 4
  │     ^^^^^ Expected int, found "bob"
</code></pre></div><p>Here's a list of the types that are allowed:</p>
<ul>
<li>int - an integer</li>
<li>string - a string</li>
<li>path - a filepath</li>
<li>table - a table</li>
<li>unit - a number with a unit (like <code>10kb</code>)</li>
<li>number - an integer or decimal number</li>
<li>pattern - a glob pattern (like <code>foo*</code>)</li>
<li>range - a numeric range (like <code>1..10</code>)</li>
<li>block - a code block (like <code>{ ls }</code>)</li>
<li>any - any of the above types (this is assumed if you leave off the type)</li>
</ul>
<p><em>Note: Nushell is whitespace-significant, so the variable + ':' + type need to be united as one, without spaces.</em></p>
<p>You can also create flags for your commands:</p>
<div><pre><code>def create-item(name, --age:int) { ... }

create-item "driver" --age 20
</code></pre></div><h2 id="variables" tabindex="-1"> Variables</h2>
<p>You can now also define variables using <code>let</code>.</p>
<div><pre><code>let name = "Nushell"
echo $name
</code></pre></div><p>These variables are created in the scope they're defined in.</p>
<p>If, for example, we had written this instead:</p>
<div><pre><code>do {
    let $name = "Nu"
    echo $name   # prints "Nu"
}
echo $name       # this will fail
</code></pre></div><p>Once we leave the block above, the <code>name</code> variable is no longer visible.</p>
<p>These variables are <strong>immutable</strong> and need to be initialized as they are defined.</p>
<p>Along with variables, we also support &quot;shadowing&quot;, so that you can create a variable inside of a scope, and have it &quot;shadow&quot; the variable of the same name outside of the scope:</p>
<div><pre><code>let size = 10
do {
    let size = 5
    echo $size     # prints 5
}
echo $size         # prints 10
</code></pre></div><h2 id="environment-variables" tabindex="-1"> Environment variables</h2>
<p>You can also use <code>let-env</code> to create environment variables. Just like variables, they are created in the scope they're defined.</p>
<div><pre><code>let-env TRACE = on
echo $nu.env.TRACE   # prints 'on'
</code></pre></div><h2 id="aliases" tabindex="-1"> Aliases</h2>
<p>With 0.25, we've also changed how aliases work to be more like a text expansion, in the spirit of how aliases work in shells like Bash.</p>
<div><pre><code>alias ll = ls -l
ll -a
</code></pre></div><p>This lets you alias a larger command to a smaller name, and then also pass additional arguments and flags to it.</p>
<h2 id="source-ing" tabindex="-1"> Source-ing</h2>
<p>You can now also <code>source</code> a script, so that the definitions and code of that script runs in the current scope and context.</p>
<p>Let's say we had a file called definitions.nu:</p>
<div><pre><code># definitions.nu
def add [x, y] {
    = x + y
}
</code></pre></div><p>We can later use the definitions in this file using <code>source</code>:</p>
<div><pre><code>source definitions.nu

add 3 7
</code></pre></div><p>Like variables and definitions, the definitions we <code>source</code> are put into the current scope.</p>
<div><pre><code>do {
    source definitions.nu
    echo $(add 3 7)      # prints 10
}
echo $(add 1 11)         # errors, `add` isn't in scope here
</code></pre></div><h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<ul>
<li>Please note that the <code>alias</code> command no longer works the same way it did pre-0.25</li>
</ul>
<p>Pre-0.25, aliases worked similarly to how <code>def</code> works now. We used multiple arguments, and each was optional:</p>
<div><pre><code>alias mycmd [a b c d] { myverylongcommand $a $b $c $d }
</code></pre></div><p>With 0.25, we no longer pass parameters to alias this way. Instead, think of the aliased name being replaced by the right hand side. To update the previous alias to 0.25, we can write:</p>
<div><pre><code>alias mycmd = myverylongcommand
</code></pre></div><p>Calling <code>mycmd 1 2</code> now expands to <code>myverylongcommand 1 2</code> and then runs the expanded command.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li>the <code>which</code> command now shows if the name points to an alias or custom command (LhKipp)</li>
<li>you can configure the <a href="https://github.com/nushell/nushell/pull/2829" target="_blank" rel="noopener noreferrer">style that primities are shown</a> (fdncred)</li>
<li>optionally you can <a href="https://github.com/nushell/nushell/pull/2794" target="_blank" rel="noopener noreferrer">highlight trailing spaces</a> (fdncred)</li>
<li>we support comments now, using <code>#</code> (jonathandturner)</li>
<li>better information for debugging in <code>version</code> (gillespiecd)</li>
<li>Thanks to all those who landed general improvements too! (baoyachi, scrabsha, stormasm, max-sixty, ArturKovacs, JosephTLyons)</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>This update opens a lot of doors to what's possible with Nushell. There are a few areas we'd like to explore with it: better autocompletions, describing external commands, and more. We'd also really like to hear your feedback on the release so we can continue to improve the overall experience of using Nu.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.26</title>
      <link>www.nushell.sh/blog/2021-01-26-nushell_0_26.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-01-26-nushell_0_26.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.26</source>
      <description> Nushell 0.26
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.26 of Nu. It's a polish release with lots of improvements.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-26" tabindex="-1"> Nushell 0.26</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.26 of Nu. It's a polish release with lots of improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.26 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.26.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="rest-support-in-custom-commands-lhkipp-jonathandturner" tabindex="-1"> Rest support in custom commands (LhKipp, jonathandturner)</h2>
<p>You can now refer to a rest argument in your custom command:</p>
<div><pre><code>def my-cmd[...rest:int] {
    echo $rest | math sum
}
</code></pre></div><p>Elements of the rest are referred to with positions, like <code>$rest.1</code> for the 2nd position.</p>
<h2 id="short-flags-in-custom-commands-lhkipp" tabindex="-1"> Short flags in custom commands (LhKipp)</h2>
<p>You can now also added an optional shorthand flag to longhand flags:</p>
<div><pre><code>def foo [--bar(-b): int] {
    echo $bar
}

foo -b 10
foo --bar 10
</code></pre></div><h2 id="improved-build-times-jonathandturner-stormasm" tabindex="-1"> Improved build times (jonathandturner, stormasm)</h2>
<p>When building from scratch, you may now notice that Nushell builds slightly faster. This comes from refactoring large crates into smaller crates and replacing some of our support crates with similar crates that compile faster.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<p>I hope you like improvements. We got a <em>lot</em> of them this release.</p>
<ul>
<li>fdcnred added support for using <a href="https://github.com/nushell/nushell/pull/2973" target="_blank" rel="noopener noreferrer">multi-byte chars as padding</a>, improved <a href="https://github.com/nushell/nushell/pull/2955" target="_blank" rel="noopener noreferrer">ansi and char support</a>, improved the output of <a href="https://github.com/nushell/nushell/pull/2959" target="_blank" rel="noopener noreferrer"><code>sys</code></a>, optimized some <a href="https://github.com/nushell/nushell/pull/2937" target="_blank" rel="noopener noreferrer">regex usage</a>, removed <a href="https://github.com/nushell/nushell/pull/2924" target="_blank" rel="noopener noreferrer"><code>set</code> from Windows built-ins</a>, added support for <a href="https://github.com/nushell/nushell/pull/2906" target="_blank" rel="noopener noreferrer">comparing a string and a filepath</a></li>
<li>JosephTLyons removed <a href="https://github.com/nushell/nushell/pull/2970" target="_blank" rel="noopener noreferrer">unnecessary clones</a> and <a href="https://github.com/nushell/nushell/pull/2969" target="_blank" rel="noopener noreferrer">fixed some test macros</a></li>
<li>andrasio added <a href="https://github.com/nushell/nushell/pull/2965" target="_blank" rel="noopener noreferrer">column path support to many <code>str</code> commands</a></li>
<li>jonathandturner added <a href="https://github.com/nushell/nushell/pull/2964" target="_blank" rel="noopener noreferrer">error checking for bad rows in column paths</a>, added <a href="https://github.com/nushell/nushell/pull/2952" target="_blank" rel="noopener noreferrer">proper flushing of stdout</a>, split <a href="https://github.com/nushell/nushell/pull/2898" target="_blank" rel="noopener noreferrer">nu-cli and nu-engine</a>, treat <a href="https://github.com/nushell/nushell/pull/2890" target="_blank" rel="noopener noreferrer">the startup commands a single script</a> which improves startup times, fixed <a href="https://github.com/nushell/nushell/pull/2893" target="_blank" rel="noopener noreferrer">reading/writing of bigint/bigdecimal</a></li>
<li>baoyachi updated <a href="https://github.com/nushell/nushell/pull/2963" target="_blank" rel="noopener noreferrer">shadow-rs support</a>, removed some of the <a href="https://github.com/nushell/nushell/pull/2935" target="_blank" rel="noopener noreferrer">git support that was no longer needed</a></li>
<li>kubouch added the <a href="https://github.com/nushell/nushell/pull/2953" target="_blank" rel="noopener noreferrer">--skip flag to <code>nth</code></a></li>
<li>ahkrr fixed <a href="https://github.com/nushell/nushell/pull/2951" target="_blank" rel="noopener noreferrer">variable scopes for <code>def</code> parameters</a></li>
<li>brightly-salty <a href="https://github.com/nushell/nushell/pull/2949" target="_blank" rel="noopener noreferrer">replaces the dirs/directories supporting crates</a></li>
<li>jankeronmes fixed <a href="https://github.com/nushell/nushell/pull/2948" target="_blank" rel="noopener noreferrer">Gitpod tests</a></li>
<li>LhKipp fixed a <a href="https://github.com/nushell/nushell/pull/2945" target="_blank" rel="noopener noreferrer">parser bug that prevented invocations and ranges from being parsed correctly</a>, added <a href="https://github.com/nushell/nushell/pull/2939" target="_blank" rel="noopener noreferrer"><code>def</code> documentation</a>, updated <a href="https://github.com/nushell/nushell/pull/2925" target="_blank" rel="noopener noreferrer"><code>alias</code> docs</a></li>
<li>DivineGod moved <a href="https://github.com/nushell/nushell/pull/2927" target="_blank" rel="noopener noreferrer">keybinding_path to nu-data</a></li>
<li>Gymea fixed the <a href="https://github.com/nushell/nushell/pull/2924" target="_blank" rel="noopener noreferrer">dirs dependency in nu-engine</a>, improved the <a href="https://github.com/nushell/nushell/pull/2915" target="_blank" rel="noopener noreferrer"><code>help</code> logic when the command does not have a description</a>, fixed <a href="https://github.com/nushell/nushell/pull/2894" target="_blank" rel="noopener noreferrer"><code>which</code> output for aliases</a></li>
<li>gillespiecd added the support for <a href="https://github.com/nushell/nushell/pull/2913" target="_blank" rel="noopener noreferrer">reverse ranges</a></li>
<li>stormasm refactored <a href="https://github.com/nushell/nushell/pull/2910" target="_blank" rel="noopener noreferrer">nu-cli and split off commands into nu-command</a></li>
<li>TrevorAC99 fixed a <a href="https://github.com/nushell/nushell/pull/2880" target="_blank" rel="noopener noreferrer">rust-embed build breakage</a></li>
</ul>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<ul>
<li><code>ps</code> and <code>sys</code> are now served using a <a href="https://github.com/nushell/nushell/pull/2954" target="_blank" rel="noopener noreferrer">different supporting crate</a>. The functionality difference between the old crate and the new crate may mean a lack of fields that existed before, or different values than before (as it may be calculated differently).</li>
<li>We removed <a href="https://github.com/nushell/nushell/pull/2940" target="_blank" rel="noopener noreferrer"><code>str set</code></a>. This command was one of the first of its style and has since been replaced by more general commands like <code>update</code>.</li>
<li>Internal architecture: the Primitive case for <a href="https://github.com/nushell/nushell/pull/2887" target="_blank" rel="noopener noreferrer">lines has been removed</a>. Instead, use strings.</li>
<li>Internal architecture: the Path and Pattern primitives are now called <a href="https://github.com/nushell/nushell/pull/2889" target="_blank" rel="noopener noreferrer">FilePath and GlobPattern</a> respectively.</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've been humbled by the feedback we got on the 0.25 release and appreciate the support. Looking forward, we'll be continuing to polish the features that landed in 0.25 as we prepare for using these features in larger scripts and in custom completion logic.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.27</title>
      <link>www.nushell.sh/blog/2021-02-16-nushell_0_27.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-02-16-nushell_0_27.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.27</source>
      <description> Nushell 0.27
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.27 of Nu. This release fixes some long-standing issues with Nushell.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-27" tabindex="-1"> Nushell 0.27</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.27 of Nu. This release fixes some long-standing issues with Nushell.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.27 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.27.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="book-updates-fdncred-jonathandturner" tabindex="-1"> Book updates (fdncred, jonathandturner)</h2>
<p>The Nushell book received some much-needed updates. You'll notice new chapters and updated chapters to bring it more up-to-date with recent Nushell.</p>
<ul>
<li><a href="https://www.nushell.sh/book/configuration.html" target="_blank" rel="noopener noreferrer">Thoroughly updated configuration section</a></li>
<li><a href="https://www.nushell.sh/book/types_of_data.html" target="_blank" rel="noopener noreferrer">Updated section on data types</a></li>
<li><a href="https://www.nushell.sh/book/custom_commands.html" target="_blank" rel="noopener noreferrer">A new section on creating your own commands</a></li>
<li><a href="https://www.nushell.sh/book/aliases.html" target="_blank" rel="noopener noreferrer">An updated section on aliases</a></li>
<li><a href="https://www.nushell.sh/book/variables_and_subexpressions.html" target="_blank" rel="noopener noreferrer">A new section on working with variables and expressions</a></li>
<li><a href="https://www.nushell.sh/book/scripts.html" target="_blank" rel="noopener noreferrer">The start of a new section on writing your own Nushell scripts</a></li>
</ul>
<h1 id="improvements" tabindex="-1"> Improvements</h1>
<h2 id="new-commands-fdncred" tabindex="-1"> New commands (fdncred)</h2>
<ul>
<li>A new <code>term size</code> commands <a href="https://github.com/nushell/nushell/pull/3038" target="_blank" rel="noopener noreferrer">lets you get the current size of the terminal</a></li>
<li>New <a href="https://github.com/nushell/nushell/pull/2976" target="_blank" rel="noopener noreferrer"><code>pow</code> operator</a></li>
<li>New <a href="https://github.com/nushell/nushell/pull/2975" target="_blank" rel="noopener noreferrer">modulus(<code>%</code>) operator</a></li>
</ul>
<h2 id="functionality-jonathandturner-watsonthink-ilius-andrasio-qwanve-fdncred-ammkrn" tabindex="-1"> Functionality (jonathandturner, WatsonThink, ilius, andrasio, Qwanve, fdncred, ammkrn)</h2>
<ul>
<li>Tables now <a href="https://github.com/nushell/nushell/pull/3061" target="_blank" rel="noopener noreferrer">truncate instead of crashing when too large</a></li>
<li><code>source</code> command now can <a href="https://github.com/nushell/nushell/pull/3059" target="_blank" rel="noopener noreferrer">use tilde in the path</a></li>
<li><code>let-env</code> can now shadow <a href="https://github.com/nushell/nushell/pull/3057" target="_blank" rel="noopener noreferrer">environment variables</a> in addition to adding new ones</li>
<li>Prompts can now call <a href="https://github.com/nushell/nushell/pull/3056" target="_blank" rel="noopener noreferrer">external commands on initial startup</a></li>
<li>You can now configure the <a href="https://github.com/nushell/nushell/pull/3045" target="_blank" rel="noopener noreferrer">file size standard to use</a></li>
<li>Strings can now be passed in where <a href="https://github.com/nushell/nushell/pull/3048" target="_blank" rel="noopener noreferrer">column-paths were expected</a> and <a href="https://github.com/nushell/nushell/pull/3016" target="_blank" rel="noopener noreferrer">here</a></li>
<li>More <a href="https://github.com/nushell/nushell/pull/3035" target="_blank" rel="noopener noreferrer">file size types have been added</a></li>
<li><code>sort-by</code> can now <a href="https://github.com/nushell/nushell/pull/3025" target="_blank" rel="noopener noreferrer">reverse sort</a></li>
<li><code>which</code> can now take <a href="https://github.com/nushell/nushell/pull/3024" target="_blank" rel="noopener noreferrer">multiple applications</a></li>
<li><code>ps -l</code> now has <a href="https://github.com/nushell/nushell/pull/3015" target="_blank" rel="noopener noreferrer">a cleaner output when the parent is missing</a></li>
<li><code>select</code> can no longer <a href="https://github.com/nushell/nushell/pull/3012" target="_blank" rel="noopener noreferrer">select the same column twice</a></li>
<li><code>to-md --per-element</code> now gives you <a href="https://github.com/nushell/nushell/pull/2997" target="_blank" rel="noopener noreferrer">more fine-grained control over the markdown output</a></li>
<li>A new <a href="https://github.com/nushell/nushell/pull/2995" target="_blank" rel="noopener noreferrer"><code>$nothing</code> built-in variable to help check for the existence of a value</a></li>
<li><code>str from</code> can convert <a href="https://github.com/nushell/nushell/pull/2977" target="_blank" rel="noopener noreferrer">more things to strings</a></li>
<li>Booleans are now shown as <a href="https://github.com/nushell/nushell/pull/3043" target="_blank" rel="noopener noreferrer">true/false instead of Yes/No</a></li>
</ul>
<h2 id="internal-stormasm-ilius-fdncred-lhkipp-rreverser-jonathandturner" tabindex="-1"> Internal (stormasm, ilius, fdncred, LhKipp, RReverser, jonathandturner)</h2>
<ul>
<li>Some <a href="https://github.com/nushell/nushell/pull/3053" target="_blank" rel="noopener noreferrer">comment parsing improvements</a></li>
<li>The <code>block</code> function is now <a href="https://github.com/nushell/nushell/pull/3047" target="_blank" rel="noopener noreferrer"><code>parse_block</code></a></li>
<li>More <a href="https://github.com/nushell/nushell/pull/3000" target="_blank" rel="noopener noreferrer">Value helpers were added</a></li>
<li><a href="https://github.com/nushell/nushell/pull/2986" target="_blank" rel="noopener noreferrer">Parser cleanup for handling <code>def</code></a></li>
<li>The <a href="https://github.com/nushell/nushell/pull/2983" target="_blank" rel="noopener noreferrer">WASI build should now be working again</a></li>
<li>File size is <a href="https://github.com/nushell/nushell/pull/2984" target="_blank" rel="noopener noreferrer">now a big int</a></li>
</ul>
<h2 id="documentation-watzon-ahkrr-lhkipp-andy-python-programmer-diogomafra" tabindex="-1"> Documentation (watzon, ahkrr, LhKipp, Andy-Python-Programmer, diogomafra)</h2>
<ul>
<li>Sample config has <a href="https://github.com/nushell/nushell/pull/3060" target="_blank" rel="noopener noreferrer">gotten an update</a> and <a href="https://github.com/nushell/nushell/pull/3031" target="_blank" rel="noopener noreferrer">here</a></li>
<li>Some <a href="https://github.com/nushell/nushell/pull/3052" target="_blank" rel="noopener noreferrer">README links got updated</a></li>
<li>More <a href="https://github.com/nushell/nushell/pull/3013" target="_blank" rel="noopener noreferrer">README updates</a> and <a href="https://github.com/nushell/nushell/pull/2996" target="_blank" rel="noopener noreferrer">here</a></li>
<li>README now shows <a href="https://github.com/nushell/nushell/pull/2993" target="_blank" rel="noopener noreferrer">contributor icons</a></li>
</ul>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<ul>
<li>Booleans are now shown as <a href="https://github.com/nushell/nushell/pull/3043" target="_blank" rel="noopener noreferrer">true/false instead of Yes/No</a></li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're hard at work at putting together the proposed features for Nushell 1.0, which will help guide the work to get there. While there's still much work to do to achieve a 1.0 release, this proposal will let the community help refine and correct the direction. We're looking forward to kicking this off in the coming weeks.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.28</title>
      <link>www.nushell.sh/blog/2021-03-09-nushell_0_28.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-03-09-nushell_0_28.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.28</source>
      <description> Nushell 0.28
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.28 of Nu. In this release we've added new commands for working with tables, paths, and lots of general feature improvements.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-28" tabindex="-1"> Nushell 0.28</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.28 of Nu. In this release we've added new commands for working with tables, paths, and lots of general feature improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.28 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.28.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="rotate-andrasio" tabindex="-1"> Rotate (andrasio)</h3>
<p>With the new <code>rotate</code> command, we have an easier way to turn rows to columns and columns to rows.</p>
<div><pre><code>> echo [[col1, col2, col3]; [cell1, cell2, cell3] [cell4, cell5, cell6]] | rotate
───┬─────────┬─────────┬─────────
 # │ Column0 │ Column1 │ Column2
───┼─────────┼─────────┼─────────
 0 │ cell4   │ cell1   │ col1
 1 │ cell5   │ cell2   │ col2
 2 │ cell6   │ cell3   │ col3
───┴─────────┴─────────┴─────────
</code></pre></div><p>You can also rotate counter-clockwise:</p>
<div><pre><code>> echo [[col1, col2, col3]; [cell1, cell2, cell3] [cell4, cell5, cell6]] | rotate counter-clockwise
───┬─────────┬─────────┬─────────
 # │ Column0 │ Column1 │ Column2
───┼─────────┼─────────┼─────────
 0 │ col3    │ cell3   │ cell6
 1 │ col2    │ cell2   │ cell5
 2 │ col1    │ cell1   │ cell4
───┴─────────┴─────────┴─────────
</code></pre></div><h3 id="column-rolling-andrasio" tabindex="-1"> Column rolling (andrasio)</h3>
<p>You are now able to move columns around in the same way you may do a bitwise-rotate.</p>
<div><pre><code>> echo '00000100'
| split chars
| each { str to-int }
| rotate counter-clockwise _
| reject _
| rename bit1 bit2 bit3 bit4 bit5 bit6 bit7 bit8
| roll column 3

───┬──────┬──────┬──────┬──────┬──────┬──────┬──────┬──────
 # │ bit4 │ bit5 │ bit6 │ bit7 │ bit8 │ bit1 │ bit2 │ bit3
───┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────
 0 │    0 │    0 │    1 │    0 │    0 │    0 │    0 │    0
───┴──────┴──────┴──────┴──────┴──────┴──────┴──────┴──────
</code></pre></div><h3 id="dropping-columns-andrasio" tabindex="-1"> Dropping columns (andrasio)</h3>
<p>The new <code>drop column</code> subcommand also gives you the ability to remove the last column from a table.</p>
<div><pre><code>> echo [[lib, extension]; [nu-core, rs] [rake, rb]] | drop column
─────────
   lib
─────────
 nu-core
 rake
─────────
</code></pre></div><h3 id="ansi-strip-fdncred" tabindex="-1"> ANSI strip (fdncred)</h3>
<p>With the new <a href="https://github.com/nushell/nushell/pull/3095" target="_blank" rel="noopener noreferrer"><code>ansi strip</code> command</a>, you can remove ansi sequences from a string of text.</p>
<h3 id="path-joining-kubouch" tabindex="-1"> Path joining (kubouch)</h3>
<p>We now have a <code>path join</code> command which allows you to join part of a path to an existing path following the path conventions for your platform.</p>
<p>For example, on Windows:</p>
<div><pre><code>> echo 'C:\Users\viking' | path join spam.txt
</code></pre></div><p>Or Unix-based systems:</p>
<div><pre><code>> echo '/home/viking' | path join spam.txt
</code></pre></div><h2 id="functionality" tabindex="-1"> Functionality</h2>
<h3 id="experimental-built-in-table-paging-rezural" tabindex="-1"> (Experimental) Built-in table paging (rezural)</h3>
<p>If you build Nushell with the optional <code>--features=table-pager</code> you'll see some new capabilities we're working on that will let you <a href="https://github.com/nushell/nushell/pull/3128" target="_blank" rel="noopener noreferrer">view a table with a built-in pager</a>.</p>
<p>In the future, we'll likely move this to its own command so that you can enable paging in much the same way you would use <code>less</code> in other shells.</p>
<p>Let us know how this works for you.</p>
<h3 id="timing-your-pipelines-fdncred" tabindex="-1"> Timing your pipelines (fdncred)</h3>
<p>You can now see the time spent in the last set of commands you sent to Nushell by checking the new <code>$nu.env.CMD_DURATION</code> environment variable.</p>
<p>This will let you, for example, add timings to your prompts for all your fancy prompt needs.</p>
<h3 id="improved-matches-ilius-kubouch" tabindex="-1"> Improved matches (ilius, kubouch)</h3>
<p>The <code>match</code> command has a <a href="https://github.com/nushell/nushell/pull/3111" target="_blank" rel="noopener noreferrer">few new flags</a> to give you more control over how you'd like to match text.</p>
<p>You're now also able to <a href="https://github.com/nushell/nushell/pull/3114" target="_blank" rel="noopener noreferrer">invert the match</a>.</p>
<h3 id="fetch-now-uses-the-latest-surf-and-rustls-fdncred" tabindex="-1"> Fetch now uses the latest surf and rustls (fdncred)</h3>
<p>We're experimenting with moving away from openssl for some commands. In this release, we've moved <a href="https://github.com/nushell/nushell/pull/3120" target="_blank" rel="noopener noreferrer"><code>fetch</code> to use the latest surf</a>, which gives us the ability to use rustls instead of openssl. Please try this out and let us know how it works for you.</p>
<h3 id="cleaner-help-output-kubouch" tabindex="-1"> Cleaner help output (kubouch)</h3>
<p>We've cleaned up the help, so that there's now a difference between <a href="https://github.com/nushell/nushell/pull/3124" target="_blank" rel="noopener noreferrer">the synopsis for a command and its full help text</a>. This makes <code>help commands</code> output a table that's much easier to read.</p>
<h3 id="json-order-is-now-preserved-again-andrasio" tabindex="-1"> JSON order is now preserved, again (andrasio)</h3>
<p>We previously supported preserving the order of fields of JSON when serialized and deserialized, but as we changed and updated dependencies we lost this ability.</p>
<p>In this release, it's been re-added so that <a href="https://github.com/nushell/nushell/pull/3126" target="_blank" rel="noopener noreferrer">fields will preserve order</a> once again.</p>
<h3 id="exit-codes-tiffany352" tabindex="-1"> Exit codes (tiffany352)</h3>
<p>The <code>exit</code> command can now <a href="https://github.com/nushell/nushell/pull/3132" target="_blank" rel="noopener noreferrer">optionally take an exit code</a>, allowing you to quit a nushell with an exit code that can be detect outside of the shell.</p>
<h3 id="vscode-extension-is-now-published-fdncred" tabindex="-1"> VSCode extension is now published (fdncred)</h3>
<p>VSCode users can now use the VSCode extension for Nushell <a href="https://marketplace.visualstudio.com/items?itemName=TheNuProjectContributors.vscode-nushell-lang" target="_blank" rel="noopener noreferrer">right from the VSCode marketplace</a>!</p>
<h2 id="internal" tabindex="-1"> Internal</h2>
<ul>
<li>Improved <a href="https://github.com/nushell/nushell/pull/3078" target="_blank" rel="noopener noreferrer">tests for nu-env</a> (andrasio)</li>
<li>We now remove the <a href="https://github.com/nushell/nushell/pull/3084" target="_blank" rel="noopener noreferrer">current directory (<code>.</code>) from paths</a> where possible (iCodeSometime)</li>
<li>We've begun a multi-step process of simplifying how tables are rendered. The first step is to <a href="https://github.com/nushell/nushell/pull/3088" target="_blank" rel="noopener noreferrer">convert drawing table to return strings</a> (rezural).</li>
<li>We've <a href="https://github.com/nushell/nushell/pull/3089" target="_blank" rel="noopener noreferrer">vendored an ansi term crate</a> to make it easier to improve. This helped make <a href="https://github.com/nushell/nushell/pull/3100" target="_blank" rel="noopener noreferrer">'Light' colors</a> easier to reach. (fdncred)</li>
<li>We've removed some <a href="https://github.com/nushell/nushell/pull/3091" target="_blank" rel="noopener noreferrer">unnecessary dependencies</a> (stormasm)</li>
<li>Some general <a href="https://github.com/nushell/nushell/pull/3093" target="_blank" rel="noopener noreferrer">improvements to parser logic</a> (ilius)</li>
<li>Some crashes in <a href="https://github.com/nushell/nushell/pull/3099" target="_blank" rel="noopener noreferrer"><code>flatten</code> and docs were fixed</a> (stormasm)</li>
<li>We're now using the <a href="https://github.com/nushell/nushell/pull/3112" target="_blank" rel="noopener noreferrer">host for output</a> rather than <code>std::err</code> for better portability. (LhKipp)</li>
<li>Improved ergnomics <a href="https://github.com/nushell/nushell/pull/3133" target="_blank" rel="noopener noreferrer">when working with $nothing</a> (fdncred)</li>
<li>Fixed some <a href="https://github.com/nushell/nushell/pull/3140" target="_blank" rel="noopener noreferrer">locking logic when working with output</a> (ahkrr)</li>
<li>Bel and backspace are <a href="https://github.com/nushell/nushell/pull/3144" target="_blank" rel="noopener noreferrer">now part of <code>char</code></a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/3146" target="_blank" rel="noopener noreferrer">Trash functionality has been fixed</a> (tw4452852)</li>
<li>Today's crates.io release was also <a href="https://github.com/nushell/nu_scripts/blob/main/nu_release.nu" target="_blank" rel="noopener noreferrer">fully automated, thanks to Nushell</a> (jonathandturner)</li>
</ul>
<h2 id="documentation" tabindex="-1"> Documentation</h2>
<ul>
<li>Instructions for building and <a href="https://github.com/nushell/nushell.github.io/pull/109" target="_blank" rel="noopener noreferrer">running the website locally</a> (jakevossen5)</li>
<li>Updates to the <a href="https://github.com/nushell/nushell.github.io/pull/108" target="_blank" rel="noopener noreferrer">docker instructions</a> (jakevossen5)</li>
<li>Improvements to the <a href="https://github.com/nushell/nushell.github.io/pull/107" target="_blank" rel="noopener noreferrer">environment documentation</a> (stormasm)</li>
<li>Fixed typo in the <a href="https://github.com/nushell/nushell.github.io/pull/106" target="_blank" rel="noopener noreferrer">textview docs</a> (davidmalcolm)</li>
<li>Corrected <a href="https://github.com/nushell/nushell.github.io/pull/104" target="_blank" rel="noopener noreferrer">Nushell version in excerpt</a> (iCodeSometime)</li>
<li>Fixed a typo in the <a href="https://github.com/nushell/nushell.github.io/pull/103" target="_blank" rel="noopener noreferrer">PowerShell comparison</a> (JTurtl3)</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're continuing our 1.0 planning and hope to publish a proposal soon for your feedback. There are also some on-going experiments, including a new <a href="https://github.com/jonathandturner/reedline" target="_blank" rel="noopener noreferrer">line editor</a> that are offering good insights into better ways of working with the terminal.</p>
<p>And, of course, we hear the feedback about improving completions. We're very much interested in beginning experiments here that will lead to a far better experience as we approach 1.0.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.29</title>
      <link>www.nushell.sh/blog/2021-03-30-nushell_0_29.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-03-30-nushell_0_29.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.29</source>
      <description> Nushell 0.29
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.29 of Nu. This release adds more polish for paths, streaming, and more.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-29" tabindex="-1"> Nushell 0.29</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.29 of Nu. This release adds more polish for paths, streaming, and more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.29 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.29.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<ul>
<li>notryanb added the <a href="https://github.com/nushell/nushell/pull/3197" target="_blank" rel="noopener noreferrer"><code>hash md5</code> command</a></li>
</ul>
<h2 id="functionality" tabindex="-1"> Functionality</h2>
<ul>
<li>John-Goff <a href="https://github.com/nushell/nushell/pull/3166" target="_blank" rel="noopener noreferrer">renamed the <code>count</code> command to <code>length</code></a></li>
<li>ahkrr bumped <a href="https://github.com/nushell/nushell/pull/3167" target="_blank" rel="noopener noreferrer">rustyline to 8.0.0</a></li>
<li>fdncred extended <a href="https://github.com/nushell/nushell/pull/3195" target="_blank" rel="noopener noreferrer"><code>char</code> to allow for more complex unicode</a></li>
<li>fdncred also added support to <a href="https://github.com/nushell/nushell/pull/3210" target="_blank" rel="noopener noreferrer"><code>cd ~/dir</code></a></li>
<li>gonatz added <a href="https://github.com/nushell/nushell/pull/3201" target="_blank" rel="noopener noreferrer">forward slash autocompletion for Windows</a></li>
<li>stormasm added the <a href="https://github.com/nushell/nushell/pull/3203" target="_blank" rel="noopener noreferrer"><code>$scope</code> variable to see into the current scope</a>. The currently only supports seeing the aliases in scope.</li>
<li>DonnotPanic added <a href="https://github.com/nushell/nushell/pull/3207" target="_blank" rel="noopener noreferrer">timezone support for time conversions</a></li>
</ul>
<h2 id="internal" tabindex="-1"> Internal</h2>
<ul>
<li>jonathandturner fixed an issue with <a href="https://github.com/nushell/nushell/pull/3153" target="_blank" rel="noopener noreferrer">input stream buffering for text</a></li>
<li>fdncred updated the <a href="https://github.com/nushell/nushell/pull/3154" target="_blank" rel="noopener noreferrer"><code>fetch</code> command for better portability</a></li>
<li>andrasio improved <a href="https://github.com/nushell/nushell/pull/3179" target="_blank" rel="noopener noreferrer">the test playground</a></li>
<li>andrasio also improved <a href="https://github.com/nushell/nushell/pull/3217" target="_blank" rel="noopener noreferrer">test coverage for context and more</a></li>
<li>nibon7 fixed <a href="https://github.com/nushell/nushell/pull/3184" target="_blank" rel="noopener noreferrer">running tests with <code>--release</code></a></li>
<li>ahkrr improved <a href="https://github.com/nushell/nushell/pull/3189" target="_blank" rel="noopener noreferrer">prompt reliability</a></li>
</ul>
<h2 id="documentation" tabindex="-1"> Documentation</h2>
<ul>
<li>suzanje fixed some broken <a href="https://github.com/nushell/nushell/pull/3198" target="_blank" rel="noopener noreferrer">contributor book links</a></li>
<li>mvolkmann fixed a <a href="https://github.com/nushell/nushell/pull/3216" target="_blank" rel="noopener noreferrer">typo in the help text</a></li>
</ul>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<ul>
<li>The <a href="https://github.com/nushell/nushell/pull/3166" target="_blank" rel="noopener noreferrer"><code>count</code> command is now <code>length</code></a> for better discoverability.</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>There are a few different on-going projects to help Nushell. New this week is <a href="https://github.com/jonathandturner/enginep/tree/gradient_deep_dive_wip" target="_blank" rel="noopener noreferrer">engine-p</a>, an experimental engine that explores what an iterator+parallel approach would be like in contrast to Nu's current async stream approach. Early results are promising here, as the engine appears to perform better while also using a simpler set of patterns, which should help new contributors.</p>
<p>We've also posted our <a href="https://github.com/nushell/rfcs/pull/6" target="_blank" rel="noopener noreferrer">proposal for shipping 1.0</a>. This lays out the proposed path for Nushell to reach 1.0 and beyond, including the features Nushell will ship with at 1.0. If you'd like to give us feedback, we'd love to have it. You can add comments directly on the proposal and we'll gather the feedback and use it in the next round of revisions.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.30</title>
      <link>www.nushell.sh/blog/2021-04-20-nushell_0_30.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-04-20-nushell_0_30.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.30</source>
      <description> Nushell 0.30
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.30 of Nu. This release adds big improvements to performance and simplicity of the engine.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-30" tabindex="-1"> Nushell 0.30</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.30 of Nu. This release adds big improvements to performance and simplicity of the engine.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.30 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.30.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="performance-improvements-jonathandturner" tabindex="-1"> Performance improvements (jonathandturner)</h2>
<p><img src="@source/assets/images/0_30_0_speed.png" alt="image of the 0.30 release being 8-20 times faster than 0.29"></p>
<p><em>Nu, now noticeably faster</em></p>
<p>The 0.30 release is the first to include the engine-p experimental approaches that we mentioned in the last release. These changes streamline the engine, moving it from <a href="https://github.com/nushell/nushell/pull/3270" target="_blank" rel="noopener noreferrer">async streams to iterators</a>, <a href="https://github.com/nushell/nushell/pull/3281" target="_blank" rel="noopener noreferrer">simplifying how commands handle their arguments</a>, and how <a href="https://github.com/nushell/nushell/pull/3304" target="_blank" rel="noopener noreferrer">outputs are passed from one command to the next</a>.</p>
<p>The end result is an engine that is both simpler and much faster. In the above example we run two different benchmarks. The first is a run of <a href="https://github.com/nushell/nu_scripts/blob/main/coloring/gradient.nu" target="_blank" rel="noopener noreferrer">this script</a> in the Nushell script repo. The second is a tight processing loop over many 10 million small records: <code>echo 1..10000000 | prepend 777 | append 555 | where $it &gt; 7 | length</code>.</p>
<p>Though the performance numbers are still early, they're extremely promising.</p>
<h2 id="new-built-in-variable-scope-stevenbarragan-fdncred" tabindex="-1"> New built-in variable <code>$scope</code> (stevenbarragan, fdncred)</h2>
<p>We're experimenting with a new built-in variable called <code>$scope</code>. This gives you access to definitions in scope, including variables.</p>
<h2 id="new-commands" tabindex="-1"> New Commands</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/3239" target="_blank" rel="noopener noreferrer"><code>math sqrt</code></a> (luccasmmg)</li>
<li><a href="https://github.com/nushell/nushell/pull/3253" target="_blank" rel="noopener noreferrer"><code>any?</code> and <code>all?</code></a> (andrasio)</li>
<li><a href="https://github.com/nushell/nushell/pull/3256" target="_blank" rel="noopener noreferrer"><code>path parse</code>, <code>path join</code>, and <code>path split</code></a> (kubouch)</li>
<li><a href="https://github.com/nushell/nushell/pull/3279" target="_blank" rel="noopener noreferrer"><code>into int</code></a> (efx)</li>
<li><a href="https://github.com/nushell/nushell/pull/3327" target="_blank" rel="noopener noreferrer"><code>query json</code></a> (fdncred). This is a new experimental query function as we explore how we'd like to do data querying in nushell.</li>
</ul>
<h2 id="documentation-andrasio" tabindex="-1"> Documentation (andrasio)</h2>
<p>We have a new <a href="https://github.com/nushell/nushell/pull/3326" target="_blank" rel="noopener noreferrer">guide on how to create Nushell commands</a>.</p>
<h2 id="improvements-lhkipp-luccasmmg-waldyrious-ilius-fdncred-andrasio-donnutpanic-ammrkn-jonathandturner-schrieveslaach-daschl-nightscape" tabindex="-1"> Improvements (LhKipp, luccasmmg, waldyrious, ilius, fdncred, andrasio, DonnutPanic, ammrkn, jonathandturner, schrieveslaach, daschl, nightscape)</h2>
<ul>
<li>Lots of internal optimization updates: <a href="https://github.com/nushell/nushell/pull/3289" target="_blank" rel="noopener noreferrer">1</a>, <a href="https://github.com/nushell/nushell/pull/3292" target="_blank" rel="noopener noreferrer">2</a>, <a href="https://github.com/nushell/nushell/pull/3300" target="_blank" rel="noopener noreferrer">3</a>, <a href="https://github.com/nushell/nushell/pull/3301" target="_blank" rel="noopener noreferrer">4</a>, <a href="https://github.com/nushell/nushell/pull/3306" target="_blank" rel="noopener noreferrer">5</a></li>
<li>Now <a href="https://github.com/nushell/nushell/pull/3314" target="_blank" rel="noopener noreferrer">appends to the history instead of replacing it</a></li>
<li>API improvements to <a href="https://github.com/nushell/nushell/pull/3309" target="_blank" rel="noopener noreferrer">allow embedded nushell to have custom commands</a></li>
<li>Internal implementation <a href="https://github.com/nushell/nushell/pull/3310" target="_blank" rel="noopener noreferrer">improvements to <code>which</code></a>, <a href="https://github.com/nushell/nushell/pull/3312" target="_blank" rel="noopener noreferrer">to <code>all</code></a>, <a href="https://github.com/nushell/nushell/pull/3315" target="_blank" rel="noopener noreferrer">to <code>math</code> commands</a>, <a href="https://github.com/nushell/nushell/pull/3320" target="_blank" rel="noopener noreferrer">to <code>to</code> and <code>from</code> commands</a>, <a href="https://github.com/nushell/nushell/pull/3325" target="_blank" rel="noopener noreferrer">to <code>compact</code></a></li>
<li>Updated <a href="https://github.com/nushell/nushell/pull/3322" target="_blank" rel="noopener noreferrer"><code>echo ..</code> to no longer prints integers</a></li>
<li>Removed <a href="https://github.com/nushell/nushell/pull/3311" target="_blank" rel="noopener noreferrer">help flags from the <code>$scope.commands</code> display</a></li>
<li>Removed the <a href="https://github.com/nushell/nushell/pull/3308" target="_blank" rel="noopener noreferrer">dupes in get_commands/get_command_names</a></li>
<li>Fixes to <a href="https://github.com/nushell/nushell/pull/3305" target="_blank" rel="noopener noreferrer">viewing Value as a filepath</a></li>
<li>Move <a href="https://github.com/nushell/nushell/pull/3294" target="_blank" rel="noopener noreferrer">arg deserialization out of <code>str</code></a></li>
<li>Cleaned up <a href="https://github.com/nushell/nushell/pull/3297" target="_blank" rel="noopener noreferrer">error handling</a></li>
<li>Fixes to how <a href="https://github.com/nushell/nushell/pull/3303" target="_blank" rel="noopener noreferrer">rest arguments are handled</a></li>
<li>Fixes to <a href="https://github.com/nushell/nushell/pull/3293" target="_blank" rel="noopener noreferrer"><code>ansi rgb fg</code></a></li>
<li>Updated <a href="https://github.com/nushell/nushell/pull/3291" target="_blank" rel="noopener noreferrer">the default prompt</a></li>
<li>Autoview and table now <a href="https://github.com/nushell/nushell/pull/3287" target="_blank" rel="noopener noreferrer">read from the in-memory config</a></li>
<li>Do not <a href="https://github.com/nushell/nushell/pull/3286" target="_blank" rel="noopener noreferrer">store whitespace entries in the history</a></li>
<li>Simplified <a href="https://github.com/nushell/nushell/pull/3283" target="_blank" rel="noopener noreferrer">internal handling of the runnable context</a></li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/3280" target="_blank" rel="noopener noreferrer">external output busy-waiting</a></li>
<li>Remove <a href="https://github.com/nushell/nushell/pull/3278" target="_blank" rel="noopener noreferrer"><code>rm</code>'s trash flag if it's not supported</a></li>
<li>Fixed a <a href="https://github.com/nushell/nushell/pull/3271" target="_blank" rel="noopener noreferrer">panic when timestamp is out of range</a></li>
<li>Sysinfo dependency has been <a href="https://github.com/nushell/nushell/pull/3267" target="_blank" rel="noopener noreferrer">updated</a></li>
<li>Config commands <a href="https://github.com/nushell/nushell/pull/3265" target="_blank" rel="noopener noreferrer">are now more unified internally</a></li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3257" target="_blank" rel="noopener noreferrer">TiB and PiB units</a></li>
<li>Improved <a href="https://github.com/nushell/nushell/pull/3249" target="_blank" rel="noopener noreferrer">auto-suggestion for aliases and custom commands</a></li>
<li>More <a href="https://github.com/nushell/nushell/pull/3247" target="_blank" rel="noopener noreferrer">logging and tests</a></li>
<li>Now <a href="https://github.com/nushell/nushell/pull/3243" target="_blank" rel="noopener noreferrer">parses decimal units</a></li>
<li>Use <a href="https://github.com/nushell/nushell/pull/3242" target="_blank" rel="noopener noreferrer">one main function to run scripts</a></li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/3235" target="_blank" rel="noopener noreferrer">errors when deleting a FIFO</a></li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/3234" target="_blank" rel="noopener noreferrer">capitalizations of Unicode</a></li>
<li>Fixes to <a href="https://github.com/nushell/nushell/pull/3335" target="_blank" rel="noopener noreferrer">path sync'ing</a>, <a href="https://github.com/nushell/nushell/pull/3336" target="_blank" rel="noopener noreferrer">more path fixes</a>, and <a href="https://github.com/nushell/nushell/pull/3339" target="_blank" rel="noopener noreferrer">improvements to dynamic blocks</a></li>
</ul>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<h3 id="removed-help-shell" tabindex="-1"> Removed help shell</h3>
<p>We have removed the <a href="https://github.com/nushell/nushell/pull/3258" target="_blank" rel="noopener noreferrer">help shell</a> to simplify code.</p>
<h3 id="removed-ambiguous-units" tabindex="-1"> Removed ambiguous units</h3>
<p>We've also removed <a href="https://github.com/nushell/nushell/pull/3262" target="_blank" rel="noopener noreferrer"><code>yr</code> and <code>mon</code> units</a> because their meaning was too confusing.</p>
<h3 id="new-set-of-default-features" tabindex="-1"> New set of default features</h3>
<p>The <a href="https://github.com/nushell/nushell/pull/3288" target="_blank" rel="noopener noreferrer">default feature list is now simpler</a>. This means that doing a <code>cargo install</code> will give you fewer of the plugins than previously. We're still working to refine this list. Please do give feedback if these changes negatively impact you.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>The new engine and performance improvements should open the door for even more improvements in the future. These improvements also make it easier to explore adding more sophisticated completion logic in the future, as that logic could be written in Nushell itself.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.31</title>
      <link>www.nushell.sh/blog/2021-05-11-nushell_0_31.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-05-11-nushell_0_31.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.31</source>
      <description> Nushell 0.31
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.31 of Nu. This release includes continued polish of the engine and commands.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-31" tabindex="-1"> Nushell 0.31</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.31 of Nu. This release includes continued polish of the engine and commands.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.31 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.31.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<p>This release is largely around polish. We've continued to improve Nushell's engine to work in the more streamlined style, improved the performance of commands like <code>ps</code> and the appearance of commands like <code>binaryview</code>.</p>
<h2 id="new-commands-fdncred" tabindex="-1"> New commands (fdncred)</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/issues/3403" target="_blank" rel="noopener noreferrer"><code>into string</code></a> to convert values to strings</li>
<li><a href="https://github.com/nushell/nushell/issues/3370" target="_blank" rel="noopener noreferrer"><code>into binary</code></a> to convert values to binary</li>
</ul>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<h3 id="nushell" tabindex="-1"> Nushell</h3>
<ul>
<li>natemara fixed <a href="https://github.com/nushell/nushell/pull/3407" target="_blank" rel="noopener noreferrer">a slowness in the <code>ps</code> command</a></li>
<li>elferherrera, kubouch, stormasm, LhKipp ported commands to the new engine-p style</li>
<li>fdncred improved <a href="https://github.com/nushell/nushell/issues/3370" target="_blank" rel="noopener noreferrer">binaryview</a>, <a href="https://github.com/nushell/nushell/issues/3375" target="_blank" rel="noopener noreferrer">added check for endian-ness, added a bytes and skip</a>, <a href="https://github.com/nushell/nushell/issues/3374" target="_blank" rel="noopener noreferrer">added ability to change &quot;#&quot; color using header_color</a>, <a href="https://github.com/nushell/nushell/issues/3367" target="_blank" rel="noopener noreferrer">tweaked the error handling to show specific errors</a>, <a href="https://github.com/nushell/nushell/issues/3366" target="_blank" rel="noopener noreferrer">updated to a quicker Levenshtein implementation</a>, and <a href="https://github.com/nushell/nushell/issues/3351" target="_blank" rel="noopener noreferrer">allowed start to handle urls</a></li>
<li>kubouch <a href="https://github.com/nushell/nushell/issues/3359" target="_blank" rel="noopener noreferrer">fixed table-pager feature compilation</a></li>
<li>Azgrom created a <a href="https://github.com/nushell/nushell/issues/3388" target="_blank" rel="noopener noreferrer">features cargo installer wrapper</a></li>
<li>jgoday added <a href="https://github.com/nushell/nushell/issues/3387" target="_blank" rel="noopener noreferrer">ignore-case and duplicated options to <code>uniq</code> command </a>, and fixed a <a href="https://github.com/nushell/nushell/issues/3354" target="_blank" rel="noopener noreferrer">reduce --numbered bug</a></li>
<li>ammkrn fixed a panic in the <a href="https://github.com/nushell/nushell/issues/3382" target="_blank" rel="noopener noreferrer">rustyline helper</a></li>
<li>Sciencentistguy fixed an <a href="https://github.com/nushell/nushell/issues/3358" target="_blank" rel="noopener noreferrer">array index out of bounds error in nu_protocol::value::levenshtein_distance()</a></li>
<li>ccde177b5fb9b8c55078417b4c9fee removed <a href="https://github.com/nushell/nushell/issues/3349" target="_blank" rel="noopener noreferrer">ichwh</a></li>
<li>LhKipp fixed an issue <a href="https://github.com/nushell/nushell/issues/3344" target="_blank" rel="noopener noreferrer">in nu-env if <code>cd</code> with shortcuts</a></li>
</ul>
<h3 id="extension" tabindex="-1"> Extension</h3>
<ul>
<li>fdncred fixed <a href="https://github.com/nushell/vscode-nushell-lang/issues/32" target="_blank" rel="noopener noreferrer">a bug in the syntax highlighting</a></li>
</ul>
<h3 id="documentation" tabindex="-1"> Documentation</h3>
<ul>
<li>nalpine fixed <a href="https://github.com/nushell/nushell.github.io/issues/126" target="_blank" rel="noopener noreferrer">dead links</a></li>
<li>ChristopherBiscardi updated <a href="https://github.com/nushell/nushell.github.io/issues/125" target="_blank" rel="noopener noreferrer">starship prompt integration</a></li>
<li>ammkrn updated <a href="https://github.com/nushell/nushell.github.io/issues/123" target="_blank" rel="noopener noreferrer">ls -f -&gt; ls -la</a></li>
</ul>
<h3 id="nu-scripts" tabindex="-1"> Nu Scripts</h3>
<ul>
<li>fdncred created <a href="https://github.com/nushell/nu_scripts/issues/48" target="_blank" rel="noopener noreferrer">table grouping experiment, update twin to support single user per row</a>, <a href="https://github.com/nushell/nu_scripts/issues/46" target="_blank" rel="noopener noreferrer">twin weeknum guess</a>, and a <a href="https://github.com/nushell/nu_scripts/issues/44" target="_blank" rel="noopener noreferrer">prototype of TWiN automation script</a></li>
<li>efx added <a href="https://github.com/nushell/nu_scripts/issues/47" target="_blank" rel="noopener noreferrer">a one liner to parse aws s3 ls output</a></li>
<li>jonathandturner fixed <a href="https://github.com/nushell/nu_scripts/issues/45" target="_blank" rel="noopener noreferrer">TWiN range</a></li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>Coming soon after the 0.31 release, we'll be landing <a href="https://github.com/nushell/nushell/pull/3389" target="_blank" rel="noopener noreferrer">some improvements</a> to Nushell's syntax. These fixes will be breaking changes, but they're for a good reason. The simplification of the syntax will make Nushell both more consistent and more approachable for new users and experienced users alike.</p>
<p>We're also continuing to improve the command implementations. If you'd like to help, you can join in by <a href="https://github.com/nushell/nushell/issues/3390" target="_blank" rel="noopener noreferrer">signing up here</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.32</title>
      <link>www.nushell.sh/blog/2021-06-01-nushell_0_32.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-06-01-nushell_0_32.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.32</source>
      <description> Nushell 0.32
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.32 of Nu. This release contains a large amount of usability improvements.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-32" tabindex="-1"> Nushell 0.32</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.32 of Nu. This release contains a large amount of usability improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.32 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.32.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<p>There are a <em>lot</em> of new changes in this release of Nu. You can check these out by in this blog post, or, if you like, there is also an accompanying <a href="https://youtu.be/AqYxhJKblvY" target="_blank" rel="noopener noreferrer">YouTube video of 0.32 features</a> as well as updated <a href="https://github.com/nushell/nu_scripts" target="_blank" rel="noopener noreferrer">Nushell samples</a>.</p>
<h2 id="new-expression-syntax-jt" tabindex="-1"> New expression syntax (jt)</h2>
<p>We've simplified our expression/subexpression logic to make it much more predictable and universal. The parser will now automatically handle by command calls and expressions in the same way, so that you don't have to remember to use <code>=</code> to switch from one mode to the next.</p>
<p>Before 0.32:</p>
<div><pre><code><span>></span> <span>=</span> <span>10</span> + <span>3</span>
<span>13</span>
</code></pre></div><p>With 0.32:</p>
<div><pre><code><span>></span> <span>10</span> + <span>3</span>
<span>13</span>
</code></pre></div><p>You can also use any value as an expression, including variables or strings:</p>
<div><pre><code><span>></span> <span>"hello world"</span>
hello world
</code></pre></div><p>Subexpressions also follow a similar simplification. We've removed the previous <code>$()</code> style, replacing it with <code>()</code>. This allows you to put subexpressions anywhere that you want.</p>
<div><pre><code><span>></span> <span>10</span> * <span>(</span><span>3</span> + <span>2</span><span>)</span>
<span>50</span>
</code></pre></div><div><pre><code><span>></span> <span>echo</span> <span>((</span>ls <span>|</span> length<span>)</span> / <span>2</span><span>)</span>
<span>7</span>
</code></pre></div><p>This allows parens to mean &quot;do this first&quot; in both math expression and command calls.</p>
<h2 id="subexpressions-and-column-paths-jt" tabindex="-1"> Subexpressions and column paths (jt)</h2>
<p>The new subexpressions can also use &quot;column paths&quot;, or paths that start from the current value and travel to a subset of the structured data inside.</p>
<p>For example, you could combine column paths with some subtraction to find when you last booted your system:</p>
<div><pre><code><span>></span> <span>(</span>date now<span>)</span> - <span>(</span>sys<span>)</span>.host.uptime
<span>2021</span>-05-31 09:00:24.124736365 +12:00
</code></pre></div><h2 id="new-string-interpolation-jt" tabindex="-1"> New string interpolation (jt)</h2>
<p>We've also updated string interpolation to match the expression/subexpression simplification mentioned above. The same &quot;parens mean do this first&quot; pattern applies:</p>
<div><pre><code><span>></span> $<span>"the result is (3 + 2)"</span>
the result is <span>5</span>
</code></pre></div><p>For interpolation that uses column paths, wrap the entire column path in a pair of parens:</p>
<div><pre><code><span>></span> $<span>"uptime is (sys).host.uptime"</span>
<span>uptime</span> is <span>[</span>row <span>host</span> cpu mem temp<span>]</span>.host.uptime

<span>></span> $<span>"uptime is ((sys).host.uptime)"</span>
<span>uptime</span> is 1day 19hr 57min 7sec
</code></pre></div><p>As part of this change, we removed the previous backtick string interpolation form.</p>
<h2 id="environment-loading-lily-mara" tabindex="-1"> Environment loading (lily-mara)</h2>
<p>In Nushell, we've worked hard to limit the amount of mutation that will happen in the system. This helps developers focus on the task at hand, and not have to think about non-local effects from the code they're running.</p>
<p>At the same time, we've also wanted to support virtual environment systems like <code>virtualenv</code>, <code>conda</code>, and others. Traditionally these systems updated the global environment from inside of their activate/deactivate commands.</p>
<p>With 0.32, we feel like we've managed to come up with a solution that meets both the Nushell philosophy of limiting mutation while also giving the freedom to port virtual environment scripts to Nushell.</p>
<p>We call it &quot;environment loading&quot;. Here, rather than having commands mutate the global environment, they instead return a table of changes they'd like to apply to the environment. This table can be then loaded into the current scope, effectively separating the &quot;what&quot; of the update from the &quot;when&quot;.</p>
<p>Let's try this by creating a table of three new environment variables we'll load:</p>
<div><pre><code>def activate <span>[</span><span>]</span> <span>{</span>
  <span>[</span><span>[</span>name, value<span>]</span><span>;</span> <span>[</span>FOO, BAR<span>]</span> <span>[</span>DEBUG, TRUE<span>]</span> <span>[</span>CURRENTENV, NUSHELL<span>]</span><span>]</span>
<span>}</span>

load-env <span>(</span>activate<span>)</span>
<span>echo</span> <span>$nu</span>.env.FOO
</code></pre></div><p>The changes to the environment are still scoped to the block you're inside of. In the example above, because we're at the top level, we can safely shadow the previous environment values.</p>
<h2 id="locale-improvements-fdncred" tabindex="-1"> Locale improvements (fdncred)</h2>
<p>When you have <code>filesize_format = &quot;B&quot;</code> set in your config.toml file you should be able to see the thousands separators based on your locale. i.e. some locales use <code>,</code> other locales use <code>.</code> and i'm not sure if there are others.</p>
<p>This is with the <code>de_DE</code> locale on linux: (note the number separators)
<img src="https://user-images.githubusercontent.com/343840/119736601-93ff4b00-be43-11eb-9f17-0d9303e89cd6.png" alt="image"></p>
<p>This is with <code>en-US</code> on windows:
<img src="https://user-images.githubusercontent.com/343840/119736671-b2fddd00-be43-11eb-91c0-512cad551d5d.png" alt="image"></p>
<h2 id="better-line-editing-support-schrieveslaach-fdncred" tabindex="-1"> Better line editing support (schrieveslaach, fdncred)</h2>
<h3 id="partial-completions" tabindex="-1"> Partial completions</h3>
<p>With 0.32, you can use ctrl+right arrow to do a partial completion from a completion hint.</p>
<h3 id="delete-word" tabindex="-1"> Delete word</h3>
<p>You can also use alt+backspace to delete whole words.</p>
<h3 id="and-more" tabindex="-1"> And more</h3>
<p>For a full list of updated line editing capabilities, check out the update <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/keybindings.yml" target="_blank" rel="noopener noreferrer">sample keybinding file</a>.</p>
<h2 id="explicit-block-parameters-jt" tabindex="-1"> Explicit block parameters (jt)</h2>
<p>You can now name block parameters. You can use this to help make working with blocks easier to read.</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> each <span>{</span> <span>|</span>row<span>|</span> <span>echo</span> <span>$row</span>.name <span>}</span>
</code></pre></div><h2 id="do-supports-passing-arguments-stepnivik" tabindex="-1"> <code>do</code> supports passing arguments (stepnivik)</h2>
<p>You can now pass arguments to give the running block as part of a <code>do</code> call:</p>
<div><pre><code><span>></span> <span>do</span> <span>{</span> <span>|</span>x<span>|</span> <span>$x</span> + <span>100</span><span>}</span> <span>55</span>
<span>155</span>
</code></pre></div><h2 id="new-for-in-command-jt" tabindex="-1"> New <code>for..in</code> command (jt)</h2>
<p>With the new <code>for..in</code> command, you can write more natural iterating loops:</p>
<div><pre><code><span>></span> <span>for</span> <span>$x</span> <span>in</span> <span>1</span><span>..</span><span>3</span> <span>{</span> <span>echo</span> <span>(</span><span>$x</span> + <span>10</span><span>)</span> <span>}</span>
───┬────
 <span>0</span> │ <span>11</span>
 <span>1</span> │ <span>12</span>
 <span>2</span> │ <span>13</span>
───┴────
</code></pre></div><h2 id="flags-can-now-use-equals-andrasio" tabindex="-1"> Flags can now use equals (andrasio)</h2>
<p>You can now use <code>=</code> between a flag and its value.</p>
<p>For example, in addition to:</p>
<div><pre><code><span>></span> <span>seq</span> --separator <span>':'</span> <span>1</span> <span>10</span>
<span>1</span>:2:3:4:5:6:7:8:9:10
</code></pre></div><p>You can also write:</p>
<div><pre><code><span>></span> <span>seq</span> --separator<span>=</span><span>':'</span> <span>1</span> <span>10</span>
<span>1</span>:2:3:4:5:6:7:8:9:10
</code></pre></div><h2 id="other-improvements" tabindex="-1"> Other improvements</h2>
<h3 id="simple-string-concatenation-jt" tabindex="-1"> Simple string concatenation (jt)</h3>
<p>You can now create a new string by concatenating two strings <code>&quot;hello &quot; + &quot;world&quot;</code>.</p>
<h3 id="path-relative-to-kubouch" tabindex="-1"> Path relative-to (kubouch)</h3>
<p>Implements path relative-to subcommand. It converts the input path as a relative to the argument path, like this:</p>
<div><pre><code><span>></span> <span>'eggs/bacon/sausage/spam'</span> <span>|</span> path relative-to <span>'eggs/bacon/sausage'</span>
spam
</code></pre></div><p>There are also additional <a href="https://github.com/nushell/nushell/pull/3441" target="_blank" rel="noopener noreferrer"><code>path</code>-related fixes</a>.</p>
<h3 id="negative-indexing-for-range-alexshadley" tabindex="-1"> Negative indexing for range (alexshadley)</h3>
<p>You can now pass negative ranges to the <code>range</code> command, and it will work from the back of the input.</p>
<div><pre><code>> echo [1 2 3 4 5] | range (-3..)
</code></pre></div><p>Will return <code>[3, 4, 5]</code>.</p>
<h3 id="default-integer-is-now-signed-64-bit-jt" tabindex="-1"> Default integer is now signed 64-bit (jt)</h3>
<p>In 0.32, adds a new primitive data type for i64 and makes it the default integer type.</p>
<h3 id="improved-filename-support-ahkrr-fdncred" tabindex="-1"> Improved filename support (ahkrr, fdncred)</h3>
<p>Filename <a href="https://github.com/nushell/nushell/pull/3524" target="_blank" rel="noopener noreferrer">quoting for #</a>. Pipes are <a href="https://github.com/nushell/nushell/pull/3489" target="_blank" rel="noopener noreferrer">also now escaped</a></p>
<h3 id="sqlite-improvements-garfield96" tabindex="-1"> sqlite improvements (Garfield96)</h3>
<p>A panic in <a href="https://github.com/nushell/nushell/pull/3522" target="_blank" rel="noopener noreferrer">sqlite support has been fixed</a> and the support rusqlite crate <a href="https://github.com/nushell/nushell/pull/3523" target="_blank" rel="noopener noreferrer">has been updated</a>.</p>
<h3 id="seq-is-now-more-nu-like-fdncred" tabindex="-1"> <code>seq</code> is now more nu-like (fdncred)</h3>
<p>The <code>seq</code> command is now more nushell friendly by returning numbers when it can and strings when it must. This will definitely break some scripts.</p>
<p><img src="https://user-images.githubusercontent.com/343840/117849029-83e34b00-b249-11eb-8ecf-ec026ea468f7.png" alt="image"></p>
<h3 id="case-insensitive-completions-are-now-the-default-on-windows-sympatron" tabindex="-1"> Case-insensitive completions are now the default on Windows (Sympatron)</h3>
<p>Since Windows filenames are case-insensitive, This changes to case-insensitive completion matching by default. All other platforms still use case-sensitive matching by default.</p>
<h3 id="porting-commands-to-the-new-engine-efx-lhkipp-elferherrera" tabindex="-1"> Porting commands to the new engine (efx, LhKipp, elferherrera)</h3>
<p>More commands have been updated to use the new engine-p engine.</p>
<h3 id="char-now-has-more-characters-fdncred-kubouch" tabindex="-1"> <code>char</code> now has more characters (fdncred, kubouch)</h3>
<p>The <code>char</code> command now supports an <a href="https://github.com/nushell/nushell/pull/3457" target="_blank" rel="noopener noreferrer">additional set of characters</a>. It also supports the path separator character.</p>
<p>You can use <code>char --list</code> to see the full list of available character and ansi values.</p>
<h3 id="protect-against-bad-config-more-defensively-fdncred" tabindex="-1"> Protect against bad config more defensively (fdncred)</h3>
<p>Nushell is now more resilient if it encounters <a href="https://github.com/nushell/nushell/pull/3510" target="_blank" rel="noopener noreferrer">a bad config file</a>.</p>
<h3 id="better-glob-support-for-rm-lily-mara" tabindex="-1"> Better glob support for <code>rm</code> (lily-mara)</h3>
<p>The <code>*</code> wildcard should not attempt to delete files with a leading dot unless the more explicit <code>.*</code> is used. <code>rm *</code> should also not attempt to delete the current directory or its parent directory (. and ..), either. With this release, these should now be followed.</p>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<ul>
<li>The previous math mode command <code>=</code> has been replaced by a smarter parser that can autodetect math mode based on the first token. Math mode calls like <code>= 10 / 2</code> are now simply <code>10 / 2</code>.</li>
<li>Invocations of the style <code>$()</code> have now been replaced by <code>()</code> subexpressions. <code>$(= 2 + 3)</code> is now <code>(2 + 3)</code></li>
<li>String interpolation of the style:</li>
</ul>
<div><pre><code><span><span>`</span>the result is <span>{</span><span>{</span><span>=</span> <span>1</span> + <span>2</span><span>}</span><span>}</span><span>`</span></span>
</code></pre></div><p>Are now replaced with:</p>
<div><pre><code>$<span>"the result is (1 + 2)"</span>
</code></pre></div><ul>
<li><code>seq</code> will now return numbers when possible</li>
<li>The default integer is now signed 64-bit integer and not big integers.</li>
<li>The <code>unit</code> type has now been split into <code>filesize</code> and <code>duration</code> for better utility.</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>Nushell 0.32 is the first version of Nushell that begins to show what the 1.0 Nushell language will feel like. The easier, and more uniform, expression and subexpression syntax will let us continue to evolve towards a language that's both easier to read and easier to write.</p>
<p>There are some long-standing issues in the engine that are preventing improved completions, and we'd like to address these issues and begin work on smarter completions.</p>
<p>Elferherrera has also been hard at work on a dataframe implementation that we're exploring for inclusion into Nushell. You can try this out by compiling with the <code>dataframe</code> feature. If you check it out, let us know how it goes.</p>
]]></content:encoded>
      <enclosure url="https://user-images.githubusercontent.com/343840/119736601-93ff4b00-be43-11eb-9f17-0d9303e89cd6.png" type="image/png"/>
    </item>
    <item>
      <title>Nushell 0.33</title>
      <link>www.nushell.sh/blog/2021-06-22-nushell_0_33.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-06-22-nushell_0_33.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.33</source>
      <description> Nushell 0.33
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.33 of Nu. This release includes improved completions, support for pipeline variables, syntax theming and more.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-33" tabindex="-1"> Nushell 0.33</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.33 of Nu. This release includes improved completions, support for pipeline variables, syntax theming and more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.33 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.33.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="improved-completions-fdncred-niklasjonsson-kubouch-andrasio-jt" tabindex="-1"> Improved completions (fdncred, NiklasJonsson, kubouch, andrasio, jt)</h2>
<p>We've begun the completion improvements that have been planned for some time. In this release, we've added completions for <a href="https://github.com/nushell/nushell/pull/3594" target="_blank" rel="noopener noreferrer">alias definitions</a>, <a href="https://github.com/nushell/nushell/pull/3589" target="_blank" rel="noopener noreferrer">source imports</a>, completions for <a href="https://github.com/nushell/nushell/pull/3577" target="_blank" rel="noopener noreferrer">quoted paths</a>, completions while <a href="https://github.com/nushell/nushell/pull/3575" target="_blank" rel="noopener noreferrer">inside of a pipeline</a>, completions in <a href="https://github.com/nushell/nushell/pull/3564" target="_blank" rel="noopener noreferrer">incomplete expressions</a>, <a href="https://github.com/nushell/nushell/pull/3571" target="_blank" rel="noopener noreferrer">subcommand completions</a> and more.</p>
<p>On Windows, we've <a href="https://github.com/nushell/nushell/pull/3665" target="_blank" rel="noopener noreferrer">sped up path completions</a>. We've also reworked path handling, which should help make <a href="https://github.com/nushell/nushell/pull/3653" target="_blank" rel="noopener noreferrer">path completions in Windows more consistent</a>, including handling of <code>~</code>.</p>
<p>Behind the scenes, we've also refactored completions into their own crate, so that we can more easily grow the areas where completions are supported.</p>
<h2 id="pipeline-vars-jt" tabindex="-1"> Pipeline vars (jt)</h2>
<p>Sometimes, when you're working on a pipeline, you want to refer to values coming in using an xargs style. With 0.33, we've introduced a new built-in variable called <code>$in</code>. The <code>$in</code> variable will collect the pipeline into a value for you, allowing you to access the whole stream as a parameter.</p>
<div><pre><code><span>></span> <span>echo</span> <span>1</span> <span>2</span> <span>3</span> <span>|</span> <span>$in</span>.1 * <span>$in</span>.2
<span>6</span>
</code></pre></div><h2 id="new-distributions-itsme-alan-zmedico" tabindex="-1"> New distributions (itsme-alan, zmedico)</h2>
<p>You can now install Nushell from the <a href="https://github.com/microsoft/winget-pkgs/pull/17428" target="_blank" rel="noopener noreferrer">winget repo</a> and from <a href="https://packages.gentoo.org/packages/app-shells/nushell" target="_blank" rel="noopener noreferrer">gentoo</a>.</p>
<h2 id="more-natural-pipeline-output-jt" tabindex="-1"> More natural pipeline output (jt)</h2>
<p>In this release, we've also relaxed some of the strictness in when output happens to always be at the end of a pipeline. In previous versions of Nushell, it was common for people to try an example like <code>echo &quot;hello &quot;; echo &quot;world&quot;</code> only to be confused why they only saw <code>world</code> in the output. Now, we treat <code>;</code> like carriage return, so that pipelines more naturally output their results just as they do at the end of lines.</p>
<p>You can add back in the ignore ability using the new <code>ignore</code> command, which will ignore any stdout or data output from the previous command in the pipeline. For example, <code>ls | ignore</code>.</p>
<h2 id="syntax-highlighting-themes-fdncred" tabindex="-1"> Syntax highlighting themes (fdncred)</h2>
<p><img src="@source/assets/images/0_32_themes.png" alt="image of syntax highlighting themes in Nushell"></p>
<p><em>Nu, with configurable colors</em></p>
<p>You can now configure the colors used in syntax highlighting. For the currently supported token types and examples, check out <a href="https://github.com/nushell/nushell/pull/3606" target="_blank" rel="noopener noreferrer">the original PR</a>.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<ul>
<li>nathom added <a href="https://github.com/nushell/nushell/pull/3629" target="_blank" rel="noopener noreferrer"><code>unlet_env</code> to remove environment variables from the current scope</a></li>
<li>jt added the <a href="https://github.com/nushell/nushell/pull/3643" target="_blank" rel="noopener noreferrer"><code>ignore</code> command to ignore pipeline output</a></li>
<li>fdncred added <a href="https://github.com/nushell/nushell/pull/3570" target="_blank" rel="noopener noreferrer"><code>ansi gradient</code> command</a></li>
</ul>
<h2 id="additional-improvements" tabindex="-1"> Additional improvements</h2>
<ul>
<li>fdncred added <a href="https://github.com/nushell/nushell/pull/3660" target="_blank" rel="noopener noreferrer">path and environment path separators to <code>char</code></a> to allow for creating more portable scripts, fixed an issue with <a href="https://github.com/nushell/nushell/pull/3634" target="_blank" rel="noopener noreferrer">error colors</a>, added <a href="https://github.com/nushell/nushell/pull/3601" target="_blank" rel="noopener noreferrer">single and double quote to char</a>, <a href="https://github.com/nushell/nushell/pull/3548" target="_blank" rel="noopener noreferrer">version now lists plugins</a></li>
<li>efx updated <a href="https://github.com/nushell/nushell/pull/3649" target="_blank" rel="noopener noreferrer">commands to engine-p style</a></li>
<li>chrisfinazzo <a href="https://github.com/nushell/nushell/pull/3635" target="_blank" rel="noopener noreferrer">fixed some of our helper scripts</a></li>
<li>andrasio, jt <a href="https://github.com/nushell/nushell/pull/3632" target="_blank" rel="noopener noreferrer">removed the clap dependency, so nushell parses its own parameters</a></li>
<li>vladdoster landed <a href="https://github.com/nushell/nushell/pull/3630" target="_blank" rel="noopener noreferrer">some doc improvements</a></li>
<li>NiklasJonsson improved <a href="https://github.com/nushell/nushell/pull/3628" target="_blank" rel="noopener noreferrer">nu doc comments</a></li>
<li>reaganmcf added <a href="https://github.com/nushell/nushell/pull/3618" target="_blank" rel="noopener noreferrer">an optional plugin for handling mp4 metadata</a> and <a href="https://github.com/nushell/nushell/pull/3561" target="_blank" rel="noopener noreferrer">bumped sysinfo</a></li>
<li>voanhduy1512 added support for <a href="https://github.com/nushell/nushell/pull/3611" target="_blank" rel="noopener noreferrer">invoking external commands via string interpolation</a></li>
<li>Garfield96 added <a href="https://github.com/nushell/nushell/pull/3600" target="_blank" rel="noopener noreferrer">--sheets for xlsx/ods</a>, <a href="https://github.com/nushell/nushell/pull/3529" target="_blank" rel="noopener noreferrer">--tables for <code>from sqlite</code></a>, and <a href="https://github.com/nushell/nushell/pull/3522" target="_blank" rel="noopener noreferrer">fixed a panic with giving empty tables to <code>to sqlite</code></a></li>
<li>kubouch improved <a href="https://github.com/nushell/nushell/pull/3588" target="_blank" rel="noopener noreferrer">errors and updated commands to engine-p</a>, improved some <a href="https://github.com/nushell/nushell/pull/3580" target="_blank" rel="noopener noreferrer">internal handling of <code>def</code></a>, <a href="https://github.com/nushell/nushell/pull/3588" target="_blank" rel="noopener noreferrer">clarified the <code>exec</code> help message</a></li>
<li>sholderbach improved <a href="https://github.com/nushell/nushell/pull/3573" target="_blank" rel="noopener noreferrer"><code>where</code> docs</a></li>
<li>jt added <a href="https://github.com/nushell/nushell/pull/3562" target="_blank" rel="noopener noreferrer">parsing for hex, binary, and octal numbers</a></li>
<li>pka improved <a href="https://github.com/nushell/nushell/pull/3560" target="_blank" rel="noopener noreferrer">territory in locale support for byte formatting</a></li>
<li>ahkrr fixed handling of <a href="https://github.com/nushell/nushell/pull/3524" target="_blank" rel="noopener noreferrer"># in filenames</a></li>
<li>jt, LovecraftianHorror, apatrushev, sholderbach, elferherrera, inet56 added fixes to the website and docs</li>
<li>fdncred, efx, jt, and andrasio all added scripts and fixes to the scripts repo</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're continuing to improve our dataframe support, and hope to be rolling it out a part of the default commands in the next release. Elfherrera has been <a href="https://github.com/nushell/nushell/pull/3608" target="_blank" rel="noopener noreferrer">hard at work improving the dataframe support to get it ready</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.34</title>
      <link>www.nushell.sh/blog/2021-07-13-nushell_0_34.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-07-13-nushell_0_34.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.34</source>
      <description> Nushell 0.34
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.34 of Nu. This release is the first to support dataframes and also includes a set of usability improvements.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-34" tabindex="-1"> Nushell 0.34</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.34 of Nu. This release is the first to support dataframes and also includes a set of usability improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.34 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.34.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="dataframes-elferherrera" tabindex="-1"> Dataframes (elferherrera)</h2>
<p>With 0.34, we've introduced a new family of commands to work with dataframes. Dataframes are an efficient way of working with large datasets by storing data as columns and offering a set of operations over them.</p>
<p>To create a dataframe, you can use the <code>dataframe open</code> command and pass it a source file to load. This command currently supports CSV and parquet files.</p>
<div><pre><code>> let df = (dataframe open .\Data7602DescendingYearOrder.csv)
</code></pre></div><p>Once loaded, there are a variety of commands you can use to interact with the dataframe (you can get the full list with <code>dataframe --help</code>). For example, to see the first few rows of the dataframe we just loaded, we can use <code>dataframe first</code>:</p>
<div><pre><code>> $df | dataframe first

───┬──────────┬─────────┬──────┬───────────┬──────────
 # │ anzsic06 │  Area   │ year │ geo_count │ ec_count
───┼──────────┼─────────┼──────┼───────────┼──────────
 0 │ A        │ A100100 │ 2000 │        96 │      130
 1 │ A        │ A100200 │ 2000 │       198 │      110
 2 │ A        │ A100300 │ 2000 │        42 │       25
 3 │ A        │ A100400 │ 2000 │        66 │       40
 4 │ A        │ A100500 │ 2000 │        63 │       40
───┴──────────┴─────────┴──────┴───────────┴──────────
</code></pre></div><p>Where dataframes really shine is their performance.</p>
<p>For example, the above dataset is 5 columns and ~5.5 million rows of data. We're able to process group it by the year column, sum the results, and display it to the user in 557ms:</p>
<div><pre><code># process.nu
let df = (dataframe open Data7602DescendingYearOrder.csv)
let res = ($df | dataframe group-by year | dataframe aggregate sum | dataframe select geo_count)
$res
</code></pre></div><div><pre><code>> benchmark {source process.nu}

───┬───────────────────
 # │     real time
───┼───────────────────
 0 │ 557ms 658us 500ns
───┴───────────────────
</code></pre></div><p>By comparison, here's the same example in pandas:</p>
<div><pre><code>import pandas as pd

df = pd.read_csv("Data7602DescendingYearOrder.csv")
res = df.groupby("year")["geo_count"].sum()
print(res)
</code></pre></div><div><pre><code>> benchmark {python .\load.py}

───┬────────────────────────
 # │       real time
───┼────────────────────────
 0 │ 1sec 966ms 954us 800ns
───┴────────────────────────
</code></pre></div><blockquote>
<p>System Details: The benchmarks presented in this section were run using a machine with a processor Intel(R) Core(TM) i7-10710U (CPU @1.10GHz 1.61 GHz) and 16 gb of RAM.</p>
</blockquote>
<p>While these results are still early, we're excited to see what can be possible using Nushell for processing large datasets.</p>
<p>You can learn more about dataframes, including many examples and a much more in-depth explanation, by reading the new <a href="https://www.nushell.sh/book/dataframes.html" target="_blank" rel="noopener noreferrer">dataframes chapter of the Nushell book</a>.</p>
<p>Note: while all the dataframe functionality is currently grouped behind the <code>dataframe</code> top-level command, we hope to extend support for dataframes to other common Nushell commands.</p>
<h2 id="improved-multiline-support-jt" tabindex="-1"> Improved multiline support (jt)</h2>
<p>We've extended multiline expression support to more areas. Now, you can span tables over multiple lines more naturally:</p>
<div><pre><code>[
  [name, value];
  [foo, 2]
  [bar, 7]
]
</code></pre></div><p>Subexpression now also span multiple lines. Everything inside of the parentheses are treated as if they were written together:</p>
<div><pre><code>(echo foo
| str length)
</code></pre></div><p>This also gives you a way to split up commands that have many arguments over multiple lines:</p>
<div><pre><code>(echo foo
bar)
</code></pre></div><h2 id="multiple-shorthand-environment-vars-jt" tabindex="-1"> Multiple shorthand environment vars (jt)</h2>
<p>A long-time shortcoming is now fixed in 0.34. You can now pass multiple environment shorthands to the same command:</p>
<div><pre><code>> FOO=bar BAR=baz $nu.env.FOO + $nu.env.BAR
barbaz
</code></pre></div><h2 id="variable-completions-andrasio" tabindex="-1"> Variable completions (andrasio)</h2>
<p>In addition to steadily improving the completion engine, we've started adding support for completions for built-in variables.</p>
<p>You can now write <code>$nu.&lt;TAB&gt;</code> to complete into the built-in <code>$nu</code> variable, including completions for <code>$nu.env.S&lt;TAB&gt;</code> for completing into environment variables.</p>
<p>Other variables that are in scope can also have their names completed.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<ul>
<li>Added the <a href="https://github.com/nushell/nushell/pull/3670" target="_blank" rel="noopener noreferrer"><code>pathvar</code> command for updating the PATH</a> (nathom)</li>
<li>Added a <a href="https://github.com/nushell/nushell/pull/3694" target="_blank" rel="noopener noreferrer"><code>paste</code> command for pasting from clipboard</a> (1ntEgr8)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3720" target="_blank" rel="noopener noreferrer"><code>$nu.lang</code> to reflect on the current commands</a> (fdncred)</li>
</ul>
<h2 id="additional-improvements" tabindex="-1"> Additional improvements</h2>
<ul>
<li>Updated <a href="https://github.com/nushell/nushell/pull/3758" target="_blank" rel="noopener noreferrer"><code>into binary</code> to be more composable</a> (fdncred)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3754" target="_blank" rel="noopener noreferrer">unique option to <code>uniq</code></a> (mcbattirola)</li>
<li>Removed an <a href="https://github.com/nushell/nushell/pull/3751" target="_blank" rel="noopener noreferrer">outdated README note</a> (yaymukund)</li>
<li>Added more <a href="https://github.com/nushell/nushell/pull/3750" target="_blank" rel="noopener noreferrer">comparsion coercions with <code>$nothing</code></a> (jt)</li>
<li>Updated the <a href="https://github.com/nushell/nushell/pull/3749" target="_blank" rel="noopener noreferrer"><code>version</code> command to output more info</a> (fdncred)</li>
<li>Fixed a <a href="https://github.com/nushell/nushell/pull/3745" target="_blank" rel="noopener noreferrer">broken unit test</a> (fdncred)</li>
<li>Downgraded <a href="https://github.com/nushell/nushell/pull/3740" target="_blank" rel="noopener noreferrer">crossterm to fix pager compilation</a> (kubouch)</li>
<li>Removed <a href="https://github.com/nushell/nushell/pull/3732" target="_blank" rel="noopener noreferrer">unused crate features</a> (waywardmonkeys)</li>
<li>Updated a few <a href="https://github.com/nushell/nushell/pull/3723" target="_blank" rel="noopener noreferrer">dependencies</a> and <a href="https://github.com/nushell/nushell/pull/3724" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://github.com/nushell/nushell/pull/3739" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://github.com/nushell/nushell/pull/3741" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://github.com/nushell/nushell/pull/3757" target="_blank" rel="noopener noreferrer">here</a> (therealprof, waywardmonkeys)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3722" target="_blank" rel="noopener noreferrer">dataframe take command</a> (elferherrera)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3717" target="_blank" rel="noopener noreferrer">script to submit winget package during release</a> (TechWatching)</li>
<li>Aligned <a href="https://github.com/nushell/nushell/pull/3713" target="_blank" rel="noopener noreferrer">dataframe params to match other Nushell commands</a> (elferherrera)</li>
<li>Added the <a href="https://github.com/nushell/nushell/pull/3712" target="_blank" rel="noopener noreferrer">ansi osc string terminator</a> (fdncred)</li>
<li>Removed <a href="https://github.com/nushell/nushell/pull/3709" target="_blank" rel="noopener noreferrer">unused dependencies</a> and <a href="https://github.com/nushell/nushell/pull/3716" target="_blank" rel="noopener noreferrer">also</a> (waywardmonkeys, andrasio)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3702" target="_blank" rel="noopener noreferrer">casting operations for Series data</a> (elferherrera)</li>
<li>Fixed a <a href="https://github.com/nushell/nushell/pull/3697" target="_blank" rel="noopener noreferrer">dataframe series bug with f64</a> (elferherrera)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3696" target="_blank" rel="noopener noreferrer">all-trim option to <code>str trim</code></a> (palashahuja)</li>
<li>Ported more commands to engine-p <a href="https://github.com/nushell/nushell/pull/3690" target="_blank" rel="noopener noreferrer">1</a> and <a href="https://github.com/nushell/nushell/pull/3753" target="_blank" rel="noopener noreferrer">2</a> (efx)</li>
<li>Added support for <a href="https://github.com/nushell/nushell/pull/3688" target="_blank" rel="noopener noreferrer">arbitrarily nested subcommands</a> (jt)</li>
<li>Added support for <a href="https://github.com/nushell/nushell/pull/3686" target="_blank" rel="noopener noreferrer">string interpolation when calling externals</a> (voanhduy1512)</li>
<li>Made <a href="https://github.com/nushell/nushell/pull/3684" target="_blank" rel="noopener noreferrer">URL docs more consistent</a> (efx)</li>
<li>Speed up <a href="https://github.com/nushell/nushell/pull/3683" target="_blank" rel="noopener noreferrer">dataframe loading</a> (elferherrera)</li>
<li>Improved <a href="https://github.com/nushell/nushell/pull/3681" target="_blank" rel="noopener noreferrer">parse errors for <code>def</code></a> (jt)</li>
<li>Updated textview to <a href="https://github.com/nushell/nushell/pull/3680" target="_blank" rel="noopener noreferrer">always read its input from the stream</a> (jt)</li>
<li>Dataframe aggregation uses <a href="https://github.com/nushell/nushell/pull/3678" target="_blank" rel="noopener noreferrer">simpler column names</a> (elferherrera)</li>
<li>Add support for more <a href="https://github.com/nushell/nushell/pull/3675" target="_blank" rel="noopener noreferrer">filesize to filesize math</a> (fdncred)</li>
<li>Updated the Nu API surface to <a href="https://github.com/nushell/nushell/pull/3673" target="_blank" rel="noopener noreferrer">expose more useful functionality</a> (stormasm)</li>
<li>Fixed a <a href="https://github.com/nushell/nushell/pull/3669" target="_blank" rel="noopener noreferrer">panic during math with large durations</a> (luccasmmg)</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>Work on <a href="https://github.com/jntrnr/reedline" target="_blank" rel="noopener noreferrer">reedline</a> has steadily grown in the background, and is now nearing the time where we will explore integrating it into Nushell as Nushell's line editor.</p>
<p>We're also working on a number of <a href="https://github.com/jntrnr/engine-q" target="_blank" rel="noopener noreferrer">parser and engine improvements</a> which we hope will make their way into future version of Nushell.</p>
<p>Dataframe support continues to grow, and we're continuing to collaborate with projects that this builds on to ensure we are using the best techniques possible. There's a lot of potential here not only in terms of using dataframes, but where the Apache Arrow support might allow us to grow additional functionality in the future.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.35</title>
      <link>www.nushell.sh/blog/2021-08-03-nushell_0_35.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-08-03-nushell_0_35.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.35</source>
      <description> Nushell 0.35
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.35 of Nu. This release shows off a lot of dataframe progress and lots of command polish.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-35" tabindex="-1"> Nushell 0.35</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.35 of Nu. This release shows off a lot of dataframe progress and lots of command polish.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.35 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.35.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/3811" target="_blank" rel="noopener noreferrer"><code>into path</code></a> (realcundo)</li>
<li><a href="https://github.com/nushell/nushell/pull/3833" target="_blank" rel="noopener noreferrer"><code>date humanize</code></a> (zkat)</li>
<li><a href="https://github.com/nushell/nushell/pull/3836" target="_blank" rel="noopener noreferrer"><code>hash sha256</code></a> (with <a href="https://github.com/nushell/nushell/pull/3841" target="_blank" rel="noopener noreferrer">additional improvements</a>) (realcundo)</li>
</ul>
<h2 id="dataframe-improvements-elferherrera" tabindex="-1"> Dataframe improvements (elferherrera)</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/3776" target="_blank" rel="noopener noreferrer">Improved join operation</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3781" target="_blank" rel="noopener noreferrer">Faster CSV reading and encoding</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3805" target="_blank" rel="noopener noreferrer">New shape command</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3812" target="_blank" rel="noopener noreferrer">Remove Series and treat all dataframe structures the same</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3839" target="_blank" rel="noopener noreferrer">Support for appending dataframes</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3864" target="_blank" rel="noopener noreferrer">Allow dataframes to hold more kinds of data</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3874" target="_blank" rel="noopener noreferrer">Simplified contains command</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3875" target="_blank" rel="noopener noreferrer">Pretty printing for nested dataframes</a></li>
</ul>
<h2 id="additional-improvements" tabindex="-1"> Additional improvements</h2>
<ul>
<li>Hinting is <a href="https://github.com/nushell/nushell/pull/3780" target="_blank" rel="noopener noreferrer">now configurable</a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/3767" target="_blank" rel="noopener noreferrer">Improvements to our winget releases</a> and <a href="https://github.com/nushell/nushell/pull/3819" target="_blank" rel="noopener noreferrer">publish workflows</a> (TechWatching)</li>
<li>More commands <a href="https://github.com/nushell/nushell/pull/3794" target="_blank" rel="noopener noreferrer">got some additional cleanup</a> (sambordo1)</li>
<li>Startup times <a href="https://github.com/nushell/nushell/pull/3854" target="_blank" rel="noopener noreferrer">now have a detailed breakdown</a> (fdncred)</li>
<li>You can now <a href="https://github.com/nushell/nushell/pull/3845" target="_blank" rel="noopener noreferrer">compare durations</a> (fdncred)</li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/3804" target="_blank" rel="noopener noreferrer">docs for <code>completion_type</code></a> (dirtybit)</li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/3807" target="_blank" rel="noopener noreferrer">theme for text viewing</a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/3832" target="_blank" rel="noopener noreferrer"><code>describe</code> no longer outputs using colors</a> (fdncred)</li>
<li>String intepolation <a href="https://github.com/nushell/nushell/pull/3866" target="_blank" rel="noopener noreferrer">now handles Unicode better</a> (fdncred)</li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/3829" target="_blank" rel="noopener noreferrer">path separator in <code>pathvar</code></a> (nathom)</li>
<li><a href="https://github.com/nushell/nushell/pull/3821" target="_blank" rel="noopener noreferrer">Power operations can now be negative</a> (jafriyie1)</li>
<li>Issues now <a href="https://github.com/nushell/nushell/pull/3818" target="_blank" rel="noopener noreferrer">use GitHub forms</a> (zkat)</li>
<li>Fixed a typo <a href="https://github.com/nushell/nushell/pull/3824" target="_blank" rel="noopener noreferrer">in our github release configuration</a> (zkat)</li>
<li>Date formatting now <a href="https://github.com/nushell/nushell/pull/3834" target="_blank" rel="noopener noreferrer">uses the chrono_humanize crate</a> (zkat)</li>
<li>Updated the <a href="https://github.com/nushell/nushell/pull/3848" target="_blank" rel="noopener noreferrer">docs on implementing a command</a> (margguo)</li>
<li>Cleaned up <a href="https://github.com/nushell/nushell/pull/3853" target="_blank" rel="noopener noreferrer">some stale dependencies</a> (elferherrera)</li>
<li>Improved <a href="https://github.com/nushell/nushell/pull/3857" target="_blank" rel="noopener noreferrer">how <code>select</code> handles empty cells</a> (realcundo)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3863" target="_blank" rel="noopener noreferrer">named block params to <code>all?</code></a> (jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/3869" target="_blank" rel="noopener noreferrer">Better handling of environement shorthands</a> (lily-mara)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3870" target="_blank" rel="noopener noreferrer">support for multi-doc yaml files</a> (realcundo)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/3878" target="_blank" rel="noopener noreferrer">a new crate to support Nu serialization more directly with serde</a> (lily-mara)</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're hard at work at bringing more dataframe support into nushell itself, which will allow us to use it for more actions, and extend support to dataframes to existing commands.</p>
<p>We're also working on the new <a href="https://github.com/jntrnr/engine-q" target="_blank" rel="noopener noreferrer">parsing/evaluation engine</a> which is proving to be both faster and more correct than the current nushell engine. We're excited to keep evolving it and then integrating it into Nushell. This engine will also be fast enough, and correct enough, to drive completions as Nu scripts. This will allow us to add intelligent completions that work with both internal and external commands.</p>
<p>Finally, we're nearing the goal for <a href="https://github.com/jntrnr/reedline" target="_blank" rel="noopener noreferrer">reedline</a>, which is now solid enough, and complete enough, to use for daily work. We're hoping to polish it up and then experiment with moving Nushell to use it in the coming release (or two).</p>
]]></content:encoded>
    </item>
    <item>
      <title>Two years of Nushell</title>
      <link>www.nushell.sh/blog/2021-08-23-two-years-of-nushell.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-08-23-two-years-of-nushell.html</guid>
      <source url="www.nushell.sh/rss.xml">Two years of Nushell</source>
      <content:encoded><![CDATA[<h1 id="two-years-of-nushell" tabindex="-1"> Two years of Nushell</h1>
<p><img src="@source/assets/images/two_year_cake.png" alt="Stock cake photo with a 2"></p>
<p><em>Happy birthday, Nushell!</em></p>
<p>Happy birthday, Nushell! Today marks the second year for Nushell since its first public release. We wanted to write a bit about what the last year has meant and share some of the highlights and lowlights along the way.</p>
<h2 id="focus" tabindex="-1"> Focus</h2>
<p>Through out Nushell's first year, we had faith in the basics behind Nushell but couldn't guess how it would grow and what it might be able to do. As we progressed through this second year, the project gained a focus: <strong>to be the best tool for interactively working with your system and your data</strong>.</p>
<p>It's a high bar to set, but we're happy to try to achieve that goal. To achieve it, we're focusing on three different parts of Nushell, each of which deeply connects to the other two.</p>
<h3 id="nushell-the-language" tabindex="-1"> Nushell, the language</h3>
<p>Nushell (sometimes shortened to just Nu) is a language that allows you to easily create pipelines for working on structured data. As a language, Nushell has grown considerably over the last year. You're now able to make your own commands to process data, create aliases, variables, and much much more.</p>
<p>We've started collecting examples to share with each other as Nushell grows and our skill with it grows with it. You can check them out in the <a href="https://github.com/nushell/nu_scripts" target="_blank" rel="noopener noreferrer">Nu Scripts repo</a>.</p>
<p><img src="@source/assets/images/two_year_vscode.png" alt="Dark theme vscode showing Nushell"></p>
<p>To work with Nushell, we also published a <a href="https://marketplace.visualstudio.com/items?itemName=TheNuProjectContributors.vscode-nushell-lang" target="_blank" rel="noopener noreferrer">vscode extension</a>.</p>
<h3 id="nushell-the-shell" tabindex="-1"> Nushell, the shell</h3>
<p>From day #1, Nushell has always been intended to work well as a shell. It's even in the name 🙂.</p>
<p>We've spent a lot of time this year steadily improving areas that make Nushell -- as a shell -- feel better, more stable, and generally easier to use. We've improved integrations with <a href="https://github.com/nushell/nu_scripts/tree/main/virtual_environments" target="_blank" rel="noopener noreferrer">Python</a>, integrations with tools like <a href="https://github.com/ajeetdsouza/zoxide" target="_blank" rel="noopener noreferrer">zoxide</a> and <a href="https://github.com/starship/starship" target="_blank" rel="noopener noreferrer">starship</a>, and more. That said, as more people have adopted it, we've learned more what regular shell users need. Lots of ideas going into next year as to places that Nushell can work better with the broader range of tools and techniques that commandline users use.</p>
<h3 id="nushell-the-data-analysis-tool" tabindex="-1"> Nushell, the data analysis tool</h3>
<p>A relatively new aspect of being an interactive tool for working with data is Nushell's recent adoption of supporting dataframes. Dataframes allow users to work with large datasets in an efficient way. Recent versions of Nushell, using dataframes, are able to process and aggregate data from <a href="https://www.nushell.sh/blog/2021-07-13-nushell_0_34.html#dataframes-elferherrera" target="_blank" rel="noopener noreferrer">5 million line csv files in less than a second</a>. Did we mention dataframes are fast?</p>
<p>We'll be exploring how best to more-fully integrate dataframes with the rest of the Nushell features in the coming year.</p>
<h2 id="highlights" tabindex="-1"> Highlights</h2>
<h3 id="seeing-what-nushell-will-become" tabindex="-1"> Seeing what Nushell will become</h3>
<p>With 0.32, we first <a href="https://www.nushell.sh/blog/2021-06-01-nushell_0_32.html#new-expression-syntax-jt" target="_blank" rel="noopener noreferrer">got a glimpse of what the Nushell language will become</a>. With 0.34, we saw <a href="https://www.nushell.sh/blog/2021-07-13-nushell_0_34.html#dataframes-elferherrera" target="_blank" rel="noopener noreferrer">what data processing could be</a>. These recent releases help to sketch where Nushell will feel like when it hits 1.0.</p>
<p>One example that shows this off is the script we use every week to create the This Week in Nu newsletter. As you can see, <a href="https://github.com/nushell/nu_scripts/blob/main/make_release/this_week_in_nu_release.nu" target="_blank" rel="noopener noreferrer">it's a full script</a> of the sort you might write in Python or Ruby.</p>
<h3 id="growing-love" tabindex="-1"> Growing love</h3>
<p>We're seeing a growing amount of love for Nushell as more people try it and share their experiences. Here are some tweets from the last few weeks:</p>
<p><img src="@source/assets/images/two_year_tweet1.png" alt="Oh damn @nu_shell is awesome. It's a really powerful advancement over existing shells on unix!"></p>
<p><img src="@source/assets/images/two_year_tweet2.png" alt="The pandas style dataframe feature in nushell is Exploding head♥"></p>
<p><img src="@source/assets/images/two_year_tweet3.png" alt="@nu_shell has fundamentally changed the way I interact with data on my computer. It's no longer a process to get anything out of a csv, etc. It's just... there. however I want it served up."></p>
<p><img src="@source/assets/images/two_year_tweet4.png" alt="Acabo de probar el @nu_shell y estoy enamorao"></p>
<p><img src="@source/assets/images/two_year_tweet5.png" alt="Nu Shell is amazing. I can’t believe it took me this long to find it."></p>
<p>The Nushell repo has also felt a recent surge of interest. Since this time last year, the number of stars has nearly doubled!</p>
<p><img src="@source/assets/images/two_year_stars.png" alt="image of with the number of GitHub stars doubling over the last year"></p>
<p><em>Growing interest in Nushell (shown: number of GitHub stars)</em></p>
<h3 id="nushell-getting-used-for-real-things" tabindex="-1"> Nushell getting used for real things</h3>
<p>We're getting feedback from folks using Nushell about how much time Nushell saves them everyday. One report mentioned that their daily processing of files was cut by as much as 30 minutes! Saving 30 mins per day is an enormous amount, and we're happy to help.</p>
<p>Another area where Nushell is getting used is to process <a href="https://twitter.com/cocoronata" target="_blank" rel="noopener noreferrer">Covid data in Ecuador</a> (you can see <a href="https://github.com/cocoronata/ecuacovid-scripts" target="_blank" rel="noopener noreferrer">more recent scripts written all in Nushell here</a>).</p>
<h2 id="contributors" tabindex="-1"> Contributors</h2>
<p>As of this post, 280 contributors helped make Nushell what it is today. A <em>big</em> thank you to the contributors who helped us get to this point!</p>
<p>1ntEgr8, AaronC81, aborruso, acanalis, AdminXVII, aeosynth, aeshirey, agateau, ahkrr, aidanharris, alexshadley, almindor, Aloso, Amanita-muscaria, amitdev, ammkrn, amousa11, andrasio, Andy-Python-Programmer, apatrushev, arashout, ArturKovacs, autophagy, avandesa, avranju, Azgrom, bailey-layzer, baoyachi, BatmanAoD, bbkane, bndbsh, Bocom, Borimino, Br1ght0ne, BradyBromley, brightly-salty, BurNiinTRee, Byron, casidiablo, CBenoit, ccde177b5fb9b8c55078417b4c9fee, charlespierce, chhetripradeep, chrisfinazzo, ChristopherBiscardi, cjpearce, coolshaurya, cristicismas, DangerFunPants, daschl, davidmalcolm, dbofmmbt, defstryker, Delapouite, dependabot[bot], Detegr, devnought, Dietr1ch, diogomafra, dirtybit, DivineGod, djc, dmeijboom, DonnotPanic, drmason13, DrSensor, dywedir, dyxushuai, efx, elferherrera, elichai, EmNudge, eoinkelly, epost, equal-l2, est31, EverlastingBugstopper, fdncred, fhalim, filaretov, Flare576, Garfield96, gdhuper, gilesv, gillespiecd, gonatz, gorogoroumaru, GuillaumeGomez, Gymea, hampuslidin, hdhoang, he4d, hedonihilist, henriiik, HiranmayaGundu, hirschenberger, homburg, iamcodemaker, ibraheemdev, iCodeSometime, iliekturtles, ilius, incrop, ineol, itn3000, Jacobious52, jafriyie1, jakevossen5, jankeromnes, jankoprowski, janosimas, JCavallo, jdvr, jerodsanto, JesterOrNot, jgoday, jinlow, jjshanks, jntrnr, John-Goff, johnae, johnterickson, jonahsnider, JonathanArns, JonnyWalker81, jonstodle, jonstodle-webstep, JosephTLyons, just1a-person, jz448, jzaefferer, k-brk, Kelli314, klnusbaum, kloun, knottio, kornelski, kubouch, kvrhdn, lambdagolem, landaire, lesichkovm, LhKipp, lightclient, lily-mara, lincis, LittleboyHarry, LovecraftianHorror, lpil, luccasmmg, LyesSaadi, marcelocg, MarcoIeni, margguo, matsuu, mattclarke, mattyhall, max-sixty, mcbattirola, mfarberbrodsky, mhmdanas, mike-morr, miller-time, mlbright, moonrise-tk, morbatex, morrme, mvolkmann, naefl, nalpine, nalshihabi, nathom, naufraghi, nespera, neuronull, nibon7, nickgerace, nightscape, NiklasJonsson, nmandery, notryanb, oknozor, onthebridgetonowhere, orf, orientnab, oskarskog, pag4k, palashahuja, Paradiesstaub, phaunt, philip-peterson, piotrek-szczygiel, pka, pontaoski, Porges, prrao87, pulpdrew, quebin31, Qwanve, rabisg0, radekvit, ramonsnir, reaganmcf, realcundo, RedlineTriad, rezural, richardpark-msft, rimathia, ritobanrc, rjboas, rnxpyke, routrohan, RReverser, rrichardson, rtlechow, ryuichi1208, sambordo1, Samboy218, samhedin, samuelvanderwaal, sandorex, schrieveslaach, Sciencentistguy, scrabsha, sdfnz, sebastian-xyz, shaaraddalvi, sholderbach, siedentop, skelly37, smaydew, Sosthene-Guedon, soumil-07, sousajf1, Southclaws, stevenbarragan, stormasm, suzanje, svartalf, Sympatron, syndek, taiki-e, tchak, TechWatching, thegedge, therealprof, tiffany352, tim77, Tiwalun, TrevorAC99, tumdum, tupini07, tw4452852, twe4ked, twitu, u5surf, UltraWelfare, uma0317, utam0k, ve-nt, VincentWo, vladdoster, voanhduy1512, vsoch, vthriller, waldyrious, warrenseine, WatsonThink, watzon, waywardmonkeys, wcarss, wycats, x3rAx, xolve, yaahc, yahsinhuangtw, yanganto, yaymukund, Yethal, ymgyt, zkat</p>
<h2 id="lowlights" tabindex="-1"> Lowlights</h2>
<h3 id="completions" tabindex="-1"> Completions</h3>
<p>We've known for quite a long time that to have a strong shell experience means having strong completions. Shells like fish are an example of what's possible with completions, and it's an easy feature to miss if the shell you move to doesn't support them at the same level.</p>
<p>In Nushell, we hit a bit of a snag as we built out completions - we had a bug in the language. It was one of those nasty ones that makes scripts hard to debug, variables leaking from one scope to another. We knew that it'd make creating custom completions far harder.</p>
<p>We've been hard at work on a <a href="https://github.com/jntrnr/engine-q" target="_blank" rel="noopener noreferrer">rebuild of important parts of Nushell</a> for correctness that hopes to address this. Once it lands, we'll be able to turn our collective attention to standing up a full completion design that allows users to write completions in Nushell.</p>
<h3 id="forgotten-dreams" tabindex="-1"> Forgotten dreams</h3>
<p>For the last two years, we've been hoping to spend more time on making Nushell work well in other environments. Projects like our <a href="https://github.com/nushell/nu_jupyter" target="_blank" rel="noopener noreferrer">Jupyter notebook experiment</a> show a tiny piece of what might be possible, but we haven't yet been able to commit time to create a more complete implementation (or our own notebook).</p>
<h2 id="looking-ahead" tabindex="-1"> Looking ahead</h2>
<p>Over the next year, as we close the gaps in functionality to bring Nushell up to a higher level of polish as a language, shell, and data system, we'll be taking a hard look at what will become part of the 1.0 release. While there isn't a date set, yet, will be looking at the feedback from users telling us how well various features work and which should be included in Nushell's first stable release.</p>
<p>If you're interested in helping get us there, come join us in the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and <a href="https://github.com/nushell/nushell/" target="_blank" rel="noopener noreferrer">repo</a> and let's see just how good Nushell can be.</p>
<p><em>Cake photo from: https://depositphotos.com/stock-photos/birthday-cake-2.html</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.36</title>
      <link>www.nushell.sh/blog/2021-08-24-nushell_0_36.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-08-24-nushell_0_36.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.36</source>
      <description> Nushell 0.36
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.36 of Nu. This release fixes some long-standing issues with history, improves the help system, improves dataframes, and much more.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-36" tabindex="-1"> Nushell 0.36</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.36 of Nu. This release fixes some long-standing issues with history, improves the help system, improves dataframes, and much more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.36 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.36.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="help-now-has-search-fdncred" tabindex="-1"> Help now has search (fdncred)</h2>
<p>You can now use <code>help -f &lt;term&gt;</code> and search the help for text. This can come in handy if you know roughly what you want but can't remember the name of the command:</p>
<div><pre><code>> help -f string
────┬──────────────────────────┬────────────────────────────────────────────────┬─────────────
 #  │           name           │                     usage                      │ extra_usage
────┼──────────────────────────┼────────────────────────────────────────────────┼─────────────
  0 │ ansi strip               │ strip ansi escape sequences from string        │
  1 │ build-string             │ Builds a string from the arguments.            │
  2 │ dataframe concatenate    │ [Series] Concatenates strings with other array │
  3 │ dataframe contains       │ [Series] Checks if a pattern is contained in a │
    │                          │ string                                         │
  4 │ dataframe replace        │ [Series] Replace the leftmost (sub)string by a │
    │                          │ regex pattern                                  │
...
</code></pre></div><h2 id="built-in-tutor-jt" tabindex="-1"> Built-in tutor (jt)</h2>
<p>In addition to the new help search, we've also started to build out a built-in Nushell tutorial. You can navigate by topic or search the help text for a string.</p>
<p><img src="@source/assets/images/0_36_tutor.png" alt="Screenshot showing the tutor command running 'tutor table'"></p>
<p>We've only added a few topics so far, but we hope to grow these topics (with your help) over the coming releases.</p>
<h2 id="new-commands-and-features" tabindex="-1"> New commands and features</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/3917" target="_blank" rel="noopener noreferrer"><code>drop nth</code></a> - drops the given rows (andrasio)</li>
<li><a href="https://github.com/nushell/nushell/pull/3918" target="_blank" rel="noopener noreferrer"><code>PROMPT_STRING</code> environment variable</a> - configures the script to run to create the prompt directly from the environment (elferherrera)</li>
<li><a href="https://github.com/nushell/nushell/pull/3919" target="_blank" rel="noopener noreferrer"><code>zip</code></a> - combine two lists into one list of pairs (andrasio)</li>
</ul>
<h2 id="dataframe-improvements-elferherrera" tabindex="-1"> Dataframe improvements (elferherrera)</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/3894" target="_blank" rel="noopener noreferrer">datetime commands</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3907" target="_blank" rel="noopener noreferrer">describe command</a></li>
<li><a href="https://github.com/nushell/nushell/pull/3960" target="_blank" rel="noopener noreferrer">rolling and cumulative commands</a></li>
</ul>
<h2 id="important-bugfixes-lily-mara-gwenn-jt" tabindex="-1"> Important bugfixes (lily-mara, gwenn, jt)</h2>
<p>A long-standing issue with history getting garbled when you have multiple shells open sending history updates is hopefully <a href="https://github.com/kkawakam/rustyline/pull/560" target="_blank" rel="noopener noreferrer">now fixed</a>. Thanks to the rustyline maintainers for helping find the root cause and creating a fix for it.</p>
<h2 id="additional-improvements" tabindex="-1"> Additional improvements</h2>
<ul>
<li>waldyrious fixed <a href="https://github.com/nushell/nushell/pull/3890" target="_blank" rel="noopener noreferrer">a typo</a>, and fixed <a href="https://github.com/nushell/nushell/pull/3891" target="_blank" rel="noopener noreferrer">issue templates</a></li>
<li>fdncred started a list of <a href="https://github.com/nushell/nushell/pull/3895" target="_blank" rel="noopener noreferrer">projects that officially support Nushell</a></li>
<li>RealCundo added <a href="https://github.com/nushell/nushell/pull/3888" target="_blank" rel="noopener noreferrer">PartialEq to ReturnValue</a></li>
<li>hedonihilist improved <a href="https://github.com/nushell/nushell/pull/3902" target="_blank" rel="noopener noreferrer">how DirInfo calculates directory size</a></li>
<li>soumil-07 <a href="https://github.com/nushell/nushell/pull/3905" target="_blank" rel="noopener noreferrer">worked around a BigDecimal issue that broke <code>math floor</code></a></li>
<li>jt added <a href="https://github.com/nushell/nushell/pull/3906" target="_blank" rel="noopener noreferrer"><code>in</code> and <code>not-in</code> for strings</a>, changed the <a href="https://github.com/nushell/nushell/pull/3924" target="_blank" rel="noopener noreferrer">release build to focus on binary size</a></li>
<li>baoyachi <a href="https://github.com/nushell/nushell/pull/3914" target="_blank" rel="noopener noreferrer">updated shadow-rs, which fixes some datetime issues and more</a></li>
<li>knottio added <a href="https://github.com/nushell/nushell/pull/3921" target="_blank" rel="noopener noreferrer">trailing slash when completing symlinked directory</a></li>
<li>fdncred fixed <a href="https://github.com/nushell/nushell/pull/3923" target="_blank" rel="noopener noreferrer"><code>fetch</code> to better follow redirects</a>, and improved the <a href="https://github.com/nushell/nushell/pull/3962" target="_blank" rel="noopener noreferrer">issue template</a></li>
<li>filaretov fixed <a href="https://github.com/nushell/nushell/pull/3936" target="_blank" rel="noopener noreferrer">unaliasing to only affect the current scope</a></li>
<li>kubouch fixed <a href="https://github.com/nushell/nushell/pull/3939" target="_blank" rel="noopener noreferrer">an issue where <code>source</code> couldn't handle paths with emojis</a></li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>The ability to search help and improve a built-in tutorial gives us a lot of opportunties to make Nushell more user-friendly, especially to users who are just getting started learning what Nushell can do. If you're interested, these are some good places to <a href="https://github.com/nushell/nushell/blob/main/crates/nu-command/src/commands/core_commands/tutor.rs" target="_blank" rel="noopener noreferrer">jump in and help</a> if you have specific topics or areas of interest.</p>
<p>The projects we reported on last time, engine-q and reedline, are steadily improving. We're currently working through any remaining issues so that we can begin experimenting with integrating them into Nushell.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.37</title>
      <link>www.nushell.sh/blog/2021-09-14-nushell_0_37.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-09-14-nushell_0_37.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.37</source>
      <description> Nushell 0.37
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.37 of Nu. This release adds a new find function, improvements to the current engine, and updates on the upcoming engine.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-37" tabindex="-1"> Nushell 0.37</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.37 of Nu. This release adds a new <code>find</code> function, improvements to the current engine, and updates on the upcoming engine.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.37 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.37.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="finding-data-in-tables" tabindex="-1"> <code>find</code>ing data in tables</h2>
<p><img src="@source/assets/images/0_37_find.png" alt="Screenshot showing using the new find command to find the phrase toml in a table"></p>
<p>In 0.37, you now have access to a new <code>find</code> command, which can help you quickly look for data across all columns in a table.</p>
<p>You can still reach your system's <code>find</code> command using <code>^</code> by typing <code>^find</code>.</p>
<h2 id="additional-improvements" tabindex="-1"> Additional improvements</h2>
<ul>
<li>fdncred added more <a href="https://github.com/nushell/nushell/pull/3973" target="_blank" rel="noopener noreferrer">support for ansi art</a>, and <a href="https://github.com/nushell/nushell/pull/3975" target="_blank" rel="noopener noreferrer">more chars</a></li>
<li>aminya removed shelling out in <a href="https://github.com/nushell/nushell/pull/3974" target="_blank" rel="noopener noreferrer">some cases where it's not needed</a></li>
<li>jt made <a href="https://github.com/nushell/nushell/pull/3983" target="_blank" rel="noopener noreferrer">sys/ps/fetch/post core commands</a>, moving them from plugins to internal commands. This allows for future capability to have nushell download its own extensions.</li>
<li>andrasio began adding <a href="https://github.com/nushell/nushell/pull/3986" target="_blank" rel="noopener noreferrer">support for creating errors inside of nushell code</a>, extended <a href="https://github.com/nushell/nushell/pull/3988" target="_blank" rel="noopener noreferrer"><code>tags</code> to support basic command reflection</a></li>
<li>lily-mara added <a href="https://github.com/nushell/nushell/pull/3987" target="_blank" rel="noopener noreferrer"><code>into filesize</code></a></li>
<li>tw4452852 added <a href="https://github.com/nushell/nushell/pull/3992" target="_blank" rel="noopener noreferrer">support to append when calling <code>save</code></a></li>
<li>Pantoshire improved <a href="https://github.com/nushell/nushell/pull/3995" target="_blank" rel="noopener noreferrer">errors when bash-style alias was mistakingly used</a></li>
<li>tranzystorek-io did a lot of <a href="https://github.com/nushell/nushell/pull/3996" target="_blank" rel="noopener noreferrer">general code improvements</a></li>
<li>kubouch did some fixes to p<a href="https://github.com/nushell/nushell/pull/3998" target="_blank" rel="noopener noreferrer">aths and the <code>source</code> command</a></li>
<li>elferherrera updated the <a href="https://github.com/nushell/nushell/pull/4003" target="_blank" rel="noopener noreferrer">prompt environment variable to PROMPT_COMMAND</a> to show that it is nushell code that gets run</li>
</ul>
<h2 id="engine-q" tabindex="-1"> Engine-q</h2>
<p>We've been hard at work on the upcoming set of engine updates for Nushell (codenamed 'engine-q'). These updates address some fundamental flaws in the current Nushell engine design and should help set us up for a strong engine in the future.</p>
<p>In this section we'll talk a bit about the design of this engine and show some fun tricks it's able to do.</p>
<h3 id="background" tabindex="-1"> Background</h3>
<p>The current Nushell code uses a single concept for the scope that's shared between the parser and the evaluation engine. This is how definitions could be added by the parser into the scope that the engine could find them. This scope used locks to maintain thread safety. This meant that each variable lookup had the additional cost of unlocking the lock around the scope. The way this was set up also had subtle bugs with how the scope was handled, including corner cases where variables would be visible in scopes where they shouldn't be.</p>
<p>In addition, there wasn't an easy way to do a speculative parse of content like you might with syntax highlighting or completions.</p>
<h3 id="new-design" tabindex="-1"> New design</h3>
<p>In the new design, both the parser and the engine have received a pretty thorough rework. The parser now uses an <a href="https://en.wikipedia.org/wiki/String_interning" target="_blank" rel="noopener noreferrer">interning system</a> for its definitions, allowing the resulting parse tree to be simpler. It also has a change delta system where the parser can create a temporary working set to use, and this working set can optionally merge into the permanent state. We've also building in a lot of additional fun additions -- like typechecking! -- so you can get additional benefits from information the parser knows.</p>
<p>Likewise, the engine has been rewritten to use proper scoping, a simpler value system, and more.</p>
<p>As you can see, we're taking full advantage of the opportunity to fix long-standing issues we wished we could fix over the last couple of years working on Nu.</p>
<p>Oh, there is one more thing.</p>
<p><img src="@source/assets/images/eq_git_branch_completion.gif" alt="Animated gif showing off dynaming git branch completions"></p>
<p>A big motivator for the rewrite was to make it easier to add dynamic custom completions, like the kind you use when completing a git branch while doing <code>git checkout</code>. The above gif shows a very early prototype of how we might implement this using the engine-q system. It works by running actually nushell code at completion time, getting the list of git branches as a list, and handing that list back to the completion system.</p>
<p>The demo took less than two hours to implement using the capabilities of the new engine, and we're excited to see how we can make this more general and offer the ability for folks to create their own completions in nushell code.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>Engine-q offers some huge improvements to both the internals of Nushell as well as a way to finally check off tasks we know we've wanted for a long time (like git completions). If you're interested in helping out with the engine-q work, we'd love to have the help. The best place is to join us on the discord and on the engine-q repo.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.38</title>
      <link>www.nushell.sh/blog/2021-10-05-nushell_0_38.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-10-05-nushell_0_38.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.38</source>
      <description> Nushell 0.38
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.38 of Nu. This release includes polish to the user interface, improvements to how columns are passed, lots of bug fixes, and updates on the upcoming engine.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-38" tabindex="-1"> Nushell 0.38</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.38 of Nu. This release includes polish to the user interface, improvements to how columns are passed, lots of bug fixes, and updates on the upcoming engine.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.38 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.38.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="quickly-jump-to-a-shell-tw4452852" tabindex="-1"> Quickly jump to a shell (tw4452852)</h2>
<p>If you've used shells, you've no doubt used the <code>n</code> and <code>p</code> commands to quickly jump between them. This can be a big time saver when you're working in multiple directories.</p>
<p>In this release, we've added a <code>g</code> command that helps you quickly jump to a particular shell. This helps in the cases where you end up with more than two shells open and you already know what shell you want to jump to.</p>
<h2 id="additional-improvements" tabindex="-1"> Additional improvements</h2>
<ul>
<li>Improvements in <a href="https://github.com/nushell/nushell/pull/4027" target="_blank" rel="noopener noreferrer">updated table cell values</a> (andrasio)</li>
<li><code>update cells</code> command now <a href="https://github.com/nushell/nushell/pull/4039" target="_blank" rel="noopener noreferrer">can take a list of columns</a> (ArtoLord)</li>
<li>You can now also <a href="https://github.com/nushell/nushell/pull/4062" target="_blank" rel="noopener noreferrer">pass a list of columns to <code>select</code></a> (JoshCheek)</li>
<li>Improvements in <a href="https://github.com/nushell/nushell/pull/4036" target="_blank" rel="noopener noreferrer">how html table scraping works</a> and <a href="https://github.com/nushell/nushell/pull/4043" target="_blank" rel="noopener noreferrer">also</a> (luccasmmg)</li>
<li>Fix to <a href="https://github.com/nushell/nushell/pull/4037" target="_blank" rel="noopener noreferrer">compiling on nightly</a> (gilescope)</li>
<li>Removed <a href="https://github.com/nushell/nushell/pull/4038" target="_blank" rel="noopener noreferrer">unused deps</a> (gilescope)</li>
<li>Completions now <a href="https://github.com/nushell/nushell/pull/4023" target="_blank" rel="noopener noreferrer">can complete inside of an argument</a> (tw4452852)</li>
<li>We now <a href="https://github.com/nushell/nushell/pull/4052" target="_blank" rel="noopener noreferrer">expand tilde when reading plugin directories</a> (hedonihilist)</li>
<li>We also <a href="https://github.com/nushell/nushell/pull/4058" target="_blank" rel="noopener noreferrer">turn off ansi colors when not in a TTY</a></li>
<li>Fixed some of the <a href="https://github.com/nushell/nushell/pull/4061" target="_blank" rel="noopener noreferrer">wasm deps</a> (jt)</li>
<li>Fixed a <a href="https://github.com/nushell/nushell/pull/4022" target="_blank" rel="noopener noreferrer">leak of a <code>let</code>-binding</a> (Pantonshire)</li>
<li>Use <a href="https://github.com/nushell/nushell/pull/4021" target="_blank" rel="noopener noreferrer">SIMD-enabled compiler flags</a> (aminya)</li>
<li>Updated polars <a href="https://github.com/nushell/nushell/pull/4013" target="_blank" rel="noopener noreferrer">dependency to 0.16</a> (elferherrera)</li>
<li>Updates to how <a href="https://github.com/nushell/nushell/pull/4008" target="_blank" rel="noopener noreferrer"><code>path join</code> works</a> (kubouch)</li>
<li>Moved <code>nu-path</code> tests into <a href="https://github.com/nushell/nushell/pull/4015" target="_blank" rel="noopener noreferrer">integration tests</a> (kubouch)</li>
<li>New support for <a href="https://github.com/nushell/nushell/pull/4048" target="_blank" rel="noopener noreferrer">converting to column paths</a> (fdncred)</li>
<li>Cleanup <a href="https://github.com/nushell/nushell/pull/4029" target="_blank" rel="noopener noreferrer">fixes to make tests more resilient</a> (kubouch)</li>
<li>Internal improvement <a href="https://github.com/nushell/nushell/pull/4031" target="_blank" rel="noopener noreferrer">to make working with spans easier</a> (elferherrera)</li>
<li>Fix to <a href="https://github.com/nushell/nushell/pull/4033" target="_blank" rel="noopener noreferrer">gitpod</a> (Merith-TK)</li>
<li>Fix to <a href="https://github.com/nushell/nushell/pull/4034" target="_blank" rel="noopener noreferrer">big int handling in <code>to</code></a> (pjmore)</li>
<li>Fixed a <a href="https://github.com/nushell/nushell/pull/4040" target="_blank" rel="noopener noreferrer">typo</a> (lildata)</li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/4051" target="_blank" rel="noopener noreferrer">some typos in the tutor</a> (hojjatabdollahi)</li>
<li>Removed <a href="https://github.com/nushell/nushell/pull/4063" target="_blank" rel="noopener noreferrer">the experimental scrolling support as it had broken</a></li>
</ul>
<h2 id="engine-q" tabindex="-1"> Engine-q</h2>
<p>Engine-q continues to grow to become the upcoming engine for Nushell. Over the last three weeks, it gained basic filesystem support, improved completions, lots of new internal commands including <code>select</code>, <code>ps</code>, <code>sys</code>, and more.</p>
<p>We've also added a full module system, a new error reporter using <a href="https://github.com/zkat/miette" target="_blank" rel="noopener noreferrer">miette</a>, and support for externals.</p>
<p>It's grown to the stage that some of us are starting to dogfood using engine-q as our shell.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>For the next few months, as engine-q matures, we'll be contributing to both Nushell and engine-q. This will help Nushell continue to grow and help support users of Nushell. We'll also use the knowledge we get from support Nushell in how we design these last pieces of engine-q.</p>
<p>As it grows, we'll make a way to help us test engine-q until we're confident it's ready to be moved into place.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.39</title>
      <link>www.nushell.sh/blog/2021-10-26-nushell_0_39.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-10-26-nushell_0_39.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.39</source>
      <description> Nushell 0.39
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.39 of Nu. This release is a bugfix release of 0.38.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-39" tabindex="-1"> Nushell 0.39</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.39 of Nu. This release is a bugfix release of 0.38.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.39 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.39.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<ul>
<li>History file is now removed when the history is cleared (fdncred)</li>
<li>HTML selector has a regression fixed (lucassmmg)</li>
<li>Unused dependencies were removed (lucassmmg)</li>
<li>Updated clippy warnings were fixed (jt)</li>
</ul>
<h1 id="engine-q-progress" tabindex="-1"> Engine-q progress</h1>
<p>You'll notice that this release is pretty light, only a set of fixes on 0.38. This is because our energy is now largely focused on engine-q. We're excited to get this in front of you.</p>
<p>Just to tease a little of what will be possible, this week we added support for processing streams in parallel in engine-q using a new <code>par-each</code> command. We'll talk more about this as it develops.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We're excited about what the new engine changes will bring in terms of performance, correctness, and new capabilities. If you're interested in helping out, come <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">join us on the discord</a>!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.40</title>
      <link>www.nushell.sh/blog/2021-11-16-nushell_0_40.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-11-16-nushell_0_40.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.40</source>
      <description> Nushell 0.40
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.40 of Nu. This release is includes better table imports and much smaller release size.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-40" tabindex="-1"> Nushell 0.40</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.40 of Nu. This release is includes better table imports and much smaller release size.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.40 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.40.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="detecting-columns-jt" tabindex="-1"> Detecting columns (jt)</h2>
<p>Nushell now supports a new command: <code>detect columns</code>. This command is intended as an easy way to handle tabular data that's written as text. Commands like <code>ps</code>, <code>ls -l</code>, <code>netstat</code>, <code>df</code>, and others commonly output their output as text. With <code>detect columns</code>, you can run the external command, and convert them into Nushell's tabular data format.</p>
<p>Let's look at an example:</p>
<div><pre><code>> df
Filesystem     1K-blocks      Used Available Use% Mounted on
udev             8108824         0   8108824   0% /dev
tmpfs            1631284      2068   1629216   1% /run
/dev/nvme1n1p2 490691512 346066860 119629172  75% /
tmpfs            8156408    251332   7905076   4% /dev/shm
tmpfs               5120         4      5116   1% /run/lock
tmpfs            8156408         0   8156408   0% /sys/fs/cgroup
/dev/nvme0n1p1    508932    211684    297248  42% /boot/efi
tmpfs            1631280       128   1631152   1% /run/user/1000
/dev/nvme0n1p2 238810780 136867812  89742316  61% /media/jt/Data
</code></pre></div><p>The <code>df</code> command comes with most Unix-based systems and prints out a table of data for each of the devices on the system. Let's turn this into a table we can work with in Nushell:</p>
<div><pre><code>> df | detect columns
───┬────────────────┬───────────┬───────────┬───────────┬──────┬────────────────┬────────────────
 # │   Filesystem   │ 1K-blocks │   Used    │ Available │ Use% │    Mounted     │       on
───┼────────────────┼───────────┼───────────┼───────────┼──────┼────────────────┼────────────────
 0 │ udev           │ 8108824   │ 0         │ 8108824   │ 0%   │ /dev           │
 1 │ tmpfs          │ 1631284   │ 2068      │ 1629216   │ 1%   │ /run           │
 2 │ /dev/nvme1n1p2 │ 490691512 │ 346067044 │ 119628988 │ 75%  │ /              │
 3 │ tmpfs          │ 8156408   │ 251332    │ 7905076   │ 4%   │ /dev/shm       │
 4 │ tmpfs          │ 5120      │ 4         │ 5116      │ 1%   │ /run/lock      │ /run/lock
 5 │ tmpfs          │ 8156408   │ 0         │ 8156408   │ 0%   │ /sys/fs/cgroup │ /sys/fs/cgroup
 6 │ /dev/nvme0n1p1 │ 508932    │ 211684    │ 297248    │ 42%  │ /boot/efi      │ /boot/efi
 7 │ tmpfs          │ 1631280   │ 128       │ 1631152   │ 1%   │ /run/user/1000 │ /run/user/1000
 8 │ /dev/nvme0n1p2 │ 238810780 │ 136867812 │ 89742316  │ 61%  │ /media/jt/Data │ /media/jt/Data
───┴────────────────┴───────────┴───────────┴───────────┴──────┴────────────────┴────────────────
</code></pre></div><p>Ahh, that's close to what we want in just one step. Let's go ahead and clean this up a little. First, let's drop that last column. &quot;Mounted on&quot; being two words confused the importer, but all the data is there, we just need to drop the last column.</p>
<div><pre><code>> df | detect columns | drop column
───┬────────────────┬───────────┬───────────┬───────────┬──────┬────────────────
 # │   Filesystem   │ 1K-blocks │   Used    │ Available │ Use% │    Mounted
───┼────────────────┼───────────┼───────────┼───────────┼──────┼────────────────
 0 │ udev           │ 8108824   │ 0         │ 8108824   │ 0%   │ /dev
 1 │ tmpfs          │ 1631284   │ 2068      │ 1629216   │ 1%   │ /run
 2 │ /dev/nvme1n1p2 │ 490691512 │ 346067188 │ 119628844 │ 75%  │ /
 3 │ tmpfs          │ 8156408   │ 251332    │ 7905076   │ 4%   │ /dev/shm
 4 │ tmpfs          │ 5120      │ 4         │ 5116      │ 1%   │ /run/lock
 5 │ tmpfs          │ 8156408   │ 0         │ 8156408   │ 0%   │ /sys/fs/cgroup
 6 │ /dev/nvme0n1p1 │ 508932    │ 211684    │ 297248    │ 42%  │ /boot/efi
 7 │ tmpfs          │ 1631280   │ 128       │ 1631152   │ 1%   │ /run/user/1000
 8 │ /dev/nvme0n1p2 │ 238810780 │ 136867812 │ 89742316  │ 61%  │ /media/jt/Data
───┴────────────────┴───────────┴───────────┴───────────┴──────┴────────────────
</code></pre></div><p>Finally, it'd be nice to be able to have real file sizes for the middle columns, so let's convert the numbers into Nushell's filesize type:</p>
<div><pre><code>> df | detect columns | drop column | into filesize 1K-blocks Used Available
───┬────────────────┬───────────┬──────────┬───────────┬──────┬────────────────
 # │   Filesystem   │ 1K-blocks │   Used   │ Available │ Use% │    Mounted
───┼────────────────┼───────────┼──────────┼───────────┼──────┼────────────────
 0 │ udev           │    8.1 MB │      0 B │    8.1 MB │ 0%   │ /dev
 1 │ tmpfs          │    1.6 MB │   2.1 KB │    1.6 MB │ 1%   │ /run
 2 │ /dev/nvme1n1p2 │  490.7 MB │ 346.1 MB │  119.6 MB │ 75%  │ /
 3 │ tmpfs          │    8.2 MB │ 251.3 KB │    7.9 MB │ 4%   │ /dev/shm
 4 │ tmpfs          │    5.1 KB │      4 B │    5.1 KB │ 1%   │ /run/lock
 5 │ tmpfs          │    8.2 MB │      0 B │    8.2 MB │ 0%   │ /sys/fs/cgroup
 6 │ /dev/nvme0n1p1 │  508.9 KB │ 211.7 KB │  297.2 KB │ 42%  │ /boot/efi
 7 │ tmpfs          │    1.6 MB │    128 B │    1.6 MB │ 1%   │ /run/user/1000
 8 │ /dev/nvme0n1p2 │  238.8 MB │ 136.9 MB │   89.7 MB │ 61%  │ /media/jt/Data
───┴────────────────┴───────────┴──────────┴───────────┴──────┴────────────────
</code></pre></div><p>In just a couple steps, we've converted the text-based table into tabular data we can use just like any other Nushell command. To make this easy to do in the future, we can alias <code>df</code> to do these steps:</p>
<div><pre><code>> alias df = (^df | detect columns | drop column | into filesize 1K-blocks Used Available)
</code></pre></div><h2 id="smaller-binaries-fdncred" tabindex="-1"> Smaller binaries (fdncred)</h2>
<p>The size of the Nushell release binaries has come up as regular feedback from Nushell users. &quot;Why does the shell have to be so big?&quot; And we've heard you!</p>
<p>Today's release now uses a combination of <code>strip</code> and <code>upx</code> to bring considerable savings in binary size. The Linux release (plugins incl.) has dropped from 475mb to 58mb(!!), making it <strong>88% smaller</strong>. We're seeing similar improvements in the sizes of the macOS and Windows releases.</p>
<h2 id="additional-fixes" tabindex="-1"> Additional fixes</h2>
<ul>
<li>Upgraded <a href="https://github.com/nushell/nushell/pull/4122" target="_blank" rel="noopener noreferrer">polars dataframe support</a> (nmandery)</li>
<li>Fixed a <a href="https://github.com/nushell/nushell/pull/4107" target="_blank" rel="noopener noreferrer">panic during parsing</a> (ahkrr)</li>
<li>File matching between <code>rm</code> and <code>ls</code> is now <a href="https://github.com/nushell/nushell/pull/4099" target="_blank" rel="noopener noreferrer">more consistent</a> (yogi)</li>
</ul>
<h1 id="engine-q-progress" tabindex="-1"> Engine-q progress</h1>
<p>We've also hit a milestone with engine-q: now over 100 commands have been ported to engine-q! Special thanks to onthebridgetonowhere, CBenoit, luccasmmg, stormasm, and aslynatilla for their work in these ports since the last Nushell release.</p>
<p>We've also added support for <a href="https://github.com/nushell/engine-q/pull/332" target="_blank" rel="noopener noreferrer"><code>$config</code></a>, <a href="https://github.com/nushell/engine-q/pull/309" target="_blank" rel="noopener noreferrer"><code>$in</code></a>, a new <a href="https://github.com/nushell/engine-q/pull/326" target="_blank" rel="noopener noreferrer">record syntax</a>, <a href="https://github.com/nushell/engine-q/pull/340" target="_blank" rel="noopener noreferrer"><code>ls</code> colors</a>, <a href="https://github.com/nushell/engine-q/pull/331" target="_blank" rel="noopener noreferrer">environment variable module imports</a>, and much more. While engine-q isn't quite ready to be tested as a daily driver, with each day its capabilities and stability grows.</p>
<p>If you're interested in how some of the upcoming support for parallel processing in engine-q works, contributor JT <a href="https://www.youtube.com/watch?v=3o8b_QcrFHc" target="_blank" rel="noopener noreferrer">made a video explaining it</a>.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We're excited to see Nushell continue to gain more ability to work with data in easier ways as well as doing so in as a much smaller binary. Progress on engine-q continues to grow, and covers a large amount of ground in the engine internals, porting commands, plugin support, modules, and more.</p>
<p>If you're interested in helping out, come <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">join us on the discord</a>. We're more than happy to help answer questions and point you towards on-going projects!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.41</title>
      <link>www.nushell.sh/blog/2021-12-07-nushell_0_41.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-12-07-nushell_0_41.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.41</source>
      <description> Nushell 0.41
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.41 of Nu. This release is a bugfix release of 0.41.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-41" tabindex="-1"> Nushell 0.41</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.41 of Nu. This release is a bugfix release of 0.41.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.41 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.41.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="features" tabindex="-1"> Features</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/4175" target="_blank" rel="noopener noreferrer">Add -l/--login flag for compat with other shells</a> (ahouts)</li>
</ul>
<h2 id="fixes" tabindex="-1"> Fixes</h2>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/4156" target="_blank" rel="noopener noreferrer"><code>save --append</code> will now create a file if missing</a> (BraulioVM)</li>
<li><a href="https://github.com/nushell/nushell/pull/4135" target="_blank" rel="noopener noreferrer">Upgraded dependencies</a> (ahkrr)</li>
<li><a href="https://github.com/nushell/nushell/pull/4152" target="_blank" rel="noopener noreferrer">Corrected spelling in crate docs and code docs</a> (EdwardBetts)</li>
<li><a href="https://github.com/nushell/nushell/pull/4155" target="_blank" rel="noopener noreferrer">Fixed the markup in some of the crate docs</a> (tshepang)</li>
<li><a href="https://github.com/nushell/nushell/pull/4157" target="_blank" rel="noopener noreferrer">external arguments are now sanitized more</a> (BraulioVM)</li>
<li><a href="https://github.com/nushell/nushell/pull/4173" target="_blank" rel="noopener noreferrer">upx/strip has been removed after feedback from users</a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/4174" target="_blank" rel="noopener noreferrer">Clipboard capability via arboard removed</a> (jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/4178" target="_blank" rel="noopener noreferrer">Removed some unnecessary allocation</a> (ahouts)</li>
</ul>
<h1 id="engine-q-progress" tabindex="-1"> Engine-q progress</h1>
<p>As engine-q matures, our energy continues to be directed towards it. Over <a href="https://github.com/nushell/engine-q/pulls?page=1&amp;q=is%3Apr+is%3Aclosed" target="_blank" rel="noopener noreferrer">80 PRs</a> have been merged into engine-q since the last Nushell release. As engine-q nears readiness for early adopters to begin using it, we've begun concentrating on closing the remaining gaps in functionality so that it can be used as a daily shell. Once ready, Nushell will have its core functionality replaced by engine-q and from there on we'll be using the new engine. We're planning to change the version number significantly to reflect the jump in features.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>As we enter the holidays, the focus of the Nushell effort continues to be on engine-q. There are still <a href="https://github.com/nushell/engine-q/issues/242" target="_blank" rel="noopener noreferrer">many commands left to port</a> and more places to jump in. If you'd like to help, come join us on the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>. We'd be happy to show you around.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.42</title>
      <link>www.nushell.sh/blog/2021-12-28-nushell_0_42.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2021-12-28-nushell_0_42.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.42</source>
      <description> Nushell 0.42
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.42 of Nu. This release is a bugfix release of 0.41.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-42" tabindex="-1"> Nushell 0.42</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.42 of Nu. This release is a bugfix release of 0.41.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.42 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.42.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="fixes" tabindex="-1"> Fixes</h2>
<ul>
<li>Can optionally <a href="https://github.com/nushell/nushell/pull/4219" target="_blank" rel="noopener noreferrer">use an insecure SSL cert</a> (nibon7)</li>
<li>Fixed a crash <a href="https://github.com/nushell/nushell/pull/4226" target="_blank" rel="noopener noreferrer">when viewing text files</a> (nibon7)</li>
<li>Build fixed for <a href="https://github.com/nushell/nushell/pull/4192" target="_blank" rel="noopener noreferrer">NetBSD</a> (0323pin)</li>
</ul>
<h2 id="breaking-change" tabindex="-1"> Breaking change</h2>
<ul>
<li>For naming consistency, <a href="https://github.com/nushell/nushell/pull/4189" target="_blank" rel="noopener noreferrer"><code>into column_path</code> is now <code>into column-path</code></a> (hustcer)</li>
</ul>
<h1 id="engine-q-progress" tabindex="-1"> Engine-q progress</h1>
<p>At this point, we're now 100% focused on getting engine-q done. Over <a href="https://github.com/nushell/engine-q/pulls?page=1&amp;q=is%3Apr+is%3Aclosed" target="_blank" rel="noopener noreferrer">120 PRs</a> have been merged into engine-q since the last Nushell release and another <a href="https://github.com/nushell/reedline/pulls?q=is%3Apr+is%3Aclosed" target="_blank" rel="noopener noreferrer">20 PRs in reedline</a>.</p>
<p>Engine-q is now able to be used as a standalone shell. It includes the full set of dataframe functionality and most of the nushell commands. We aren't yet making nightly builds available, but you should be able to <a href="https://github.com/nushell/engine-q" target="_blank" rel="noopener noreferrer">clone and build engine-q</a> on your machine in the same way you might grab the latest Nushell. As you try out engine-q, also give a read over the <a href="https://github.com/nushell/engine-q/issues/522" target="_blank" rel="noopener noreferrer">in-progress breaking change list</a>, as it shows where the new engine will differ from Nushell's current engine.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>There are still <a href="https://github.com/nushell/engine-q/issues/242" target="_blank" rel="noopener noreferrer">some commands left to port</a> if you'd like to jump in and give porting a try. If you're interested, you can also help us by testing out engine-q itself as a shell and report your experiences with it. And of course, come join us on the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>. We'd be happy to show you around.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.43</title>
      <link>www.nushell.sh/blog/2022-01-18-nushell_0_43.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2022-01-18-nushell_0_43.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.43</source>
      <description> Nushell 0.43
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.43 of Nu. This release is a bugfix release of 0.42.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-43" tabindex="-1"> Nushell 0.43</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.43 of Nu. This release is a bugfix release of 0.42.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.43 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.43.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<p>You can now learn about some of the upcoming changes in Nushell by reading the <code>tutor e-q</code> page. It will tell you about some of the new features and breaking changes, as well as link you to the full list of changes.</p>
<h2 id="fixes" tabindex="-1"> Fixes</h2>
<ul>
<li>Fix to the <a href="https://github.com/nushell/nushell/pull/4241" target="_blank" rel="noopener noreferrer">sample configuration file</a> (ilius)</li>
<li>Fix to a <a href="https://github.com/nushell/nushell/pull/4247" target="_blank" rel="noopener noreferrer">crate description</a> (michel-slm)</li>
<li>Bump to some <a href="https://github.com/nushell/nushell/pull/4258" target="_blank" rel="noopener noreferrer">dependencies in wasm support</a> (dependabot)</li>
<li>Update to <a href="https://github.com/nushell/nushell/pull/4261" target="_blank" rel="noopener noreferrer">sysinfo support</a> (GuillaumeGomez)</li>
<li>Fix to build <a href="https://github.com/nushell/nushell/pull/4262" target="_blank" rel="noopener noreferrer">on latest Rust stable + clippy</a> (jt)</li>
</ul>
<h1 id="engine-q-progress" tabindex="-1"> Engine-q progress</h1>
<p>Engine-q is now nearly complete. Most of the commands have been ported, as has support for the <code>shells</code> feature, many reedline-related improvements, text encoding, and much more. It's now ready for early adopters to pick it up and use it as their shell, reporting any issues they find.</p>
<p>To try it out, you can <a href="https://github.com/nushell/engine-q" target="_blank" rel="noopener noreferrer">build and run engine-q as a standalone application</a>. Also check out the <a href="https://github.com/nushell/engine-q/issues/459" target="_blank" rel="noopener noreferrer">list of configuration settings</a>, <a href="https://github.com/nushell/engine-q/issues/522" target="_blank" rel="noopener noreferrer">list of breaking changes</a>, and <a href="https://github.com/nushell/engine-q/issues/735" target="_blank" rel="noopener noreferrer">the final checklist before engine-q merges into Nushell</a>.</p>
<p>We're hoping to merge engine-q into the main Nushell codebase after the the upcoming 0.44 release. We'll number this release 0.60 to show how much progress has been made by switching to the new engine. We've love to get your feedback on engine-q before it becomes the main Nushell, to help us fix any major issues before the merge happens. Let us know what you find!</p>
<p>You can check out a <a href="https://www.youtube.com/watch?v=c18l_HPsOxs" target="_blank" rel="noopener noreferrer">recent video about engine-q</a> if you'd like to see it in action.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>There are still <a href="https://github.com/nushell/engine-q/issues/242" target="_blank" rel="noopener noreferrer">some commands left to port</a> if you'd like to jump in and give porting a try. If you're interested, you can also help us by testing out engine-q itself as a shell and report your experiences with it. And of course, come join us on the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>. We'd be happy to show you around.</p>
<p>Thanks again for all your support.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.44</title>
      <link>www.nushell.sh/blog/2022-02-08-nushell_0_44.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2022-02-08-nushell_0_44.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.44</source>
      <description> Nushell 0.44 - the calm before the storm
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing 0.44 of Nu. This is the last release before engine-q becomes the new engine.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-44-the-calm-before-the-storm" tabindex="-1"> Nushell 0.44 - the calm before the storm</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.44 of Nu. This is the last release before engine-q becomes the new engine.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.44 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.44.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<p>The <code>drop nth</code> command can now also take a range, allowing you to drop a range of rows as well.</p>
<h1 id="it-s-time" tabindex="-1"> It's time</h1>
<p>Here we are. The last release before engine-q merges into Nushell main. There are an <a href="https://github.com/nushell/nushell/pull/4364" target="_blank" rel="noopener noreferrer">enormous amount of changes coming</a>, including many <a href="https://github.com/nushell/nushell/issues/4305" target="_blank" rel="noopener noreferrer">breaking changes</a>. We encourage you to take a look at the breaking changes ahead of the engine-q releases so that you're familiar with the differences in commands.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>A few things are coming up:</p>
<ul>
<li>After this release, engine-q will land into Nushell main. At this point, we'll work to polish it and prepare it for its first release.</li>
<li>If, as we approach time for the coming release, we feel that it's close but not yet ready, we'll instead release a one-off set of binaries that you can download. This won't be a full release, but instead a beta release geared towards getting more feedback from early adopters.</li>
<li>When it's ready, we'll release the first full Nushell release with engine-q. We'll likely number this by skipping versions, jumping to 0.60 to show how much has changed and also letting folks know to look for breaking changes as well.</li>
<li>From there we'll keep building on the new engine, improving it for 1.0 and beyond.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.59 (aka 0.60 beta)</title>
      <link>www.nushell.sh/blog/2022-03-01-nushell_0_59.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2022-03-01-nushell_0_59.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.59 (aka 0.60 beta)</source>
      <description> Nushell 0.59 (aka 0.60 beta)
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing a beta release of 0.60 of Nu. This is to get early feedback on 0.60 before it's full release in three weeks.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-59-aka-0-60-beta" tabindex="-1"> Nushell 0.59 (aka 0.60 beta)</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing a beta release of 0.60 of Nu. This is to get early feedback on 0.60 before it's full release in three weeks.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.59 is available only as pre-built binaries.</p>
<ul>
<li><a href="/binaries/nushell_0_59_windows.msi">Windows .msi</a></li>
<li><a href="/binaries/nushell_0_59_windows.zip">Windows .zip</a></li>
<li><a href="/binaries/nushell_0_59_linux.tar.gz">Linux .zip</a></li>
<li><a href="/binaries/nushell_0_59_macOS.zip">macOS .zip</a></li>
</ul>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<p>We'll wait until the full release for the final set of features going into 0.60, but suffice to say it's a <em>lot</em>.</p>
<p>Some of the main things we want to cover for this beta release: the new engine, language improvements, new plugin infrastructure, and more.</p>
<h1 id="new-engine" tabindex="-1"> New Engine</h1>
<p>You can now try out the improvements that came with engine-q as part of a Nushell release. The engine offers a lot of improvements over the previous one. You can now get much better errors, run code in parallel, run code generally faster, and more correctly.</p>
<p>We'll be talking about this more in the full release announcement, but we'd also love your help in testing the engine as you port your code over to it. Crashes, incorrect answers, or just plain weirdness are things we'd like to work on.</p>
<h1 id="language-improvements" tabindex="-1"> Language improvements</h1>
<p>We've made a bunch of improvements to the language, from the change to <code>if</code> to allow <code>else</code>, to modules and imports, operator short-circuiting, and much more.</p>
<p>We're working to bring the <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">book up to date</a>, and it's a good place to find explanations of these improvements. Be sure to also look at the <a href="https://www.nushell.sh/book/command_reference.html" target="_blank" rel="noopener noreferrer">updated command documentation</a> for more information on the updated commands.</p>
<h1 id="new-plugin-architecture" tabindex="-1"> New plugin architecture</h1>
<p>The new plugin architecture is now multi-protocol, allowing you to pick the right protocol for your plugin. We currently support json and capnp.</p>
<p>Rather that scanning for all new plugins on startup like we did with 0.44, there is also a new <code>register</code> command you use a plugin for use:</p>
<div><pre><code>> register -e capnp ~/.cargo/bin/nu_plugin_extra_query
</code></pre></div><h1 id="and-more" tabindex="-1"> And more</h1>
<p>We're still hard at work finishing up the 0.60 release, and we're excited to tell you everything it can do. You'll notice some new chapters in the <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">book</a> on some of these, including: support for exit codes, better stderr support, new language literals for dates and binary data, a whole new line editor with an improved interface, and much more.</p>
<h1 id="one-more-thing" tabindex="-1"> One more thing</h1>
<p>Before we go, we thought we should mention that Nushell now supports completions for external commands. When you first start up nushell, you'll notice that it asks if you want to create a default configuration. If you say yes, and look at the file, you'll see a few of these:</p>
<div><pre><code>def "nu-complete git branches" [] {
  ^git branch | lines | each { |line| $line | str find-replace "\* " "" | str trim }
}

def "nu-complete git remotes" [] {
  ^git remote | lines | each { |line| $line | str trim }
}

extern "git checkout" [
  branch?: string@"nu-complete git branches" # name of the branch to checkout
  -b: string                                 # create and checkout a new branch
  -B: string                                 # create/reset and checkout a branch
</code></pre></div><p>These are completions for external commands (here <code>git checkout</code>) written all in Nushell. We're already getting contributions for <a href="https://github.com/nushell/nu_scripts/tree/main/custom-completions" target="_blank" rel="noopener noreferrer">other completions</a>, too!</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>It's time to polish 0.60 and get it to a nice shine. Your help in testing this beta release is invaluable to help making that happen. If you'd like to help us with docs, samples, code, or anything else that crosses your mind, come join us on the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.60</title>
      <link>www.nushell.sh/blog/2022-03-22-nushell_0_60.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2022-03-22-nushell_0_60.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.60</source>
      <description>Before we begin, as the Russian invasion of Ukraine still continues to threaten lives, here are ways you can help.
 Nushell 0.60
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing a beta release of 0.60 of Nu. This is an enormous release, with lots of changes across all aspects of Nushell.
</description>
      <content:encoded><![CDATA[<p><em>Before we begin, as the Russian invasion of Ukraine still continues to threaten lives, <a href="https://war.ukraine.ua" target="_blank" rel="noopener noreferrer">here</a> are ways you can help.</em></p>
<h1 id="nushell-0-60" tabindex="-1"> Nushell 0.60</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing a beta release of 0.60 of Nu. This is an enormous release, with lots of changes across all aspects of Nushell.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.60 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.60.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the built-in goodies, you can install <code>cargo install nu --all-features</code>.</p>
<p>As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="party-🥳" tabindex="-1"> Party! 🥳</h1>
<p>It's here! 🎉🎉</p>
<p>We're excited to announce the first full release of Nushell using the new engine, new line editor, and so much more!</p>
<h1 id="skipping-versions" tabindex="-1"> Skipping versions</h1>
<p>The first thing you'll notice is that we're skipping from version 0.44 to 0.60. This is on purpose, you didn't miss anything!</p>
<p>Because of the number of changes, and the number of breaking changes, we wanted to let everyone know how much has changed by also making a big jump in the version number. Previous scripts will need to be updated, and you'll need to learn some of the new ways of doing things in Nushell to get back to your same level of comfort.</p>
<p>Let's talk about the features new in this release.</p>
<h1 id="custom-completions" tabindex="-1"> Custom completions</h1>
<p><img src="@source/assets/images/0_60_completions.gif" alt="Custom completions for git and winget"></p>
<p>Let's start with Nushell's most-requested feature: custom completions. The long-awaited, long-requested feature of having nice completions is finally here. With 0.60, you'll be able to write scripts that help you complete parameters and flag values. Let's take a look at an example. When you create a new config, you'll see a section like this:</p>
<div><pre><code># This is a simplified version of completions for git branches and git remotes
def "nu-complete git branches" [] {
  ^git branch | lines | each { |line| $line | str find-replace '\* ' '' | str trim }
}

def "nu-complete git remotes" [] {
  ^git remote | lines | each { |line| $line | str trim }
}
</code></pre></div><p>To call these function at the right time, we need to tell Nushell which parameter can complete with them.</p>
<div><pre><code>extern "git checkout" [
  branch?: string@"nu-complete git branches" # name of the branch to checkout
  -b: string                                 # create and checkout a new branch
  -B: string                                 # create/reset and checkout a branch
  # note: other parameters removed for brevity
]
</code></pre></div><p>The new <code>extern</code> command allows you to describe all the type information for an external command to Nushell. With this, it can perform error checking, completions, syntax highlighting, and more.</p>
<p>You may also notice the <code>@</code> followed by the name of the completion function. This tells the completer what command to call to get a list of completions to use in that position, and you can down-select from these.</p>
<p>We've already seen early adopters starting to write their own completions for other commands, and we're excited to see what people will do.</p>
<h1 id="a-new-config-file" tabindex="-1"> A new config file</h1>
<p>With 0.60, we've moved away from the .toml style of config to a config built from a Nushell script. We've found this to be both more intuitive and much easier to work with.</p>
<p>When you first start up Nushell, you'll be asked if you'd like to create a default config file. This is a great way to see the new defaults and to change them to meet your needs. You'll also see some examples in how to modify the stylings, prompt, keybindings, and external completions.</p>
<h1 id="table-improvements" tabindex="-1"> Table improvements</h1>
<p><img src="@source/assets/images/0_60_ls_colors.png" alt="Better tables"></p>
<p>Tables can now be configured to show a footer with the column names.</p>
<p>Nushell will now also respect your <code>LS_COLORS</code> environment variable if set. If it's not set, Nushell will provide a default 8-bit setting so people with color terminal can see file types in different colors as seen below in the following screenshots.</p>
<h1 id="language-improvements" tabindex="-1"> Language improvements</h1>
<p>There's quite a list of changes to the language itself. Let's talk about each one to help you transition to the new Nushell:</p>
<h2 id="escape-characters-in-strings" tabindex="-1"> Escape characters in strings</h2>
<p>With 0.60, Nushell now divides strings into two types: strings with escape characters and strings without. The escaping case is written with double-quotes (<code>&quot;</code>) and the non-escaping case is written with single-quotes (<code>'</code>):</p>
<div><pre><code>> "hello\nworld"
hello
world
> 'hello\nworld'
hello\nworld
</code></pre></div><p>Nushell will prefer the single-quotes for things like path names that include spaces, allowing you to naturally write paths for Windows as well.</p>
<p>The difference in double-quoted and single-quoted strings also extends to interpolated strings (<code>$&quot;&quot;</code> and <code>$''</code>):</p>
<div><pre><code>> let x = 100
> $"value is:\n($x)"
value is:
100
> $'value is:\n($x)'
value is:\n100
</code></pre></div><h2 id="new-value-forms" tabindex="-1"> New value forms</h2>
<p>The 0.60 release also brings with it a number of new value forms.</p>
<h3 id="records" tabindex="-1"> Records</h3>
<p>You now can write a record, or a list of key/value pairs, as a native data type in Nushell:</p>
<div><pre><code>> {name: "Bob", age: 10}
╭──────┬─────╮
│ name │ Bob │
│ age  │ 10  │
╰──────┴─────╯
</code></pre></div><h3 id="table-as-a-list-of-records" tabindex="-1"> Table as a list of records</h3>
<p>With the introduction of records, a second way to define a table is a list (or stream) of records:</p>
<div><pre><code>> seq 3 | each { |x| { name: Bob, x: $x } }
  #   name   x
────────────────
  0   Bob    1
  1   Bob    2
  2   Bob    3
</code></pre></div><h3 id="integers-are-now-signed-64-bit-integers" tabindex="-1"> Integers are now signed 64-bit integers</h3>
<p>We're moving away from the 'bigint' style of integers, so now integers are always signed 64-bit ints.</p>
<h3 id="decimals-are-now-signed-64-bit-floats" tabindex="-1"> Decimals are now signed 64-bit floats</h3>
<p>Likewise, we're moving away from 'bigdecimal' to signed 64-bit float values.</p>
<h3 id="dates" tabindex="-1"> Dates</h3>
<p>Earlier versions of Nushell supported dates as a value type, but they lacked a way to write them. You can now write a date literal in one of three ways:</p>
<div><pre><code># A date
> 2022-02-02

# A date and time, assuming UTC
> 2022-02-23T19:47:47

# A date and time, with a timezone
2022-02-23T19:47:47.888239621-05:00
</code></pre></div><p>These come from the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank" rel="noopener noreferrer">RFC 3339</a> standard for datetime formats.</p>
<h3 id="binary-data" tabindex="-1"> Binary data</h3>
<p>Like dates, earlier versions of Nushell also supported binary data but there was no way to write a binary data literal. You're now able to write them using the <code>0x[...]</code> form:</p>
<div><pre><code>> 0x[11 ff]
Length: 2 (0x2) bytes | printable whitespace ascii_other non_ascii
00000000:   11 ff                                                •×
</code></pre></div><p>Spaces and commas are optional in this form, letting you separate write them however is best for readability.</p>
<h3 id="custom-values" tabindex="-1"> Custom values</h3>
<p>Another form we'll be talking about more as it grows is the &quot;custom value&quot; form. These are value types that you can extend the current set with by implementing a trait in Rust and registering the type.</p>
<p>The dataframe support in 0.60 uses this feature.</p>
<h2 id="if-meet-else" tabindex="-1"> if, meet else</h2>
<p>We've improved the syntax of Nushell in a few key places. Previously, in 0.44 you'd write:</p>
<div><pre><code>> if $x &lt; 3 { echo "true!" } { echo "false" }
</code></pre></div><p>This not only felt inelegant, but was prone to errors as people would want to leave off the second block when they didn't need it or just naturally want to type <code>else</code>.</p>
<p>This led to a new concept in Nushell: the keyword shape. Shapes in Nushell are a way for commands to tell the parser what the shape of their parameters are. In turn, the parser will use this knowledge to parse the arguments before they're given to the command (and also to do completions and early errors). With this, <code>else</code> is now one of the new keyword shapes, allowing it to take an expression that follows.</p>
<p>Taken together, in 0.60 we can now not only write the above like this:</p>
<div><pre><code>if $x &lt; 3 {
  echo "true!"
} else {
  echo "false"
}
</code></pre></div><p>We can also string together multiple if/else:</p>
<div><pre><code>if $x &lt; 3 {
  echo "less than three"
} else if $x &lt; 10 {
  echo "less than ten
} else {
  echo "something else!"
}
</code></pre></div><h2 id="shortcircuiting-conditions" tabindex="-1"> Shortcircuiting conditions</h2>
<p>Boolean operators <code>&amp;&amp;</code> and <code>||</code> now will properly shortcircuit, only evaluating the right hand side if necessary.</p>
<h2 id="new-built-in-values" tabindex="-1"> New built-in values</h2>
<p>We're introducing <code>true</code> and <code>false</code> as builtin values. These represent their boolean values true and false respectively.</p>
<h2 id="better-binary-data-support" tabindex="-1"> Better binary data support</h2>
<p>You can now use <code>get</code>, <code>skip</code>, and <code>first</code> on binary data to reach the bytes you'd like to work with. We're exploring extending this further so that it becomes easier to explore your binary data just like your text data.</p>
<h2 id="structured-environment" tabindex="-1"> Structured environment</h2>
<p>Inside of Nu, the environment can now hold any kind of structured value. For example, opening the <code>PATH</code> environment variable now might look like this in macOS:</p>
<div><pre><code>> $env.PATH
╭───┬─────────────────────────────────╮
│ 0 │ /opt/homebrew/opt/openssl@3/bin │
│ 1 │ /opt/homebrew/bin               │
│ 2 │ /opt/homebrew/sbin              │
│ 3 │ /usr/local/bin                  │
│ 4 │ /usr/bin                        │
│ 5 │ /bin                            │
│ 6 │ /usr/sbin                       │
│ 7 │ /sbin                           │
╰───┴─────────────────────────────────╯
</code></pre></div><p>This allows you to more easily add and update to the environment. For example, we can add a new entry to the PATH:</p>
<div><pre><code>> let-env PATH = ($env.PATH | prepend '/my/path')
</code></pre></div><p>Environment variables that aren't strings can be converted to strings automatically using the new <code>ENV_CONVERSIONS</code> environment variable.</p>
<h2 id="scoped-cd" tabindex="-1"> Scoped <code>cd</code></h2>
<p>In this release, we're also moving to keeping the current directory in the environment as <code>$env.PWD</code>. This leads to a few interesting twists in the design. For one, this means that <code>cd</code> is now scoped to the block you're currently in.</p>
<div><pre><code>> cd ./foo
./foo> do { cd ./bar }
./foo>
</code></pre></div><p>This allows you to more easily loop over subdirectories without having to do the bookkeeping of remembering to change back to the previous directory:</p>
<div><pre><code>> ls | where type == dir | each { |it| cd $it.name; ls | length }
</code></pre></div><p>That said, it takes a little getting used to. It does mean that changing a directory in a traditional custom command won't work, as the <code>PWD</code> environment variable will reset after the call completes. To help with this, we're also introducing <code>def-env</code>, a way to work inside the caller's environment and not lose any environment changes made by the custom command:</p>
<div><pre><code>> def-env my-cd [path] {
  cd $path
}

> my-cd ./foo
./foo>
</code></pre></div><h2 id="more-consistent-tables-and-cell-paths" tabindex="-1"> More consistent tables and cell paths</h2>
<p>With this release, we've simplified the commands for working with tables. The two fundamental commands are now: <code>select</code> and <code>get</code>.</p>
<h3 id="select-ing-data" tabindex="-1"> <code>Select</code>-ing data</h3>
<p>The <code>select</code> command allows you to keep the structure of what you're working on and reduce it to only the part you want. For example, just as before you can pass <code>select</code> to get a column:</p>
<div><pre><code>> ls | select name
╭────┬───────────────────╮
│ #  │       name        │
├────┼───────────────────┤
│  0 │ CNAME             │
│  1 │ CONTRIBUTING.md   │
│  2 │ LICENSE           │
│  3 │ README.md         │
│  4 │ assets            │
│  5 │ blog              │
...
</code></pre></div><p>You can now also use <code>select</code> on rows, by passing in a row number:</p>
<div><pre><code>> ls | select 1
╭───┬─────────────────┬──────┬───────┬────────────╮
│ # │      name       │ type │ size  │  modified  │
├───┼─────────────────┼──────┼───────┼────────────┤
│ 0 │ CONTRIBUTING.md │ file │ 389 B │ 2 days ago │
╰───┴─────────────────┴──────┴───────┴────────────╯
</code></pre></div><h3 id="get-ing-data" tabindex="-1"> <code>Get</code>-ing data</h3>
<p>The other fundamental command for working with tables is <code>get</code>. Like <code>select</code>, <code>get</code> allows you to work with columns and rows in a table, or fields in a record. Unlike <code>select</code>, the <code>get</code> command extracts data out of the table and does not try to preserve its original form. This is helpful when you want to get at the cell data itself.</p>
<p>Via a column:</p>
<div><pre><code>> ls | get name
╭────┬───────────────────╮
│  0 │ CNAME             │
│  1 │ CONTRIBUTING.md   │
│  2 │ LICENSE           │
│  3 │ README.md         │
│  4 │ assets            │
│  5 │ blog              │
...
</code></pre></div><p>Via a row:</p>
<div><pre><code>> ls | get 1
╭──────────┬─────────────────╮
│ name     │ CONTRIBUTING.md │
│ type     │ file            │
│ size     │ 389 B           │
│ modified │ 2 days ago      │
╰──────────┴─────────────────╯
</code></pre></div><p>You'll notice that getting rows out of a table with columns gives you back a record. You can think of a table as a list of records.</p>
<p>You can combine working with rows and columns together into a &quot;cell path&quot;, a way of reaching the data you want. If we only wanted to get the cell's data in row 1, column &quot;size&quot;, we can do:</p>
<div><pre><code>> ls | get size.1
</code></pre></div><h2 id="new-pipeline-syntax-form" tabindex="-1"> New pipeline syntax form</h2>
<p>When writing scripts in Nushell, often folks want to be able to build up a pipeline and line up all the pipes on the left. This is now supported in scripts:</p>
<div><pre><code>ls
| where size > 10kb
| length
</code></pre></div><h2 id="default-params" tabindex="-1"> Default params</h2>
<p>A common request as more people tried Nushell was &quot;can we have default values for parameters&quot;. Thanks to the work on the new parser, we can!</p>
<p>Now, you're able to set a default value for any optional parameter in your command:</p>
<div><pre><code>def add-maybe-hundred [x:int, y = 100] {
  $x + $y
}

let twelve_squared = add-maybe-hundred 44
</code></pre></div><p>Default values also work for flag parameters.</p>
<h2 id="stdout-stderr-and-exit-codes" tabindex="-1"> Stdout, stderr, and exit codes</h2>
<p>In previous versions of Nushell, you generally had easy access to the stdout of an external command. You could run it, and then create a pipe and work with its output. If you wanted to work with stderr or get its exit code, you didn't have an easy way to do it.</p>
<p>With 0.60, we've introduced the <code>complete</code> command. Running an external command and then pipeline it to <code>complete</code> runs the external to completion and then gives you the stdout, stderr, and exit code of that external.</p>
<div><pre><code>> cat CNAME | complete
╭───────────┬────────────────╮
│ stdout    │ www.nushell.sh │
│ stderr    │                │
│ exit_code │ 0              │
╰───────────┴────────────────╯
</code></pre></div><p>To redirect stderr, you can call through <code>do -i</code>. For example, let's say we're calling <code>cat</code> again, this time with a file that doesn't exist:</p>
<div><pre><code>> do -i { cat unknown.txt } | complete
╭───────────┬─────────────────────────────────────────────╮
│ stdout    │                                             │
│ stderr    │ cat: unknown.txt: No such file or directory │
│ exit_code │ 1                                           │
╰───────────┴─────────────────────────────────────────────╯
</code></pre></div><p>You can also access the last exit code via <code>$env.LAST_EXIT_CODE</code>.</p>
<h2 id="modules" tabindex="-1"> Modules</h2>
<p>With 0.60, you're now able to create your own modules, allowing you to grow to larger projects with clean interfaces between files. A module can be written either using the <code>module</code> keyword:</p>
<div><pre><code>module greetings {
  export def greet [] {
    print "hello!"
  }
}

use greetings greet
greet
</code></pre></div><p>You can also make modules from whole files. We can rewrite the above using a separate file:</p>
<div><pre><code># greetings.nu
export def greet [] {
  print "hello!"
}

# main.nu
use greetings.nu greet
greet
</code></pre></div><p>Modules allow you to <code>export</code> custom commands and environment variables to be used in other places.</p>
<h2 id="make-your-own-errors" tabindex="-1"> Make your own errors</h2>
<p>You can also create your own error messages in your custom commands and send these back to the user if they call your command in the wrong way. For example, let's say you wanted to require that the user pass in a value between 1 and 10:</p>
<div><pre><code>> def one-to-ten [x: int] {
    let span = (metadata $x).span
    if $x > 10 || $x &lt; 1 {
      error make {
        msg: "Value not between 1 and 10",
        label: {
          text: "expected a value between 1 and 10",
          start: $span.start,
          end: $span.end
        }
      }
    } else {
      $"passed ($x)"
    }
  }
> one-to-ten 6
passed 6
> one-to-ten 21
Error:
  × Value not between 1 and 10
   ╭─[entry #47:1:1]
 1 │ one-to-ten 21
   ·            ─┬
   ·             ╰── expected a value between 1 and 10
   ╰────
</code></pre></div><h2 id="new-commands" tabindex="-1"> New commands</h2>
<p>To accompany the new functionality in the language, we've also added a number of new commands.</p>
<table>
<thead>
<tr>
<th>category</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td>conversions</td>
<td><code>into bool</code>, <code>into datetime</code>, <code>into decimal</code>, <code>into duration</code></td>
</tr>
<tr>
<td>core</td>
<td><code>def-env</code>, <code>error make</code>, <code>export def env</code>, <code>export def</code>, <code>export env</code>, <code>export</code>, <code>env</code>, <code>extern</code>, <code>hide</code>, <code>metadata</code>, <code>module</code>, <code>register</code>, <code>use</code>, <code>view-source</code></td>
</tr>
<tr>
<td>filters</td>
<td><code>columns</code>, <code>group</code>, <code>par-each</code>, <code>transpose</code>, <code>window</code>, <code>roll</code>, <code>roll down</code>, <code>roll left</code>, <code>roll right</code>, <code>upsert</code></td>
</tr>
<tr>
<td>formats</td>
<td><code>from nuon</code>, <code>to nuon</code></td>
</tr>
<tr>
<td>plugins</td>
<td><code>gstat</code></td>
</tr>
<tr>
<td>strings</td>
<td><code>decode</code>, <code>nu-highlight</code>, <code>print</code>, <code>fmt</code></td>
</tr>
<tr>
<td>system</td>
<td><code>complete</code>, <code>input</code>, <code>keybindings</code>, <code>keybindings default</code>, <code>keybindings list</code>, <code>keybindings listen</code></td>
</tr>
<tr>
<td>viewers</td>
<td><code>grid</code></td>
</tr>
</tbody>
</table>
<h1 id="shell-improvements" tabindex="-1"> Shell improvements</h1>
<h2 id="bang-bang-and-more" tabindex="-1"> Bang bang and more</h2>
<p>You can now use <code>!!</code> to run the previous command, or <code>!</code> followed by the row number in the <code>history</code> you'd like to run again.</p>
<p>We're working to bring the <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">book up to date</a>, and it's a good place to find explanations of these improvements. Be sure to also look at the <a href="https://www.nushell.sh/book/command_reference.html" target="_blank" rel="noopener noreferrer">updated command documentation</a> for more information on the updated commands.</p>
<h2 id="better-multiline-editing" tabindex="-1"> Better multiline editing</h2>
<p><img src="@source/assets/images/0_59_1_for_multiline_indicator.png" alt="Multiline editing"></p>
<p>With the switch to reedline, you can also get better feedback when working on multiline edits. For example, moving to the next line, you'll now see <code>:::</code> by default preceding the extended input:</p>
<div><pre><code>> do {
::: echo "hello"
::: echo "world"
::: }
hello
world
</code></pre></div><p>You can configure the <code>:::</code> default value by setting the <code>PROMPT_MULTILINE_INDICATOR</code> environment variable. For example, the above screenshot uses ANSI to give it a bit of flare.</p>
<h2 id="grid-output" tabindex="-1"> Grid output</h2>
<p>Nushell also now has a more compact <code>ls</code> representation you can use called <code>grid</code>.</p>
<p><img src="@source/assets/images/0_59_1_ls_gridc.png" alt="Grid file listing"></p>
<h2 id="better-less-support" tabindex="-1"> Better <code>less</code> support</h2>
<p>With Nushell, you can now pipe to your preferred pager, and get a page-able output. For example, if you wanted to look at a long table, you can pipe into the <code>less</code> command (or the equivalent for your OS):</p>
<div><pre><code>> ls **/* | less
</code></pre></div><p>Nushell by default will strip the ANSI colors, letting you look at the data with most pagers.</p>
<h2 id="miette" tabindex="-1"> Miette</h2>
<p>We're moving to a new error reporter called <a href="https://github.com/zkat/miette" target="_blank" rel="noopener noreferrer">miette</a>. It's an attractive way of showing errors back while you're working in the REPL or on scripts.</p>
<p><img src="@source/assets/images/0_60_miette.png" alt="Miette error message"></p>
<h1 id="reedline" tabindex="-1"> Reedline</h1>
<p>Nushell has changed its line editor and now it uses <a href="https://github.com/nushell/reedline" target="_blank" rel="noopener noreferrer">Reedline</a>. This new line
editor allows for improvements and added functionality to the already awesome Nushell experience. Some of the
new improvements are:</p>
<h2 id="completions-menus" tabindex="-1"> Completions menus</h2>
<p><img src="@source/assets/images/0_60_0_completions_internal.gif" alt="Commands menu"></p>
<p>Do you want to search for commands using a menu? Nushell has you covered.
Press tab and a completion menu will appear with options for you to select. Based on the context different
options will be available to you</p>
<h2 id="history-menu" tabindex="-1"> History menu</h2>
<p><img src="@source/assets/images/0_60_0_history.gif" alt="History menu"></p>
<p>Your shell history can be easily accessed as well via menus. Using ctrl-x, you can search for a
history item or you could just simply navigate the menu until you find what you are looking for.</p>
<p>You can also use the history menu to compose a pipe with smaller pipes you have used before.</p>
<p><img src="@source/assets/images/0_60_0_history_complete.gif" alt="History complete"></p>
<h2 id="new-keybindings" tabindex="-1"> New Keybindings</h2>
<p>Now you can define complex keybindings for nushell. For example, say you have changed your config file and
want to reload it in your nushell session. You can create a special keybinding to help reload your config file:</p>
<div><pre><code>{
    name: reload_config
    modifier: none
    keycode: f5
    mode: emacs
    event: {
      send: executehostcommand,
      cmd: $"source '($nu.config-path)'"
    }
}
</code></pre></div><p>with this keybinding every time you press F5 your config file is sourced and ready to go. Neat!</p>
<h1 id="introducing-nuon" tabindex="-1"> Introducing 'nuon'</h1>
<p>As the syntax for Nushell has continued to grow and evolve, we noticed that writing data in Nushell was kinda fun. The more we played with it, the more the idea grew that we could create a data file format using the Nushell syntax for data. Thus, 'nuon' was born. With it, we now include <code>from nuon</code> and <code>to nuon</code> to help you work with the new .nuon files.</p>
<p>Nuon is a superset of JSON, allowing you to pass JSON files and parse them as Nuon. Additionally, Nuon supports the data forms from Nushell, including compact tables, durations, filesizes, and more.</p>
<div><pre><code># sample.nuon
[
    # The nuon compact table format
    [[a, nuon, table]; [1, 2, 3], [4, 5, 6]],

    # A filesize
    100kib,

    # A duration
    100sec,

    # A date
    2022-01-11,

    # A boolean
    true,

    # A record
    {name: "Bobby", age: 99},

    # Binary data
    0x[11, ff, ee, 1f]
]
</code></pre></div><p>Nuon is still experimental, but we're already enjoying using it and are eager to continue to improve on it.</p>
<h1 id="smaller-release-size" tabindex="-1"> Smaller release size</h1>
<p>The 0.60 release is significantly smaller than the previous 0.44 release.</p>
<table>
<thead>
<tr>
<th>release file for 0.44.0</th>
<th>size</th>
</tr>
</thead>
<tbody>
<tr>
<td>nu_0_44_0_linux.tar.gz</td>
<td>103 MB</td>
</tr>
<tr>
<td>nu_0_44_0_macOS.zip</td>
<td>79.7 MB</td>
</tr>
<tr>
<td>nu_0_44_0_windows.msi</td>
<td>55.5 MB</td>
</tr>
<tr>
<td>nu_0_44_0_windows.zip</td>
<td>57.9 MB</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>release file for 0.60.0</th>
<th>size</th>
</tr>
</thead>
<tbody>
<tr>
<td>nu_0_60_0_linux.tar.gz</td>
<td>14.8 MB</td>
</tr>
<tr>
<td>nu_0_60_0_macOS.zip</td>
<td>12.9 MB</td>
</tr>
<tr>
<td>nu_0_60_0_windows.msi</td>
<td>10.1 MB</td>
</tr>
<tr>
<td>nu_0_60_0_windows.zip</td>
<td>10.1 MB</td>
</tr>
</tbody>
</table>
<h1 id="new-engine" tabindex="-1"> New Engine</h1>
<p>Nicknamed &quot;engine-q&quot;, the new engine grew from being a rewrite of parsing and evaluation logic into a full rewrite of Nushell itself. Done over 8 months, the final result has many improvements over the 0.44 engine.</p>
<h2 id="the-new-delta-system" tabindex="-1"> The new delta system</h2>
<p>One powerful new aspect of the new engine is its delta system. Deltas, or change sets, let the engine stay immutable except at key phase shifts. For Nushell, after the user has hit enter in the repl, it will phase shift into parsing, then take a delta of what was given by the user. This delta may contain new definitions, new variables, new modules and more. This delta is merged into the permanent state inside of the engine. After this, the engine returns to being immutable as evaluation begins.</p>
<p>These discrete phase shifts make it possible to limit what mutates while maintaining flexibility, including the ability for users to write parallel code against the engine at any point of evaluation.</p>
<p>Mutation during evaluation isn't removed, instead it's isolated to the stack.</p>
<h2 id="stacks-the-site-of-change" tabindex="-1"> Stacks, the site of change</h2>
<p>For evaluation, stacks are now the site of change in the engine. Stacks are represented as vectors that are passed around during evaluation. They include changes to the environment, newly shadowed variables, and more.</p>
<h2 id="closing-over-variables" tabindex="-1"> Closing over variables</h2>
<p>Another important aspect of the engine and the new uses of stacks is an increased focus on correctness for how blocks work with stacks. In 0.60, we've eliminated many bugs related to variables scopes, where sometimes variables would &quot;leak&quot; from one scope to the next. Now, a &quot;snapshot&quot; of a variable's value is captured when the block is taken as a value in the system. This allows us easy access to run the block later and always have the correct state to run it with.</p>
<h2 id="spans-for-better-errors" tabindex="-1"> Spans for better errors</h2>
<p>Another important area of correctness we wanted to fix from previous versions of Nushell was error spans. Prior Nushell versions struggled with a very common pattern: errors that happen in code that isn't the code you just typed. For example, aliases that failed, calls to custom commands that were previously defined, and more.</p>
<p>In 0.60, along with keeping around code that's still available for the user to call, we also keep around the original span information and original source. This allows us to give better errors for the cases where the error refers to code that's not the current line.</p>
<h2 id="bind-once-run-anywhere" tabindex="-1"> Bind once, run anywhere</h2>
<p>While improving the parser and engine, we also improved how the two connected to each other. One piece of this was &quot;binding&quot;, that is, how definition sites and use sites connect to one another.</p>
<p>In the new engine, we use unique identifiers for all forms of definition in the engine, including variables, declarations, aliases, modules and more. During parse time, we bind the use we see against the definition in scope, and replace the use with a reference to the ID we found. With this, we can later safely export or pass the containing block without losing track of what the original code meant.</p>
<h2 id="faster-than-ever-before" tabindex="-1"> Faster than ever before</h2>
<p>The new engine's data representation is also quite a bit lighter than before. This allows us to evaluate scripts with less overhead. Early results are already quite positive:</p>
<table>
<thead>
<tr>
<th>1 million iteration tight loop</th>
<th>timing</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.44</td>
<td>626ms</td>
</tr>
<tr>
<td>0.60</td>
<td>239ms</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Gradient drawing benchmark</th>
<th>timing</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.44</td>
<td>168ms</td>
</tr>
<tr>
<td>0.60</td>
<td>78ms</td>
</tr>
</tbody>
</table>
<h2 id="going-parallel" tabindex="-1"> Going parallel</h2>
<p>The new engine has a fun trick up it's sleeve: you can effortlessly convert your scripts to run in parallel by changing <code>each</code> calls to <code>par-each</code>.</p>
<p>For example, if we had a script that opened files that fit a certain pattern and counted their number of lines:</p>
<div><pre><code>ls **/*.rs | each { |it|
  let num_lines = (open $it.name | lines | length)
  {name: $it.name, loc: $num_lines}
}
</code></pre></div><p>We can turn this into a script that runs in parallel by changing the <code>each</code> to <code>par-each</code>:</p>
<div><pre><code>ls **/*.rs | par-each { |it|
  let num_lines = (open $it.name | lines | length)
  {name: $it.name, loc: $num_lines}
}
</code></pre></div><table>
<thead>
<tr>
<th>Line counter script</th>
<th>timing</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>each</code></td>
<td>683ms</td>
</tr>
<tr>
<td><code>par-each</code></td>
<td>447ms</td>
</tr>
</tbody>
</table>
<p>While further improvements are possible, it's nice to know we can get such a speedup with a four character change to our script.</p>
<h1 id="new-plugin-architecture" tabindex="-1"> New plugin architecture</h1>
<p>Rather that scanning for all new plugins on startup like we did with 0.44 (and taking ages to start Nu), the new <code>register</code> command stores the
location and signature of your plugins, making it easier to load at start up.</p>
<div><pre><code>> register -e json ~/.cargo/bin/nu_plugin_extra_query
</code></pre></div><p>Also, the new plugin architecture is now multi-protocol, allowing you to pick the right protocol for your plugin. We currently support json and have experimental support for capnp.</p>
<p>By the way, you are not limited to write plugins in Rust. You can even create a python script and use it as a Nushell plugin. You only need to
specify what command should be used to run the plugin</p>
<div><pre><code>> register -e json -s python ~/my_plugins/plugin.py
</code></pre></div><p>Nushell now has three optional plugins (all using 'json' serialization):</p>
<ul>
<li><code>inc</code>: a value/version incrementor</li>
<li><code>gstat</code>: a git stats viewer</li>
<li><code>query</code>: a set of three commands for querying data</li>
</ul>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<p>There are quite a number of breaking changes as we fixed design flaws, cleaned up the design, and rethought how commands should work.</p>
<table>
<thead>
<tr>
<th>Nushell 0.44</th>
<th>Nushell 0.60</th>
</tr>
</thead>
<tbody>
<tr>
<td>if { } { }</td>
<td>if { } else { }</td>
</tr>
<tr>
<td>str trim -rc (char nl)</td>
<td>str trim -r -c (char nl)</td>
</tr>
<tr>
<td>config.toml</td>
<td>config.nu (find location with <code>$nu.config-path</code>)</td>
</tr>
<tr>
<td>let-env FOO = $nothing</td>
<td>hide $FOO</td>
</tr>
<tr>
<td>$nu.home-dir</td>
<td>$nu.home-path</td>
</tr>
<tr>
<td>$nu.temp-dir</td>
<td>$nu.temp-path</td>
</tr>
<tr>
<td><code>$true</code> and <code>$false</code></td>
<td>now <code>true</code> and <code>false</code></td>
</tr>
<tr>
<td>config commands</td>
<td>$config</td>
</tr>
<tr>
<td><code>$nu.env</code></td>
<td><code>$nu.env</code> is now <code>$env</code></td>
</tr>
<tr>
<td>$nu.path</td>
<td><code>$env.PATH</code>/<code>$env.Path</code> &lt;- can do more in config.nu</td>
</tr>
<tr>
<td>$nu.lang</td>
<td>$nu.scope.commands</td>
</tr>
<tr>
<td>str to-int</td>
<td>into int</td>
</tr>
<tr>
<td><code>$nu.env.PROMPT_COMMAND</code> is a string</td>
<td><code>$env.PROMPT_COMMAND</code> is a block or a string</td>
</tr>
<tr>
<td>get (has auto flatten)</td>
<td>get doesn't auto flatten</td>
</tr>
<tr>
<td>to json</td>
<td>to json is formatted as 'pretty'</td>
</tr>
<tr>
<td>environment variable is a string</td>
<td>environment variable can be any value</td>
</tr>
<tr>
<td><code>tags</code></td>
<td><code>tags</code> is now <code>metadata</code></td>
</tr>
<tr>
<td>bigint/bigdecimal</td>
<td>engine-q uses machine i64 and f64</td>
</tr>
<tr>
<td>File, Dir in <code>ls</code></td>
<td>file, dir in <code>ls</code></td>
</tr>
<tr>
<td>binaryview</td>
<td>binaryview has been removed (it may be an optional plugin in the future)</td>
</tr>
<tr>
<td>textview</td>
<td>textview is removed. Install <code>bat</code> to view source files, or pipe the output into <code>less</code></td>
</tr>
<tr>
<td>dataframe</td>
<td>dfr</td>
</tr>
<tr>
<td>shells: <code>active</code>, <code>name</code>, <code>path</code> columns</td>
<td>shells: <code>active</code>, <code>path</code> columns</td>
</tr>
<tr>
<td><code>cd</code> is now scoped</td>
<td>current directory now comes from <code>PWD</code> in <code>$env</code>. Changing directory in a block or custom command no longer changes the caller's directory. To do this, return a table that the caller can use to update their env</td>
</tr>
<tr>
<td>char branch, char segment</td>
<td>char nf-branch, char nf-segment (<code>char</code>s that start with <code>nf-</code> are from nerdfont fonts)</td>
</tr>
<tr>
<td>wasm supported</td>
<td>wasm support currently not started</td>
</tr>
<tr>
<td><code>enter &lt;filename&gt;</code></td>
<td>engine-q only supports entering directories</td>
</tr>
<tr>
<td>str to-decimal</td>
<td>into decimal</td>
</tr>
<tr>
<td><code>pivot</code></td>
<td>renamed to <code>transpose</code></td>
</tr>
<tr>
<td><code>term size -w -t</code></td>
<td><code>term size -c -r</code></td>
</tr>
<tr>
<td>selector</td>
<td>query web</td>
</tr>
<tr>
<td>xpath</td>
<td>query xml</td>
</tr>
<tr>
<td>config directory name: <code>nu</code></td>
<td>config directory name: <code>nushell</code></td>
</tr>
<tr>
<td><code>nth 1</code></td>
<td><code>select 1</code>, <code>select</code> can now down-select rows as well as columns</td>
</tr>
<tr>
<td>match</td>
<td>match command is now integrated into the find command</td>
</tr>
<tr>
<td><code>each group</code></td>
<td><code>each</code> and <code>group</code> are now separate</td>
</tr>
<tr>
<td><code>each window</code></td>
<td><code>each</code> and <code>windows</code> are now separate</td>
</tr>
</tbody>
</table>
<p>You can find out more on <a href="https://github.com/nushell/nushell/issues/4305" target="_blank" rel="noopener noreferrer">the full breaking changes list</a>.</p>
<h1 id="acknowledgements" tabindex="-1"> Acknowledgements</h1>
<p>A big &quot;thank you!&quot; to everyone who helped us build this version of Nushell!</p>
<div><pre><code>╭────┬─────────────────────────────────╮
│  0 │ Access                          │
│  1 │ adamijak                        │
│  2 │ ahkrr                           │
│  3 │ ammkrn                          │
│  4 │ Andrew                          │
│  5 │ Andrew Barnes                   │
│  6 │ Andrés N. Robalino              │
│  7 │ Antonio Natilla                 │
│  8 │ Arthur                          │
│  9 │ Arthur Targaryen                │
│ 10 │ Ashish Thapa                    │
│ 11 │ Basile Henry                    │
│ 12 │ Benoît Cortier                  │
│ 13 │ Charles Dixon                   │
│ 14 │ Chris Gillespie                 │
│ 15 │ crozbo                          │
│ 16 │ Dakota Clark                    │
│ 17 │ Daniel Reilly                   │
│ 18 │ Daniella Mesquita               │
│ 19 │ Darren Schroeder                │
│ 20 │ David Lattimore                 │
│ 21 │ DawnMagnet                      │
│ 22 │ dependabot[bot]                 │
│ 23 │ dgalbraith                      │
│ 24 │ Dheepak Krishnamurthy           │
│ 25 │ Ebuka Agbanyim                  │
│ 26 │ eggcaker                        │
│ 27 │ Eli Flanagan                    │
│ 28 │ Fernando Herrera                │
│ 29 │ Gabriel B Gutierrez             │
│ 30 │ Gabriel Borges Gutierrez        │
│ 31 │ Genna Wingert                   │
│ 32 │ Guillermo Lella                 │
│ 33 │ Hilmar Gústafsson               │
│ 34 │ Homa Wong                       │
│ 35 │ hustcer                         │
│ 36 │ jacremer                        │
│ 37 │ Jae-Heon Ji                     │
│ 38 │ jaeheonji                       │
│ 39 │ Jakub Žádník                    │
│ 40 │ Jason Hansen                    │
│ 41 │ Jonathan Moore                  │
│ 42 │ Joseph T. Lyons                 │
│ 43 │ Josh                            │
│ 44 │ JT                              │
│ 45 │ Julian Aichholz                 │
│ 46 │ Justin                          │
│ 47 │ Justin Ma                       │
│ 48 │ Kamil                           │
│ 49 │ Kat Marchán                     │
│ 50 │ Leo Kettmeir                    │
│ 51 │ LordMZTE                        │
│ 52 │ Luca Trevisani                  │
│ 53 │ Luccas Mateus                   │
│ 54 │ Luccas Mateus de Medeiros Gomes │
│ 55 │ Marco Zanrosso                  │
│ 56 │ Mariano Guerra                  │
│ 57 │ Matthew Auld                    │
│ 58 │ Maxim Zhiburt                   │
│ 59 │ Michael Angerman                │
│ 60 │ Michael Rutter                  │
│ 61 │ mzanrosso                       │
│ 62 │ nibon7                          │
│ 63 │ Niklas S                        │
│ 64 │ Niklas Schoellhorn              │
│ 65 │ onthebridgetonowhere            │
│ 66 │ Onur Şahin                      │
│ 67 │ panicbit                        │
│ 68 │ Ray Henry                       │
│ 69 │ Reilly Wood                     │
│ 70 │ Robert O'Shea                   │
│ 71 │ Sebastian Jung                  │
│ 72 │ Sherub Thakur                   │
│ 73 │ sholderbach                     │
│ 74 │ st155052                        │
│ 75 │ Stefan Holderbach               │
│ 76 │ Stefan Stanciulescu             │
│ 77 │ Tanishq Kancharla               │
│ 78 │ Tom Panton                      │
│ 79 │ Urgau                           │
│ 80 │ WindSoilder                     │
│ 81 │ xiuxiu62                        │
│ 82 │ Yutaro Ohno                     │
│ 83 │ ZetaNumbers                     │
│ 84 │ zkldi                           │
│ 85 │ Ștefan                          │
╰────┴─────────────────────────────────╯
</code></pre></div><h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>With 0.60, we have a solid foundation to build on to reach 1.0. The cleaner architecture and improvements to the language will make way for future improvements, like pattern matching, tasks, and more.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.61</title>
      <link>www.nushell.sh/blog/2022-04-12-nushell_0_61.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2022-04-12-nushell_0_61.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.61</source>
      <description> Nushell 0.61
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing version 0.61 of Nu. This release includes UI improvements, many bugfixes, improved glob support, and more.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-61" tabindex="-1"> Nushell 0.61</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing version 0.61 of Nu. This release includes UI improvements, many bugfixes, improved glob support, and more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.61 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.61.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the built-in goodies, you can install <code>cargo install nu --all-features</code>.</p>
<p>As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="help-menu-elferherrera" tabindex="-1"> Help Menu (elferherrera)</h1>
<p><img src="@source/assets/images/0_61_help_menu.png" alt="Help menu"></p>
<p>In 0.61, you can now use <code>&lt;ctrl+q&gt;</code> to ask a question/query in Nushell. Currently, this will search through the commands and show you commands that mention the word you type.</p>
<p>Tab lets you move between the available commands.</p>
<p>You can use up/down to pick the example you'd like to use. Pressing enter will select the example and insert it into the input for you.</p>
<h1 id="completion-descriptions-elferherrera-fdncred-jt" tabindex="-1"> Completion descriptions (elferherrera, fdncred, jt)</h1>
<p><img src="@source/assets/images/0_61_completion_descriptions.png" alt="Completion descriptions"></p>
<p>Completions now show you a description of the command you're completing, if it's available.</p>
<h1 id="introducing-env-nu-kubouch" tabindex="-1"> Introducing 'env.nu' (kubouch)</h1>
<p>Just as we added 'config.nu' with 0.60, we're now adding a new additional startup file called 'env.nu'. The job of this file is to set up the environment that you'll run Nushell in. As a result, you're able to set up important environment variables like <code>$env.NU_LIB_DIRS</code> before 'config.nu' begins to run, let you take full advantage of the new library directories you've configured.</p>
<h1 id="features" tabindex="-1"> Features</h1>
<ul>
<li><code>input</code> can now <a href="https://github.com/nushell/nushell/pull/5017" target="_blank" rel="noopener noreferrer">suppress output</a> (dev-msp)</li>
<li><a href="https://github.com/nushell/nushell/pull/4956" target="_blank" rel="noopener noreferrer">Termux/Android target support for new engine</a> (dscottboggs)</li>
<li><code>open</code> can now use <a href="https://github.com/nushell/nushell/pull/5049" target="_blank" rel="noopener noreferrer"><code>from ...</code> named custom commands</a> (neosam)</li>
<li>New <a href="https://github.com/nushell/nushell/pull/5054" target="_blank" rel="noopener noreferrer"><code>sort</code> command for easier sorting</a> (jt)</li>
<li><code>date to-record</code> for <a href="https://github.com/nushell/nushell/pull/5058" target="_blank" rel="noopener noreferrer">working with structured dates</a> (jt)</li>
<li>New <a href="https://github.com/nushell/nushell/pull/5061" target="_blank" rel="noopener noreferrer">starts-with operator</a> (fdncred)</li>
<li>Can now create <a href="https://github.com/nushell/nushell/pull/5085" target="_blank" rel="noopener noreferrer">generic menus for repl interactions</a> (elferherrera)</li>
<li>New <a href="https://github.com/nushell/nushell/pull/5087" target="_blank" rel="noopener noreferrer"><code>glob</code> command for fancier globbing</a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/5111" target="_blank" rel="noopener noreferrer">Unary <code>not</code> support</a> (jt)</li>
<li>Startup and pre-prompt setup should now be <a href="https://github.com/nushell/nushell/pull/5115" target="_blank" rel="noopener noreferrer">significantly faster</a> (jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/5149" target="_blank" rel="noopener noreferrer"><code>0b[...]</code> support for binary literals</a> (merkrafter)</li>
</ul>
<h1 id="improvements" tabindex="-1"> Improvements</h1>
<ul>
<li>Parser improvements by uasi, jt, rgwood</li>
<li>Error improvements by jmoore34, jt, rgwood</li>
<li>Documentation updates by hustcer, vishalsodani, fdncred, futile, kubouch, stormasm, Hofer-Julian, herlon214, rgwood, michel-slm</li>
<li>General code cleanliness fixes by stormasm, bowlofeggs, rgwood, sholderbach, fdncred, herlon214, elferherrera, boyvanduuren, jt</li>
<li>Multiple improvements to known external commands (filaretov, jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/5167" target="_blank" rel="noopener noreferrer">Use recent miette</a> (zkat)</li>
<li><a href="https://github.com/nushell/nushell/pull/5153" target="_blank" rel="noopener noreferrer">Improved logic to path expansion</a> (strega-nil-ms)</li>
<li><a href="https://github.com/nushell/nushell/pull/5141" target="_blank" rel="noopener noreferrer"><code>ls</code> now outputs date in local time</a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/5137" target="_blank" rel="noopener noreferrer"><code>$in</code> should now work in more places</a> (jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/5136" target="_blank" rel="noopener noreferrer"><code>each</code> now also pipes each item as input to the block</a> (jt)</li>
<li>Add ability to <a href="https://github.com/nushell/nushell/pull/5133" target="_blank" rel="noopener noreferrer">opt-in to normal strings in <code>str replace</code></a> (fdncred)</li>
<li><code>touch</code> now <a href="https://github.com/nushell/nushell/pull/5119" target="_blank" rel="noopener noreferrer">includes all common flags</a> (rybertm)</li>
<li><code>=~</code> and <code>!~</code> now <a href="https://github.com/nushell/nushell/pull/5117" target="_blank" rel="noopener noreferrer">use regex</a> (rgwood)</li>
<li><code>describe</code> should now be <a href="https://github.com/nushell/nushell/pull/5116" target="_blank" rel="noopener noreferrer">more precise</a></li>
<li>completions now <a href="https://github.com/nushell/nushell/pull/5108" target="_blank" rel="noopener noreferrer">give priority to non-hidden folders</a> (herlon214)</li>
<li><a href="https://github.com/nushell/nushell/pull/5105" target="_blank" rel="noopener noreferrer">plugins are now loaded for scripts and commands</a> (jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/5097" target="_blank" rel="noopener noreferrer"><code>input</code> now trims the newline</a> (rgwood)</li>
<li><a href="https://github.com/nushell/nushell/pull/5100" target="_blank" rel="noopener noreferrer">regex <code>find</code> now works with records</a> (fdncred)</li>
<li>Fixes to <a href="https://github.com/nushell/nushell/pull/5095" target="_blank" rel="noopener noreferrer"><code>format</code> for non-basic datatypes</a> (rgwood)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/5090" target="_blank" rel="noopener noreferrer">raw string support via backticks</a> (jt)</li>
<li>Switched to <a href="https://github.com/nushell/nushell/pull/5001" target="_blank" rel="noopener noreferrer">levenshtein distance sorting for completions</a> (jt)</li>
<li>Improvements to <a href="https://github.com/nushell/nushell/pull/5041" target="_blank" rel="noopener noreferrer">line editor state handling</a> (sholderbach)</li>
<li>Treat <a href="https://github.com/nushell/nushell/pull/5026" target="_blank" rel="noopener noreferrer">prompt indicators as commands</a> (elferherrera)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/5040" target="_blank" rel="noopener noreferrer">record, list, and table to signature types</a> (kubouch)</li>
<li>Improvements to <a href="https://github.com/nushell/nushell/pull/5016" target="_blank" rel="noopener noreferrer">default git completions</a> (naufraghi)</li>
<li>Prompts <a href="https://github.com/nushell/nushell/pull/5052" target="_blank" rel="noopener noreferrer">can now be simple strings</a> (jt)</li>
<li>Sets <a href="https://github.com/nushell/nushell/pull/5084" target="_blank" rel="noopener noreferrer">LAST_EXIT_CODE on parse errors</a> (rgwood)</li>
<li>Passed <a href="https://github.com/nushell/nushell/pull/5009" target="_blank" rel="noopener noreferrer">more metadata through filter commands</a> (rrcwang)</li>
<li><code>last</code> now returns a <a href="https://github.com/nushell/nushell/pull/5060" target="_blank" rel="noopener noreferrer">simple value for single items</a> (jt)</li>
<li>Fixed <a href="https://github.com/nushell/nushell/pull/5003" target="_blank" rel="noopener noreferrer">loops not terminating with ctrl-c</a> (jt)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/4986" target="_blank" rel="noopener noreferrer">bounded channels for backpressure</a> (b333z)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/4985" target="_blank" rel="noopener noreferrer">streaming support to <code>save</code></a> (b333z)</li>
<li><a href="https://github.com/nushell/nushell/pull/4984" target="_blank" rel="noopener noreferrer">Support for passing binary data into run-external</a> (b333z)</li>
<li><a href="https://github.com/nushell/nushell/pull/4968" target="_blank" rel="noopener noreferrer">Fix for alias imports</a> (filaretov, jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/4983" target="_blank" rel="noopener noreferrer">Fix for <code>ls</code> when file is a socket on macOS</a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/4974" target="_blank" rel="noopener noreferrer">Better tilde expansion</a> (filaretov)</li>
<li>Added <a href="https://github.com/nushell/nushell/pull/4978" target="_blank" rel="noopener noreferrer">keywords to help messages</a> (kubouch)</li>
<li>Removed <a href="https://github.com/nushell/nushell/pull/4979" target="_blank" rel="noopener noreferrer">is_private from <code>$nu.scope.commands</code></a> (kubouch)</li>
<li><a href="https://github.com/nushell/nushell/pull/4959" target="_blank" rel="noopener noreferrer">Fix for <code>path join</code> on streams</a> (jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/4960" target="_blank" rel="noopener noreferrer">Fixes to environment defaults</a> (jt)</li>
<li><a href="https://github.com/nushell/nushell/pull/4964" target="_blank" rel="noopener noreferrer">Adding escapes to <code>to nuon</code></a> (jt)</li>
<li>Improvements to the <a href="https://github.com/nushell/nushell/pull/4951" target="_blank" rel="noopener noreferrer"><code>reject</code> command</a> (jt)</li>
<li>Fix to the <a href="https://github.com/nushell/nushell/pull/4947" target="_blank" rel="noopener noreferrer">precedence parser</a> (jt)</li>
<li>Calling out through <code>cmd.exe</code> <a href="https://github.com/nushell/nushell/pull/4903" target="_blank" rel="noopener noreferrer">no longer uses AutoRun</a> (LebsterFace)</li>
</ul>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/5120" target="_blank" rel="noopener noreferrer"><code>str find-replace</code> is now <code>str replace</code></a></li>
<li><a href="https://github.com/nushell/nushell/pull/5123" target="_blank" rel="noopener noreferrer"><code>keep</code> is now <code>take</code></a></li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>The 0.61 release, despite slowing down a little to recoup from the 0.60 release, is one of our largest releases. We averaged over 7 PRs/day over the last three weeks, as many new people joined on and more took an interest in Nushell.</p>
<p>Areas of upcoming focus will be on improving dataframe support, adding IDE support, and exploring new ways of working with Nushell.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.62</title>
      <link>www.nushell.sh/blog/2022-05-03-nushell_0_62.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2022-05-03-nushell_0_62.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.62</source>
      <description> Nushell 0.62
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing version 0.62 of Nu. This release deeper integration with SQLite, new completion logic, and much more.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-62" tabindex="-1"> Nushell 0.62</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing version 0.62 of Nu. This release deeper integration with SQLite, new completion logic, and much more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.62 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.62.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p><strong>A note on this release:</strong> The binaries published by the Nu team now include a statically linked copy of the OpenSSL library (previously Nu used a shared library, AKA 'dynamic linking'). The goal of this change is to make Nu simpler to deploy with fewer dependencies.</p>
<p>This feature is enabled by the &quot;static-link-openssl&quot; Cargo feature, so it's easy to disable if needed when building Nu.</p>
<p>If you want all the built-in goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="database-connectivity-rgwood-elferherrera-fdncred" tabindex="-1"> Database connectivity (rgwood, elferherrera, fdncred)</h1>
<p>A gap in the &quot;Nushell story&quot; up to this point has been that although Nushell is a language and shell focused on data, there wasn't yet any ability to query databases and work with their data. With 0.62, we take our first step in that direction.</p>
<p>New in this release is the <code>db</code> command, which allows you to connect to a SQLite database and create a SQL query to run on it:</p>
<div><pre><code>  > db open db.sqlite
    | db from table_a
    | db select a
    | db limit 10
    | db describe
</code></pre></div><p>With the <code>db open</code> command we open a connection to the database, then subsequent <code>db</code> commands build up a query step by step. One new twist with <code>db</code> for Nushell is that the query is built lazily, and will only be run once the data is needed.</p>
<p>Queries can also be written as raw SQL:</p>
<div><pre><code>  > db open db.sqlite | db query "SELECT a FROM table_a LIMIT 10"
</code></pre></div><p>And finally, the <code>open</code> command has been updated to be SQLite-aware:</p>
<div><pre><code>  > open db.sqlite
</code></pre></div><p>In all of the queries above, <code>db open db.sqlite</code> could be replaced by <code>open db.sqlite</code>; <code>open</code> is able to detect databases by looking at file contents.</p>
<h1 id="full-translation-of-the-book-to-chinese-hustcer" tabindex="-1"> Full translation of the book to Chinese (hustcer)</h1>
<p>The book is now fully translated to <a href="https://www.nushell.sh/zh-CN/book/" target="_blank" rel="noopener noreferrer">Chinese (zh-CN)</a>. Huge shout-out to hustcer for doing all the work on the translation!</p>
<h1 id="more-completions-herlon214-jt" tabindex="-1"> More completions (herlon214, jt)</h1>
<p>Nushell can now complete record fields, cell paths in variables created in previous REPL runs, and more.</p>
<p>Starting with 0.62, Nushell will prefer to wrap filenames with spaces in backticks when completing. This allows for filenames to have single quotes, while also being compatible with upcoming improvements in filename handling.</p>
<h1 id="new-commands" tabindex="-1"> New commands</h1>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/5331" target="_blank" rel="noopener noreferrer"><code>watch</code></a> can now watch a filepath and run a block if a change occurs (rgwood)</li>
</ul>
<h1 id="quality-of-life-improvements" tabindex="-1"> Quality-of-life Improvements</h1>
<ul>
<li>
<p><code>ctrl+o</code> - opens your editor of choice to edit line input (elferherrera)</p>
<ul>
<li>Make sure to set <code>buffer_editor</code> in your configuration so Nushell can find your editor</li>
</ul>
</li>
<li>
<p>You can use <code>()</code> in create filenames. eg) <code>ls ./($dirname)</code> (jt)</p>
<ul>
<li>Note: this currently only works if the <code>()</code> isn't the start of the filepath</li>
</ul>
</li>
<li>
<p><code>ctrl+c</code> now breaks in more cases (gipsyh)</p>
</li>
<li>
<p><code>$nu.os-info</code> can give you information about the platform Nushell is running on. (fdncred)</p>
</li>
<li>
<p><code>~user</code> is now a known path shorthand (merelymyself)'</p>
</li>
<li>
<p>Errors now have helpful descriptions that will show up in the error docs. (zkat)</p>
</li>
<li>
<p>Nushell now has <a href="https://github.com/nushell/nushell/pull/5162" target="_blank" rel="noopener noreferrer">better shell integration</a> for terminals like kitty. (schrieveslaach)</p>
</li>
<li>
<p><strong>Note:</strong> this is a shortened list. For the full list, see the &quot;Changelog&quot; section below</p>
</li>
</ul>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<ul>
<li><code>^=</code> is now <code>starts-with</code></li>
<li>config is now an environment variable
<ul>
<li>To update, move <code>let config = ...</code> to <code>let-env config = ...</code></li>
<li>This change was done for performance reasons and gives considerable performance improvements in some use cases.</li>
</ul>
</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>The <code>db</code> command joins the <code>dfr</code> command in a set of experiments we're working on to better understand how to integrate Nushell with a wider set of data sources. Coming up soon are &quot;lazy dataframes&quot;. These, like the new <code>db</code> command, will allow you to build up a query against a dataframe before you execute it. This allows for much more efficient processing of the request against the data source.</p>
<p>The Nushell design team is deep in discussions about how to make this more universal, allowing the Nushell language to build up queries lazily against a data source, and allowing the data source to perform the optimal native query. There's more research to do here, but we're looking forward to being able to take what we've learned and grow the Nushell language. In the end, we hope, you won't need separate command sets for each data source type. Instead, you'll be able to connect and build your query all in the base Nushell language.</p>
<h1 id="changelog" tabindex="-1"> Changelog</h1>
<h2 id="nushell" tabindex="-1"> Nushell</h2>
<ul>
<li>sholderbach created <a href="https://github.com/nushell/nushell/pull/5427" target="_blank" rel="noopener noreferrer">Pin reedline to v0.5.0 for the next release</a>, and <a href="https://github.com/nushell/nushell/pull/5410" target="_blank" rel="noopener noreferrer">Fix CI to run doctests again</a>, and <a href="https://github.com/nushell/nushell/pull/5404" target="_blank" rel="noopener noreferrer">Bump reedline</a>, and <a href="https://github.com/nushell/nushell/pull/5249" target="_blank" rel="noopener noreferrer">Set to reedline main branch for development cycle</a></li>
<li>elferherrera created <a href="https://github.com/nushell/nushell/pull/5426" target="_blank" rel="noopener noreferrer">added open editor event in config parsing</a>, and <a href="https://github.com/nushell/nushell/pull/5417" target="_blank" rel="noopener noreferrer">Database commands</a>, and <a href="https://github.com/nushell/nushell/pull/5390" target="_blank" rel="noopener noreferrer">Line buffer keybinding</a>, and <a href="https://github.com/nushell/nushell/pull/5381" target="_blank" rel="noopener noreferrer">Line buffer editor</a>, and <a href="https://github.com/nushell/nushell/pull/5343" target="_blank" rel="noopener noreferrer">Database commands</a>, and <a href="https://github.com/nushell/nushell/pull/5307" target="_blank" rel="noopener noreferrer">Database commands</a></li>
<li>zhiburt created <a href="https://github.com/nushell/nushell/pull/5425" target="_blank" rel="noopener noreferrer">Fix coloring when string has spaces</a></li>
<li>jt created <a href="https://github.com/nushell/nushell/pull/5419" target="_blank" rel="noopener noreferrer">Update path completions to handle spaces</a>, and <a href="https://github.com/nushell/nushell/pull/5407" target="_blank" rel="noopener noreferrer">Rename =^ to 'starts-with'</a>, and <a href="https://github.com/nushell/nushell/pull/5403" target="_blank" rel="noopener noreferrer">More escaping/unescaping fixes</a>, and <a href="https://github.com/nushell/nushell/pull/5400" target="_blank" rel="noopener noreferrer">Adds error printing back in a couple places</a>, and <a href="https://github.com/nushell/nushell/pull/5399" target="_blank" rel="noopener noreferrer">Add unescaping to external command parsing</a>, and <a href="https://github.com/nushell/nushell/pull/5398" target="_blank" rel="noopener noreferrer">Move uses of trim_quotes to unescape for filenames</a>, and <a href="https://github.com/nushell/nushell/pull/5386" target="_blank" rel="noopener noreferrer">Make if else more lazy</a>, and <a href="https://github.com/nushell/nushell/pull/5334" target="_blank" rel="noopener noreferrer">Fix 'range' range exclusive</a>, and <a href="https://github.com/nushell/nushell/pull/5327" target="_blank" rel="noopener noreferrer">Allow bare words to interpolate</a>, and <a href="https://github.com/nushell/nushell/pull/5318" target="_blank" rel="noopener noreferrer">Warn if we see let config = ..</a>, and <a href="https://github.com/nushell/nushell/pull/5301" target="_blank" rel="noopener noreferrer">Fix cd -</a>, and <a href="https://github.com/nushell/nushell/pull/5297" target="_blank" rel="noopener noreferrer">Add 'and' and 'or' operators</a>, and <a href="https://github.com/nushell/nushell/pull/5271" target="_blank" rel="noopener noreferrer">Use better quoting for commandline args</a>, and <a href="https://github.com/nushell/nushell/pull/5266" target="_blank" rel="noopener noreferrer">Some cleanups for clippy</a>, and <a href="https://github.com/nushell/nushell/pull/5237" target="_blank" rel="noopener noreferrer">move config back to config.nu</a>, and <a href="https://github.com/nushell/nushell/pull/5230" target="_blank" rel="noopener noreferrer">Move config to be an env var</a></li>
<li>Tropid created <a href="https://github.com/nushell/nushell/pull/5416" target="_blank" rel="noopener noreferrer">Fix erroneous removal of &quot;./&quot; folder prefix</a>, and <a href="https://github.com/nushell/nushell/pull/5401" target="_blank" rel="noopener noreferrer">Update reedline to use partial completion changes</a>, and <a href="https://github.com/nushell/nushell/pull/5387" target="_blank" rel="noopener noreferrer">Remove &quot;./&quot; prefix for file path completions</a>, and <a href="https://github.com/nushell/nushell/pull/5320" target="_blank" rel="noopener noreferrer">Fuzzy completion matching</a>, and <a href="https://github.com/nushell/nushell/pull/5244" target="_blank" rel="noopener noreferrer">Add MatchAlgorithm for completion suggestions</a>, and <a href="https://github.com/nushell/nushell/pull/5228" target="_blank" rel="noopener noreferrer">Feature/refactor completion options</a></li>
<li>stormasm created <a href="https://github.com/nushell/nushell/pull/5415" target="_blank" rel="noopener noreferrer">remove ctrl-l from config.nu as a way to clear scrollback</a>, and <a href="https://github.com/nushell/nushell/pull/5405" target="_blank" rel="noopener noreferrer">event ClearScrollback is working in reedline / update config.nu</a>, and <a href="https://github.com/nushell/nushell/pull/5356" target="_blank" rel="noopener noreferrer">cleanup version command and add in database feature</a>, and <a href="https://github.com/nushell/nushell/pull/5350" target="_blank" rel="noopener noreferrer">mute false import warning for nu-command test where_</a>, and <a href="https://github.com/nushell/nushell/pull/5256" target="_blank" rel="noopener noreferrer">add newlines to the end of the default config files</a></li>
<li>gipsyh created <a href="https://github.com/nushell/nushell/pull/5409" target="_blank" rel="noopener noreferrer">Fixed ctrl-c in recursion loop bug #5362</a>, and <a href="https://github.com/nushell/nushell/pull/5408" target="_blank" rel="noopener noreferrer">Fixed interrupting a for-loop over a list bug #5378</a>, and <a href="https://github.com/nushell/nushell/pull/5369" target="_blank" rel="noopener noreferrer">Don't resuggest accepted completions</a>, and <a href="https://github.com/nushell/nushell/pull/5332" target="_blank" rel="noopener noreferrer">Fix use of <code>export/alias --help</code> bug</a></li>
<li>rgwood created <a href="https://github.com/nushell/nushell/pull/5406" target="_blank" rel="noopener noreferrer">CI: Add job to build plugins</a>, and <a href="https://github.com/nushell/nushell/pull/5402" target="_blank" rel="noopener noreferrer">Add Miette &quot;fancy&quot; feature to fix plugin builds</a>, and <a href="https://github.com/nushell/nushell/pull/5396" target="_blank" rel="noopener noreferrer">CI: build virtualenv tests in dev profile for speed</a>, and <a href="https://github.com/nushell/nushell/pull/5389" target="_blank" rel="noopener noreferrer">Error printing changes for <code>watch</code></a>, and <a href="https://github.com/nushell/nushell/pull/5374" target="_blank" rel="noopener noreferrer">Faster CI</a>, and <a href="https://github.com/nushell/nushell/pull/5359" target="_blank" rel="noopener noreferrer">rust-cache fix</a>, and <a href="https://github.com/nushell/nushell/pull/5358" target="_blank" rel="noopener noreferrer">CI: remove rust-cache from virtualenv tests</a>, and <a href="https://github.com/nushell/nushell/pull/5357" target="_blank" rel="noopener noreferrer">CI: make Clippy reuse build artifacts, other cleanup</a>, and <a href="https://github.com/nushell/nushell/pull/5354" target="_blank" rel="noopener noreferrer">CI: enable rust-cache, remove minimal</a>, and <a href="https://github.com/nushell/nushell/pull/5352" target="_blank" rel="noopener noreferrer">Openssl feature</a>, and <a href="https://github.com/nushell/nushell/pull/5349" target="_blank" rel="noopener noreferrer">Statically link OpenSSL</a>, and <a href="https://github.com/nushell/nushell/pull/5338" target="_blank" rel="noopener noreferrer"><code>db info</code> tweaks</a>, and <a href="https://github.com/nushell/nushell/pull/5331" target="_blank" rel="noopener noreferrer">Add watch command</a>, and <a href="https://github.com/nushell/nushell/pull/5328" target="_blank" rel="noopener noreferrer">Move print_pipeline_data() to nu-protocol</a>, and <a href="https://github.com/nushell/nushell/pull/5273" target="_blank" rel="noopener noreferrer">Clean up tests and unused documentation code</a>, and <a href="https://github.com/nushell/nushell/pull/5272" target="_blank" rel="noopener noreferrer">Clean up unused files in repo root</a>, and <a href="https://github.com/nushell/nushell/pull/5248" target="_blank" rel="noopener noreferrer">Handle custom values in <code>describe</code></a>, and <a href="https://github.com/nushell/nushell/pull/5247" target="_blank" rel="noopener noreferrer">SQLite overhaul: custom value, <code>query db</code> command</a></li>
<li>panicbit created <a href="https://github.com/nushell/nushell/pull/5395" target="_blank" rel="noopener noreferrer">Add ends-with operator and fix dataframe operator behavior</a></li>
<li>fdncred created <a href="https://github.com/nushell/nushell/pull/5394" target="_blank" rel="noopener noreferrer">a little database cleanup</a>, and <a href="https://github.com/nushell/nushell/pull/5380" target="_blank" rel="noopener noreferrer">allows for nushell to have tables without the index column</a>, and <a href="https://github.com/nushell/nushell/pull/5372" target="_blank" rel="noopener noreferrer">Revert &quot;nu-cli/completions: better fix for files with special characters&quot;</a>, and <a href="https://github.com/nushell/nushell/pull/5345" target="_blank" rel="noopener noreferrer">fixes an issue with an empty selector panic</a>, and <a href="https://github.com/nushell/nushell/pull/5335" target="_blank" rel="noopener noreferrer"><code>db info</code> command</a>, and <a href="https://github.com/nushell/nushell/pull/5322" target="_blank" rel="noopener noreferrer">add database feature to extra</a>, and <a href="https://github.com/nushell/nushell/pull/5321" target="_blank" rel="noopener noreferrer">update build status badge</a>, and <a href="https://github.com/nushell/nushell/pull/5317" target="_blank" rel="noopener noreferrer">update contrib to max=500</a>, and <a href="https://github.com/nushell/nushell/pull/5308" target="_blank" rel="noopener noreferrer">update sys with new items, add kernel version to os-info</a>, and <a href="https://github.com/nushell/nushell/pull/5302" target="_blank" rel="noopener noreferrer">consolidate shell integration behind config setting</a>, and <a href="https://github.com/nushell/nushell/pull/5280" target="_blank" rel="noopener noreferrer">add virtualenv to integrations</a>, and <a href="https://github.com/nushell/nushell/pull/5265" target="_blank" rel="noopener noreferrer">update os-info os to name</a>, and <a href="https://github.com/nushell/nushell/pull/5243" target="_blank" rel="noopener noreferrer">add os to $nu based on rust's understanding</a></li>
<li>kubouch created <a href="https://github.com/nushell/nushell/pull/5393" target="_blank" rel="noopener noreferrer">Fix PATH update example</a></li>
<li>herlon214 created <a href="https://github.com/nushell/nushell/pull/5385" target="_blank" rel="noopener noreferrer">nu-cli/completions: complete external args as filepath</a>, and <a href="https://github.com/nushell/nushell/pull/5382" target="_blank" rel="noopener noreferrer">nu-cli/completions: apply correctly nesting for env vars</a>, and <a href="https://github.com/nushell/nushell/pull/5310" target="_blank" rel="noopener noreferrer">nu-command/filesystem: remove newline from cd path</a>, and <a href="https://github.com/nushell/nushell/pull/5303" target="_blank" rel="noopener noreferrer">nu-cli/completions: add completion for $nu</a>, and <a href="https://github.com/nushell/nushell/pull/5299" target="_blank" rel="noopener noreferrer">nu-cli: directory syntax shape + completions</a>, and <a href="https://github.com/nushell/nushell/pull/5298" target="_blank" rel="noopener noreferrer">nu-cli/completions: support record for custom completion</a>, and <a href="https://github.com/nushell/nushell/pull/5254" target="_blank" rel="noopener noreferrer">nu-cli/completions: better fix for files with special characters</a>, and <a href="https://github.com/nushell/nushell/pull/5242" target="_blank" rel="noopener noreferrer">nu-cli/completions: fix file completions with quotes</a>, and <a href="https://github.com/nushell/nushell/pull/5232" target="_blank" rel="noopener noreferrer">nu-cli: added tests for file completions</a></li>
<li>uasi created <a href="https://github.com/nushell/nushell/pull/5384" target="_blank" rel="noopener noreferrer">Fix quoting for command line args</a>, and <a href="https://github.com/nushell/nushell/pull/5365" target="_blank" rel="noopener noreferrer">Avoid using time conversion methods that may panic</a></li>
<li>jmoore34 created <a href="https://github.com/nushell/nushell/pull/5355" target="_blank" rel="noopener noreferrer">Change description of <code>sort</code></a></li>
<li>efx created <a href="https://github.com/nushell/nushell/pull/5346" target="_blank" rel="noopener noreferrer">improve inc plugin docs</a></li>
<li>xgillard created <a href="https://github.com/nushell/nushell/pull/5326" target="_blank" rel="noopener noreferrer">activates optional trim in 'from csv' and 'from tsv'</a></li>
<li>merelymyself created <a href="https://github.com/nushell/nushell/pull/5323" target="_blank" rel="noopener noreferrer">Allows cd (and other commands that depend on current working directory) to use path of type '~user'</a>, and <a href="https://github.com/nushell/nushell/pull/5251" target="_blank" rel="noopener noreferrer">Adding ~user tilde recognition in file paths</a>, and <a href="https://github.com/nushell/nushell/pull/5224" target="_blank" rel="noopener noreferrer">Added search terms to math commands</a></li>
<li>jokeyrhyme created <a href="https://github.com/nushell/nushell/pull/5311" target="_blank" rel="noopener noreferrer">fix: remove <code>println!()</code> from <code>exec</code> builtin</a></li>
<li>babalolajnr created <a href="https://github.com/nushell/nushell/pull/5306" target="_blank" rel="noopener noreferrer">feat: add search terms to date</a></li>
<li>raboof created <a href="https://github.com/nushell/nushell/pull/5264" target="_blank" rel="noopener noreferrer">typo: seach -&gt; search</a>, and <a href="https://github.com/nushell/nushell/pull/5253" target="_blank" rel="noopener noreferrer">git completion: 'git fetch' for remotes</a></li>
<li>jaeheonji created <a href="https://github.com/nushell/nushell/pull/5259" target="_blank" rel="noopener noreferrer">feat: add search terms to <code>conversions</code></a></li>
<li>pinjeff created <a href="https://github.com/nushell/nushell/pull/5246" target="_blank" rel="noopener noreferrer">refactor html module</a></li>
<li>Yethal created <a href="https://github.com/nushell/nushell/pull/5229" target="_blank" rel="noopener noreferrer">allow par-each to receive $in</a></li>
<li>Sygmei created <a href="https://github.com/nushell/nushell/pull/5227" target="_blank" rel="noopener noreferrer">add custom_completion field to <code>$nu.scope.commands</code> command</a></li>
<li>zkat created <a href="https://github.com/nushell/nushell/pull/5222" target="_blank" rel="noopener noreferrer">update miette and switch to GenericErrors</a>, and <a href="https://github.com/nushell/nushell/pull/5172" target="_blank" rel="noopener noreferrer">documented ShellError errors.</a></li>
<li>filaretov created <a href="https://github.com/nushell/nushell/pull/5219" target="_blank" rel="noopener noreferrer">Simplify known external tests</a>, and <a href="https://github.com/nushell/nushell/pull/5216" target="_blank" rel="noopener noreferrer">Add known external tests</a>, and <a href="https://github.com/nushell/nushell/pull/5213" target="_blank" rel="noopener noreferrer">Simplify known external name recovery</a></li>
<li>homburg created <a href="https://github.com/nushell/nushell/pull/5217" target="_blank" rel="noopener noreferrer"><code>nth</code> -&gt; <code>select</code> command</a></li>
<li>andrasio created <a href="https://github.com/nushell/nushell/pull/5214" target="_blank" rel="noopener noreferrer">Remove 'empty' block support reminders, for now.</a></li>
<li>strega-nil created <a href="https://github.com/nushell/nushell/pull/5212" target="_blank" rel="noopener noreferrer">[ls, path relative-to] Fix use of <code>ls ~ | path relative-to ~</code></a>, and <a href="https://github.com/nushell/nushell/pull/5180" target="_blank" rel="noopener noreferrer">don't join paths to cwd ever in calls to external functions</a></li>
<li>herlon214 created <a href="https://github.com/nushell/nushell/pull/5210" target="_blank" rel="noopener noreferrer">nu-cli/completions: completion for use and source</a>, and <a href="https://github.com/nushell/nushell/pull/5207" target="_blank" rel="noopener noreferrer">nu-cli/completions: removed unnecessary bool</a>, and <a href="https://github.com/nushell/nushell/pull/5204" target="_blank" rel="noopener noreferrer">Completion for variables of type Record</a>, and <a href="https://github.com/nushell/nushell/pull/5199" target="_blank" rel="noopener noreferrer">nu-cli/completions: add completion for $env.</a></li>
<li>fdncred created <a href="https://github.com/nushell/nushell/pull/5209" target="_blank" rel="noopener noreferrer">add hex color parsing to ansi</a>, and <a href="https://github.com/nushell/nushell/pull/5201" target="_blank" rel="noopener noreferrer">updated cargo.lock with cargo update</a>, and <a href="https://github.com/nushell/nushell/pull/5187" target="_blank" rel="noopener noreferrer">tweak ci building badge</a>, and <a href="https://github.com/nushell/nushell/pull/5177" target="_blank" rel="noopener noreferrer">allow default color shortcut names</a></li>
<li>stormasm created <a href="https://github.com/nushell/nushell/pull/5208" target="_blank" rel="noopener noreferrer">cleanup nu-command, remove redundant code</a>, and <a href="https://github.com/nushell/nushell/pull/5184" target="_blank" rel="noopener noreferrer">update crate chrono-tz to its latest version</a></li>
<li>jt created <a href="https://github.com/nushell/nushell/pull/5206" target="_blank" rel="noopener noreferrer">Move to dev version 0.61.1</a></li>
<li>uasi created <a href="https://github.com/nushell/nushell/pull/5205" target="_blank" rel="noopener noreferrer">Fix env capture</a></li>
<li>dantswain created <a href="https://github.com/nushell/nushell/pull/5200" target="_blank" rel="noopener noreferrer">Avoid duplicating post headers</a></li>
<li>ZetaNumbers created <a href="https://github.com/nushell/nushell/pull/5193" target="_blank" rel="noopener noreferrer">fix: reduce command have not redirected block's evaluation output</a></li>
<li>nibon7 created <a href="https://github.com/nushell/nushell/pull/5192" target="_blank" rel="noopener noreferrer">fix timestamp parsing on 32-bit platforms</a></li>
<li>hustcer created <a href="https://github.com/nushell/nushell/pull/5188" target="_blank" rel="noopener noreferrer">Fix completions for <code>git push</code> and <code>git checkout</code> close: #5021 and #4599</a>, and <a href="https://github.com/nushell/nushell/pull/5176" target="_blank" rel="noopener noreferrer">Add a dockerfile example based on debian bullseye-slim</a></li>
<li>tiffany352 created <a href="https://github.com/nushell/nushell/pull/5183" target="_blank" rel="noopener noreferrer">Add <code>char -i</code> for chars from integers</a>, and <a href="https://github.com/nushell/nushell/pull/5174" target="_blank" rel="noopener noreferrer">Allow passing an integer to <code>char -u</code></a></li>
<li>rgwood created <a href="https://github.com/nushell/nushell/pull/5182" target="_blank" rel="noopener noreferrer">Initial SQLite functionality</a></li>
<li>schrieveslaach created <a href="https://github.com/nushell/nushell/pull/5162" target="_blank" rel="noopener noreferrer">Shell Integration</a></li>
</ul>
<h2 id="documentation" tabindex="-1"> Documentation</h2>
<ul>
<li>hustcer created <a href="https://github.com/nushell/nushell.github.io/pull/427" target="_blank" rel="noopener noreferrer">Update zh-CN docs</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/425" target="_blank" rel="noopener noreferrer">feat: Add github action related stuff</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/422" target="_blank" rel="noopener noreferrer">More proofreading work for the zh-CN translations</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/421" target="_blank" rel="noopener noreferrer">Fix some broken links</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/420" target="_blank" rel="noopener noreferrer">Some proofreading work for zh-CN translations</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/419" target="_blank" rel="noopener noreferrer">Update zh-CN translations to the latest english version of commit: b6c91cabfa</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/417" target="_blank" rel="noopener noreferrer">Update some node modules</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/415" target="_blank" rel="noopener noreferrer">Translate dataframes.md to zh-CN from commit: 92fb0ac2c</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/414" target="_blank" rel="noopener noreferrer">Add basic config and pages for Turkish</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/413" target="_blank" rel="noopener noreferrer">Add translation guide</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/412" target="_blank" rel="noopener noreferrer">Translate line_editor.md to zh-CN from commit: e0688a346</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/408" target="_blank" rel="noopener noreferrer">Update i18n.nu add <code>outdated</code> command to check outdated translations</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/407" target="_blank" rel="noopener noreferrer">Translate coloring_and_theming.md to zh-CN from commit: f3dc86d3d</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/403" target="_blank" rel="noopener noreferrer">Translate some small docs to zh-CN from commit: f5987a82d</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/400" target="_blank" rel="noopener noreferrer">Fix some typo and Translate configuration &amp; environment to zh-CN from commit: f5987a82d</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/396" target="_blank" rel="noopener noreferrer">Translate lots of small docs to zh-CN from commit: ae23eeba3</a></li>
<li>reillysiemens created <a href="https://github.com/nushell/nushell.github.io/pull/426" target="_blank" rel="noopener noreferrer">Fix broken nu_scripts repo link</a></li>
<li>merelymyself created <a href="https://github.com/nushell/nushell.github.io/pull/424" target="_blank" rel="noopener noreferrer">Changed the confusing title of &quot;Working With Strings&quot;</a></li>
<li>Yethal created <a href="https://github.com/nushell/nushell.github.io/pull/418" target="_blank" rel="noopener noreferrer">Update working_with_tables.md</a></li>
<li>morzel85 created <a href="https://github.com/nushell/nushell.github.io/pull/416" target="_blank" rel="noopener noreferrer">Update loading_data.md</a></li>
<li>stormasm created <a href="https://github.com/nushell/nushell.github.io/pull/411" target="_blank" rel="noopener noreferrer">update section on aliases for adding pipes and persisting</a></li>
<li>raboof created <a href="https://github.com/nushell/nushell.github.io/pull/410" target="_blank" rel="noopener noreferrer">fix typo required-&gt;require</a></li>
<li>rgwood created <a href="https://github.com/nushell/nushell.github.io/pull/406" target="_blank" rel="noopener noreferrer">Document PATH configuration</a></li>
<li>Sygmei created <a href="https://github.com/nushell/nushell.github.io/pull/402" target="_blank" rel="noopener noreferrer">Fix &quot;Concatenate tables&quot; section from &quot;Table docs&quot;</a></li>
<li>Cyborus04 created <a href="https://github.com/nushell/nushell.github.io/pull/399" target="_blank" rel="noopener noreferrer">Fix command-less <code>cd</code> example</a></li>
<li>Szune created <a href="https://github.com/nushell/nushell.github.io/pull/398" target="_blank" rel="noopener noreferrer">Typo fix in 2022-04-12-nushell_0_61.md</a></li>
<li>fennewald created <a href="https://github.com/nushell/nushell.github.io/pull/397" target="_blank" rel="noopener noreferrer">Update coming_from_bash.md</a></li>
</ul>
<h2 id="nu-scripts" tabindex="-1"> Nu scripts</h2>
<ul>
<li>fdncred created <a href="https://github.com/nushell/nu_scripts/pull/214" target="_blank" rel="noopener noreferrer">update get_os_icon for wsl</a>, and <a href="https://github.com/nushell/nu_scripts/pull/213" target="_blank" rel="noopener noreferrer">update type-o for windows</a>, and <a href="https://github.com/nushell/nu_scripts/pull/212" target="_blank" rel="noopener noreferrer">use $nu.os-info vs (sys).host for speed</a></li>
<li>raboof created <a href="https://github.com/nushell/nu_scripts/pull/210" target="_blank" rel="noopener noreferrer">custom completions: git: 'git fetch'</a></li>
<li>Yethal created <a href="https://github.com/nushell/nu_scripts/pull/208" target="_blank" rel="noopener noreferrer">Update nuschiit.nu</a>, and <a href="https://github.com/nushell/nu_scripts/pull/206" target="_blank" rel="noopener noreferrer">Add webscraping and gitlab scanning scripts</a></li>
<li>kubouch created <a href="https://github.com/nushell/nu_scripts/pull/205" target="_blank" rel="noopener noreferrer">Change conda activation scripts to be a module</a></li>
<li>hustcer created <a href="https://github.com/nushell/nu_scripts/pull/204" target="_blank" rel="noopener noreferrer">Fix completions for <code>git push</code> and <code>git checkout</code></a></li>
<li>ZetaNumbers created <a href="https://github.com/nushell/nu_scripts/pull/203" target="_blank" rel="noopener noreferrer">fix: make complitions referred to undefinded &quot;nu-complete files&quot;</a></li>
</ul>
<h2 id="reedline" tabindex="-1"> reedline</h2>
<ul>
<li>sholderbach created <a href="https://github.com/nushell/reedline/pull/422" target="_blank" rel="noopener noreferrer">Change keybinding for external editor</a>, and <a href="https://github.com/nushell/reedline/pull/421" target="_blank" rel="noopener noreferrer">Prepare the 0.5.0 release</a>, and <a href="https://github.com/nushell/reedline/pull/419" target="_blank" rel="noopener noreferrer">Fix README and lib.rs code examples</a>, and <a href="https://github.com/nushell/reedline/pull/418" target="_blank" rel="noopener noreferrer">Add doctests back to the CI</a>, and <a href="https://github.com/nushell/reedline/pull/417" target="_blank" rel="noopener noreferrer">Vi additions and fixes by @zim0369</a>, and <a href="https://github.com/nushell/reedline/pull/416" target="_blank" rel="noopener noreferrer">Attempt fix of <code>ClearScrollback</code></a>, and <a href="https://github.com/nushell/reedline/pull/415" target="_blank" rel="noopener noreferrer">Fix the CI badge</a>, and <a href="https://github.com/nushell/reedline/pull/414" target="_blank" rel="noopener noreferrer">Change the CI to use caching</a>, and <a href="https://github.com/nushell/reedline/pull/400" target="_blank" rel="noopener noreferrer">Add better options for screen clearing</a>, and <a href="https://github.com/nushell/reedline/pull/399" target="_blank" rel="noopener noreferrer">Add explicit <code>EditCommand::InsertNewline</code></a></li>
<li>elferherrera created <a href="https://github.com/nushell/reedline/pull/413" target="_blank" rel="noopener noreferrer">Buffer editor keybinding</a>, and <a href="https://github.com/nushell/reedline/pull/411" target="_blank" rel="noopener noreferrer">line buffer editor</a></li>
<li>Tropid created <a href="https://github.com/nushell/reedline/pull/412" target="_blank" rel="noopener noreferrer">Only partial complete suggestions when input is a prefix</a></li>
<li>gipsyh created <a href="https://github.com/nushell/reedline/pull/410" target="_blank" rel="noopener noreferrer">Append whitespace after selecting menu</a></li>
<li>zim0369 created <a href="https://github.com/nushell/reedline/pull/405" target="_blank" rel="noopener noreferrer">Add vim's <code>C</code> binding</a>, and <a href="https://github.com/nushell/reedline/pull/403" target="_blank" rel="noopener noreferrer">Implements vim's prepend to start binding</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell 0.63</title>
      <link>www.nushell.sh/blog/2022-05-24-nushell_0_63.html</link>
      <guid isPermaLink="false">www.nushell.sh/blog/2022-05-24-nushell_0_63.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell 0.63</source>
      <description> Nushell 0.63
Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.
Today, we're releasing version 0.63 of Nu. This release is the first to include the 'overlays' feature, hooks, lazy dataframes, and more.
</description>
      <content:encoded><![CDATA[<h1 id="nushell-0-63" tabindex="-1"> Nushell 0.63</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing version 0.63 of Nu. This release is the first to include the 'overlays' feature, hooks, lazy dataframes, and more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.63 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.63.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the built-in goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="themes-of-this-release" tabindex="-1"> Themes of this release</h1>
<h2 id="overlays-kubouch" tabindex="-1"> Overlays (kubouch)</h2>
<p>We've added a new concept into this release that merges a few of our previous design ideas together: overlays. You can think of overlays like layers in a paint program. They work together to give you a set of commands, environment variables, and more that you can turn on and off as needed.</p>
<p>For example, we can create an overlay to work in:</p>
<div><pre><code>(zero) > module code { export env BAZ { "baz" } }
(zero) > overlay add code
(code) > $env.BAZ
baz
(code) > let-env BAGR = "bagr"
(code) > $env.BAGR
bagr
(code) > overlay remove code
(zero) > # environment back to what we started with
</code></pre></div><p>Just like layers in a paint program, changes you make (like the update to the environment above) are part of the layer. You can use <code>--keep-custom</code> to keep the changes you have made even after you hide the overlay. Using <code>add</code> and <code>remove</code> are effectively like <code>show</code> and <code>hide</code>, allowing you to quickly switch into a new context, do some work, and switch out with little effort.</p>
<h2 id="hooks-jt" tabindex="-1"> Hooks (jt)</h2>
<p>Starting with 0.63, you can now set up hooks that will run code under certain conditions. These hooks run after your code has finished evaluating.</p>
<p>Let's look first at how to set up the hooks, and then see what the hooks output. To set up a hook, you pick the kind of hook and then configure a block of code to run when that hook fires:</p>
<div><pre><code>hooks: {
    pre_prompt: [{
        print "pre_prompt hook"
    }]
    pre_execution: [{
        print "pre_execution hook"
    }]
    env_change: {
        PWD: [{|before, after|
            print $"PWD environment variable changed from ($before) to ($after)"
        }]
    }
}
</code></pre></div><p>Using this example, we can watch the hooks fire:</p>
<div><pre><code>/home/jt/Source/nushell〉cd ..
pre_execution hook
pre_prompt hook
PWD environment variable changed from /home/jt/Source/nushell to /home/jt/Source
/home/jt/Source〉
</code></pre></div><p>Used together with the &quot;overlays&quot; feature above, we hope to open up the possibility for a lot of powerful interactions with the shell while still keeping the workflow that makes Nushell special.</p>
<h2 id="lazy-dataframe-support-elferherrera" tabindex="-1"> Lazy dataframe support (elferherrera)</h2>
<p>We are starting to support a new way to query dataframes by using lazyframes. This new concept will allow users to build logical plans for the data operations which will result in a reduction of the dataframe processing time.</p>
<p>Lazy dataframes are accessed through the same <code>dfr</code> command and give you a way to build up a pipeline to execute in a more optimal way than the previous eager dataframes. For example, you can perform your aggregations and group-bys lazily, and then work on the results instead of paying for the processing time of having two separate steps.</p>
<h1 id="new-commands" tabindex="-1"> New commands</h1>
<ul>
<li>(Returned from the engine rewrite) <code>histogram</code> for checking distributions right inside nushell (WindSoilder)</li>
<li><code>config nu</code> and <code>config env</code> to easily edit your nushell configuration files with your editor of choice (Kangaxx-0/vFrankZhang)</li>
<li><code>str title-case</code> (krober)<div><pre><code>> 'this is a test case' | str title-case
This Is A Test Case
</code></pre></div></li>
<li>Many new <code>db</code> subcommands (elferherrera)</li>
</ul>
<h1 id="quality-of-life-improvements" tabindex="-1"> Quality-of-life Improvements</h1>
<ul>
<li>
<p>More commands contain additional search terms to find them if you don't remember their exact name. (victormanueltn, LawlietLi) This is a great way to help out by contributing! More information can be found <a href="https://github.com/nushell/nushell/issues/5093" target="_blank" rel="noopener noreferrer">here</a>.</p>
</li>
<li>
<p><code>print -n</code> option to print output without an additional new-line (fdncred)</p>
</li>
<li>
<p><code>flatten</code> now has a more consistent behavior for nested records and tables. (WindSoilder) This now more closely matches the pre-0.60 flatten, and should help create more predictable output.</p>
</li>
<li>
<p>We now support octal binary literals <code>0o[777]</code> similar to the hexadecimal <code>0x[FF]</code> and binary <code>0b[11111111]</code> literals (toffaletti)</p>
</li>
<li>
<p><code>cd</code> accepts abreviation of paths to quickly jump to nested directories based on unique prefixes (fdncred)</p>
<div><pre><code>> $env.PWD
~/some/path
> cd d/s/9
> $env.PWD
~/some/path/deep/space/9
</code></pre></div></li>
<li>
<p>Various improvements make the completions feel more polished (herlon214, PurityLake)</p>
</li>
<li>
<p>If <code>$config.buffer_editor</code> is not set rely on the <code>$env.EDITOR</code> and <code>$env.VISUAL</code> environment variables to find a text editor to edit longer pipelines or your <code>config ...</code> (Kangaxx-0/vFrankZhang, sholderbach)</p>
</li>
<li>
<p>When invoking <code>nu</code> to run a script you can now pass the <code>--config</code> flag to load your <code>config.nu</code> and have the definitions available when running the script (WindSoilder)</p>
</li>
<li>
<p>Similarly you can change the table appearance with the <code>--table-mode</code> flag when invoking <code>nu</code> (fdncred)</p>
</li>
</ul>
<p><strong>Note:</strong> this is a shortened list. For the full list, see the &quot;Changelog&quot; section below</p>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<h2 id="changed-default-keybindings" tabindex="-1"> Changed default keybindings:</h2>
<table>
<thead>
<tr>
<th>Old binding</th>
<th>New binding</th>
<th>Action</th>
<th>Reason for the change</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl-x</code></td>
<td><code>Ctrl-r</code></td>
<td>Visual history search menu</td>
<td>We replaced the simple history search (previously bound to <code>Ctrl-r</code>, <code>cmd: SearchHistory</code>) with the menu that supports previewing several entries at once for quick navigation</td>
</tr>
<tr>
<td><code>Ctrl-q</code></td>
<td><code>F1</code></td>
<td>Interactive help menu</td>
<td><code>F1</code> is generally the convention for help information, with this menu you can search for commands browse through their documentation and pick examples to include/run</td>
</tr>
</tbody>
</table>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>Here are a few of the things we're working on:</p>
<p>SQLite based history. This will maintain a larger number of entries that can searched using date, usage or text.</p>
<p>Input/output types. These will allow commands to be specialized based on the input they're given as we well as allow the typechecker to check that commands can connect on the pipeline together.</p>
<p>And more - we're still looking ahead to IDE support, better database support, and more.</p>
<h1 id="changelog" tabindex="-1"> Changelog</h1>
<h2 id="nushell" tabindex="-1"> Nushell</h2>
<ul>
<li>kubouch created <a href="https://github.com/nushell/nushell/pull/5629" target="_blank" rel="noopener noreferrer">Overlay keep</a>, and <a href="https://github.com/nushell/nushell/pull/5478" target="_blank" rel="noopener noreferrer">Add Nushell REPL simulator; Fix bug in overlay add</a>, and created <a href="https://github.com/nushell/nushell/pull/5375" target="_blank" rel="noopener noreferrer">Overlays</a></li>
<li>jt created <a href="https://github.com/nushell/nushell/pull/5627" target="_blank" rel="noopener noreferrer">Bump to 0.63</a>, and <a href="https://github.com/nushell/nushell/pull/5600" target="_blank" rel="noopener noreferrer">Add environment change hook</a>, and <a href="https://github.com/nushell/nushell/pull/5561" target="_blank" rel="noopener noreferrer">Revert &quot;Try to do less work during capture discovery&quot;</a>, and <a href="https://github.com/nushell/nushell/pull/5560" target="_blank" rel="noopener noreferrer">Try to do less work during capture discovery</a>, and <a href="https://github.com/nushell/nushell/pull/5549" target="_blank" rel="noopener noreferrer">Try removing debuginfo for ci builds</a>, and <a href="https://github.com/nushell/nushell/pull/5480" target="_blank" rel="noopener noreferrer">Allow hooks to be lists of blocks</a>, and <a href="https://github.com/nushell/nushell/pull/5479" target="_blank" rel="noopener noreferrer">Add hooks to cli/repl</a>, and <a href="https://github.com/nushell/nushell/pull/5473" target="_blank" rel="noopener noreferrer">Bump to the 0.62.1 dev version</a></li>
<li>sholderbach created <a href="https://github.com/nushell/nushell/pull/5620" target="_blank" rel="noopener noreferrer">Pin reedline v0.6.0 for the nushell v0.63.0 release</a>, and <a href="https://github.com/nushell/nushell/pull/5616" target="_blank" rel="noopener noreferrer">Add meta command for the config subcommands</a>, and <a href="https://github.com/nushell/nushell/pull/5614" target="_blank" rel="noopener noreferrer">Fallback for <code>config.buffer_editor</code> from <code>EDITOR</code></a>, and <a href="https://github.com/nushell/nushell/pull/5599" target="_blank" rel="noopener noreferrer">Refer to the span of <code>error make</code> if not given</a>, and <a href="https://github.com/nushell/nushell/pull/5598" target="_blank" rel="noopener noreferrer">Use bleeding edge reedline, with fix for #5593</a>, and <a href="https://github.com/nushell/nushell/pull/5588" target="_blank" rel="noopener noreferrer">Change miette theme based on ANSI config</a>, and <a href="https://github.com/nushell/nushell/pull/5587" target="_blank" rel="noopener noreferrer">Use effectively unlimited history size if not set</a>, and <a href="https://github.com/nushell/nushell/pull/5510" target="_blank" rel="noopener noreferrer">Move help menu to canonical <code>F1</code> binding</a></li>
<li>WindSoilder created <a href="https://github.com/nushell/nushell/pull/5619" target="_blank" rel="noopener noreferrer">fix date format</a>, and <a href="https://github.com/nushell/nushell/pull/5618" target="_blank" rel="noopener noreferrer">load config when requried</a>, and <a href="https://github.com/nushell/nushell/pull/5611" target="_blank" rel="noopener noreferrer">Make flatten works better and predictable</a>, and <a href="https://github.com/nushell/nushell/pull/5606" target="_blank" rel="noopener noreferrer">adjust flatten default behavior</a>, and <a href="https://github.com/nushell/nushell/pull/5590" target="_blank" rel="noopener noreferrer">Don't report error when cwd is not exists.</a>, and <a href="https://github.com/nushell/nushell/pull/5584" target="_blank" rel="noopener noreferrer">Fix flatten behavior</a>, and <a href="https://github.com/nushell/nushell/pull/5583" target="_blank" rel="noopener noreferrer">add quantile column in histogram </a>, and <a href="https://github.com/nushell/nushell/pull/5577" target="_blank" rel="noopener noreferrer">fix select tests</a>, and <a href="https://github.com/nushell/nushell/pull/5576" target="_blank" rel="noopener noreferrer">fix move test</a>, and <a href="https://github.com/nushell/nushell/pull/5570" target="_blank" rel="noopener noreferrer">Make format support nested column and use variable</a>, and <a href="https://github.com/nushell/nushell/pull/5553" target="_blank" rel="noopener noreferrer">use reverse iter on value search</a>, and <a href="https://github.com/nushell/nushell/pull/5541" target="_blank" rel="noopener noreferrer">Fix Value::Record compare logic, and pass uniq tests.</a>, and <a href="https://github.com/nushell/nushell/pull/5536" target="_blank" rel="noopener noreferrer">fix zip test</a>, and <a href="https://github.com/nushell/nushell/pull/5534" target="_blank" rel="noopener noreferrer">add rename</a>, and <a href="https://github.com/nushell/nushell/pull/5518" target="_blank" rel="noopener noreferrer">Implement histogram command</a>, and <a href="https://github.com/nushell/nushell/pull/5502" target="_blank" rel="noopener noreferrer">keep metadata while format filesize</a>, and <a href="https://github.com/nushell/nushell/pull/5498" target="_blank" rel="noopener noreferrer">add format filesize</a>, and <a href="https://github.com/nushell/nushell/pull/5464" target="_blank" rel="noopener noreferrer">complete some commands tests</a>, and <a href="https://github.com/nushell/nushell/pull/5461" target="_blank" rel="noopener noreferrer">Document out positional argument type in help message</a>, and created <a href="https://github.com/nushell/nushell/pull/5454" target="_blank" rel="noopener noreferrer">make cd recornize symblic link</a>, and <a href="https://github.com/nushell/nushell/pull/5453" target="_blank" rel="noopener noreferrer">implement seq char command to generate single character sequence</a></li>
<li>hustcer created <a href="https://github.com/nushell/nushell/pull/5610" target="_blank" rel="noopener noreferrer">fix typo for <code>version</code> command</a>, and <a href="https://github.com/nushell/nushell/pull/5594" target="_blank" rel="noopener noreferrer">Fix #5578, assume pipe file be zero-sized</a>, and <a href="https://github.com/nushell/nushell/pull/5511" target="_blank" rel="noopener noreferrer">feat: add <code>tutor list</code> support, remove tutor <code>engine-q</code>, fix: #4950</a>, and <a href="https://github.com/nushell/nushell/pull/5501" target="_blank" rel="noopener noreferrer">Fix #3899, make <code>mv</code> and <code>rm</code> to be quiet by default</a>, and <a href="https://github.com/nushell/nushell/pull/5500" target="_blank" rel="noopener noreferrer">opt: improve ls by call get_file_type only one time</a>, and <a href="https://github.com/nushell/nushell/pull/5494" target="_blank" rel="noopener noreferrer">Improve #4975 of filtering <code>ls</code> output by size issue</a>, and <a href="https://github.com/nushell/nushell/pull/5485" target="_blank" rel="noopener noreferrer">Fix #5469, making $nothing or null convert to filesize of 0B</a>, and <a href="https://github.com/nushell/nushell/pull/5483" target="_blank" rel="noopener noreferrer">Fix <code>to csv</code> and <code>to tsv</code> for simple list, close: #4780</a>, and <a href="https://github.com/nushell/nushell/pull/5467" target="_blank" rel="noopener noreferrer">feat: add disable field type inferencing for <code>from csv</code> and <code>from tsv</code>, fix: #3485 and #4217</a></li>
<li>merelymyself created <a href="https://github.com/nushell/nushell/pull/5609" target="_blank" rel="noopener noreferrer">Allow for test_iteration_errors to work when run as root</a>, and <a href="https://github.com/nushell/nushell/pull/5601" target="_blank" rel="noopener noreferrer">Allows the test <code>commands::ls::fails_with_ls_to_dir_without_permission</code> to work when run as root</a>, and <a href="https://github.com/nushell/nushell/pull/5579" target="_blank" rel="noopener noreferrer">Allowing for flags with '=' in them to register as flags.</a>, and <a href="https://github.com/nushell/nushell/pull/5493" target="_blank" rel="noopener noreferrer">Adds fix for when multiple flags are in one line.</a>, and created <a href="https://github.com/nushell/nushell/pull/5447" target="_blank" rel="noopener noreferrer">Fixing the flag issue</a>, and <a href="https://github.com/nushell/nushell/pull/5446" target="_blank" rel="noopener noreferrer">Adds flags and optional arguments to view-source</a></li>
<li>Kangaxx-0 created <a href="https://github.com/nushell/nushell/pull/5607" target="_blank" rel="noopener noreferrer">Add config command</a>, and <a href="https://github.com/nushell/nushell/pull/5512" target="_blank" rel="noopener noreferrer">Add verbose</a>, and <a href="https://github.com/nushell/nushell/pull/5482" target="_blank" rel="noopener noreferrer">Add feedback to cp</a></li>
<li>toffaletti created <a href="https://github.com/nushell/nushell/pull/5604" target="_blank" rel="noopener noreferrer">Add octal binary literals</a></li>
<li>victormanueltn created <a href="https://github.com/nushell/nushell/pull/5603" target="_blank" rel="noopener noreferrer">Add search term to str substring command.</a>, and <a href="https://github.com/nushell/nushell/pull/5557" target="_blank" rel="noopener noreferrer">Add search terms to build-string command.</a></li>
<li>LawlietLi created <a href="https://github.com/nushell/nushell/pull/5602" target="_blank" rel="noopener noreferrer">feat: add search terms to network</a></li>
<li>IanManske created <a href="https://github.com/nushell/nushell/pull/5581" target="_blank" rel="noopener noreferrer">Fix help menu panic.</a></li>
<li>jaeheonji created <a href="https://github.com/nushell/nushell/pull/5575" target="_blank" rel="noopener noreferrer">feat: apply the <code>--numbered</code> option to acc in <code>reduce</code> command.</a></li>
<li>krober created <a href="https://github.com/nushell/nushell/pull/5573" target="_blank" rel="noopener noreferrer">Add str title-case</a>, and <a href="https://github.com/nushell/nushell/pull/5572" target="_blank" rel="noopener noreferrer">Str casings reorganization &amp; description updates</a></li>
<li>fdncred created <a href="https://github.com/nushell/nushell/pull/5569" target="_blank" rel="noopener noreferrer">move items to showcase</a>, and <a href="https://github.com/nushell/nushell/pull/5567" target="_blank" rel="noopener noreferrer">refactor all write_alls to ensure flushing</a>, and <a href="https://github.com/nushell/nushell/pull/5566" target="_blank" rel="noopener noreferrer">make print flush</a>, and <a href="https://github.com/nushell/nushell/pull/5555" target="_blank" rel="noopener noreferrer">table refactor for readability</a>, and <a href="https://github.com/nushell/nushell/pull/5520" target="_blank" rel="noopener noreferrer">add the ability to change table mode when running script</a>, and <a href="https://github.com/nushell/nushell/pull/5513" target="_blank" rel="noopener noreferrer">add <code>--table_mode</code> <code>-m</code> parameter</a>, and <a href="https://github.com/nushell/nushell/pull/5503" target="_blank" rel="noopener noreferrer">refactor for legibility</a>, and <a href="https://github.com/nushell/nushell/pull/5491" target="_blank" rel="noopener noreferrer">adjust where prompt markers go</a>, and <a href="https://github.com/nushell/nushell/pull/5458" target="_blank" rel="noopener noreferrer">add -n flag to print to print without a newline</a>, and <a href="https://github.com/nushell/nushell/pull/5452" target="_blank" rel="noopener noreferrer">enable cd to work with directory abbreviations</a>, and <a href="https://github.com/nushell/nushell/pull/5450" target="_blank" rel="noopener noreferrer">fix bug in shell_integration</a></li>
<li>rgwood created <a href="https://github.com/nushell/nushell/pull/5568" target="_blank" rel="noopener noreferrer">Revert &quot;Enable backtraces by default (#5562)&quot;</a>, and <a href="https://github.com/nushell/nushell/pull/5563" target="_blank" rel="noopener noreferrer">Upgrade trash dependency</a>, and <a href="https://github.com/nushell/nushell/pull/5562" target="_blank" rel="noopener noreferrer">Enable backtraces by default</a>, and <a href="https://github.com/nushell/nushell/pull/5556" target="_blank" rel="noopener noreferrer">Remove doctests CI action</a>, and <a href="https://github.com/nushell/nushell/pull/5550" target="_blank" rel="noopener noreferrer">CI: bust caches</a>, and <a href="https://github.com/nushell/nushell/pull/5548" target="_blank" rel="noopener noreferrer">Look up git commit hash ourselves, drop libgit2 dependency</a>, and <a href="https://github.com/nushell/nushell/pull/5527" target="_blank" rel="noopener noreferrer">More CI work</a>, and <a href="https://github.com/nushell/nushell/pull/5507" target="_blank" rel="noopener noreferrer">Change history menu keybinding from ctrl+x to ctrl+r</a>, and <a href="https://github.com/nushell/nushell/pull/5489" target="_blank" rel="noopener noreferrer">Enable converting dates to ints</a>, and <a href="https://github.com/nushell/nushell/pull/5488" target="_blank" rel="noopener noreferrer">Parse timestamps as UTC by default</a>, and <a href="https://github.com/nushell/nushell/pull/5487" target="_blank" rel="noopener noreferrer">Display range values better</a>, and <a href="https://github.com/nushell/nushell/pull/5484" target="_blank" rel="noopener noreferrer">Handle int input in <code>into datetime</code></a>, and <a href="https://github.com/nushell/nushell/pull/5463" target="_blank" rel="noopener noreferrer">Enable string interpolation for environment shorthand</a></li>
<li>efugier created <a href="https://github.com/nushell/nushell/pull/5564" target="_blank" rel="noopener noreferrer">feat(errors): more explicit module_or_overlay_not_found_error help me…</a></li>
<li>ocitrev created <a href="https://github.com/nushell/nushell/pull/5554" target="_blank" rel="noopener noreferrer">Sync resources version</a></li>
<li>elferherrera created <a href="https://github.com/nushell/nushell/pull/5546" target="_blank" rel="noopener noreferrer">Lazy dataframes</a>, and <a href="https://github.com/nushell/nushell/pull/5477" target="_blank" rel="noopener noreferrer">join and from derived tables</a>, and <a href="https://github.com/nushell/nushell/pull/5466" target="_blank" rel="noopener noreferrer">Database commands</a></li>
<li>herlon214 created <a href="https://github.com/nushell/nushell/pull/5543" target="_blank" rel="noopener noreferrer">nu-cli/completions: add custom completion test</a>, and <a href="https://github.com/nushell/nushell/pull/5537" target="_blank" rel="noopener noreferrer">nu-glob: add fs::symlink_metadata to detect broken symlinks</a>, and <a href="https://github.com/nushell/nushell/pull/5524" target="_blank" rel="noopener noreferrer">nu-command/filesystem: fix rm .sock file</a>, and <a href="https://github.com/nushell/nushell/pull/5506" target="_blank" rel="noopener noreferrer">nu-cli/completions: verify case for matching dir, .nu, file and command</a>, and <a href="https://github.com/nushell/nushell/pull/5504" target="_blank" rel="noopener noreferrer">nu-cli/completions: add variable completions test + refactor tests</a>, and <a href="https://github.com/nushell/nushell/pull/5468" target="_blank" rel="noopener noreferrer">nu-cli/completions: add tests for flag completions</a>, and <a href="https://github.com/nushell/nushell/pull/5460" target="_blank" rel="noopener noreferrer">nu-cli/completions: add tests for dotnu completions</a>, and <a href="https://github.com/nushell/nushell/pull/5459" target="_blank" rel="noopener noreferrer">nu-cli/completions: send original line to custom completer</a></li>
<li>njbull4 created <a href="https://github.com/nushell/nushell/pull/5523" target="_blank" rel="noopener noreferrer">cp, mv, and rm commands need to support -i flag</a></li>
<li>CozyPenguin created <a href="https://github.com/nushell/nushell/pull/5514" target="_blank" rel="noopener noreferrer">bump umask crate to 2.0.0</a></li>
<li>jmoore34 created <a href="https://github.com/nushell/nushell/pull/5496" target="_blank" rel="noopener noreferrer">Update comment in default_config.nu [skip ci]</a></li>
<li>pejato created <a href="https://github.com/nushell/nushell/pull/5490" target="_blank" rel="noopener noreferrer">Make $nothing | into string == &quot;&quot;</a></li>
<li>onthebridgetonowhere created <a href="https://github.com/nushell/nushell/pull/5462" target="_blank" rel="noopener noreferrer">Fix cp bug</a></li>
<li>PurityLake created <a href="https://github.com/nushell/nushell/pull/5440" target="_blank" rel="noopener noreferrer">Made a change to completion resolution order</a></li>
<li>gipsyh created <a href="https://github.com/nushell/nushell/pull/5434" target="_blank" rel="noopener noreferrer">Add split number flag in <code>split row</code></a></li>
</ul>
<h2 id="documentation" tabindex="-1"> Documentation</h2>
<ul>
<li>sholderbach created <a href="https://github.com/nushell/nushell.github.io/pull/446" target="_blank" rel="noopener noreferrer">Remove outdated reference to <code>open</code> pager</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/445" target="_blank" rel="noopener noreferrer">Document the octal binary literals</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/434" target="_blank" rel="noopener noreferrer">Mention default values for command parameters.</a></li>
<li>unional created <a href="https://github.com/nushell/nushell.github.io/pull/444" target="_blank" rel="noopener noreferrer">docs: add <code>pwd</code> to <code>coming_from_bash.md</code></a></li>
<li>hustcer created <a href="https://github.com/nushell/nushell.github.io/pull/443" target="_blank" rel="noopener noreferrer">Update zh-CN home page and keep the Chinese and English docs in sync</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/442" target="_blank" rel="noopener noreferrer">Update some zh-CN translations from commit: 008c89fc26</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/438" target="_blank" rel="noopener noreferrer">Update some zh-CN translatons from commit: 6f61fadb69</a></li>
<li>rgwood created <a href="https://github.com/nushell/nushell.github.io/pull/441" target="_blank" rel="noopener noreferrer">Update front page</a></li>
<li>mdmundo created <a href="https://github.com/nushell/nushell.github.io/pull/440" target="_blank" rel="noopener noreferrer">Update windows_terminal_default_shell.sh</a></li>
<li>kubouch created <a href="https://github.com/nushell/nushell.github.io/pull/439" target="_blank" rel="noopener noreferrer">Add env.nu to env conversions section</a>, and <a href="https://github.com/nushell/nushell.github.io/pull/437" target="_blank" rel="noopener noreferrer">Document config as environment variable</a></li>
<li>TaKO8Ki created <a href="https://github.com/nushell/nushell.github.io/pull/436" target="_blank" rel="noopener noreferrer">Translate <code>/ja/README.md</code> to Japanese</a></li>
<li>flying-sheep created <a href="https://github.com/nushell/nushell.github.io/pull/435" target="_blank" rel="noopener noreferrer">Document $in</a></li>
</ul>
<h2 id="nu-scripts" tabindex="-1"> Nu_Scripts</h2>
<ul>
<li>thibran created <a href="https://github.com/nushell/nu_scripts/pull/229" target="_blank" rel="noopener noreferrer">Misc tools</a></li>
<li>Suyashtnt created <a href="https://github.com/nushell/nu_scripts/pull/228" target="_blank" rel="noopener noreferrer">feat(custom-completions): add yarn completion</a></li>
<li>jntrnr created <a href="https://github.com/nushell/nu_scripts/pull/227" target="_blank" rel="noopener noreferrer">update nu weekly script</a></li>
<li>fdncred created <a href="https://github.com/nushell/nu_scripts/pull/226" target="_blank" rel="noopener noreferrer">add html colors</a>, and <a href="https://github.com/nushell/nu_scripts/pull/224" target="_blank" rel="noopener noreferrer">add progress bar examples + some benchmarks</a>, and <a href="https://github.com/nushell/nu_scripts/pull/220" target="_blank" rel="noopener noreferrer">help with pr</a>, and <a href="https://github.com/nushell/nu_scripts/pull/215" target="_blank" rel="noopener noreferrer">remove title because it breaks kitty</a></li>
<li>Yethal created <a href="https://github.com/nushell/nu_scripts/pull/225" target="_blank" rel="noopener noreferrer">Update remoting.nu</a>, and <a href="https://github.com/nushell/nu_scripts/pull/222" target="_blank" rel="noopener noreferrer">Added remoting.nu</a></li>
<li>Jacobious52 created <a href="https://github.com/nushell/nu_scripts/pull/223" target="_blank" rel="noopener noreferrer">Auto generation completion help parser</a></li>
<li>kurokirasama created <a href="https://github.com/nushell/nu_scripts/pull/217" target="_blank" rel="noopener noreferrer">added maths, defs and weather scripts</a></li>
<li>drbrain created <a href="https://github.com/nushell/nu_scripts/pull/216" target="_blank" rel="noopener noreferrer">Allow relative entries in CDPATH</a></li>
</ul>
<h2 id="reedline" tabindex="-1"> reedline</h2>
<ul>
<li>sholderbach created <a href="https://github.com/nushell/reedline/pull/430" target="_blank" rel="noopener noreferrer">Prepare the v0.6.0 release</a>, and <a href="https://github.com/nushell/reedline/pull/427" target="_blank" rel="noopener noreferrer">Do not allocate eagerly for full history capacity</a>, and <a href="https://github.com/nushell/reedline/pull/424" target="_blank" rel="noopener noreferrer">Start developer documentation</a></li>
<li>petrisch created <a href="https://github.com/nushell/reedline/pull/429" target="_blank" rel="noopener noreferrer">Typo</a></li>
<li>ahkrr created <a href="https://github.com/nushell/reedline/pull/428" target="_blank" rel="noopener noreferrer">fix: list_menu not accounting for index + indicator</a></li>
<li>sadmac7000 created <a href="https://github.com/nushell/reedline/pull/425" target="_blank" rel="noopener noreferrer">Fix vi-mode word motions</a></li>
<li>DhruvDh created <a href="https://github.com/nushell/reedline/pull/402" target="_blank" rel="noopener noreferrer">Use a default terminal size if reported terminal size is 0, 0</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nu Blog</title>
      <link>www.nushell.sh/blog/</link>
      <guid isPermaLink="false">www.nushell.sh/blog/</guid>
      <source url="www.nushell.sh/rss.xml">Nu Blog</source>
      <content:encoded><![CDATA[<h1 id="nu-blog" tabindex="-1"> Nu Blog</h1>
<p><a href="/rss.xml">RSS</a> / <a href="/feed.atom">Atom</a></p>
<i>Content not supported</i>
]]></content:encoded>
    </item>
    <item>
      <title>How to configure 3rd party prompts</title>
      <link>www.nushell.sh/book/3rdpartyprompts.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/3rdpartyprompts.html</guid>
      <source url="www.nushell.sh/rss.xml">How to configure 3rd party prompts</source>
      <content:encoded><![CDATA[<h1 id="how-to-configure-3rd-party-prompts" tabindex="-1"> How to configure 3rd party prompts</h1>
<h2 id="nerdfonts" tabindex="-1"> nerdfonts</h2>
<p>nerdfonts are not required but they make the presentation much better.</p>
<p><a href="https://www.nerdfonts.com" target="_blank" rel="noopener noreferrer">site</a></p>
<p><a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener noreferrer">repo</a></p>
<h2 id="oh-my-posh" tabindex="-1"> oh-my-posh</h2>
<p><a href="https://ohmyposh.dev/" target="_blank" rel="noopener noreferrer">site</a></p>
<p><a href="https://github.com/JanDeDobbeleer/oh-my-posh" target="_blank" rel="noopener noreferrer">repo</a></p>
<p>If you like <a href="https://ohmyposh.dev/" target="_blank" rel="noopener noreferrer">oh-my-posh</a>, you can use oh-my-posh with Nushell with a few steps. It works great with Nushell. How to setup oh-my-posh with Nushell:</p>
<ol>
<li>Install Oh My Posh and download oh-my-posh's themes following <a href="https://ohmyposh.dev/docs/linux#installation" target="_blank" rel="noopener noreferrer">guide</a>.</li>
<li>Download and install a <a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener noreferrer">nerd font</a>.</li>
<li>Set the PROMPT_COMMAND in ~/.config/nushell/config.nu(or the path output by <code>$nu.config-path</code>), change <code>M365Princess.omp.json</code> to whatever you like <a href="https://ohmyposh.dev/docs/themes" target="_blank" rel="noopener noreferrer">Themes demo</a>.</li>
</ol>
<div><pre><code><span>></span> let-env PROMPT_COMMAND <span>=</span> <span>{</span> oh-my-posh --config ~/.poshthemes/M365Princess.omp.json <span>}</span>
</code></pre></div><p>For MacOS users:</p>
<ol>
<li>You can install oh-my-posh by <code>brew</code>, just following the <a href="https://ohmyposh.dev/docs/macos" target="_blank" rel="noopener noreferrer">guide here</a></li>
<li>Download and install a <a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener noreferrer">nerd font</a>.</li>
<li>Set the PROMPT_COMMAND in the file output by <code>$nu.config-path</code>, here is a code snippet:</li>
</ol>
<div><pre><code><span>let</span> posh-dir <span>=</span> <span>(</span>brew --prefix oh-my-posh <span>|</span> str trim<span>)</span>
<span>let</span> posh-theme <span>=</span> <span>$'($posh-dir)/share/oh-my-posh/themes/'</span>
<span># Change the theme names to: zash/space/robbyrussel/powerline/powerlevel10k_lean/</span>
<span># material/half-life/lambda Or double lines theme: amro/pure/spaceship, etc.</span>
<span># For more [Themes demo](https://ohmyposh.dev/docs/themes)</span>
let-env PROMPT_COMMAND <span>=</span> <span>{</span> oh-my-posh prompt print primary --config <span>$'($posh-theme)/zash.omp.json'</span> <span>}</span>
<span># Optional</span>
let-env PROMPT_INDICATOR <span>=</span> $<span>"(ansi y)$> (ansi reset)"</span>
</code></pre></div><h2 id="starship" tabindex="-1"> Starship</h2>
<p><a href="https://starship.rs/" target="_blank" rel="noopener noreferrer">site</a></p>
<p><a href="https://github.com/starship/starship" target="_blank" rel="noopener noreferrer">repo</a></p>
<ol>
<li>Follow the links above and install Starship.</li>
<li>Install nerdfonts depending on your preferences.</li>
<li>Use the config example below. Make sure to set the <code>STARSHIP_SHELL</code> environment variable.</li>
</ol>
<p>Here's an example config section for Starship:</p>
<div><pre><code>let-env STARSHIP_SHELL = "nu"

def create_left_prompt [] {
    starship prompt --cmd-duration $env.CMD_DURATION_MS $'--status=($env.LAST_EXIT_CODE)'
}

# Use nushell functions to define your right and left prompt
let-env PROMPT_COMMAND = { create_left_prompt }
let-env PROMPT_COMMAND_RIGHT = ""

# The prompt indicators are environmental variables that represent
# the state of the prompt
let-env PROMPT_INDICATOR = ""
let-env PROMPT_INDICATOR_VI_INSERT = ": "
let-env PROMPT_INDICATOR_VI_NORMAL = "〉"
let-env PROMPT_MULTILINE_INDICATOR = "::: "
</code></pre></div><p>Now restart Nu.</p>
<div><pre><code>nushell on 📙 main is 📦 v0.60.0 via 🦀 v1.59.0
❯
</code></pre></div><p>You can learn more about configuring Starship in the <a href="https://github.com/starship/starship#step-2-setup-your-shell-to-use-starship" target="_blank" rel="noopener noreferrer">official starship configuration documentation</a>.</p>
<p>An alternate way to enable Starship is described in the <a href="https://starship.rs/#nushell" target="_blank" rel="noopener noreferrer">Starship Quick Install</a> instructions.</p>
<h2 id="purs" tabindex="-1"> Purs</h2>
<p><a href="https://github.com/xcambar/purs" target="_blank" rel="noopener noreferrer">repo</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Introduction</title>
      <link>www.nushell.sh/book/</link>
      <guid isPermaLink="false">www.nushell.sh/book/</guid>
      <source url="www.nushell.sh/rss.xml">Introduction</source>
      <content:encoded><![CDATA[<h1 id="introduction" tabindex="-1"> Introduction</h1>
<p>Hello, and welcome to the Nushell project. The goal of this project is to take the Unix philosophy of shells, where pipes connect simple commands together, and bring it to the modern style of development.</p>
<p>Nu takes cues from a lot of familiar territory: traditional shells like bash, object based shells like PowerShell, gradually typed languages like TypeScript, functional programming, systems programming, and more. But rather than trying to be a jack of all trades, Nu focuses its energy on doing a few things well:</p>
<ul>
<li>Being a flexible cross-platform shell with a modern feel</li>
<li>Solving problems as a modern programming language that works with the structure of your data</li>
<li>Giving clear error messages and clean IDE support</li>
</ul>
<p>The easiest way to see what Nu can do is to start with some examples, so let's dive in.</p>
<p>The first thing you'll notice when you run a command like <a href="/book/commands/ls.html"><code>ls</code></a> is that instead of a block of text coming back, you get a structured table.</p>
<div><pre><code><span>></span> <span>ls</span>
╭────┬───────────────────────┬──────┬───────────┬─────────────╮
│ <span>#  │         name          │ type │   size    │  modified   │</span>
├────┼───────────────────────┼──────┼───────────┼─────────────┤
│  <span>0</span> │ <span>404</span>.html              │ <span>file</span> │     <span>429</span> B │ <span>3</span> days ago  │
│  <span>1</span> │ CONTRIBUTING.md       │ <span>file</span> │     <span>955</span> B │ <span>8</span> mins ago  │
│  <span>2</span> │ Gemfile               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │
│  <span>3</span> │ Gemfile.lock          │ <span>file</span> │   <span>6.9</span> KiB │ <span>3</span> days ago  │
│  <span>4</span> │ LICENSE               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │
│  <span>5</span> │ README.md             │ <span>file</span> │     <span>213</span> B │ <span>3</span> days ago  │
<span>..</span>.
</code></pre></div><p>The table is more than just showing the directory in a different way. Just like tables in a spreadsheet, this table allows us to work with the data more interactively.</p>
<p>The first thing we'll do is to sort our table by size. To do this, we'll take the output from <a href="/book/commands/ls.html"><code>ls</code></a> and feed it into a command that can sort tables based on the contents of a column.</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> sort-by size <span>|</span> reverse
╭────┬───────────────────────┬──────┬───────────┬─────────────╮
│ <span>#  │         name          │ type │   size    │  modified   │</span>
├────┼───────────────────────┼──────┼───────────┼─────────────┤
│  <span>0</span> │ Gemfile.lock          │ <span>file</span> │   <span>6.9</span> KiB │ <span>3</span> days ago  │
│  <span>1</span> │ SUMMARY.md            │ <span>file</span> │   <span>3.7</span> KiB │ <span>3</span> days ago  │
│  <span>2</span> │ Gemfile               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │
│  <span>3</span> │ LICENSE               │ <span>file</span> │   <span>1.1</span> KiB │ <span>3</span> days ago  │
│  <span>4</span> │ CONTRIBUTING.md       │ <span>file</span> │     <span>955</span> B │ <span>9</span> mins ago  │
│  <span>5</span> │ books.md              │ <span>file</span> │     <span>687</span> B │ <span>3</span> days ago  │
<span>..</span>.
</code></pre></div><p>You can see that to make this work we didn't pass commandline arguments to <a href="/book/commands/ls.html"><code>ls</code></a>. Instead, we used the <code>sort-by</code> command that Nu provides to do the sorting of the output of the <a href="/book/commands/ls.html"><code>ls</code></a> command. To see the biggest files on top, we also used <a href="/book/commands/reverse.html"><code>reverse</code></a>.</p>
<p>Nu provides many commands that can work on tables. For example, we could filter the contents of the <a href="/book/commands/ls.html"><code>ls</code></a> table so that it only shows files over 1 kilobyte:</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> where size <span>></span> 1kb
╭───┬───────────────────┬──────┬─────────┬────────────╮
│ <span># │       name        │ type │  size   │  modified  │</span>
├───┼───────────────────┼──────┼─────────┼────────────┤
│ <span>0</span> │ Gemfile           │ <span>file</span> │ <span>1.1</span> KiB │ <span>3</span> days ago │
│ <span>1</span> │ Gemfile.lock      │ <span>file</span> │ <span>6.9</span> KiB │ <span>3</span> days ago │
│ <span>2</span> │ LICENSE           │ <span>file</span> │ <span>1.1</span> KiB │ <span>3</span> days ago │
│ <span>3</span> │ SUMMARY.md        │ <span>file</span> │ <span>3.7</span> KiB │ <span>3</span> days ago │
╰───┴───────────────────┴──────┴─────────┴────────────╯
</code></pre></div><p>Just as in the Unix philosophy, being able to have commands talk to each other gives us ways to mix-and-match in many different combinations. Let's look at a different command:</p>
<div><pre><code><span>></span> <span>ps</span>
╭─────┬──────┬──────────────────────┬─────────┬───────┬───────────┬──────────╮
│  <span>#  │ pid  │         name         │ status  │  cpu  │    mem    │ virtual  │</span>
├─────┼──────┼──────────────────────┼─────────┼───────┼───────────┼──────────┤
│   <span>0</span> │ <span>7570</span> │ nu                   │ Running │  <span>1.96</span> │  <span>23.2</span> MiB │ <span>32.8</span> GiB │
│   <span>1</span> │ <span>3533</span> │ remindd              │ Sleep   │  <span>0.00</span> │ <span>103.6</span> MiB │ <span>32.3</span> GiB │
│   <span>2</span> │ <span>3495</span> │ TVCacheExtension     │ Sleep   │  <span>0.00</span> │  <span>11.9</span> MiB │ <span>32.2</span> GiB │
│   <span>3</span> │ <span>3490</span> │ MusicCacheExtension  │ Sleep   │  <span>0.00</span> │  <span>12.9</span> MiB │ <span>32.2</span> GiB │
<span>..</span>.
</code></pre></div><p>You may be familiar with the <a href="/book/commands/ps.html"><code>ps</code></a> command if you've used Linux. With it, we can get a list of all the current processes that the system is running, what their status is, and what their name is. We can also see the CPU load for the processes.</p>
<p>What if we wanted to show the processes that were actively using the CPU? Just like we did with the <a href="/book/commands/ls.html"><code>ls</code></a> command earlier, we can also work with the table that the <a href="/book/commands/ps.html"><code>ps</code></a> command gives back to us:</p>
<div><pre><code><span>></span> <span>ps</span> <span>|</span> where cpu <span>></span> <span>5</span>
╭───┬──────┬────────────────┬─────────┬────────┬───────────┬──────────╮
│ <span># │ pid  │      name      │ status  │  cpu   │    mem    │ virtual  │</span>
├───┼──────┼────────────────┼─────────┼────────┼───────────┼──────────┤
│ <span>0</span> │ <span>1583</span> │ Terminal       │ Running │  <span>20.69</span> │ <span>127.8</span> MiB │ <span>33.0</span> GiB │
│ <span>1</span> │  <span>579</span> │ photoanalysisd │ Running │ <span>139.50</span> │  <span>99.9</span> MiB │ <span>32.3</span> GiB │
╰───┴──────┴────────────────┴─────────┴────────┴───────────┴──────────╯
</code></pre></div><p>So far, we've been using <a href="/book/commands/ls.html"><code>ls</code></a> and <a href="/book/commands/ps.html"><code>ps</code></a> to list files and processes. Nu also offers other commands that can create tables of useful information. Next, let's explore <a href="/book/commands/date.html"><code>date</code></a> and <a href="/book/commands/sys.html"><code>sys</code></a>.</p>
<p>Running <code>date now</code> gives us information about the current day and time:</p>
<div><pre><code><span>></span> <span>date</span> now
<span>2022</span>-03-07 <span>14</span>:14:51.684619600 -08:00
</code></pre></div><p>To get the date as a table we can feed it into <code>date to-table</code></p>
<div><pre><code><span>></span> <span>date</span> now <span>|</span> <span>date</span> to-table
╭───┬──────┬───────┬─────┬──────┬────────┬────────┬──────────╮
│ <span># │ year │ month │ day │ hour │ minute │ second │ timezone │</span>
├───┼──────┼───────┼─────┼──────┼────────┼────────┼──────────┤
│ <span>0</span> │ <span>2022</span> │     <span>3</span> │   <span>7</span> │   <span>14</span> │     <span>45</span> │      <span>3</span> │ -08:00   │
╰───┴──────┴───────┴─────┴──────┴────────┴────────┴──────────╯
</code></pre></div><p>Running <a href="/book/commands/sys.html"><code>sys</code></a> gives information about the system that Nu is running on:</p>
<div><pre><code><span>></span> sys
╭───────┬───────────────────╮
│ <span>host</span>  │ <span>{</span>record <span>6</span> fields<span>}</span> │
│ cpu   │ <span>[</span>table <span>4</span> rows<span>]</span>    │
│ disks │ <span>[</span>table <span>3</span> rows<span>]</span>    │
│ mem   │ <span>{</span>record <span>4</span> fields<span>}</span> │
│ temp  │ <span>[</span>table <span>1</span> row<span>]</span>     │
│ net   │ <span>[</span>table <span>4</span> rows<span>]</span>    │
╰───────┴───────────────────╯
</code></pre></div><p>This is a bit different than the tables we saw before. The <a href="/book/commands/sys.html"><code>sys</code></a> command gives us a table that contains structured tables in the cells instead of simple values. To take a look at this data, we need to <em>get</em> the column to view:</p>
<div><pre><code><span>></span> sys <span>|</span> get <span>host</span>
╭────────────────┬────────────────────────╮
│ name           │ Debian GNU/Linux       │
│ os version     │ <span>11</span>                     │
│ kernel version │ <span>5.10</span>.92-v8+            │
│ <span>hostname</span>       │ lifeless               │
│ <span>uptime</span>         │ 19day 21hr 34min 45sec │
│ sessions       │ <span>[</span>table <span>1</span> row<span>]</span>          │
╰────────────────┴────────────────────────╯
</code></pre></div><p>The <a href="/book/commands/get.html"><code>get</code></a> command lets us jump into the contents of a column of the table. Here, we're looking into the &quot;host&quot; column, which contains information about the host that Nu is running on. The name of the OS, the hostname, the CPU, and more. Let's get the name of the users on the system:</p>
<div><pre><code><span>></span> sys <span>|</span> get host.sessions.name
╭───┬────╮
│ <span>0</span> │ jt │
╰───┴────╯
</code></pre></div><p>Right now, there's just one user on the system named &quot;jt&quot;. You'll notice that we can pass a column path (the <code>host.sessions.name</code> part) and not just the name of the column. Nu will take the column path and go to the corresponding bit of data in the table.</p>
<p>You might have noticed something else that's different. Rather than having a table of data, we have just a single element: the string &quot;jt&quot;. Nu works with both tables of data as well as strings. Strings are an important part of working with commands outside of Nu.</p>
<p>Let's see how strings work outside of Nu in action. We'll take our example from before and run the external <code>echo</code> command (the <code>^</code> tells Nu to not use the built-in <a href="/book/commands/echo.html"><code>echo</code></a> command):</p>
<div><pre><code><span>></span> sys <span>|</span> get host.sessions.name <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> ^echo <span>$it</span> <span>}</span>
jt
</code></pre></div><p>If this looks very similar to what we had before, you have a keen eye! It is similar, but with one important difference: we've called <code>^echo</code> with the value we saw earlier. This allows us to pass data out of Nu into <code>echo</code> (or any command outside of Nu, like <code>git</code> for example).</p>
<h3 id="getting-help" tabindex="-1"> Getting Help</h3>
<p>Help text for any of Nu's builtin commands can be discovered with the <a href="/book/commands/help.html"><code>help</code></a> command. To see all commands, run <code>help commands</code>. You can also search for a topic by doing <code>help -f &lt;topic&gt;</code>.</p>
<div><pre><code><span>></span> <span>help</span> path
Explore and manipulate paths.

There are three ways to represent a path:

* As a path literal, e.g., <span>'/home/viking/spam.txt'</span>
* As a structured path: a table with <span>'parent'</span>, <span>'stem'</span>, and <span>'extension'</span> <span>(</span>and
* <span>'prefix'</span> on Windows<span>)</span> columns. This <span>format</span> is produced by the <span>'path parse'</span>
  subcommand.
* As an inner list of path parts, e.g., <span>'[[ / home viking spam.txt ]]'</span><span>.</span>
  Splitting into parts is <span>done</span> by the <span><span>`</span>path <span>split</span><span>`</span></span> command.

All subcommands accept all three variants as an input. Furthermore, the <span>'path
join'</span> subcommand can be used to <span>join</span> the structured path or path parts back into
the path literal.

Usage:
  <span>></span> path

Subcommands:
  path <span>basename</span> - Get the final component of a path
  path <span>dirname</span> - Get the parent directory of a path
  path exists - Check whether a path exists
  path <span>expand</span> - Try to <span>expand</span> a path to its absolute form
  path <span>join</span> - Join a structured path or a list of path parts.
  path parse - Convert a path into structured data.
  path relative-to - Get a path as relative to another path.
  path <span>split</span> - Split a path into parts by a separator.
  path <span>type</span> - Get the <span>type</span> of the object a path refers to <span>(</span>e.g., file, dir, symlink<span>)</span>

Flags:
  -h, --help
      Display this <span>help</span> message
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Aliases</title>
      <link>www.nushell.sh/book/aliases.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/aliases.html</guid>
      <source url="www.nushell.sh/rss.xml">Aliases</source>
      <content:encoded><![CDATA[<h1 id="aliases" tabindex="-1"> Aliases</h1>
<p>Aliases in Nushell offer a way of doing a simple, textual replacement. This allows you to create a shorthand name for a longer command, including its default arguments.</p>
<p>For example, let's create an alias called <code>ll</code> which will expand to <code>ls -l</code>.</p>
<div><pre><code>> alias ll = ls -l
</code></pre></div><p>We can now call this alias:</p>
<div><pre><code>> ll
</code></pre></div><p>Once we do, it's as if we typed <code>ls -l</code>. This also allows us to pass in flags or positional parameters. For example, we can now also write:</p>
<div><pre><code>> ll -a
</code></pre></div><p>And get the equivalent to having typed <code>ls -l -a</code>.</p>
<h2 id="how-to-write-an-alias-with-pipes" tabindex="-1"> How to write an alias with Pipes</h2>
<p>If you want to add a pipe to your alias you must must enclose it with parentheses which are a pair of round brackets ( ) used to mark off your set of commands with pipes.</p>
<div><pre><code>alias lsname = (ls | get name)
</code></pre></div><p>Here is an alias with more than one pipe</p>
<div><pre><code>alias lt = (ls | sort-by modified -r | sort-by type)
</code></pre></div><h2 id="persisting" tabindex="-1"> Persisting</h2>
<p>To make your alias persistent it must be added to your <em>config.nu</em> file.</p>
<p>For more details about how to persist aliases so that they're visible when you start up Nushell, see the <a href="/book/configuration.html">configuration chapter</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Coloring and theming in Nu</title>
      <link>www.nushell.sh/book/coloring_and_theming.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/coloring_and_theming.html</guid>
      <source url="www.nushell.sh/rss.xml">Coloring and theming in Nu</source>
      <content:encoded><![CDATA[<h1 id="coloring-and-theming-in-nu" tabindex="-1"> Coloring and theming in Nu</h1>
<p>Many parts of Nushell's interface can have their color customized. All of these can be set in the <code>config.nu</code> configuration file. If you see the hash/hashtag/pound mark <code>#</code> in the config file it means the text after it is commented out.</p>
<ol>
<li>table borders</li>
<li>primitive values</li>
<li>shapes (this is the command line syntax)</li>
<li>prompt</li>
<li>LS_COLORS</li>
</ol>
<h2 id="table-borders" tabindex="-1"> <code>Table borders</code></h2>
<hr>
<p>Table borders are controlled by the <code>table_mode</code> setting in <code>config.nu</code>. Here is an example:</p>
<div><pre><code><span>></span> <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    table_mode: rounded
<span>}</span>
</code></pre></div><p>Here are the current options for <code>table_mode</code>:</p>
<ul>
<li><code>rounded</code> # of course, this is the best one 😃</li>
<li><code>basic</code></li>
<li><code>compact</code></li>
<li><code>compact_double</code></li>
<li><code>light</code></li>
<li><code>thin</code></li>
<li><code>with_love</code></li>
<li><code>reinforced</code></li>
<li><code>heavy</code></li>
<li><code>none</code></li>
<li><code>other</code></li>
</ul>
<h3 id="color-symbologies" tabindex="-1"> <code>Color symbologies</code></h3>
<hr>
<ul>
<li><code>r</code> - normal color red's abbreviation</li>
<li><code>rb</code> - normal color red's abbreviation with bold attribute</li>
<li><code>red</code> - normal color red</li>
<li><code>red_bold</code> - normal color red with bold attribute</li>
<li><code>&quot;#ff0000&quot;</code> - &quot;#hex&quot; format foreground color red (quotes are required)</li>
<li><code>{ fg: &quot;#ff0000&quot; bg: &quot;#0000ff&quot; attr: b }</code> - &quot;full #hex&quot; format foreground red in &quot;#hex&quot; format with a background of blue in &quot;#hex&quot; format with an attribute of bold abbreviated.</li>
</ul>
<h3 id="attributes" tabindex="-1"> <code>attributes</code></h3>
<hr>
<table>
<thead>
<tr>
<th>code</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>l</td>
<td>blink</td>
</tr>
<tr>
<td>b</td>
<td>bold</td>
</tr>
<tr>
<td>d</td>
<td>dimmed</td>
</tr>
<tr>
<td>h</td>
<td>hidden</td>
</tr>
<tr>
<td>i</td>
<td>italic</td>
</tr>
<tr>
<td>r</td>
<td>reverse</td>
</tr>
<tr>
<td>s</td>
<td>strikethrough</td>
</tr>
<tr>
<td>u</td>
<td>underline</td>
</tr>
<tr>
<td>n</td>
<td>nothing</td>
</tr>
<tr>
<td></td>
<td>defaults to nothing</td>
</tr>
</tbody>
</table>
<h3 id="normal-colors-and-abbreviations" tabindex="-1"> <code>normal colors</code> and <code>abbreviations</code></h3>
<table>
<thead>
<tr>
<th>code</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>g</td>
<td>green</td>
</tr>
<tr>
<td>gb</td>
<td>green_bold</td>
</tr>
<tr>
<td>gu</td>
<td>green_underline</td>
</tr>
<tr>
<td>gi</td>
<td>green_italic</td>
</tr>
<tr>
<td>gd</td>
<td>green_dimmed</td>
</tr>
<tr>
<td>gr</td>
<td>green_reverse</td>
</tr>
<tr>
<td>gbl</td>
<td>green_blink</td>
</tr>
<tr>
<td>gst</td>
<td>green_strike</td>
</tr>
<tr>
<td>lg</td>
<td>light_green</td>
</tr>
<tr>
<td>lgb</td>
<td>light_green_bold</td>
</tr>
<tr>
<td>lgu</td>
<td>light_green_underline</td>
</tr>
<tr>
<td>lgi</td>
<td>light_green_italic</td>
</tr>
<tr>
<td>lgd</td>
<td>light_green_dimmed</td>
</tr>
<tr>
<td>lgr</td>
<td>light_green_reverse</td>
</tr>
<tr>
<td>lgbl</td>
<td>light_green_blink</td>
</tr>
<tr>
<td>lgst</td>
<td>light_green_strike</td>
</tr>
<tr>
<td>r</td>
<td>red</td>
</tr>
<tr>
<td>rb</td>
<td>red_bold</td>
</tr>
<tr>
<td>ru</td>
<td>red_underline</td>
</tr>
<tr>
<td>ri</td>
<td>red_italic</td>
</tr>
<tr>
<td>rd</td>
<td>red_dimmed</td>
</tr>
<tr>
<td>rr</td>
<td>red_reverse</td>
</tr>
<tr>
<td>rbl</td>
<td>red_blink</td>
</tr>
<tr>
<td>rst</td>
<td>red_strike</td>
</tr>
<tr>
<td>lr</td>
<td>light_red</td>
</tr>
<tr>
<td>lrb</td>
<td>light_red_bold</td>
</tr>
<tr>
<td>lru</td>
<td>light_red_underline</td>
</tr>
<tr>
<td>lri</td>
<td>light_red_italic</td>
</tr>
<tr>
<td>lrd</td>
<td>light_red_dimmed</td>
</tr>
<tr>
<td>lrr</td>
<td>light_red_reverse</td>
</tr>
<tr>
<td>lrbl</td>
<td>light_red_blink</td>
</tr>
<tr>
<td>lrst</td>
<td>light_red_strike</td>
</tr>
<tr>
<td>u</td>
<td>blue</td>
</tr>
<tr>
<td>ub</td>
<td>blue_bold</td>
</tr>
<tr>
<td>uu</td>
<td>blue_underline</td>
</tr>
<tr>
<td>ui</td>
<td>blue_italic</td>
</tr>
<tr>
<td>ud</td>
<td>blue_dimmed</td>
</tr>
<tr>
<td>ur</td>
<td>blue_reverse</td>
</tr>
<tr>
<td>ubl</td>
<td>blue_blink</td>
</tr>
<tr>
<td>ust</td>
<td>blue_strike</td>
</tr>
<tr>
<td>lu</td>
<td>light_blue</td>
</tr>
<tr>
<td>lub</td>
<td>light_blue_bold</td>
</tr>
<tr>
<td>luu</td>
<td>light_blue_underline</td>
</tr>
<tr>
<td>lui</td>
<td>light_blue_italic</td>
</tr>
<tr>
<td>lud</td>
<td>light_blue_dimmed</td>
</tr>
<tr>
<td>lur</td>
<td>light_blue_reverse</td>
</tr>
<tr>
<td>lubl</td>
<td>light_blue_blink</td>
</tr>
<tr>
<td>lust</td>
<td>light_blue_strike</td>
</tr>
<tr>
<td>b</td>
<td>black</td>
</tr>
<tr>
<td>bb</td>
<td>black_bold</td>
</tr>
<tr>
<td>bu</td>
<td>black_underline</td>
</tr>
<tr>
<td>bi</td>
<td>black_italic</td>
</tr>
<tr>
<td>bd</td>
<td>black_dimmed</td>
</tr>
<tr>
<td>br</td>
<td>black_reverse</td>
</tr>
<tr>
<td>bbl</td>
<td>black_blink</td>
</tr>
<tr>
<td>bst</td>
<td>black_strike</td>
</tr>
<tr>
<td>ligr</td>
<td>light_gray</td>
</tr>
<tr>
<td>ligrb</td>
<td>light_gray_bold</td>
</tr>
<tr>
<td>ligru</td>
<td>light_gray_underline</td>
</tr>
<tr>
<td>ligri</td>
<td>light_gray_italic</td>
</tr>
<tr>
<td>ligrd</td>
<td>light_gray_dimmed</td>
</tr>
<tr>
<td>ligrr</td>
<td>light_gray_reverse</td>
</tr>
<tr>
<td>ligrbl</td>
<td>light_gray_blink</td>
</tr>
<tr>
<td>ligrst</td>
<td>light_gray_strike</td>
</tr>
<tr>
<td>y</td>
<td>yellow</td>
</tr>
<tr>
<td>yb</td>
<td>yellow_bold</td>
</tr>
<tr>
<td>yu</td>
<td>yellow_underline</td>
</tr>
<tr>
<td>yi</td>
<td>yellow_italic</td>
</tr>
<tr>
<td>yd</td>
<td>yellow_dimmed</td>
</tr>
<tr>
<td>yr</td>
<td>yellow_reverse</td>
</tr>
<tr>
<td>ybl</td>
<td>yellow_blink</td>
</tr>
<tr>
<td>yst</td>
<td>yellow_strike</td>
</tr>
<tr>
<td>ly</td>
<td>light_yellow</td>
</tr>
<tr>
<td>lyb</td>
<td>light_yellow_bold</td>
</tr>
<tr>
<td>lyu</td>
<td>light_yellow_underline</td>
</tr>
<tr>
<td>lyi</td>
<td>light_yellow_italic</td>
</tr>
<tr>
<td>lyd</td>
<td>light_yellow_dimmed</td>
</tr>
<tr>
<td>lyr</td>
<td>light_yellow_reverse</td>
</tr>
<tr>
<td>lybl</td>
<td>light_yellow_blink</td>
</tr>
<tr>
<td>lyst</td>
<td>light_yellow_strike</td>
</tr>
<tr>
<td>p</td>
<td>purple</td>
</tr>
<tr>
<td>pb</td>
<td>purple_bold</td>
</tr>
<tr>
<td>pu</td>
<td>purple_underline</td>
</tr>
<tr>
<td>pi</td>
<td>purple_italic</td>
</tr>
<tr>
<td>pd</td>
<td>purple_dimmed</td>
</tr>
<tr>
<td>pr</td>
<td>purple_reverse</td>
</tr>
<tr>
<td>pbl</td>
<td>purple_blink</td>
</tr>
<tr>
<td>pst</td>
<td>purple_strike</td>
</tr>
<tr>
<td>lp</td>
<td>light_purple</td>
</tr>
<tr>
<td>lpb</td>
<td>light_purple_bold</td>
</tr>
<tr>
<td>lpu</td>
<td>light_purple_underline</td>
</tr>
<tr>
<td>lpi</td>
<td>light_purple_italic</td>
</tr>
<tr>
<td>lpd</td>
<td>light_purple_dimmed</td>
</tr>
<tr>
<td>lpr</td>
<td>light_purple_reverse</td>
</tr>
<tr>
<td>lpbl</td>
<td>light_purple_blink</td>
</tr>
<tr>
<td>lpst</td>
<td>light_purple_strike</td>
</tr>
<tr>
<td>c</td>
<td>cyan</td>
</tr>
<tr>
<td>cb</td>
<td>cyan_bold</td>
</tr>
<tr>
<td>cu</td>
<td>cyan_underline</td>
</tr>
<tr>
<td>ci</td>
<td>cyan_italic</td>
</tr>
<tr>
<td>cd</td>
<td>cyan_dimmed</td>
</tr>
<tr>
<td>cr</td>
<td>cyan_reverse</td>
</tr>
<tr>
<td>cbl</td>
<td>cyan_blink</td>
</tr>
<tr>
<td>cst</td>
<td>cyan_strike</td>
</tr>
<tr>
<td>lc</td>
<td>light_cyan</td>
</tr>
<tr>
<td>lcb</td>
<td>light_cyan_bold</td>
</tr>
<tr>
<td>lcu</td>
<td>light_cyan_underline</td>
</tr>
<tr>
<td>lci</td>
<td>light_cyan_italic</td>
</tr>
<tr>
<td>lcd</td>
<td>light_cyan_dimmed</td>
</tr>
<tr>
<td>lcr</td>
<td>light_cyan_reverse</td>
</tr>
<tr>
<td>lcbl</td>
<td>light_cyan_blink</td>
</tr>
<tr>
<td>lcst</td>
<td>light_cyan_strike</td>
</tr>
<tr>
<td>w</td>
<td>white</td>
</tr>
<tr>
<td>wb</td>
<td>white_bold</td>
</tr>
<tr>
<td>wu</td>
<td>white_underline</td>
</tr>
<tr>
<td>wi</td>
<td>white_italic</td>
</tr>
<tr>
<td>wd</td>
<td>white_dimmed</td>
</tr>
<tr>
<td>wr</td>
<td>white_reverse</td>
</tr>
<tr>
<td>wbl</td>
<td>white_blink</td>
</tr>
<tr>
<td>wst</td>
<td>white_strike</td>
</tr>
<tr>
<td>dgr</td>
<td>dark_gray</td>
</tr>
<tr>
<td>dgrb</td>
<td>dark_gray_bold</td>
</tr>
<tr>
<td>dgru</td>
<td>dark_gray_underline</td>
</tr>
<tr>
<td>dgri</td>
<td>dark_gray_italic</td>
</tr>
<tr>
<td>dgrd</td>
<td>dark_gray_dimmed</td>
</tr>
<tr>
<td>dgrr</td>
<td>dark_gray_reverse</td>
</tr>
<tr>
<td>dgrbl</td>
<td>dark_gray_blink</td>
</tr>
<tr>
<td>dgrst</td>
<td>dark_gray_strike</td>
</tr>
</tbody>
</table>
<h3 id="hex-format" tabindex="-1"> <code>&quot;#hex&quot;</code> format</h3>
<hr>
<p>The &quot;#hex&quot; format is one way you typically see colors represented. It's simply the <code>#</code> character followed by 6 characters. The first two are for <code>red</code>, the second two are for <code>green</code>, and the third two are for <code>blue</code>. It's important that this string be surrounded in quotes, otherwise Nushell thinks it's a commented out string.</p>
<p>Example: The primary <code>red</code> color is <code>&quot;#ff0000&quot;</code> or <code>&quot;#FF0000&quot;</code>. Upper and lower case in letters shouldn't make a difference.</p>
<p>This <code>&quot;#hex&quot;</code> format allows us to specify 24-bit truecolor tones to different parts of Nushell.</p>
<h2 id="full-hex-format" tabindex="-1"> <code>full &quot;#hex&quot;</code> format</h2>
<hr>
<p>The <code>full &quot;#hex&quot;</code> format is a take on the <code>&quot;#hex&quot;</code> format but allows one to specify the foreground, background, and attributes in one line.</p>
<p>Example: <code>{ fg: &quot;#ff0000&quot; bg: &quot;#0000ff&quot; attr: b }</code></p>
<ul>
<li>foreground of red in &quot;#hex&quot; format</li>
<li>background of blue in &quot;#hex&quot; format</li>
<li>attribute of bold abbreviated</li>
</ul>
<h2 id="primitive-values" tabindex="-1"> <code>Primitive values</code></h2>
<hr>
<p>Primitive values are things like <code>int</code> and <code>string</code>. Primitive values and shapes can be set with a variety of color symbologies seen above.</p>
<p>This is the current list of primitives. Not all of these are configurable. The configurable ones are marked with *.</p>
<table>
<thead>
<tr>
<th>primitive</th>
<th>default color</th>
<th>configurable</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>any</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>binary</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>block</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>bool</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>cellpath</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>condition</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>custom</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>duration</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>expression</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>filesize</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>float</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>glob</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>import</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>int</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>list</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>nothing</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>number</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>operator</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>path</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>range</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>record</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>signature</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>string</code></td>
<td>Color::White.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>table</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>var</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>vardecl</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>variable</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="special-primitives-not-really-primitives-but-they-exist-solely-for-coloring" tabindex="-1"> special &quot;primitives&quot; (not really primitives but they exist solely for coloring)</h4>
<table>
<thead>
<tr>
<th>primitive</th>
<th>default color</th>
<th>configurable</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>leading_trailing_space_bg</code></td>
<td>Color::Rgb(128, 128, 128))</td>
<td>*</td>
</tr>
<tr>
<td><code>header</code></td>
<td>Color::Green.bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>empty</code></td>
<td>Color::Blue.normal()</td>
<td>*</td>
</tr>
<tr>
<td><code>row_index</code></td>
<td>Color::Green.bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>hints</code></td>
<td>Color::DarkGray.normal()</td>
<td>*</td>
</tr>
</tbody>
</table>
<p>Here's a small example of changing some of these values.</p>
<div><pre><code><span>></span> <span>let</span> config <span>=</span> <span>{</span>
    color_config: <span>{</span>
        separator: purple
        leading_trailing_space_bg: <span>"#ffffff"</span>
        header: gb
        date: wd
        filesize: c
        row_index: cb
        bool: red
        int: green
        duration: blue_bold
        range: purple
        float: red
        string: white
        nothing: red
        binary: red
        cellpath: cyan
        hints: dark_gray
    <span>}</span>
<span>}</span>
</code></pre></div><p>Here's another small example using multiple color syntaxes with some comments.</p>
<div><pre><code><span>></span> <span>let</span> config <span>=</span> <span>{</span>
    color_config: <span>{</span>
        separator: <span>"#88b719"</span> <span># this sets only the foreground color like PR #486</span>
        leading_trailing_space_bg: white <span># this sets only the foreground color in the original style</span>
        header: <span>{</span> <span># this is like PR #489</span>
            fg: <span>"#B01455"</span>, <span># note, quotes are required on the values with hex colors</span>
            bg: <span>"#ffb900"</span>,<span># note, commas are not required, it could also be all on one line</span>
            attr: bli <span># note, there are no quotes around this value. it works with or without quotes</span>
        <span>}</span>
        date: <span>"#75507B"</span>
        filesize: <span>"#729fcf"</span>
        row_index: <span>{</span>
            <span># note, that this is another way to set only the foreground, no need to specify bg and attr</span>
            fg: <span>"#e50914"</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre></div><h2 id="shape-values" tabindex="-1"> <code>Shape</code> values</h2>
<p>As mentioned above, <code>shape</code> is a term used to indicate the syntax coloring.</p>
<p>Here's the current list of flat shapes.</p>
<table>
<thead>
<tr>
<th>shape</th>
<th>default style</th>
<th>configurable</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>shape_block</code></td>
<td>fg(Color::Blue).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_bool</code></td>
<td>fg(Color::LightCyan)</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_custom</code></td>
<td>bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_external</code></td>
<td>fg(Color::Cyan)</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_externalarg</code></td>
<td>fg(Color::Green).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_filepath</code></td>
<td>fg(Color::Cyan)</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_flag</code></td>
<td>fg(Color::Blue).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_float</code></td>
<td>fg(Color::Purple).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_garbage</code></td>
<td>fg(Color::White).on(Color::Red).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_globpattern</code></td>
<td>fg(Color::Cyan).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_int</code></td>
<td>fg(Color::Purple).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_internalcall</code></td>
<td>fg(Color::Cyan).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_list</code></td>
<td>fg(Color::Cyan).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_literal</code></td>
<td>fg(Color::Blue)</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_nothing</code></td>
<td>fg(Color::LightCyan)</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_operator</code></td>
<td>fg(Color::Yellow)</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_range</code></td>
<td>fg(Color::Yellow).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_record</code></td>
<td>fg(Color::Cyan).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_signature</code></td>
<td>fg(Color::Green).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_string</code></td>
<td>fg(Color::Green)</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_string_interpolation</code></td>
<td>fg(Color::Cyan).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_table</code></td>
<td>fg(Color::Blue).bold()</td>
<td>*</td>
</tr>
<tr>
<td><code>shape_variable</code></td>
<td>fg(Color::Purple)</td>
<td>*</td>
</tr>
</tbody>
</table>
<p>Here's a small example of how to apply color to these items. Anything not specified will receive the default color.</p>
<div><pre><code><span>></span> <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    color_config: <span>{</span>
        shape_garbage: <span>{</span> fg: <span>"#FFFFFF"</span> bg: <span>"#FF0000"</span> attr: b<span>}</span>
        shape_bool: green
        shape_int: <span>{</span> fg: <span>"#0000ff"</span> attr: b<span>}</span>
    <span>}</span>
<span>}</span>
</code></pre></div><h2 id="prompt-configuration-and-coloring" tabindex="-1"> <code>Prompt</code> configuration and coloring</h2>
<p>The Nushell prompt is configurable through these environment variables:</p>
<ul>
<li><code>PROMPT_COMMAND</code>: Code to execute for setting up the prompt (block)</li>
<li><code>PROMPT_COMMAND_RIGHT</code>: Code to execute for setting up the <em>RIGHT</em> prompt (block) (see oh-my.nu in nu_scripts)</li>
<li><code>PROMPT_INDICATOR</code> = &quot;〉&quot;: The indicator printed after the prompt (by default &quot;&gt;&quot;-like Unicode symbol)</li>
<li><code>PROMPT_INDICATOR_VI_INSERT</code> = &quot;: &quot;</li>
<li><code>PROMPT_INDICATOR_VI_NORMAL</code> = &quot;v &quot;</li>
<li><code>PROMPT_MULTILINE_INDICATOR</code> = &quot;::: &quot;</li>
</ul>
<p>Example: For a simple prompt one could do this. Note that <code>PROMPT_COMMAND</code> requires a <code>block</code> whereas the others require a <code>string</code>.</p>
<div><pre><code><span>></span> let-env PROMPT_COMMAND <span>=</span> <span>{</span> build-string <span>(</span>date now <span>|</span> <span>date</span> <span>format</span> <span>'%m/%d/%Y %I:%M:%S%.3f'</span><span>)</span> <span>': '</span> <span>(</span>pwd <span>|</span> path <span>basename</span><span>)</span> <span>}</span>
</code></pre></div><p>If you don't like the default <code>PROMPT_INDICATOR</code> you could change it like this.</p>
<div><pre><code><span>></span> let-env PROMPT_INDICATOR <span>=</span> <span>"> "</span>
</code></pre></div><p>Coloring of the prompt is controlled by the <code>block</code> in <code>PROMPT_COMMAND</code> where you can write your own custom prompt. We've written a slightly fancy one that has git statuses located in the <a href="https://github.com/nushell/nu_scripts/blob/main/prompt/oh-my.nu" target="_blank" rel="noopener noreferrer">nu_scripts repo</a>.</p>
<h2 id="ls-colors-colors-for-the-ls-command" tabindex="-1"> <code>LS_COLORS</code> colors for the <code>ls</code> command</h2>
<p>Nushell will respect and use the <code>LS_COLORS</code> environment variable setting on Mac, Linux, and Windows. This setting allows you to define the color of file types when you do a <a href="/book/commands/ls.html"><code>ls</code></a>. For instance, you can make directories one color, _.md markdown files another color, _.toml files yet another color, etc. There are a variety of ways to color your file types.</p>
<p>There's an exhaustive list <a href="https://github.com/trapd00r/LS_COLORS" target="_blank" rel="noopener noreferrer">here</a>, which is overkill, but gives you an rudimentary understanding of how to create a ls_colors file that <code>dircolors</code> can turn into a <code>LS_COLORS</code> environment variable.</p>
<p><a href="https://www.linuxhowto.net/how-to-set-colors-for-ls-command/" target="_blank" rel="noopener noreferrer">This</a> is a pretty good introduction to <code>LS_COLORS</code>. I'm sure you can find many more tutorials on the web.</p>
<p>I like the <code>vivid</code> application and currently have it configured in my <code>config.nu</code> like this. You can find <code>vivid</code> <a href="https://github.com/sharkdp/vivid" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p><code>let-env LS_COLORS = (vivid generate molokai | str trim)</code></p>
<p>If <code>LS_COLORS</code> is not set, nushell will default to a builtin <code>LS_COLORS</code> setting, based on 8-bit (extended) ANSI colors.</p>
<h2 id="theming" tabindex="-1"> Theming</h2>
<p>Theming combines all the coloring above. Here's a quick example of one we put together quickly to demonstrate the ability to theme. This is a spin on the <code>base16</code> themes that we see so widespread on the web.</p>
<p>The key to making theming work is to make sure you specify all themes and colors you're going to use in the <code>config.nu</code> file <em>before</em> you declare the <code>let config = </code> line.</p>
<div><pre><code><span># let's define some colors</span>

<span>let</span> base00 <span>=</span> <span>"#181818"</span> <span># Default Background</span>
<span>let</span> base01 <span>=</span> <span>"#282828"</span> <span># Lighter Background (Used for status bars, line number and folding marks)</span>
<span>let</span> base02 <span>=</span> <span>"#383838"</span> <span># Selection Background</span>
<span>let</span> base03 <span>=</span> <span>"#585858"</span> <span># Comments, Invisibles, Line Highlighting</span>
<span>let</span> base04 <span>=</span> <span>"#b8b8b8"</span> <span># Dark Foreground (Used for status bars)</span>
<span>let</span> base05 <span>=</span> <span>"#d8d8d8"</span> <span># Default Foreground, Caret, Delimiters, Operators</span>
<span>let</span> base06 <span>=</span> <span>"#e8e8e8"</span> <span># Light Foreground (Not often used)</span>
<span>let</span> base07 <span>=</span> <span>"#f8f8f8"</span> <span># Light Background (Not often used)</span>
<span>let</span> base08 <span>=</span> <span>"#ab4642"</span> <span># Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted</span>
<span>let</span> base09 <span>=</span> <span>"#dc9656"</span> <span># Integers, Boolean, Constants, XML Attributes, Markup Link Url</span>
<span>let</span> base0a <span>=</span> <span>"#f7ca88"</span> <span># Classes, Markup Bold, Search Text Background</span>
<span>let</span> base0b <span>=</span> <span>"#a1b56c"</span> <span># Strings, Inherited Class, Markup Code, Diff Inserted</span>
<span>let</span> base0c <span>=</span> <span>"#86c1b9"</span> <span># Support, Regular Expressions, Escape Characters, Markup Quotes</span>
<span>let</span> base0d <span>=</span> <span>"#7cafc2"</span> <span># Functions, Methods, Attribute IDs, Headings</span>
<span>let</span> base0e <span>=</span> <span>"#ba8baf"</span> <span># Keywords, Storage, Selector, Markup Italic, Diff Changed</span>
<span>let</span> base0f <span>=</span> <span>"#a16946"</span> <span># Deprecated, Opening/Closing Embedded Language Tags, e.g. &lt;?php ?></span>

<span># we're creating a theme here that uses the colors we defined above.</span>

<span>let</span> base16_theme <span>=</span> <span>{</span>
    separator: <span>$base03</span>
    leading_trailing_space_bg: <span>$base04</span>
    header: <span>$base0b</span>
    date: <span>$base0e</span>
    filesize: <span>$base0d</span>
    row_index: <span>$base0c</span>
    bool: <span>$base08</span>
    int: <span>$base0b</span>
    duration: <span>$base08</span>
    range: <span>$base08</span>
    float: <span>$base08</span>
    string: <span>$base04</span>
    nothing: <span>$base08</span>
    binary: <span>$base08</span>
    cellpath: <span>$base08</span>
    hints: dark_gray

    <span># shape_garbage: { fg: $base07 bg: $base08 attr: b} # base16 white on red</span>
    <span># but i like the regular white on red for parse errors</span>
    shape_garbage: <span>{</span> fg: <span>"#FFFFFF"</span> bg: <span>"#FF0000"</span> attr: b<span>}</span>
    shape_bool: <span>$base0d</span>
    shape_int: <span>{</span> fg: <span>$base0e</span> attr: b<span>}</span>
    shape_float: <span>{</span> fg: <span>$base0e</span> attr: b<span>}</span>
    shape_range: <span>{</span> fg: <span>$base0a</span> attr: b<span>}</span>
    shape_internalcall: <span>{</span> fg: <span>$base0c</span> attr: b<span>}</span>
    shape_external: <span>$base0c</span>
    shape_externalarg: <span>{</span> fg: <span>$base0b</span> attr: b<span>}</span>
    shape_literal: <span>$base0d</span>
    shape_operator: <span>$base0a</span>
    shape_signature: <span>{</span> fg: <span>$base0b</span> attr: b<span>}</span>
    shape_string: <span>$base0b</span>
    shape_filepath: <span>$base0d</span>
    shape_globpattern: <span>{</span> fg: <span>$base0d</span> attr: b<span>}</span>
    shape_variable: <span>$base0e</span>
    shape_flag: <span>{</span> fg: <span>$base0d</span> attr: b<span>}</span>
    shape_custom: <span>{</span>attr: b<span>}</span>
<span>}</span>

<span># now let's apply our regular config settings but also apply the "color_config:" theme that we specified above.</span>

<span>let</span> config <span>=</span> <span>{</span>
  filesize_metric: <span>true</span>
  table_mode: rounded <span># basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other</span>
  use_ls_colors: <span>true</span>
  color_config: <span>$base16_theme</span> <span># &lt;-- this is the theme</span>
  use_grid_icons: <span>true</span>
  footer_mode: always <span>#always, never, number_of_rows, auto</span>
  animate_prompt: <span>false</span>
  float_precision: <span>2</span>
  use_ansi_coloring: <span>true</span>
  filesize_format: <span>"b"</span> <span># b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, zb, zib, auto</span>
  edit_mode: emacs <span># vi</span>
  max_history_size: <span>10000</span>
  log_level: error
<span>}</span>
</code></pre></div><p>if you want to go full-tilt on theming, you'll want to theme all the items I mentioned at the very beginning, including LS_COLORS, and the prompt. Good luck!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Coming from Bash</title>
      <link>www.nushell.sh/book/coming_from_bash.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/coming_from_bash.html</guid>
      <source url="www.nushell.sh/rss.xml">Coming from Bash</source>
      <content:encoded><![CDATA[<h1 id="coming-from-bash" tabindex="-1"> Coming from Bash</h1>
<p>If you're coming from <code>Git Bash</code> on Windows, then the external commands you're used to (bash, grep, etc) will not be available in <code>nu</code> by default (unless you had explicitly made them available in the Windows Path environment variable).
To make these commands available in <code>nu</code> as well, add the following line to your <code>config.nu</code> with either <code>append</code> or <code>prepend</code>.</p>
<div><pre><code>let-env Path = ($env.Path | prepend 'C:\Program Files\Git\usr\bin')
</code></pre></div><p>Note: this table assumes Nu 0.14.1 or later.</p>
<table>
<thead>
<tr>
<th>Bash</th>
<th>Nu</th>
<th>Task</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls</code></td>
<td><code>ls</code></td>
<td>Lists the files in the current directory</td>
</tr>
<tr>
<td><code>ls &lt;dir&gt;</code></td>
<td><code>ls &lt;dir&gt;</code></td>
<td>Lists the files in the given directory</td>
</tr>
<tr>
<td><code>ls pattern*</code></td>
<td><code>ls pattern*</code></td>
<td>Lists files that match a given pattern</td>
</tr>
<tr>
<td><code>ls -la</code></td>
<td><code>ls --long --all</code> or <code>ls -la</code></td>
<td>List files with all available information, including hidden files</td>
</tr>
<tr>
<td><code>ls -d */</code></td>
<td><code>ls | where type == dir</code></td>
<td>List directories</td>
</tr>
<tr>
<td><code>find . -name *.rs</code></td>
<td><code>ls **/*.rs</code></td>
<td>Find recursively all files that match a given pattern</td>
</tr>
<tr>
<td><code>find . -name Makefile | xargs vim</code></td>
<td><code>ls \*\*/Makefile | get name | vim $in</code></td>
<td>Pass values as command parameters</td>
</tr>
<tr>
<td><code>cd &lt;directory&gt;</code></td>
<td><code>cd &lt;directory&gt;</code></td>
<td>Change to the given directory</td>
</tr>
<tr>
<td><code>cd</code></td>
<td><code>cd</code></td>
<td>Change to the home directory</td>
</tr>
<tr>
<td><code>cd -</code></td>
<td><code>cd -</code></td>
<td>Change to the previous directory</td>
</tr>
<tr>
<td><code>mkdir &lt;path&gt;</code></td>
<td><code>mkdir &lt;path&gt;</code></td>
<td>Creates the given path</td>
</tr>
<tr>
<td><code>mkdir -p &lt;path&gt;</code></td>
<td><code>mkdir &lt;path&gt;</code></td>
<td>Creates the given path, creating parents as necessary</td>
</tr>
<tr>
<td><code>touch test.txt</code></td>
<td><code>touch test.txt</code></td>
<td>Create a file</td>
</tr>
<tr>
<td><code>&gt; &lt;path&gt;</code></td>
<td><code>| save --raw &lt;path&gt;</code></td>
<td>Save string into a file</td>
</tr>
<tr>
<td><code>&gt;&gt; &lt;path&gt;</code></td>
<td><code>| save --raw --append &lt;path&gt;</code></td>
<td>Append string to a file</td>
</tr>
<tr>
<td><code>cat &lt;path&gt;</code></td>
<td><code>open --raw &lt;path&gt;</code></td>
<td>Display the contents of the given file</td>
</tr>
<tr>
<td></td>
<td><code>open &lt;path&gt;</code></td>
<td>Read a file as structured data</td>
</tr>
<tr>
<td><code>mv &lt;source&gt; &lt;dest&gt;</code></td>
<td><code>mv &lt;source&gt; &lt;dest&gt;</code></td>
<td>Move file to new location</td>
</tr>
<tr>
<td><code>cp &lt;source&gt; &lt;dest&gt;</code></td>
<td><code>cp &lt;source&gt; &lt;dest&gt;</code></td>
<td>Copy file to new location</td>
</tr>
<tr>
<td><code>cp -r &lt;source&gt; &lt;dest&gt;</code></td>
<td><code>cp -r &lt;source&gt; &lt;dest&gt;</code></td>
<td>Copy directory to a new location, recursively</td>
</tr>
<tr>
<td><code>rm &lt;path&gt;</code></td>
<td><code>rm &lt;path&gt;</code></td>
<td>Remove the given file</td>
</tr>
<tr>
<td></td>
<td><code>rm -t &lt;path&gt;</code></td>
<td>Move the given file to the system trash</td>
</tr>
<tr>
<td><code>rm -rf &lt;path&gt;</code></td>
<td><code>rm -r &lt;path&gt;</code></td>
<td>Recursively removes the given path</td>
</tr>
<tr>
<td><code>chmod</code></td>
<td><code>&lt;not yet possible&gt;</code></td>
<td>Changes the file attributes</td>
</tr>
<tr>
<td><code>date -d &lt;date&gt;</code></td>
<td><code>&quot;&lt;date&gt;&quot; | into datetime -f &lt;format&gt;</code></td>
<td>Parse a date (<a href="https://docs.rs/chrono/0.4.15/chrono/format/strftime/index.html" target="_blank" rel="noopener noreferrer">format documentation</a>)</td>
</tr>
<tr>
<td><code>sed</code></td>
<td><code>str find-replace</code></td>
<td>Find and replace a pattern in a string</td>
</tr>
<tr>
<td><code>grep &lt;pattern&gt;</code></td>
<td><code>where $it =~ &lt;substring&gt;</code> or <code>find &lt;substring&gt;</code></td>
<td>Filter strings that contain the substring</td>
</tr>
<tr>
<td><code>man &lt;command&gt;</code></td>
<td><code>help &lt;command&gt;</code></td>
<td>Get the help for a given command</td>
</tr>
<tr>
<td></td>
<td><code>help commands</code></td>
<td>List all available commands</td>
</tr>
<tr>
<td></td>
<td><code>help --find &lt;string&gt;</code></td>
<td>Search for match in all available commands</td>
</tr>
<tr>
<td><code>command1 &amp;&amp; command2</code></td>
<td><code>command1; command2</code></td>
<td>Run a command, and if it's successful run a second</td>
</tr>
<tr>
<td><code>stat $(which git)</code></td>
<td><code>stat (which git).path</code></td>
<td>Use command output as argument for other command</td>
</tr>
<tr>
<td><code>echo $PATH</code></td>
<td><code>echo $env.PATH</code></td>
<td>See the current path</td>
</tr>
<tr>
<td><code>&lt;update ~/.bashrc&gt;</code></td>
<td><code>vim $nu.config-path</code></td>
<td>Update PATH permanently</td>
</tr>
<tr>
<td><code>export PATH = $PATH:/usr/other/bin</code></td>
<td><code>let-env PATH = ($env.PATH | append /usr/other/bin)</code></td>
<td>Update PATH temporarily</td>
</tr>
<tr>
<td><code>export</code></td>
<td><code>echo $env</code></td>
<td>List the current environment variables</td>
</tr>
<tr>
<td><code>&lt;update ~/.bashrc&gt;</code></td>
<td><code>vim $nu.config-path</code></td>
<td>Update environment variables permanently</td>
</tr>
<tr>
<td><code>FOO=BAR ./bin</code></td>
<td><code>FOO=BAR ./bin</code></td>
<td>Update environment temporarily</td>
</tr>
<tr>
<td><code>export FOO=BAR</code></td>
<td><code>let-env FOO = BAR</code></td>
<td>Set environment variable for current session</td>
</tr>
<tr>
<td><code>echo $FOO</code></td>
<td><code>echo $env.FOO</code></td>
<td>Use environment variables</td>
</tr>
<tr>
<td><code>unset FOO</code></td>
<td><code>hide FOO</code></td>
<td>Unset environment variable for current session</td>
</tr>
<tr>
<td><code>alias s=&quot;git status -sb&quot;</code></td>
<td><code>alias s = git status -sb</code></td>
<td>Define an alias temporarily</td>
</tr>
<tr>
<td><code>type FOO</code></td>
<td><code>which FOO</code></td>
<td>Display information about a command (built-in, alias, or executable)</td>
</tr>
<tr>
<td><code>&lt;update ~/.bashrc&gt;</code></td>
<td><code>vim $nu.config-path</code></td>
<td>Add and edit alias permanently (for new shells)</td>
</tr>
<tr>
<td><code>bash -c &lt;commands&gt;</code></td>
<td><code>nu -c &lt;commands&gt;</code></td>
<td>Run a pipeline of commands (requires 0.9.1 or later)</td>
</tr>
<tr>
<td><code>bash &lt;script file&gt;</code></td>
<td><code>nu &lt;script file&gt;</code></td>
<td>Run a script file (requires 0.9.1 or later)</td>
</tr>
<tr>
<td><code>\</code></td>
<td><code>(</code> followed by <code>)</code></td>
<td>Line continuation is not yet supported.</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td><code>$env.PWD</code></td>
<td>Display the current directory</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>Command Reference</title>
      <link>www.nushell.sh/book/command_reference.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/command_reference.html</guid>
      <source url="www.nushell.sh/rss.xml">Command Reference</source>
      <content:encoded><![CDATA[<h1 id="command-reference" tabindex="-1"> Command Reference</h1>
<p>To see all commands in Nushell, run <a href="/book/commands/help.html"><code>help commands</code></a>.</p>
<table>
  <tr>
    <th>Command</th>
    <th>Description</th>
  </tr>
  <tr v-for="command in commands">
   <td><a :href="command.path"><code>{{ command.title }}</code></a></td>
   <td style="white-space: pre-wrap;">{{ command.frontmatter.usage }}</td>
  </tr>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>Configuration</title>
      <link>www.nushell.sh/book/configuration.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/configuration.html</guid>
      <source url="www.nushell.sh/rss.xml">Configuration</source>
      <content:encoded><![CDATA[<h1 id="configuration" tabindex="-1"> Configuration</h1>
<h2 id="nushell-configuration-with-env-nu-and-config-nu" tabindex="-1"> Nushell Configuration with <code>env.nu</code> and <code>config.nu</code></h2>
<p>Nushell uses a configuration system that loads+runs two Nushell script files at launch time:
First, <code>env.nu</code>, then <code>config.nu</code>.
Paths to these files can be found by calling <code>echo $nu.env-path</code> and <code>echo $nu.config-path</code>.
<code>env.nu</code> is meant to define the environment variables which are then available within <code>config.nu</code>.
<code>config.nu</code> can be used to add definitions, aliases, and more to the global namespace.</p>
<p><em>(You can think of the Nushell config loading sequence as executing two <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" target="_blank" rel="noopener noreferrer">REPL</a> lines on startup: <code>source /path/to/env.nu</code> and <code>source /path/to/config.nu</code>. Therefore, using <code>env.nu</code> for environment and <code>config.nu</code> for other config is just a convention.)</em></p>
<p>When you launch Nushell without these files set up, Nushell will prompt you to download the <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/default_env.nu" target="_blank" rel="noopener noreferrer"><code>default env.nu</code></a> and <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/default_config.nu" target="_blank" rel="noopener noreferrer"><code>default config.nu</code></a>.
You can browse the default files for default values of environment variables and a list of all configurable settings.</p>
<h3 id="configuring-env-config" tabindex="-1"> Configuring <code>$env.config</code></h3>
<p>Nushell's main settings are kept in the <code>config</code> environment variable as a record. This record can be created using:</p>
<div><pre><code>let-env config = {
  ...
}
</code></pre></div><p>You can also shadow <code>$env.config</code> and update it:</p>
<div><pre><code>let-env config = ($env.config | upsert &lt;field name> &lt;field value>)
</code></pre></div><p>By convention, this variable is defined in the <code>config.nu</code> file.</p>
<h3 id="environment" tabindex="-1"> Environment</h3>
<p>You can set environment variables for the duration of a Nushell session using <a href="/book/commands/let-env.html"><code>let-env</code></a> calls inside the <code>env.nu</code> file. For example:</p>
<div><pre><code>let-env FOO = 'BAR'
</code></pre></div><p><em>(Although $env.config is an environment variable, it is still defined by convention inside config.nu.)</em></p>
<p>These are some important variables to look at for Nushell-specific settings:</p>
<ul>
<li><code>LS_COLORS</code>: Sets up colors per file type in ls</li>
<li><code>PROMPT_COMMAND</code>: Code to execute for setting up the prompt (block or string)</li>
<li><code>PROMPT_COMMAND_RIGHT</code>: Code to execute for setting up the right prompt (block)</li>
<li><code>PROMPT_INDICATOR = &quot;〉&quot;</code>: The indicator printed after the prompt (by default &quot;&gt;&quot;-like Unicode symbol)</li>
<li><code>PROMPT_INDICATOR_VI_INSERT = &quot;: &quot;</code></li>
<li><code>PROMPT_INDICATOR_VI_NORMAL = &quot;〉 &quot;</code></li>
<li><code>PROMPT_MULTILINE_INDICATOR = &quot;::: &quot;</code></li>
</ul>
<h3 id="color-config-section" tabindex="-1"> Color Config section</h3>
<p>You can learn more about setting up colors and theming in the <a href="/book/coloring_and_theming.html">associated chapter</a>.</p>
<h2 id="configuring-nu-as-a-login-shell" tabindex="-1"> Configuring Nu as a login shell</h2>
<p>To use Nu as a login shell, you'll need to configure the <code>$env</code> variable. With this, you'll have enough support to run external commands as a login shell.</p>
<p>You can build the full set of environment variables by running Nu inside of another shell, like Bash. Once you're in Nu, you can run a command like this:</p>
<div><pre><code>> env | each { |it| echo $"let-env ($it.name) = '($it.raw)'" } | str collect (char nl)
</code></pre></div><p>This will print out <a href="/book/commands/let-env.html"><code>let-env</code></a> lines, one for each environment variable along with its setting.</p>
<p>Next, on some distros you'll also need to ensure Nu is in the /etc/shells list:</p>
<div><pre><code>> cat /etc/shells
# /etc/shells: valid login shells
/bin/sh
/bin/dash
/bin/bash
/bin/rbash
/usr/bin/screen
/usr/bin/fish
/home/jonathan/.cargo/bin/nu
</code></pre></div><p>With this, you should be able to <code>chsh</code> and set Nu to be your login shell. After a logout, on your next login you should be greeted with a shiny Nu prompt.</p>
<h3 id="macos-keeping-usr-bin-open-as-open" tabindex="-1"> macOS: Keeping <code>/usr/bin/open</code> as <code>open</code></h3>
<p>Some tools (e.g. Emacs) rely on an <code>open</code> command to open files on Mac.
As Nushell has its own <a href="/book/commands/open.html"><code>open</code></a> command which has different semantics and shadows <code>/usr/bin/open</code>, these tools will error out when trying to use it.
One way to work around this is to define a custom command for Nushell's <code>open</code> and create an alias for the system's <code>open</code> in your <code>config.nu</code> file like this:</p>
<div><pre><code>def nuopen [arg, --raw (-r)] { if $raw { open -r $arg } else { open $arg } }
alias open = ^open
</code></pre></div><h2 id="path-configuration" tabindex="-1"> PATH configuration</h2>
<p>To append a path to <a href="https://en.wikipedia.org/wiki/PATH_(variable)" target="_blank" rel="noopener noreferrer">the PATH variable</a>, you can use <a href="/book/commands/let-env.html"><code>let-env</code></a> and <a href="/book/commands/append.html"><code>append</code></a> in <code>env.nu</code>:</p>
<div><pre><code>let-env PATH = ($env.PATH | append '/some/path')
</code></pre></div><p>This will append <code>/some/path</code> to the end of PATH; you can also use <a href="/book/commands/prepend.html"><code>prepend</code></a> to add entries to the start of PATH.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Creating your own errors</title>
      <link>www.nushell.sh/book/creating_errors.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/creating_errors.html</guid>
      <source url="www.nushell.sh/rss.xml">Creating your own errors</source>
      <content:encoded><![CDATA[<h1 id="creating-your-own-errors" tabindex="-1"> Creating your own errors</h1>
<p>Using the <a href="/book/metadata.html">metadata</a> information, you can create your own custom error messages. Error messages are built of multiple parts:</p>
<ul>
<li>The title of the error</li>
<li>The label of error message, which includes both the text of the label and the span to underline</li>
</ul>
<p>You can use the <code>error make</code> command to create your own error messages. For example, let's say you had your own command called <code>my-command</code> and you wanted to give an error back to the caller about something wrong with a parameter that was passed in.</p>
<p>First, you can take the span of where the argument is coming from:</p>
<div><pre><code>let span = (metadata $x).span;
</code></pre></div><p>Next, you can create an error using the <code>error make</code> command. This command takes in a record that describes the error to create:</p>
<div><pre><code>error make {msg: "this is fishy", label: {text: "fish right here", start: $span.start, end: $span.end } }
</code></pre></div><p>Together with your custom command, it might look like this:</p>
<div><pre><code>def my-command [x] {
    let span = (metadata $x).span;
    error make {
        msg: "this is fishy",
        label: {
            text: "fish right here",
            start: $span.start,
            end: $span.end
        }
    }
}
</code></pre></div><p>When called with a value, we'll now see an error message returned:</p>
<div><pre><code>> my-command 100

Error:
  × this is fishy
   ╭─[entry #5:1:1]
 1 │ my-command 100
   ·            ─┬─
   ·             ╰── fish right here
   ╰────
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Custom commands</title>
      <link>www.nushell.sh/book/custom_commands.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/custom_commands.html</guid>
      <source url="www.nushell.sh/rss.xml">Custom commands</source>
      <content:encoded><![CDATA[<h1 id="custom-commands" tabindex="-1"> Custom commands</h1>
<p>Nu's ability to compose long pipelines allows you a lot of control over your data and system, but it comes at the price of a lot of typing. Ideally, you'd be able to save your well-crafted pipelines to use again and again.</p>
<p>This is where custom commands come in.</p>
<p>An example definition of a custom command:</p>
<div><pre><code>def greet [name] {
  echo &quot;hello&quot; $name
}
</code></pre></div><p>In this definition, we define the <code>greet</code> command, which takes a single parameter <code>name</code>. Following this parameter is the block that represents what will happen when the custom command runs. When called, the custom command will set the value passed for <code>name</code> as the <code>$name</code> variable, which will be available to the block.</p>
<p>To run the above, we can call it like we would call built-in commands:</p>
<div><pre><code>> greet "world"
</code></pre></div><p>As we do, we also get output just as we would with built-in commands:</p>
<div><pre><code>───┬───────
 0 │ hello
 1 │ world
───┴───────
</code></pre></div><div><p>TIP</p>
<p><code>echo</code> returns its arguments separately to the pipeline. If you want to use it to generate a single string append <code> | str collect</code> to the pipeline:</p>
<div><pre><code>def greet [name] {
  echo &quot;hello &quot; $name | str collect
}

greet nushell
</code></pre></div><p>returns <code>hello nushell</code></p>
</div>
<h2 id="command-names" tabindex="-1"> Command names</h2>
<p>In Nushell, a command name is a string of characters or a quoted string. Here are some examples of valid command names: <code>greet</code>, <code>get-size</code>, <code>mycommand123</code>, <code>&quot;mycommand&quot;</code>, <code>😊</code>, and <code>123</code>.</p>
<p><em>Note: It's common practice in Nushell to separate the words of the command with <code>-</code> for better readability.</em> For example <code>get-size</code> instead of <code>getsize</code> or <code>get_size</code>.</p>
<h2 id="sub-commands" tabindex="-1"> Sub-commands</h2>
<p>You can also define subcommands to commands using a space. For example, if we wanted to add a new subcommand to <code>str</code>, we can create it by naming our subcommand to start with &quot;str &quot;. For example:</p>
<div><pre><code>def &quot;str mycommand&quot; [] {
  echo hello
}
</code></pre></div><p>Now we can call our custom command as if it were a built-in subcommand of <code>str</code>:</p>
<div><pre><code>> str mycommand
</code></pre></div><h2 id="parameter-types" tabindex="-1"> Parameter types</h2>
<p>When defining custom commands, you can name and optionally set the type for each parameter. For example, you can write the above as:</p>
<div><pre><code>def greet [name: string] {
  echo &quot;hello &quot; $name | str collect
}
</code></pre></div><p>The types of parameters are optional. Nushell supports leaving them off and treating the parameter as <code>any</code> if so. If you annotated a type on a parameter, Nushell will check this type when you call the function.</p>
<p>For example, let's say you wanted to take in an <code>int</code> instead:</p>
<div><pre><code>def greet [name: int] {
  echo &quot;hello &quot; $name | str collect
}

greet world
</code></pre></div><p>If we try to run the above, Nushell will tell us that the types don't match:</p>
<div><pre><code>error: Type Error
  ┌─ shell:6:7
  │
5 │ greet world
  │       ^^^^^ Expected int, found world
</code></pre></div><p>This can help you guide users of your definitions to call them with only the supported types.</p>
<p>The currently accepted types are (as of version 0.59.0):</p>
<ul>
<li><code>any</code></li>
<li><code>block</code></li>
<li><code>cell-path</code></li>
<li><code>duration</code></li>
<li><code>path</code></li>
<li><code>expr</code></li>
<li><code>filesize</code></li>
<li><code>glob</code></li>
<li><code>int</code></li>
<li><code>math</code></li>
<li><code>number</code></li>
<li><code>operator</code></li>
<li><code>range</code></li>
<li><code>cond</code></li>
<li><code>bool</code></li>
<li><code>signature</code></li>
<li><code>string</code></li>
<li><code>variable</code></li>
</ul>
<h2 id="parameters-with-a-default-value" tabindex="-1"> Parameters with a default value</h2>
<p>To make a parameter optional and directly provide a default value for it you can provide a default value in the command definition.</p>
<div><pre><code>def greet [name = &quot;nushell&quot;] {
  echo &quot;hello &quot; $name | str collect
}
</code></pre></div><p>You can call this command either without the parameter or with a value to override the default value:</p>
<div><pre><code>> greet
hello nushell
> greet world
hello world
</code></pre></div><p>You can also combine a default value with a :</p>
<div><pre><code>def congratulate [age: int = 18] {
  echo "Happy birthday! Wow you are " $age " years old now!" | str collect
}
</code></pre></div><p>If you want to check if an optional parameter is present or not and not just rely on a default value use  instead.</p>
<h2 id="optional-positional-parameters" tabindex="-1"> Optional positional parameters</h2>
<p>By default, positional parameters are required. If a positional parameter is not passed, we will encounter an error:</p>
<div><pre><code>  × Missing required positional argument.
   ╭─[entry #23:1:1]
 1 │ greet
   ·      ▲
   ·      ╰── missing name
   ╰────
  help: Usage: greet &lt;name>
</code></pre></div><p>We can instead mark a positional parameter as optional by putting a question mark (<code>?</code>) after its name. For example:</p>
<div><pre><code>def greet [name?: string] {
  echo &quot;hello&quot; $name | str collect
}

greet
</code></pre></div><p>Making a positional parameter optional does not change its name when accessed in the body. As the example above shows, it is still accessed with <code>$name</code>, despite the <code>?</code> suffix in the parameter list.</p>
<p>When an optional parameter is not passed, its value in the command body is equal to <code>null</code> and <code>$nothing</code>. We can use this to act on the case where a parameter was not passed:</p>
<div><pre><code>def greet [name?: string] {
  if ($name == null) {
    echo &quot;hello, I don't know your name!&quot;
  } else {
    echo &quot;hello &quot; $name | str collect
  }
}

greet
</code></pre></div><p>If you just want to set a default value when the parameter is missing it is simpler to use a  instead.</p>
<p>If required and optional positional parameters are used together, then the required parameters must appear in the definition first.</p>
<h2 id="flags" tabindex="-1"> Flags</h2>
<p>In addition to passing positional parameters, you can also pass named parameters by defining flags for your custom commands.</p>
<p>For example:</p>
<div><pre><code>def greet [
  name: string
  --age: int
] {
  echo $name $age
}
</code></pre></div><p>In the <code>greet</code> definition above, we define the <code>name</code> positional parameter as well as an <code>age</code> flag. This allows the caller of <code>greet</code> to optionally pass the <code>age</code> parameter as well.</p>
<p>You can call the above using:</p>
<div><pre><code>> greet world --age 10
</code></pre></div><p>Or:</p>
<div><pre><code>> greet --age 10 world
</code></pre></div><p>Or even leave the flag off altogether:</p>
<div><pre><code>> greet world
</code></pre></div><p>Flags can also be defined to have a shorthand version. This allows you to pass a simpler flag as well as a longhand, easier-to-read flag.</p>
<p>Let's extend the previous example to use a shorthand flag for the <code>age</code> value:</p>
<div><pre><code>def greet [
  name: string
  --age (-a): int
] {
  echo $name $age
}
</code></pre></div><p><em>Note:</em> Flags are named by their longhand name, so the above example would need to use <code>$age</code> and not <code>$a</code>.</p>
<p>Now, we can call this updated definition using the shorthand flag:</p>
<div><pre><code>> greet -a 10 hello
</code></pre></div><p>Flags can also be used as basic switches. This means that their presence or absence is taken as an argument for the definition. Extending the previous example:</p>
<div><pre><code>def greet [
  name: string
  --age (-a): int
  --twice
] {
  if $twice {
    echo $name $name $age $age
  } else {
    echo $name $age
  }
}
</code></pre></div><p>And the definition can be either called as:</p>
<div><pre><code>> greet -a 10 --twice hello
</code></pre></div><p>Or just without the switch flag:</p>
<div><pre><code>> greet -a 10 hello
</code></pre></div><h2 id="rest-parameters" tabindex="-1"> Rest parameters</h2>
<p>There may be cases when you want to define a command which takes any number of positional arguments. We can do this with a rest parameter, using the following <code>...</code> syntax:</p>
<div><pre><code>def greet [...name: string] {
  echo &quot;hello all:&quot;
  for $n in $name {
    echo $n
  }
}

greet earth mars jupiter venus
</code></pre></div><p>We could call the above definition of the <code>greet</code> command with any number of arguments, including none at all. All of the arguments are collected into <code>$name</code> as a list.</p>
<p>Rest parameters can be used together with positional parameters:</p>
<div><pre><code>def greet [vip: string, ...name: string] {
  echo "hello to our VIP " $vip | str collect
  echo "and hello to everybody else:"
  for $n in $name {
    echo $n
  }
}

#     $vip          $name
#     ---- ------------------------
greet moon earth mars jupiter venus
</code></pre></div><h2 id="documenting-your-command" tabindex="-1"> Documenting your command</h2>
<p>In order to best help users of your custom commands, you can also document them with additional descriptions for the commands and the parameters.</p>
<p>Taking our previous example:</p>
<div><pre><code>def greet [
  name: string
  --age (-a): int
] {
  echo $name $age
}
</code></pre></div><p>Once defined, we can run <code>help greet</code> to get the help information for the command:</p>
<div><pre><code>Usage:
  > greet &lt;name> {flags}

Parameters:
  &lt;name>

Flags:
  -h, --help: Display this help message
  -a, --age &lt;integer>
</code></pre></div><p>You can see the parameter and flag that we defined, as well as the <code>-h</code> help flag that all commands get.</p>
<p>To improve this help, we can add descriptions to our definition that will show up in the help:</p>
<div><pre><code># A greeting command that can greet the caller
def greet [
  name: string      # The name of the person to greet
  --age (-a): int   # The age of the person
] {
  echo $name $age
}
</code></pre></div><p>The comments that we put on the definition and its parameters then appear as descriptions inside the <code>help</code> of the command.</p>
<p>Now, if we run <code>help greet</code>, we're given a more helpful help text:</p>
<div><pre><code>A greeting command that can greet the caller

Usage:
  > greet &lt;name> {flags}

Parameters:
  &lt;name> The name of the person to greet

Flags:
  -h, --help: Display this help message
  -a, --age &lt;integer>: The age of the person
</code></pre></div><h2 id="pipeline-output" tabindex="-1"> Pipeline Output</h2>
<p>Custom commands stream their output just like built-in commands. For example, let's say we wanted to refactor this pipeline:</p>
<div><pre><code>&gt; ls | get name
</code></pre></div><p>Let's move <a href="/book/commands/ls.html"><code>ls</code></a> into a command that we've written:</p>
<div><pre><code>def my-ls [] { ls }
</code></pre></div><p>We can use the output from this command just as we would <a href="/book/commands/ls.html"><code>ls</code></a>.</p>
<div><pre><code>> my-ls | get name
───┬───────────────────────
 0 │ myscript.nu
 1 │ myscript2.nu
 2 │ welcome_to_nushell.md
───┴───────────────────────
</code></pre></div><p>This lets us easily build custom commands and process their output. Note, that we don't use return statements like other languages. Instead, we build pipelines that output streams of data that can be connected to other pipelines.</p>
<h2 id="pipeline-input" tabindex="-1"> Pipeline Input</h2>
<p>Custom commands can also take input from the pipeline, just like other commands. This input is automatically passed to the block that the custom command uses.</p>
<p>Let's make our own command that doubles every value it receives as input:</p>
<div><pre><code>def double [] {
  each { |it| 2 * $it }
}
</code></pre></div><p>Now, if we call the above command later in a pipeline, we can see what it does with the input:</p>
<div><pre><code>> [1 2 3] | double
───┬─────
 0 │ 2
 1 │ 4
 2 │ 6
───┴─────
</code></pre></div><p>We can also store the input for later use using the <code>$in</code> variable:</p>
<div><pre><code>def nullify [...cols] {
  let start = $in
  $cols | reduce --fold $start { |col, df|
    $df | upsert $col null
  }
}
</code></pre></div><h2 id="persisting" tabindex="-1"> Persisting</h2>
<p>For information about how to persist custom commands so that they're visible when you start up Nushell, see the <a href="/book/configuration.html">configuration chapter</a> and add your startup script.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Custom completions</title>
      <link>www.nushell.sh/book/custom_completions.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/custom_completions.html</guid>
      <source url="www.nushell.sh/rss.xml">Custom completions</source>
      <content:encoded><![CDATA[<h1 id="custom-completions" tabindex="-1"> Custom completions</h1>
<p>Custom completions allow you to mix together two features of Nushell: custom commands and completions. With them, you're able to create commands that handle the completions for positional parameters and flag parameters. These custom completions work both custom commands and <a href="/book/externs.html">known external, or <code>extern</code>, commands</a>.</p>
<p>There are two parts to a custom command: the command that handles a completion and attaching this command to the type of another command using <code>@</code>.</p>
<h2 id="example-custom-completion" tabindex="-1"> Example custom completion</h2>
<p>Let's look at an example:</p>
<div><pre><code>> def animals [] { ["cat", "dog", "eel" ] }
> def my-command [animal: string@animals] { print $animal }
>| my-command
cat                 dog                 eel
</code></pre></div><p>In the first line, we create a custom command that will return a list of three different animals. These are the values we'd like to use in the completion. Once we've created this command, we can now use it to provide completions for other custom commands and <code>extern</code>s.</p>
<p>In the second line, we use <code>string@animals</code>. This tells Nushell two things: the shape of the argument for type-checking and the custom completion to use if the user wants to complete values at that position.</p>
<p>On the third line, we type the name of our custom command <code>my-command</code> followed by hitting space and then the <code>&lt;tab&gt;</code> key. This brings up our completions. Custom completions work the same as other completions in the system, allowing you to type <code>e</code> followed by the <code>&lt;tab&gt;</code> key and get &quot;eel&quot; automatically completed.</p>
<h2 id="modules-and-custom-completions" tabindex="-1"> Modules and custom completions</h2>
<p>You may prefer to keep your custom completions away from the public API for your code. For this, you can combine modules and custom completions.</p>
<p>Let's take the example above and put it into a module:</p>
<div><pre><code>module commands {
    def animals [] {
        ["cat", "dog", "eel" ]
    }

    export def my-command [animal: string@animals] {
        print $animal
    }
}
</code></pre></div><p>In our module, we've chosen to export only the custom command <code>my-command</code> but not the custom completion <code>animals</code>. This allows users of this module to call the command, and even use the custom completion logic, without having access the the custom completion. This keeps the API cleaner, while still offering all the same benefits.</p>
<p>This is possible because custom completion tags using <code>@</code> are locked-in as the command is first parsed.</p>
<h2 id="custom-completion-and-extern" tabindex="-1"> Custom completion and <code>extern</code></h2>
<p>A powerful combination is adding custom completions to <a href="/book/externs.html">known <code>extern</code> commands</a>. These work the same way as adding a custom completion to a custom command: by creating the custom completion and then attaching it with a <code>@</code> to the type of one of the positional or flag arguments of the <code>extern</code>.</p>
<p>If you look closely at the examples in the default config, you'll see this:</p>
<div><pre><code>export extern "git push" [
    remote?: string@"nu-complete git remotes", # the name of the remote
    refspec?: string@"nu-complete git branches"# the branch / refspec
    ...
]
</code></pre></div><p>Custom completions will serve the same role in this example as in the previous examples. The examples above call into two different custom completions, based on the position the user is currently in.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Dataframes</title>
      <link>www.nushell.sh/book/dataframes.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/dataframes.html</guid>
      <source url="www.nushell.sh/rss.xml">Dataframes</source>
      <content:encoded><![CDATA[<h1 id="dataframes" tabindex="-1"> Dataframes</h1>
<div><p>TIP</p>
<p>The dataframe commands are available from version 0.33.1 onwards</p>
</div>
<p>As we have seen so far, Nushell makes working with data its main priority.
<code>Lists</code> and <code>Tables</code> are there to help you cycle through values in order to
perform multiple operations or find data in a breeze. However, there are
certain operations where a row-based data layout is not the most efficient way
to process data, especially when working with extremely large files. Operations
like group-by or join using large datasets can be costly memory-wise, and may
lead to large computation times if they are not done using the appropriate
data format.</p>
<p>For this reason, the <code>DataFrame</code> structure was introduced to Nushell. A
<code>DataFrame</code> stores its data in a columnar format using as its base the <a href="https://arrow.apache.org/" target="_blank" rel="noopener noreferrer">Apache
Arrow</a> specification, and uses
<a href="https://github.com/pola-rs/polars" target="_blank" rel="noopener noreferrer">Polars</a> as the motor for performing
extremely <a href="https://h2oai.github.io/db-benchmark/" target="_blank" rel="noopener noreferrer">fast columnar operations</a>.</p>
<p>You may be wondering now how fast this combo could be, and how could it make
working with data easier and more reliable. For this reason, let's start this
page by presenting benchmarks on common operations that are done when
processing data.</p>
<h2 id="benchmark-comparisons" tabindex="-1"> Benchmark comparisons</h2>
<p>For this little benchmark exercise we will be comparing native Nushell
commands, dataframe Nushell commands and <a href="https://pandas.pydata.org/" target="_blank" rel="noopener noreferrer">Python
Pandas</a> commands. For the time being don't pay too
much attention to the <code>dataframe</code> commands. They will be explained in later
sections of this page.</p>
<blockquote>
<p>System Details: The benchmarks presented in this section were run using a
machine with a processor Intel(R) Core(TM) i7-10710U (CPU @1.10GHz 1.61 GHz)
and 16 gb of RAM.</p>
<p>All examples were run on Nushell version 0.33.1.</p>
</blockquote>
<h3 id="file-information" tabindex="-1"> File information</h3>
<p>The file that we will be using for the benchmarks is the
<a href="https://www.stats.govt.nz/assets/Uploads/New-Zealand-business-demography-statistics/New-Zealand-business-demography-statistics-At-February-2020/Download-data/Geographic-units-by-industry-and-statistical-area-2000-2020-descending-order-CSV.zip" target="_blank" rel="noopener noreferrer">New Zealand business demography</a> dataset.
Feel free to download it if you want to follow these tests.</p>
<p>The dataset has 5 columns and 5,429,252 rows. We can check that by using the
<code>dfr ls</code> command:</p>
<div><pre><code><span>></span> <span>let</span> <span>df</span> <span>=</span> <span>(</span>dfr <span>open</span> .<span>\</span>Data7602DescendingYearOrder.csv<span>)</span>
<span>></span> dfr <span>ls</span>

───┬──────┬─────────┬─────────
 <span># │ name │  rows   │ columns</span>
───┼──────┼─────────┼─────────
 <span>0</span> │ <span>$df</span>  │ <span>5429252</span> │ <span>5</span>
───┴──────┴─────────┴─────────
</code></pre></div><p>We can have a look at the first lines of the file using <code>dfr first</code>:</p>
<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr first

───┬──────────┬─────────┬──────┬───────────┬──────────
 <span># │ anzsic06 │  Area   │ year │ geo_count │ ec_count</span>
───┼──────────┼─────────┼──────┼───────────┼──────────
 <span>0</span> │ A        │ A100100 │ <span>2000</span> │        <span>96</span> │      <span>130</span>
 <span>1</span> │ A        │ A100200 │ <span>2000</span> │       <span>198</span> │      <span>110</span>
 <span>2</span> │ A        │ A100300 │ <span>2000</span> │        <span>42</span> │       <span>25</span>
 <span>3</span> │ A        │ A100400 │ <span>2000</span> │        <span>66</span> │       <span>40</span>
 <span>4</span> │ A        │ A100500 │ <span>2000</span> │        <span>63</span> │       <span>40</span>
───┴──────────┴─────────┴──────┴───────────┴──────────
</code></pre></div><p>...and finally, we can get an idea of the inferred datatypes:</p>
<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr dtypes

───┬───────────┬───────
 <span># │  column   │ dtype</span>
───┼───────────┼───────
 <span>0</span> │ anzsic06  │ str
 <span>1</span> │ Area      │ str
 <span>2</span> │ year      │ i64
 <span>3</span> │ geo_count │ i64
 <span>4</span> │ ec_count  │ i64
───┴───────────┴───────
</code></pre></div><h3 id="loading-the-file" tabindex="-1"> Loading the file</h3>
<p>Let's start by comparing loading times between the various methods. First, we
will load the data using Nushell's <a href="/book/commands/open.html"><code>open</code></a> command:</p>
<div><pre><code><span>></span> benchmark <span>{</span>open .<span>\</span>Data7602DescendingYearOrder.csv<span>}</span>

───┬─────────────────────────
 <span># │        real time</span>
───┼─────────────────────────
 <span>0</span> │ 30sec 479ms 614us 400ns
───┴─────────────────────────
</code></pre></div><p>Loading the file using native Nushell functionality took 30 seconds. Not bad for
loading five million records! But we can do a bit better than that.</p>
<p>Let's now use Pandas. We are going to use the next script to load the file:</p>
<div><pre><code><span>import</span> pandas <span>as</span> pd

df <span>=</span> pd<span>.</span>read_csv<span>(</span><span>"Data7602DescendingYearOrder.csv"</span><span>)</span>
</code></pre></div><p>And the benchmark for it is:</p>
<div><pre><code><span>></span> benchmark <span>{</span>python load.py<span>}</span>

───┬───────────────────────
 <span># │       real time</span>
───┼───────────────────────
 <span>0</span> │ 2sec 91ms 872us 900ns
───┴───────────────────────
</code></pre></div><p>That is a great improvement, from 30 seconds to 2 seconds. Nicely done, Pandas!</p>
<p>Probably we can load the data a bit faster. This time we will use Nushell's
<code>dfr open</code> command:</p>
<div><pre><code><span>></span> benchmark <span>{</span>dfr <span>open</span> .<span>\</span>Data7602DescendingYearOrder.csv<span>}</span>

───┬───────────────────
 <span># │     real time</span>
───┼───────────────────
 <span>0</span> │ 601ms 700us 700ns
───┴───────────────────
</code></pre></div><p>This time it took us 0.6 seconds. Not bad at all.</p>
<h3 id="group-by-comparison" tabindex="-1"> Group-by comparison</h3>
<p>Let's do a slightly more complex operation this time. We are going to group the
data by year, and add groups using the column <code>geo_count</code>.</p>
<p>Again, we are going to start with a Nushell native command.</p>
<div><p>TIP</p>
<p>If you want to run this example, be aware that the next command will
use a large amount of memory. This may affect the performance of your system
while this is being executed.</p>
</div>
<div><pre><code><span>></span> benchmark <span>{</span>
	<span>open</span> .<span>\</span>Data7602DescendingYearOrder.csv
	<span>|</span> group-by year
	<span>|</span> transpose header rows
	<span>|</span> upsert rows <span>{</span> get rows <span>|</span> math <span>sum</span> <span>}</span>
	<span>|</span> flatten
<span>}</span>

───┬────────────────────────
 <span># │       real time</span>
───┼────────────────────────
 <span>0</span> │ 6min 30sec 622ms 312us
───┴────────────────────────
</code></pre></div><p>So, six minutes to perform this aggregated operation.</p>
<p>Let's try the same operation in pandas:</p>
<div><pre><code><span>import</span> pandas <span>as</span> pd

df <span>=</span> pd<span>.</span>read_csv<span>(</span><span>"Data7602DescendingYearOrder.csv"</span><span>)</span>
res <span>=</span> df<span>.</span>groupby<span>(</span><span>"year"</span><span>)</span><span>[</span><span>"geo_count"</span><span>]</span><span>.</span><span>sum</span><span>(</span><span>)</span>
<span>print</span><span>(</span>res<span>)</span>
</code></pre></div><p>And the result from the benchmark is:</p>
<div><pre><code><span>></span> benchmark <span>{</span>python .<span>\</span>load.py<span>}</span>

───┬────────────────────────
 <span># │       real time</span>
───┼────────────────────────
 <span>0</span> │ 1sec 966ms 954us 800ns
───┴────────────────────────
</code></pre></div><p>Not bad at all. Again, pandas managed to get it done in a fraction of the time.</p>
<p>To finish the comparison, let's try Nushell dataframes. We are going to put
all the operations in one <code>nu</code> file, to make sure we are doing similar
operations:</p>
<div><pre><code><span>let</span> <span>df</span> <span>=</span> dfr <span>open</span> Data7602DescendingYearOrder.csv
<span>let</span> res <span>=</span> <span>(</span><span>$df</span> <span>|</span> dfr group-by year <span>|</span> dfr agg <span>(</span><span>"geo_count"</span> <span>|</span> dfr <span>sum</span><span>))</span>
<span>$res</span>
</code></pre></div><p>and the benchmark with dataframes is:</p>
<div><pre><code><span>></span> benchmark <span>{</span>source load.nu<span>}</span>

───┬───────────────────
 <span># │     real time</span>
───┼───────────────────
 <span>0</span> │ 557ms 658us 500ns
───┴───────────────────
</code></pre></div><p>Luckily Nushell dataframes managed to halve the time again. Isn't that great?</p>
<p>As you can see, Nushell's <code>Dataframe</code> commands are as fast as the most common
tools that exist today to do data analysis. The commands that are included in
this release have the potential to become your go-to tool for doing data
analysis. By composing complex Nushell pipelines, you can extract information
from data in a reliable way.</p>
<h2 id="working-with-dataframes" tabindex="-1"> Working with Dataframes</h2>
<p>After seeing a glimpse of the things that can be done with <code>Dataframe</code>
commands, now it is time to start testing them. To begin let's create a sample
CSV file that will become our sample dataframe that we will be using along with
the examples. In your favorite file editor paste the next lines to create out
sample csv file.</p>
<div><pre><code><span>int_1</span><span>,</span><span>int_2</span><span>,</span><span>float_1</span><span>,</span><span>float_2</span><span>,</span><span>first</span><span>,</span><span>second</span><span>,</span><span>third</span><span>,</span><span>word</span>
<span>1</span><span>,</span><span>11</span><span>,</span><span>0.1</span><span>,</span><span>1.0</span><span>,</span><span>a</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>first</span>
<span>2</span><span>,</span><span>12</span><span>,</span><span>0.2</span><span>,</span><span>1.0</span><span>,</span><span>a</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>second</span>
<span>3</span><span>,</span><span>13</span><span>,</span><span>0.3</span><span>,</span><span>2.0</span><span>,</span><span>a</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>third</span>
<span>4</span><span>,</span><span>14</span><span>,</span><span>0.4</span><span>,</span><span>3.0</span><span>,</span><span>b</span><span>,</span><span>a</span><span>,</span><span>c</span><span>,</span><span>second</span>
<span>0</span><span>,</span><span>15</span><span>,</span><span>0.5</span><span>,</span><span>4.0</span><span>,</span><span>b</span><span>,</span><span>a</span><span>,</span><span>a</span><span>,</span><span>third</span>
<span>6</span><span>,</span><span>16</span><span>,</span><span>0.6</span><span>,</span><span>5.0</span><span>,</span><span>b</span><span>,</span><span>a</span><span>,</span><span>a</span><span>,</span><span>second</span>
<span>7</span><span>,</span><span>17</span><span>,</span><span>0.7</span><span>,</span><span>6.0</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>a</span><span>,</span><span>third</span>
<span>8</span><span>,</span><span>18</span><span>,</span><span>0.8</span><span>,</span><span>7.0</span><span>,</span><span>c</span><span>,</span><span>c</span><span>,</span><span>b</span><span>,</span><span>eight</span>
<span>9</span><span>,</span><span>19</span><span>,</span><span>0.9</span><span>,</span><span>8.0</span><span>,</span><span>c</span><span>,</span><span>c</span><span>,</span><span>b</span><span>,</span><span>ninth</span>
<span>0</span><span>,</span><span>10</span><span>,</span><span>0.0</span><span>,</span><span>9.0</span><span>,</span><span>c</span><span>,</span><span>c</span><span>,</span><span>b</span><span>,</span><span>ninth</span>
</code></pre></div><p>Save the file and name it however you want to, for the sake of these examples
the file will be called <code>test_small.csv</code>.</p>
<p>Now, to read that file as a dataframe use the <code>dfr open</code> command like
this:</p>
<div><pre><code><span>></span> <span>let</span> <span>df</span> <span>=</span> dfr <span>open</span> test_small.csv
</code></pre></div><p>This should create the value <code>$df</code> in memory which holds the data we just
created.</p>
<div><p>TIP</p>
<p>The command <code>dfr open</code> can read either <strong>csv</strong> or <strong>parquet</strong>
files.</p>
</div>
<p>To see all the dataframes that are stored in memory you can use</p>
<div><pre><code><span>></span> dfr <span>ls</span>

───┬──────┬──────┬─────────
 <span># │ name │ rows │ columns</span>
───┼──────┼──────┼─────────
 <span>0</span> │ <span>$df</span>  │ <span>10</span>   │ <span>8</span>
───┴──────┴──────┴─────────
</code></pre></div><p>As you can see, the command shows the created dataframes together with basic
information about them.</p>
<p>And if you want to see a preview of the loaded dataframe you can send the
dataframe variable to the stream</p>
<div><pre><code><span>></span> <span>$df</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────
 <span>0</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first
 <span>1</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second
 <span>2</span> │     <span>3</span> │    <span>13</span> │  <span>0.3000</span> │  <span>2.0000</span> │ a     │ b      │ c     │ third
 <span>3</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second
 <span>4</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third
 <span>5</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second
 <span>6</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third
 <span>7</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight
 <span>8</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth
 <span>9</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────
</code></pre></div><p>With the dataframe in memory we can start doing column operations with the
<code>DataFrame</code></p>
<div><p>TIP</p>
<p>If you want to see all the dataframe commands that are available you
can use <code>help dfr</code> or you can query nushell's scope
<code>$nu.scope.commands | where category =~ dataframe</code></p>
</div>
<h2 id="basic-aggregations" tabindex="-1"> Basic aggregations</h2>
<p>Let's start with basic aggregations on the dataframe. Let's sum all the columns
that exist in <code>df</code> by using the <code>aggregate</code> command</p>
<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr <span>sum</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬──────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │ word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼──────
 <span>0</span> │    <span>40</span> │   <span>145</span> │  <span>4.5000</span> │ <span>46.0000</span> │       │        │       │
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴──────
</code></pre></div><p>As you can see, the aggregate function computes the sum for those columns where
a sum makes sense. If you want to filter out the text column, you can select
the columns you want by using the <code>select</code> command</p>
<div><pre><code><span>$df</span> <span>|</span> dfr <span>sum</span> <span>|</span> dfr <span>select</span> int_1 int_2 float_1 float_2

───┬───────┬───────┬─────────┬─────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2</span>
───┼───────┼───────┼─────────┼─────────
 <span>0</span> │    <span>40</span> │   <span>145</span> │  <span>4.5000</span> │ <span>46.0000</span>
───┴───────┴───────┴─────────┴─────────
</code></pre></div><p>You can even store the result from this aggregation as you would store any
other Nushell variable</p>
<div><pre><code><span>></span> <span>let</span> res <span>=</span> <span>(</span><span>$df</span> <span>|</span> dfr <span>sum</span> <span>|</span> dfr <span>select</span> int_1 int_2 float_1 float_2<span>)</span>
</code></pre></div><div><p>TIP</p>
<p>Type <code>let res = ( !! )</code> and press enter. This will auto complete the previously
executed command. Note the space between ( and !!.</p>
</div>
<p>And now we have two dataframes stored in memory</p>
<div><pre><code><span>></span> dfr <span>ls</span>

───┬──────┬──────┬─────────
 <span># │ name │ rows │ columns</span>
───┼──────┼──────┼─────────
 <span>0</span> │ <span>$df</span>  │ <span>10</span>   │ <span>8</span>
 <span>1</span> │ <span>$res</span> │ <span>1</span>    │ <span>4</span>
───┴──────┴──────┴─────────
</code></pre></div><p>Pretty neat, isn't it?</p>
<p>You can perform several aggregations on the dataframe in order to extract basic
information from the dataframe and do basic data analysis on your brand new
dataframe.</p>
<h2 id="joining-a-dataframe" tabindex="-1"> Joining a DataFrame</h2>
<p>It is also possible to join two dataframes using a column as reference. We are
going to join our mini dataframe with another mini dataframe. Copy these lines
in another file and create the corresponding dataframe (for these examples we
are going to call it <code>test_small_a.csv</code>)</p>
<div><pre><code>int_1,int_2,float_1,float_2,first
9,14,0.4,3.0,a
8,13,0.3,2.0,a
7,12,0.2,1.0,a
6,11,0.1,0.0,b
</code></pre></div><p>We use the <code>dfr open</code> command to create the new variable</p>
<div><pre><code><span>></span> <span>let</span> df_a <span>=</span> dfr <span>open</span> test_small_a.csv
</code></pre></div><p>Now, with the second dataframe loaded in memory we can join them using the
column called <code>int_1</code> from the left dataframe and the column <code>int_1</code> from the
right dataframe</p>
<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr <span>join</span> <span>$df_a</span> int_1 int_1

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬─────────┬─────────────┬───────────────┬───────────────┬─────────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word   │ int_2_right │ float_1_right │ float_2_right │ first_right</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼─────────┼─────────────┼───────────────┼───────────────┼─────────────
 <span>0</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second  │          <span>11</span> │        <span>0.1000</span> │        <span>0.0000</span> │ b
 <span>1</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third   │          <span>12</span> │        <span>0.2000</span> │        <span>1.0000</span> │ a
 <span>2</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight   │          <span>13</span> │        <span>0.3000</span> │        <span>2.0000</span> │ a
 <span>3</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth   │          <span>14</span> │        <span>0.4000</span> │        <span>3.0000</span> │ a
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴─────────┴─────────────┴───────────────┴───────────────┴─────────────
</code></pre></div><div><p>TIP</p>
<p>In <code>Nu</code> when a command has multiple arguments that are expecting
multiple values we use brackets <code>[]</code> to enclose those values. In the case of
<code>dfr join</code> we can join on multiple columns as long as they have the
same type, for example we could have done <code>$df | dfr join $df_a [int_1 int_2] [int_1 int_2]</code></p>
</div>
<p>By default, the join command does an inner join, meaning that it will keep the
rows where both dataframes share the same value. You can select a left join to
keep the missing rows from the left dataframe. You can also save this result
in order to use it for further operations.</p>
<h2 id="dataframe-group-by" tabindex="-1"> DataFrame group-by</h2>
<p>One of the most powerful operations that can be performed with a DataFrame is
the <code>group-by</code>. This command will allow you to perform aggregation operations
based on a grouping criteria. In Nushell, a <code>GroupBy</code> is a type of object that
can be stored and reused for multiple aggregations. This is quite handy, since
the creation of the grouped pairs is the most expensive operation while doing
group-by and there is no need to repeat it if you are planning to do multiple
operations with the same group condition.</p>
<p>To create a <code>GroupBy</code> object you only need to use the <code>group-by</code> command</p>
<div><pre><code><span>></span> <span>let</span> group <span>=</span> <span>(</span><span>$df</span> <span>|</span> dfr group-by first<span>)</span>
<span>></span> <span>$group</span>

 LazyGroupBy │ apply aggregation to complete execution plan
</code></pre></div><p>When printing the <code>GroupBy</code> object we can see that it is in the background a
lazy operation waiting to be completed by adding an aggregation. Using the
<code>GroupBy</code> we can create aggregations on a column</p>
<div><pre><code><span>$group</span> <span>|</span> dfr agg <span>(</span><span>"int_1"</span> <span>|</span> dfr agg <span>sum</span><span>)</span>

───┬───────┬───────────┬
 <span># │ first │ int_1     │</span>
───┼───────┼───────────┼
 <span>0</span> │ a     │         <span>6</span> │
 <span>1</span> │ b     │        <span>17</span> │
 <span>2</span> │ c     │        <span>17</span> │
───┴───────┴───────────┴
</code></pre></div><p>or we can define multiple aggregations on the same or different columns</p>
<div><pre><code><span>$group</span> <span>|</span> dfr agg <span>[</span>
	<span>(</span><span>"int_1"</span> <span>|</span> dfr n-unique<span>)</span>
	<span>(</span><span>"int_2"</span> <span>|</span> dfr min<span>)</span>
	<span>(</span><span>"float_1"</span> <span>|</span> dfr <span>sum</span><span>)</span>
	<span>(</span><span>"float_2"</span> <span>|</span> dfr count<span>)</span>
<span>]</span> <span>|</span> dfr sort-by first

───┬───────┬───────────┬───────────┬─────────────┬─────────────
 <span># │ first │ int_1     │ int_2     │ float_1     │ float_2</span>
───┼───────┼───────────┼───────────┼─────────────┼─────────────
 <span>0</span> │ a     │         <span>3</span> │        <span>11</span> │      <span>0.6000</span> │      <span>3</span>
 <span>1</span> │ b     │         <span>4</span> │        <span>14</span> │      <span>2.2000</span> │      <span>4</span>
 <span>2</span> │ c     │         <span>3</span> │        <span>10</span> │      <span>1.7000</span> │      <span>3</span>
───┴───────┴───────────┴───────────┴─────────────┴─────────────
</code></pre></div><p>As you can see, the <code>GroupBy</code> object is a very powerful variable and it is
worth keeping in memory while you explore your dataset.</p>
<h2 id="creating-dataframes" tabindex="-1"> Creating Dataframes</h2>
<p>It is also possible to construct dataframes from basic Nushell primitives, such
as integers, decimals, or strings. Let's create a small dataframe using the
command <code>to-df</code>.</p>
<div><pre><code><span>></span> <span>let</span> a <span>=</span> <span>(</span><span>[</span><span>[</span>a b<span>]</span><span>;</span> <span>[</span><span>1</span> <span>2</span><span>]</span> <span>[</span><span>3</span> <span>4</span><span>]</span> <span>[</span><span>5</span> <span>6</span><span>]</span><span>]</span> <span>|</span> dfr to-df<span>)</span>
<span>></span> <span>$a</span>

───┬───┬───
 <span># │ b │ a</span>
───┼───┼───
 <span>0</span> │ <span>2</span> │ <span>1</span>
 <span>1</span> │ <span>4</span> │ <span>3</span>
 <span>2</span> │ <span>6</span> │ <span>5</span>
───┴───┴───
</code></pre></div><div><p>TIP</p>
<p>For the time being, not all of Nushell primitives can be converted into
a dataframe. This will change in the future, as the dataframe feature matures</p>
</div>
<p>We can append columns to a dataframe in order to create a new variable. As an
example, let's append two columns to our mini dataframe <code>$a</code></p>
<div><pre><code><span>></span> <span>let</span> a2 <span>=</span> <span>(</span><span>$a</span> <span>|</span> dfr with-column <span>$a</span>.a --name a2 <span>|</span> dfr with-column <span>$a</span>.a --name a3<span>)</span>

───┬───┬───┬────┬────
 <span># │ b │ a │ a2 │ a3</span>
───┼───┼───┼────┼────
 <span>0</span> │ <span>2</span> │ <span>1</span> │  <span>1</span> │  <span>1</span>
 <span>1</span> │ <span>4</span> │ <span>3</span> │  <span>3</span> │  <span>3</span>
 <span>2</span> │ <span>6</span> │ <span>5</span> │  <span>5</span> │  <span>5</span>
───┴───┴───┴────┴────
</code></pre></div><p>Nushell's powerful piping syntax allows us to create new dataframes by
taking data from other dataframes and appending it to them. Now, if you list your
dataframes you will see in total four dataframes</p>
<div><pre><code><span>></span> dfr <span>ls</span>

───┬───────┬──────┬─────────
 <span># │  name │ rows │ columns</span>
───┼───────┼──────┼─────────
 <span>0</span> │ <span>$a</span>    │ <span>3</span>    │ <span>2</span>
 <span>1</span> │ <span>$a2</span>   │ <span>3</span>    │ <span>4</span>
 <span>2</span> │ <span>$df_a</span> │ <span>4</span>    │ <span>5</span>
 <span>3</span> │ <span>$df</span>   │ <span>10</span>   │ <span>8</span>
───┴───────┴──────┴─────────
</code></pre></div><p>One thing that is important to mention is how the memory is being optimized
while working with dataframes, and this is thanks to <strong>Apache Arrow</strong> and
<strong>Polars</strong>. In a very simple representation, each column in a DataFrame is an
Arrow Array, which is using several memory specifications in order to maintain
the data as packed as possible (check <a href="https://arrow.apache.org/docs/format/Columnar.html" target="_blank" rel="noopener noreferrer">Arrow columnar
format</a>). The other
optimization trick is the fact that whenever possible, the columns from the
dataframes are shared between dataframes, avoiding memory duplication for the
same data. This means that dataframes <code>$a</code> and <code>$a2</code> are sharing the same two
columns we created using the <code>to-df</code> command. For this reason, it isn't
possible to change the value of a column in a dataframe. However, you can
create new columns based on data from other columns or dataframes.</p>
<h2 id="working-with-series" tabindex="-1"> Working with Series</h2>
<p>A <code>Series</code> is the building block of a <code>DataFrame</code>. Each Series represents a
column with the same data type, and we can create multiple Series of different
types, such as float, int or string.</p>
<p>Let's start our exploration with Series by creating one using the <code>to-df</code>
command:</p>
<div><pre><code><span>></span> <span>let</span> new <span>=</span> <span>(</span><span>[</span><span>9</span> <span>8</span> <span>4</span><span>]</span> <span>|</span> dfr to-df<span>)</span>
<span>></span> <span>$new</span>

───┬───
 <span># │ 0</span>
───┼───
 <span>0</span> │ <span>9</span>
 <span>1</span> │ <span>8</span>
 <span>2</span> │ <span>4</span>
───┴───
</code></pre></div><p>We have created a new series from a list of integers (we could have done the
same using floats or strings)</p>
<p>Series have their own basic operations defined, and they can be used to create
other Series. Let's create a new Series by doing some arithmetic on the
previously created column.</p>
<div><pre><code><span>></span> <span>let</span> new_2 <span>=</span> <span>(</span><span>$new</span> * <span>3</span> + <span>10</span><span>)</span>
<span>></span> <span>$new_2</span>

───┬────
 <span># │ 0</span>
───┼────
 <span>0</span> │ <span>37</span>
 <span>1</span> │ <span>34</span>
 <span>2</span> │ <span>22</span>
───┴────
</code></pre></div><p>Now we have a new Series that was constructed by doing basic operations on the
previous variable.</p>
<div><p>TIP</p>
<p>If you want to see how many variables you have stored in memory you can
use <code>$nu.scope.vars</code></p>
</div>
<p>Let's rename our previous Series so it has a memorable name</p>
<div><pre><code><span>></span> <span>let</span> new_2 <span>=</span> <span>(</span><span>$new_2</span> <span>|</span> dfr <span>rename</span> <span>"0"</span> memorable<span>)</span>
<span>></span> <span>$new_2</span>

───┬───────────
 <span># │ memorable</span>
───┼───────────
 <span>0</span> │        <span>37</span>
 <span>1</span> │        <span>34</span>
 <span>2</span> │        <span>22</span>
───┴───────────
</code></pre></div><p>We can also do basic operations with two Series as long as they have the same
data type</p>
<div><pre><code><span>></span> <span>$new</span> - <span>$new_2</span>

───┬──────────
 <span># │ sub_0_0</span>
───┼──────────
 <span>0</span> │     -28
 <span>1</span> │     -26
 <span>2</span> │     -18
───┴──────────
</code></pre></div><p>And we can add them to previously defined dataframes</p>
<div><pre><code><span>></span> <span>let</span> new_df <span>=</span> <span>(</span><span>$a</span> <span>|</span> dfr with-column <span>$new</span> --name new_col<span>)</span>
<span>></span> <span>$new_df</span>

───┬───┬───┬─────────
 <span># │ b │ a │ new_col</span>
───┼───┼───┼─────────
 <span>0</span> │ <span>2</span> │ <span>1</span> │       <span>9</span>
 <span>1</span> │ <span>4</span> │ <span>3</span> │       <span>8</span>
 <span>2</span> │ <span>6</span> │ <span>5</span> │       <span>4</span>
───┴───┴───┴─────────
</code></pre></div><p>The Series stored in a Dataframe can also be used directly, for example,
we can multiply columns <code>a</code> and <code>b</code> to create a new Series</p>
<div><pre><code><span>></span> <span>$new_df</span>.a * <span>$new_df</span>.b

───┬─────────
 <span># │ mul_a_b</span>
───┼─────────
 <span>0</span> │       <span>2</span>
 <span>1</span> │      <span>12</span>
 <span>2</span> │      <span>30</span>
───┴─────────
</code></pre></div><p>and we can start piping things in order to create new columns and dataframes</p>
<div><pre><code><span>></span> <span>let</span> <span>$new_df</span> <span>=</span> <span>(</span><span>$new_df</span> <span>|</span> dfr with-column <span>(</span><span>$new_df</span>.a * <span>$new_df</span>.b / <span>$new_df</span>.new_col<span>)</span> --name my_sum<span>)</span>
<span>></span> <span>let</span> <span>$new_df</span>

───┬───┬───┬─────────┬────────
 <span># │ b │ a │ new_col │ my_sum</span>
───┼───┼───┼─────────┼────────
 <span>0</span> │ <span>2</span> │ <span>1</span> │       <span>9</span> │      <span>0</span>
 <span>1</span> │ <span>4</span> │ <span>3</span> │       <span>8</span> │      <span>1</span>
 <span>2</span> │ <span>6</span> │ <span>5</span> │       <span>4</span> │      <span>7</span>
───┴───┴───┴─────────┴────────
</code></pre></div><p>Nushell's piping system can help you create very interesting workflows.</p>
<h2 id="series-and-masks" tabindex="-1"> Series and masks</h2>
<p>Series have another key use in when working with DataFrames, and it is the fact
that we can build boolean masks out of them. Let's start by creating a simple
mask using the equality operator</p>
<div><pre><code><span>></span> <span>let</span> mask <span>=</span> <span>(</span><span>$new</span> <span>==</span> <span>8</span><span>)</span>
<span>></span> <span>$mask</span>

───┬─────────
 <span># │ new_col</span>
───┼─────────
 <span>0</span> │ <span>false</span>
 <span>1</span> │ <span>true</span>
 <span>2</span> │ <span>false</span>
───┴─────────
</code></pre></div><p>and with this mask we can now filter a dataframe, like this</p>
<div><pre><code><span>></span> <span>$new_df</span> <span>|</span> dfr filter-with <span>$mask</span>

───┬───┬───┬─────────┬────────
 <span># │ a │ b │ new_col │ my_sum</span>
───┼───┼───┼─────────┼────────
 <span>0</span> │ <span>3</span> │ <span>4</span> │       <span>8</span> │      <span>1</span>
───┴───┴───┴─────────┴────────
</code></pre></div><p>Now we have a new dataframe with only the values where the mask was true.</p>
<p>The masks can also be created from Nushell lists, for example:</p>
<div><pre><code><span>></span> <span>let</span> mask1 <span>=</span> <span>(</span><span>[</span>true <span>true</span> false<span>]</span> <span>|</span> dfr to-df<span>)</span>
<span>></span> <span>$new_df</span> <span>|</span> dfr filter-with <span>$mask1</span>

───┬───┬───┬─────────┬────────
 <span># │ a │ b │ new_col │ my_sum</span>
───┼───┼───┼─────────┼────────
 <span>0</span> │ <span>1</span> │ <span>2</span> │       <span>9</span> │      <span>0</span>
 <span>1</span> │ <span>3</span> │ <span>4</span> │       <span>8</span> │      <span>1</span>
───┴───┴───┴─────────┴────────
</code></pre></div><p>To create complex masks, we have the <code>AND</code></p>
<div><pre><code><span>></span> <span>$mask</span> <span>&amp;&amp;</span> <span>$mask1</span>

───┬──────────────────
 <span># │ and_new_col_mask</span>
───┼──────────────────
 <span>0</span> │ <span>false</span>
 <span>1</span> │ <span>true</span>
 <span>2</span> │ <span>false</span>
───┴──────────────────
</code></pre></div><p>and <code>OR</code> operations</p>
<div><pre><code><span>></span> <span>$mask</span> <span>||</span> <span>$mask1</span>

───┬─────────────────
 <span># │ or_new_col_mask</span>
───┼─────────────────
 <span>0</span> │ <span>true</span>
 <span>1</span> │ <span>true</span>
 <span>2</span> │ <span>false</span>
───┴─────────────────
</code></pre></div><p>We can also create a mask by checking if some values exist in other Series.
Using the first dataframe that we created we can do something like this</p>
<div><pre><code><span>></span> <span>let</span> mask3 <span>=</span> <span>(</span><span>$df</span>.first <span>|</span> dfr is-in <span>(</span><span>[</span>b c<span>]</span> <span>|</span> dfr to-df<span>))</span>

───┬──────
 <span># │ first</span>
───┼───────
 <span>0</span> │ <span>false</span>
 <span>1</span> │ <span>false</span>
 <span>2</span> │ <span>false</span>
 <span>3</span> │ <span>true</span>
 <span>4</span> │ <span>true</span>
 <span>5</span> │ <span>true</span>
 <span>6</span> │ <span>true</span>
 <span>7</span> │ <span>true</span>
 <span>8</span> │ <span>true</span>
 <span>9</span> │ <span>true</span>
───┴───────
</code></pre></div><p>and this new mask can be used to filter the dataframe</p>
<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr filter-with <span>$mask3</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬─────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼─────────
 <span>0</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second
 <span>1</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third
 <span>2</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second
 <span>3</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third
 <span>4</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight
 <span>5</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth
 <span>6</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴─────────
</code></pre></div><p>Another operation that can be done with masks is setting or replacing a value
from a series. For example, we can change the value in the column <code>first</code> where
the value is equal to <code>a</code></p>
<div><pre><code><span>></span> <span>$df</span>.first <span>|</span> dfr <span>set</span> new --mask <span>(</span><span>$df</span>.first <span>=~</span> a<span>)</span>

───┬────────
 <span># │ string</span>
───┼────────
 <span>0</span> │ new
 <span>1</span> │ new
 <span>2</span> │ new
 <span>3</span> │ b
 <span>4</span> │ b
 <span>5</span> │ b
 <span>6</span> │ b
 <span>7</span> │ c
 <span>8</span> │ c
 <span>9</span> │ c
───┴────────
</code></pre></div><h2 id="series-as-indices" tabindex="-1"> Series as indices</h2>
<p>Series can be also used as a way of filtering a dataframe by using them as a
list of indices. For example, let's say that we want to get rows 1, 4, and 6
from our original dataframe. With that in mind, we can use the next command to
extract that information</p>
<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>[</span><span>1</span> <span>4</span> <span>6</span><span>]</span> <span>|</span> dfr to-df<span>)</span>
<span>></span> <span>$df</span> <span>|</span> dfr take <span>$indices</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────
 <span>0</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second
 <span>1</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third
 <span>2</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────
</code></pre></div><p>The command <code>take</code> is very handy, especially if we mix it with other commands.
Let's say that we want to extract all rows for the first duplicated element for
column <code>first</code>. In order to do that, we can use the command <code>dfr arg-unique</code> as
shown in the next example</p>
<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>$df</span>.first <span>|</span> dfr arg-unique<span>)</span>
<span>></span> <span>$df</span> <span>|</span> dfr take <span>$indices</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────
 <span>0</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first
 <span>1</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second
 <span>2</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────
</code></pre></div><p>Or what if we want to create a new sorted dataframe using a column in specific.
We can use the <code>dfr arg-sort</code> to accomplish that. In the next example we
can sort the dataframe by the column <code>word</code></p>
<div><p>TIP</p>
<p>The same result could be accomplished using the command <code>sort</code></p>
</div>
<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>$df</span>.word <span>|</span> dfr arg-sort<span>)</span>
<span>></span> <span>$df</span> <span>|</span> dfr take <span>$indices</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────
 <span>0</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight
 <span>1</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first
 <span>2</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth
 <span>3</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth
 <span>4</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second
 <span>5</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second
 <span>6</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second
 <span>7</span> │     <span>3</span> │    <span>13</span> │  <span>0.3000</span> │  <span>2.0000</span> │ a     │ b      │ c     │ third
 <span>8</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third
 <span>9</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────
</code></pre></div><p>And finally, we can create new Series by setting a new value in the marked
indices. Have a look at the next command</p>
<div><pre><code><span>></span> <span>let</span> indices <span>=</span> <span>(</span><span>[</span><span>0</span> <span>2</span><span>]</span> <span>|</span> dfr to-df<span>)</span><span>;</span>
<span>></span> <span>$df</span>.int_1 <span>|</span> dfr set-with-idx <span>123</span> --indices <span>$indices</span>

───┬───────
 <span># │ int_1</span>
───┼───────
 <span>0</span> │   <span>123</span>
 <span>1</span> │     <span>2</span>
 <span>2</span> │   <span>123</span>
 <span>3</span> │     <span>4</span>
 <span>4</span> │     <span>0</span>
 <span>5</span> │     <span>6</span>
 <span>6</span> │     <span>7</span>
 <span>7</span> │     <span>8</span>
 <span>8</span> │     <span>9</span>
 <span>9</span> │     <span>0</span>
───┴───────
</code></pre></div><h2 id="unique-values" tabindex="-1"> Unique values</h2>
<p>Another operation that can be done with <code>Series</code> is to search for unique values
in a list or column. Lets use again the first dataframe we created to test
these operations.</p>
<p>The first and most common operation that we have is <code>value_counts</code>. This
command calculates a count of the unique values that exist in a Series. For
example, we can use it to count how many occurrences we have in the column
<code>first</code></p>
<div><pre><code><span>></span> <span>$df</span>.first <span>|</span> dfr value-counts

───┬───────┬────────
 <span># │ first │ counts</span>
───┼───────┼────────
 <span>0</span> │ b     │      <span>4</span>
 <span>1</span> │ c     │      <span>3</span>
 <span>2</span> │ a     │      <span>3</span>
───┴───────┴────────
</code></pre></div><p>As expected, the command returns a new dataframe that can be used to do more
queries.</p>
<p>Continuing with our exploration of <code>Series</code>, the next thing that we can do is
to only get the unique unique values from a series, like this</p>
<div><pre><code><span>></span> <span>$df</span>.first <span>|</span> dfr unique

───┬───────
 <span># │ first</span>
───┼───────
 <span>0</span> │ c
 <span>1</span> │ b
 <span>2</span> │ a
───┴───────
</code></pre></div><p>Or we can get a mask that we can use to filter out the rows where data is
unique or duplicated. For example, we can select the rows for unique values
in column <code>word</code></p>
<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr filter-with <span>(</span><span>$df</span>.word <span>|</span> dfr is-unique<span>)</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬───────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │ word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼───────
 <span>0</span> │     <span>1</span> │    <span>11</span> │  <span>0.1000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ first
 <span>1</span> │     <span>8</span> │    <span>18</span> │  <span>0.8000</span> │  <span>7.0000</span> │ c     │ c      │ b     │ eight
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴───────
</code></pre></div><p>Or all the duplicated ones</p>
<div><pre><code><span>></span> <span>$df</span> <span>|</span> dfr filter-with <span>(</span><span>$df</span>.word <span>|</span> dfr is-duplicated<span>)</span>

───┬───────┬───────┬─────────┬─────────┬───────┬────────┬───────┬────────
 <span># │ int_1 │ int_2 │ float_1 │ float_2 │ first │ second │ third │  word</span>
───┼───────┼───────┼─────────┼─────────┼───────┼────────┼───────┼────────
 <span>0</span> │     <span>2</span> │    <span>12</span> │  <span>0.2000</span> │  <span>1.0000</span> │ a     │ b      │ c     │ second
 <span>1</span> │     <span>3</span> │    <span>13</span> │  <span>0.3000</span> │  <span>2.0000</span> │ a     │ b      │ c     │ third
 <span>2</span> │     <span>4</span> │    <span>14</span> │  <span>0.4000</span> │  <span>3.0000</span> │ b     │ a      │ c     │ second
 <span>3</span> │     <span>0</span> │    <span>15</span> │  <span>0.5000</span> │  <span>4.0000</span> │ b     │ a      │ a     │ third
 <span>4</span> │     <span>6</span> │    <span>16</span> │  <span>0.6000</span> │  <span>5.0000</span> │ b     │ a      │ a     │ second
 <span>5</span> │     <span>7</span> │    <span>17</span> │  <span>0.7000</span> │  <span>6.0000</span> │ b     │ c      │ a     │ third
 <span>6</span> │     <span>9</span> │    <span>19</span> │  <span>0.9000</span> │  <span>8.0000</span> │ c     │ c      │ b     │ ninth
 <span>7</span> │     <span>0</span> │    <span>10</span> │  <span>0.0000</span> │  <span>9.0000</span> │ c     │ c      │ b     │ ninth
───┴───────┴───────┴─────────┴─────────┴───────┴────────┴───────┴────────
</code></pre></div><h2 id="lazy-dataframes" tabindex="-1"> Lazy Dataframes</h2>
<p>Lazy dataframes are a way to query data by creating a logical plan. The
advantage of this approach is that the plan never gets evaluated until you need
to extract data. This way you could chain together aggregations, joins and
selections and collect the data once you are happy with the selected
operations.</p>
<p>Let's create a small example of a lazy dataframe</p>
<div><pre><code><span>></span> <span>let</span> a <span>=</span> <span>(</span><span>[</span><span>[</span>a b<span>]</span><span>;</span> <span>[</span><span>1</span> a<span>]</span> <span>[</span><span>2</span> b<span>]</span> <span>[</span><span>3</span> c<span>]</span> <span>[</span><span>4</span> d<span>]</span><span>]</span> <span>|</span> dfr to-lazy<span>)</span>
<span>></span> <span>$a</span>
────────────────┬────────────────────────────────────────────────
 plan           │ DATAFRAME<span>(</span>in-memory<span>)</span>: <span>[</span><span>"a"</span>, <span>"b"</span><span>]</span><span>;</span>
                │     project */2 columns    <span>|</span>    details: None<span>;</span>
                │     selection: <span>"None"</span>
 optimized_plan │ DATAFRAME<span>(</span>in-memory<span>)</span>: <span>[</span><span>"a"</span>, <span>"b"</span><span>]</span><span>;</span>
                │     project */2 columns    <span>|</span>    details: None<span>;</span>
                │     selection: <span>"None"</span>
────────────────┴────────────────────────────────────────────────
</code></pre></div><p>As you can see, the resulting dataframe is not yet evaluated, it stays as a
set of instructions that can be done on the data. If you were to collect that
dataframe you would get the next result</p>
<div><pre><code><span>></span> <span>$a</span> <span>|</span> dfr collect
───┬───┬───
 <span># │ a │ b</span>
───┼───┼───
 <span>0</span> │ <span>1</span> │ a
 <span>1</span> │ <span>2</span> │ b
 <span>2</span> │ <span>3</span> │ c
 <span>3</span> │ <span>4</span> │ d
───┴───┴───
</code></pre></div><p>as you can see, the collect command executes the plan and creates a nushell
table for you.</p>
<p>All dataframes operations should work with eager or lazy dataframes. The are
converted in the background for compatibility. However, to take advantage of
lazy operations if is recommended to only use lazy operations with lazy
dataframes.</p>
<p>To find all lazy dataframe operations you can use</p>
<div><pre><code><span>$nu</span>.scope.commands <span>|</span> where category <span>=~</span> lazyframe
</code></pre></div><p>With your lazy frame defined we can start chaining operations on it. For
example this</p>
<div><pre><code><span>></span> <span>$a</span>
:::   <span>|</span> dfr reverse
:::   <span>|</span> dfr with-column <span>[</span>
:::      <span>((</span>dfr col a<span>)</span> * <span>2</span> <span>|</span> dfr as double_a<span>)</span>
:::      <span>((</span>dfr col a<span>)</span> / <span>2</span> <span>|</span> dfr as half_a<span>)</span>
:::   <span>]</span>
:::   <span>|</span> dfr collect
───┬───┬───┬──────────┬────────
 <span># │ a │ b │ double_a │ half_a</span>
───┼───┼───┼──────────┼────────
 <span>0</span> │ <span>4</span> │ d │        <span>8</span> │      <span>2</span>
 <span>1</span> │ <span>3</span> │ c │        <span>6</span> │      <span>1</span>
 <span>2</span> │ <span>2</span> │ b │        <span>4</span> │      <span>1</span>
 <span>3</span> │ <span>1</span> │ a │        <span>2</span> │      <span>0</span>
───┴───┴───┴──────────┴────────
</code></pre></div><div><p>TIP</p>
<p>You can use the line buffer editor to format your queries (ctr + o) easily</p>
</div>
<p>This query uses the lazy reverse command to invert the dataframe and the
<code>with-column</code> command to create new two columns using <code>expressions</code>.
An <code>expression</code> is used to define and operation that is executed on the lazy
frame. When put together they create the whole set of instructions used by the
lazy commands to query the data. To list all the commands that generate an
expression you can use</p>
<div><pre><code><span>$nu</span>.scope.commands <span>|</span> where category <span>=~</span> expression
</code></pre></div><p>In our previous example, we use the <code>col</code> command to indicate that column <code>a</code>
will be multiplied by 2 and then it will be aliased to the name <code>double_a</code>.
In some cases the use of the <code>col</code> command can be inferred. For example, using
the select command we can use only a string</p>
<div><pre><code><span>></span> <span>$a</span> <span>|</span> dfr <span>select</span> a <span>|</span> dfr collect
</code></pre></div><p>or the <code>col</code> command</p>
<div><pre><code><span>></span> <span>$a</span> <span>|</span> dfr <span>select</span> <span>(</span>dfr col a<span>)</span> <span>|</span> dfr collect
</code></pre></div><p>Let's try something more complicated and create aggregations from a lazy
dataframe</p>
<div><pre><code><span>></span> <span>let</span> a <span>=</span> <span>(</span> <span>[</span><span>[</span>name value<span>]</span><span>;</span> <span>[</span>one <span>1</span><span>]</span> <span>[</span>two <span>2</span><span>]</span> <span>[</span>one <span>1</span><span>]</span> <span>[</span>two <span>3</span><span>]</span><span>]</span> <span>|</span> dfr to-lazy <span>)</span>
<span>></span> <span>$a</span>
:::   <span>|</span> dfr group-by name
:::   <span>|</span> dfr agg <span>[</span>
:::       <span>(</span><span>"value"</span>  <span>|</span> dfr <span>sum</span>  <span>|</span> dfr as <span>sum</span><span>)</span>
:::       <span>(</span><span>"value"</span>  <span>|</span> dfr mean  <span>|</span> dfr as mean<span>)</span>
:::     <span>]</span>
:::   <span>|</span> dfr collect
───┬──────┬─────┬──────
 <span># │ name │ sum │ mean</span>
───┼──────┼─────┼──────
 <span>0</span> │ two  │   <span>5</span> │ <span>2.50</span>
 <span>1</span> │ one  │   <span>2</span> │ <span>1.00</span>
───┴──────┴─────┴──────
</code></pre></div><p>And we could join on a lazy dataframe that hasn't being collected. Let's join
the resulting group by to the original lazy frame</p>
<div><pre><code><span>></span> <span>let</span> a <span>=</span> <span>(</span> <span>[</span><span>[</span>name value<span>]</span><span>;</span> <span>[</span>one <span>1</span><span>]</span> <span>[</span>two <span>2</span><span>]</span> <span>[</span>one <span>1</span><span>]</span> <span>[</span>two <span>3</span><span>]</span><span>]</span> <span>|</span> dfr to-lazy <span>)</span>
<span>></span> <span>let</span> group <span>=</span> <span>(</span><span>$a</span>
:::   <span>|</span> dfr group-by name
:::   <span>|</span> dfr agg <span>[</span>
:::       <span>(</span><span>"value"</span>  <span>|</span> dfr <span>sum</span>  <span>|</span> dfr as <span>sum</span><span>)</span>
:::       <span>(</span><span>"value"</span>  <span>|</span> dfr mean  <span>|</span> dfr as mean<span>)</span>
:::     <span>]</span><span>)</span>
<span>></span> <span>$a</span> <span>|</span> dfr <span>join</span> <span>$group</span> name name <span>|</span> dfr collect
───┬──────┬───────┬─────┬──────
 <span># │ name │ value │ sum │ mean</span>
───┼──────┼───────┼─────┼──────
 <span>0</span> │ one  │     <span>1</span> │   <span>2</span> │ <span>1.00</span>
 <span>1</span> │ two  │     <span>2</span> │   <span>5</span> │ <span>2.50</span>
 <span>2</span> │ one  │     <span>1</span> │   <span>2</span> │ <span>1.00</span>
 <span>3</span> │ two  │     <span>3</span> │   <span>5</span> │ <span>2.50</span>
───┴──────┴───────┴─────┴──────
</code></pre></div><p>As you can see lazy frames are a powerful construct that will let you query
data using a flexible syntax, resulting in blazing fast results.</p>
<h2 id="dataframe-commands" tabindex="-1"> Dataframe commands</h2>
<p>So far we have seen quite a few operations that can be done using <code>DataFrame</code>s
commands. However, the commands we have used so far are not all the commands
available to work with data and be assured that there will be more as the
feature becomes more stable.</p>
<p>The next list shows the available dataframe commands with their descriptions, and
whenever possible, their analogous Nushell command.</p>
<table>
<thead>
<tr>
<th>Command Name</th>
<th>Applies To</th>
<th>Description</th>
<th>Nushell Equivalent</th>
</tr>
</thead>
<tbody>
<tr>
<td>aggregate</td>
<td>DataFrame, GroupBy, Series</td>
<td>Performs an aggregation operation on a dataframe, groupby or series object</td>
<td>math</td>
</tr>
<tr>
<td>all-false</td>
<td>Series</td>
<td>Returns true if all values are false</td>
<td></td>
</tr>
<tr>
<td>all-true</td>
<td>Series</td>
<td>Returns true if all values are true</td>
<td>all?</td>
</tr>
<tr>
<td>arg-max</td>
<td>Series</td>
<td>Return index for max value in series</td>
<td></td>
</tr>
<tr>
<td>arg-min</td>
<td>Series</td>
<td>Return index for min value in series</td>
<td></td>
</tr>
<tr>
<td>arg-sort</td>
<td>Series</td>
<td>Returns indexes for a sorted series</td>
<td></td>
</tr>
<tr>
<td>arg-true</td>
<td>Series</td>
<td>Returns indexes where values are true</td>
<td></td>
</tr>
<tr>
<td>arg-unique</td>
<td>Series</td>
<td>Returns indexes for unique values</td>
<td></td>
</tr>
<tr>
<td>column</td>
<td>DataFrame</td>
<td>Returns the selected column as Series</td>
<td>get</td>
</tr>
<tr>
<td>count-null</td>
<td>Series</td>
<td>Counts null values</td>
<td></td>
</tr>
<tr>
<td>count-unique</td>
<td>Series</td>
<td>Counts unique value</td>
<td></td>
</tr>
<tr>
<td>drop</td>
<td>DataFrame</td>
<td>Creates a new dataframe by dropping the selected columns</td>
<td>drop</td>
</tr>
<tr>
<td>drop-duplicates</td>
<td>DataFrame</td>
<td>Drops duplicate values in dataframe</td>
<td></td>
</tr>
<tr>
<td>drop-nulls</td>
<td>DataFrame, Series</td>
<td>Drops null values in dataframe</td>
<td></td>
</tr>
<tr>
<td>dtypes</td>
<td>DataFrame</td>
<td>Show dataframe data types</td>
<td></td>
</tr>
<tr>
<td>filter-with</td>
<td>DataFrame</td>
<td>Filters dataframe using a mask as reference</td>
<td></td>
</tr>
<tr>
<td>first</td>
<td>DataFrame</td>
<td>Creates new dataframe with first rows</td>
<td>first</td>
</tr>
<tr>
<td>get</td>
<td>DataFrame</td>
<td>Creates dataframe with the selected columns</td>
<td>get</td>
</tr>
<tr>
<td>group-by</td>
<td>DataFrame</td>
<td>Creates a groupby object that can be used for other aggregations</td>
<td>group-by</td>
</tr>
<tr>
<td>is-duplicated</td>
<td>Series</td>
<td>Creates mask indicating duplicated values</td>
<td></td>
</tr>
<tr>
<td>is-in</td>
<td>Series</td>
<td>Checks if elements from a series are contained in right series</td>
<td>in</td>
</tr>
<tr>
<td>is-not-null</td>
<td>Series</td>
<td>Creates mask where value is not null</td>
<td></td>
</tr>
<tr>
<td>is-null</td>
<td>Series</td>
<td>Creates mask where value is null</td>
<td><code>&lt;column_name&gt; == $nothing</code></td>
</tr>
<tr>
<td>is-unique</td>
<td>Series</td>
<td>Creates mask indicating unique values</td>
<td></td>
</tr>
<tr>
<td>join</td>
<td>DataFrame</td>
<td>Joins a dataframe using columns as reference</td>
<td></td>
</tr>
<tr>
<td>last</td>
<td>DataFrame</td>
<td>Creates new dataframe with last rows</td>
<td>last</td>
</tr>
<tr>
<td>ls</td>
<td></td>
<td>Lists stored dataframes</td>
<td></td>
</tr>
<tr>
<td>melt</td>
<td>DataFrame</td>
<td>Unpivot a DataFrame from wide to long format</td>
<td></td>
</tr>
<tr>
<td>not</td>
<td>Series Inverts boolean mask</td>
<td></td>
<td></td>
</tr>
<tr>
<td>open</td>
<td></td>
<td>Loads dataframe form csv file</td>
<td>open</td>
</tr>
<tr>
<td>pivot</td>
<td>GroupBy</td>
<td>Performs a pivot operation on a groupby object</td>
<td>pivot</td>
</tr>
<tr>
<td>rename</td>
<td>Dataframe, Series</td>
<td>Renames a series</td>
<td>rename</td>
</tr>
<tr>
<td>sample</td>
<td>DataFrame</td>
<td>Create sample dataframe</td>
<td></td>
</tr>
<tr>
<td>select</td>
<td>DataFrame</td>
<td>Creates a new dataframe with the selected columns</td>
<td>select</td>
</tr>
<tr>
<td>set</td>
<td>Series</td>
<td>Sets value where given mask is true</td>
<td></td>
</tr>
<tr>
<td>set-with-idx</td>
<td>Series</td>
<td>Sets value in the given index</td>
<td></td>
</tr>
<tr>
<td>shift</td>
<td>Series</td>
<td>Shifts the values by a given period</td>
<td></td>
</tr>
<tr>
<td>show</td>
<td>DataFrame</td>
<td>Converts a section of the dataframe to a Table or List value</td>
<td></td>
</tr>
<tr>
<td>slice</td>
<td>DataFrame</td>
<td>Creates new dataframe from a slice of rows</td>
<td></td>
</tr>
<tr>
<td>sort-by</td>
<td>DataFrame, Series</td>
<td>Creates new sorted dataframe or series</td>
<td>sort</td>
</tr>
<tr>
<td>take</td>
<td>DataFrame, Series</td>
<td>Creates new dataframe using the given indices</td>
<td></td>
</tr>
<tr>
<td>to-csv</td>
<td>DataFrame</td>
<td>Saves dataframe to csv file</td>
<td>to csv</td>
</tr>
<tr>
<td>to-df</td>
<td></td>
<td>Converts a pipelined Table or List into Dataframe</td>
<td></td>
</tr>
<tr>
<td>to-dummies</td>
<td>DataFrame</td>
<td>Creates a new dataframe with dummy variables</td>
<td></td>
</tr>
<tr>
<td>to-parquet</td>
<td>DataFrame</td>
<td>Saves dataframe to parquet file</td>
<td></td>
</tr>
<tr>
<td>unique</td>
<td>Series</td>
<td>Returns unique values from a series</td>
<td>uniq</td>
</tr>
<tr>
<td>value-counts</td>
<td>Series</td>
<td>Returns a dataframe with the counts for unique values in series</td>
<td></td>
</tr>
<tr>
<td>where</td>
<td>DataFrame</td>
<td>Filter dataframe to match the condition</td>
<td>where</td>
</tr>
<tr>
<td>with-column</td>
<td>DataFrame</td>
<td>Adds a series to the dataframe</td>
<td><code>insert &lt;column_name&gt; &lt;value&gt; | upsert &lt;column_name&gt; { &lt;new_value&gt; }</code></td>
</tr>
</tbody>
</table>
<h2 id="future-of-dataframes" tabindex="-1"> Future of Dataframes</h2>
<p>We hope that by the end of this page you have a solid grasp of how to use the
dataframe commands. As you can see they offer powerful operations that can
help you process data faster and natively.</p>
<p>However, the future of these dataframes is still very experimental. New
commands and tools that take advantage of these commands will be added as they
mature. For example, the next step for dataframes is the introduction of Lazy
Dataframes. These will allow you to define complex data operations that will be
executed until you decide to &quot;finish&quot; the pipe. This will give Nushell the
chance to select the optimal plan to query the data you would be asking for.</p>
<p>Keep visiting this book in order to check the new things happening to
dataframes and how they can help you process data faster and efficiently.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Environment</title>
      <link>www.nushell.sh/book/environment.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/environment.html</guid>
      <source url="www.nushell.sh/rss.xml">Environment</source>
      <content:encoded><![CDATA[<h1 id="environment" tabindex="-1"> Environment</h1>
<p>A common task in a shell is to control the environment that external applications will use. This is often done automatically, as the environment is packaged up and given to the external application as it launches. Sometimes, though, we want to have more precise control over what environment variables an application sees.</p>
<p>You can see the current environment variables using the <a href="/book/commands/env.html"><code>env</code></a> command:</p>
<div><pre><code>   #           name                 type                value                 raw
──────────────────────────────────────────────────────────────────────────────────────────
  16   DISPLAY              string               :0                   :0
  17   EDITOR               string               nvim                 nvim
  28   LANG                 string               en_US.UTF-8          en_US.UTF-8
  35   PATH                 list&lt;unknown>        [list 16 items]      /path1:/path2:/...
  36   PROMPT_COMMAND       block                &lt;Block 197>
</code></pre></div><p>In Nushell, environment variables can be any value and have any type (see the <code>type</code> column).
The actual value of the env. variable used within Nushell is under the <code>value</code> column.
You can query the value directly using the <code>$env</code> variable, for example, <code>$env.PATH | length</code>.
The last <code>raw</code> column shows the actual value that will be sent to external applications (see  for details).</p>
<p>The environment is initially created from the Nu <a href="/book/configuration.html">configuration file</a> and from the environment that Nu is run inside of.</p>
<h2 id="setting-environment-variables" tabindex="-1"> Setting environment variables</h2>
<p>There are several ways to set an environment variable:</p>
<h3 id="let-env" tabindex="-1"> <a href="/book/commands/let-env.html"><code>let-env</code></a></h3>
<p>Using the <code>let-env</code> command is the most straightforward method</p>
<div><pre><code>> let-env FOO = 'BAR'
</code></pre></div><p>'let-env' is similar to the <strong>export</strong> command in bash.</p>
<p>So if you want to extend the <code>PATH</code> variable for example, you could do that as follows.</p>
<div><pre><code>let-env PATH = ($env.PATH | prepend '/path/you/want/to/add')
</code></pre></div><p>Here we've prepended our folder to the existing folders in the PATH, so it will have the highest priority.
If you want to give it the lowest priority instead, you can use the <code>append</code> command.</p>
<h3 id="load-env" tabindex="-1"> <a href="/book/commands/load-env.html"><code>load-env</code></a></h3>
<p>If you have more than one environment variable you'd like to set, you can use <code>load-env</code> to create a table of name/value pairs and load multiple variables at the same time:</p>
<div><pre><code>> load-env { "BOB": "FOO", "JAY": "BAR" }
</code></pre></div><h3 id="one-shot-environment-variables" tabindex="-1"> One-shot environment variables</h3>
<p>These are defined to be active only temporarily for a duration of executing a code block.
See <a href="/book/environment.html#single-use-environment-variables">Single-use environment variables</a> for details.</p>
<h3 id="calling-a-command-defined-with-def-env" tabindex="-1"> Calling a command defined with <a href="/book/commands/def-env.html"><code>def-env</code></a></h3>
<p>See <a href="/book/environment.html#defining-environment-from-custom-commands">Defining environment from custom commands</a> for details.</p>
<h3 id="using-module-s-exports" tabindex="-1"> Using module's exports</h3>
<p>See <a href="/book/modules.html">Modules</a> for details.</p>
<h2 id="reading-environment-varibles" tabindex="-1"> Reading environment varibles</h2>
<p>Individual environment variables are fields of a record that is stored in the <code>$env</code> variable and can be read with <code>$env.VARIABLE</code>:</p>
<div><pre><code>> $env.FOO
BAR
</code></pre></div><h2 id="scoping" tabindex="-1"> Scoping</h2>
<p>When you set an environment variable, it will be available only in the current scope (the block you're in and any block inside of it).</p>
<p>Here is a small example to demonstrate the environment scoping:</p>
<div><pre><code>> let-env FOO = "BAR"
> do {
    let-env FOO = "BAZ"
    $env.FOO == "BAZ"
}
true
> $env.FOO == "BAR"
true
</code></pre></div><h2 id="changing-directory" tabindex="-1"> Changing directory</h2>
<p>Common task in a shell is to change directory with the <a href="/book/commands/cd.html"><code>cd</code></a> command.
In Nushell, calling <code>cd</code> is equivalent to setting the <code>PWD</code> environment variable.
Therefore, it follows the same rules as other environment variables (for example, scoping).</p>
<h2 id="single-use-environment-variables" tabindex="-1"> Single-use environment variables</h2>
<p>A common shorthand to set an environment variable once is available, inspired by Bash and others:</p>
<div><pre><code>> FOO=BAR echo $env.FOO
BAR
</code></pre></div><p>You can also use <a href="/book/commands/with-env.html"><code>with-env</code></a> to do the same thing more explicitly:</p>
<div><pre><code>> with-env { FOO: BAR } { echo $env.FOO }
BAR
</code></pre></div><p>The <a href="/book/commands/with-env.html"><code>with-env</code></a> command will temporarily set the environment variable to the value given (here: the variable &quot;FOO&quot; is given the value &quot;BAR&quot;). Once this is done, the <a href="/book/types_of_data.html#blocks">block</a> will run with this new environment variable set.</p>
<h2 id="permanent-environment-variables" tabindex="-1"> Permanent environment variables</h2>
<p>You can also set environment variables at startup so they are available for the duration of Nushell running.
To do this, set an environment variable inside <a href="/book/configuration.html">the Nu configuration file</a>.
For example:</p>
<div><pre><code># In config.nu
let-env FOO = 'BAR'
</code></pre></div><h2 id="defining-environment-from-custom-commands" tabindex="-1"> Defining environment from custom commands</h2>
<p>Due to the scoping rules, any environment variables defined inside a custom command will only exist inside the command's scope.
However, a command defined as <a href="/book/commands/def-env.html"><code>def-env</code></a> instead of <a href="/book/commands/def.html"><code>def</code></a> (it applies also to <code>export def</code>, see <a href="/book/modules.html">Modules</a>) will preserve the environment on the caller's side:</p>
<div><pre><code>> def-env foo [] {
    let-env FOO = 'BAR'
}

> foo

> $env.FOO
BAR
</code></pre></div><h2 id="environment-variable-conversions" tabindex="-1"> Environment variable conversions</h2>
<p>You can set the <code>ENV_CONVERSIONS</code> environment variable to convert other environment variables between a string and a value.
For example, the <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/default_env.nu" target="_blank" rel="noopener noreferrer">default environment config</a> includes conversion of PATH (and Path used on Windows) environment variables from a string to a list.
After both <code>env.nu</code> and <code>config.nu</code> are loaded, any existing environment variable specified inside <code>ENV_CONVERSIONS</code> will be translated according to its <code>from_string</code> field into a value of any type.
External tools require environment variables to be strings, therefore, any non-string environment variable needs to be converted first.
The conversion of value -&gt; string is set by the <code>to_string</code> field of <code>ENV_CONVERSIONS</code> and is done every time an external command is run.</p>
<p>Let's illustrate the conversions with an example.
Put the following in your config.nu:</p>
<div><pre><code>let-env ENV_CONVERSIONS = {
    # ... you might have Path and PATH already there, add:
    FOO : {
        from_string: { |s| $s | split row '-' }
        to_string: { |v| $v | str collect '-' }
    }
}
</code></pre></div><p>Now, within a Nushell instance:</p>
<div><pre><code>> with-env { FOO : 'a-b-c' } { nu }  # runs Nushell with FOO env. var. set to 'a-b-c'

> $env.FOO
  0   a
  1   b
  2   c
</code></pre></div><p>You can see the <code>$env.FOO</code> is now a list in a new Nushell instance with the updated config.
You can also test the conversion manually by</p>
<div><pre><code>> do $env.ENV_CONVERSIONS.FOO.from_string 'a-b-c'
</code></pre></div><p>Now, to test the conversion list -&gt; string, run:</p>
<div><pre><code>> nu -c '$env.FOO'
a-b-c
</code></pre></div><p>Because <code>nu</code> is an external program, Nushell translated the <code>[ a b c ]</code> list according to <code>ENV_CONVERSIONS.FOO.to_string</code> and passed it to the <code>nu</code> process.
Running commands with <code>nu -c</code> does not load the config file, therefore the env conversion for <code>FOO</code> is missing and it is displayed as a plain string -- this way we can verify the translation was successful.
You can also run this step manually by <code>do $env.ENV_CONVERSIONS.FOO.to_string [a b c]</code></p>
<p>If we look back at the <a href="/book/commands/env.html"><code>env</code></a> command, the <code>raw</code> column shows the value translated by <code>ENV_CONVERSIONS.&lt;name&gt;.to_string</code> and the <code>value</code> column shows the value used in Nushell (the result of <code>ENV_CONVERSIONS.&lt;name&gt;.from_string</code> in the case of <code>FOO</code>).
If the value is not a string and does not have <code>to_string</code> conversion, it is not passed to an external (see the <code>raw</code> column of <code>PROMPT_COMMAND</code>).
One exception is <code>PATH</code> (<code>Path</code> on Windows): By default, it converts the string to a list on startup and from a list to a string when running externals if no manual conversions are specified.</p>
<p><em>(Important! The environment conversion string -&gt; value happens <strong>after</strong> the env.nu and config.nu are evaluated. All environment variables in env.nu and config.nu are still strings unless you set them manually to some other values.)</em></p>
<h2 id="removing-environment-variables" tabindex="-1"> Removing environment variables</h2>
<p>You can remove an environment variable only if it was set in the current scope via <a href="/book/commands/hide.html"><code>hide</code></a>:</p>
<div><pre><code>> let-env FOO = 'BAR'
...
> hide FOO
</code></pre></div><p>The hiding is also scoped which both allows you to remove an environment variable temporarily and prevents you from modifying a parent environment from within a child scope:</p>
<div><pre><code>> let-env FOO = 'BAR'
> do {
    hide FOO
    # $env.FOO does not exist
  }
> $env.FOO
BAR
</code></pre></div><p>You can check <a href="/book/modules.html">Modules</a> for more details about hiding.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Escaping to the system</title>
      <link>www.nushell.sh/book/escaping.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/escaping.html</guid>
      <source url="www.nushell.sh/rss.xml">Escaping to the system</source>
      <content:encoded><![CDATA[<h1 id="escaping-to-the-system" tabindex="-1"> Escaping to the system</h1>
<p>Nu provides a set of commands that you can use across different OSes (&quot;internal&quot; commands), and having this consistency is helpful. Sometimes, though, you want to run an external command that has the same name as an internal Nu command. To run the external <code>ls</code> or <code>date</code> command, for example, you use the caret (^) command. Escaping with the caret prefix calls the command that's in the user's PATH (e.g. <code>/bin/ls</code> instead of Nu's internal <a href="/book/commands/ls.html"><code>ls</code></a> command).</p>
<p>Nu internal command:</p>
<div><pre><code>> ls
</code></pre></div><p>Escape to external command:</p>
<div><pre><code>> ^ls
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Externs</title>
      <link>www.nushell.sh/book/externs.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/externs.html</guid>
      <source url="www.nushell.sh/rss.xml">Externs</source>
      <content:encoded><![CDATA[<h1 id="externs" tabindex="-1"> Externs</h1>
<p>Calling external commands is a fundamental part of using Nushell as a shell (and often using Nushell as a language). There's a problem, though, commands outside of Nushell means that Nushell can't help with finding errors in the call, or completions, or syntax highlighting.</p>
<p>This is where <code>extern</code> comes in. The <code>extern</code> keyword allows you to write a full signature for the command that lives outside of Nushell so that you get all the benefits above. If you take a look at the default config, you'll notice that there are a few extern calls in there. Here's one of them:</p>
<div><pre><code>  export extern "git push" [
    remote?: string@"nu-complete git remotes", # the name of the remote
    refspec?: string@"nu-complete git branches"# the branch / refspec
    --verbose(-v)                              # be more verbose
    --quiet(-q)                                # be more quiet
    --repo: string                             # repository
    --all                                      # push all refs
    --mirror                                   # mirror all refs
    --delete(-d)                               # delete refs
    --tags                                     # push tags (can't be used with --all or --mirror)
    --dry-run(-n)                              # dry run
    --porcelain                                # machine-readable output
    --force(-f)                                # force updates
    --force-with-lease: string                 # require old value of ref to be at this value
    --recurse-submodules: string               # control recursive pushing of submodules
    --thin                                     # use thin pack
    --receive-pack: string                     # receive pack program
    --exec: string                             # receive pack program
    --set-upstream(-u)                         # set upstream for git pull/status
    --progress                                 # force progress reporting
    --prune                                    # prune locally removed refs
    --no-verify                                # bypass pre-push hook
    --follow-tags                              # push missing but relevant tags
    --signed: string                           # GPG sign the push
    --atomic                                   # request atomic transaction on remote side
    --push-option(-o): string                  # option to transmit
    --ipv4(-4)                                 # use IPv4 addresses only
    --ipv6(-6)                                 # use IPv6 addresses only
  ]
</code></pre></div><p>You'll notice this gives you all the same descriptive syntax that internal commands do, letting you describe flags, short flags, positional parameters, types, and more.</p>
<h2 id="types-and-custom-completions" tabindex="-1"> Types and custom completions</h2>
<p>In the above example, you'll notice some types are followed by <code>@</code> followed by the name of a command. We talk more about <a href="/book/custom_completions.html">custom completions</a> in their own section.</p>
<p>Both the type (or shape) of the argument and the custom completion tell Nushell about how to complete values for that flag or position. For example, setting a shape to <code>path</code> allows Nushell to complete the value to a filepath for you. Using the <code>@</code> with a custom completion overrides this default behavior, letting the custom completion give you full completion list.</p>
<h2 id="limitations" tabindex="-1"> Limitations</h2>
<p>There are a few limitations to the current <code>extern</code> syntax. In Nushell, flags and positional arguments are very flexible: flags can precede positional arguments, flags can be mixed into positional arguments, and flags can follow positional arguments. Many external commands are not this flexible. There is not yet a way to require a particular ordering of flags and positional arguments to the style required by the external.</p>
<p>The second limitation is that some externals require flags to be passed using <code>=</code> to separate the flag and the value. In Nushell, the <code>=</code> is a convenient optional syntax and there's currently no way to require its use.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Installing Nu</title>
      <link>www.nushell.sh/book/installation.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/installation.html</guid>
      <source url="www.nushell.sh/rss.xml">Installing Nu</source>
      <content:encoded><![CDATA[<h1 id="installing-nu" tabindex="-1"> Installing Nu</h1>
<p>There are lots of ways to get Nu up and running. You can download pre-built binaries from our <a href="https://github.com/nushell/nushell/releases" target="_blank" rel="noopener noreferrer">release page</a>, <a href="https://repology.org/project/nushell/versions" target="_blank" rel="noopener noreferrer">use your favourite package manager</a>, or build from source.</p>
<h2 id="pre-built-binaries" tabindex="-1"> Pre-built binaries</h2>
<p>Nu binaries are published for Linux, macOS, and Windows <a href="https://github.com/nushell/nushell/releases" target="_blank" rel="noopener noreferrer">with each GitHub release</a>. Just download, extract the binaries, then copy them to a location on your PATH.</p>
<h2 id="package-managers" tabindex="-1"> Package managers</h2>
<p>Nu is available via several package managers:</p>
<p><a href="https://repology.org/project/nushell/versions" target="_blank" rel="noopener noreferrer"><img src="https://repology.org/badge/vertical-allrepos/nushell.svg" alt="Packaging status"></a></p>
<p>For macOS and Linux, <a href="https://brew.sh/" target="_blank" rel="noopener noreferrer">Homebrew</a> is a popular choice (<code>brew install nushell</code>).</p>
<p>For Windows:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/windows/package-manager/winget/" target="_blank" rel="noopener noreferrer">Winget</a> (<code>winget install nushell</code>)</li>
<li><a href="https://chocolatey.org/" target="_blank" rel="noopener noreferrer">Chocolatey</a> (<code>choco install nushell</code>)</li>
<li><a href="https://scoop.sh/" target="_blank" rel="noopener noreferrer">Scoop</a> (<code>scoop install nu</code>)</li>
</ul>
<h2 id="build-from-source" tabindex="-1"> Build from source</h2>
<p>You can also build Nu from source. First, you will need to set up the Rust toolchain and its dependencies.</p>
<h3 id="installing-a-compiler-suite" tabindex="-1"> Installing a compiler suite</h3>
<p>For Rust to work properly, you'll need to have a compatible compiler suite installed on your system. These are the recommended compiler suites:</p>
<ul>
<li>Linux: GCC or Clang</li>
<li>macOS: Clang (install Xcode)</li>
<li>Windows: MSVC (install <a href="https://visualstudio.microsoft.com/vs/community/" target="_blank" rel="noopener noreferrer">Visual Studio</a> or the <a href="https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022" target="_blank" rel="noopener noreferrer">Visual Studio Build Tools</a>)
<ul>
<li>Make sure to install the &quot;Desktop development with C++&quot; workload</li>
<li>Any Visual Studio edition will work (Community is free)</li>
</ul>
</li>
</ul>
<h3 id="installing-rust" tabindex="-1"> Installing Rust</h3>
<p>If we don't already have Rust on our system, the best way to install it is via <a href="https://rustup.rs/" target="_blank" rel="noopener noreferrer">rustup</a>. Rustup is a way of managing Rust installations, including managing using different Rust versions.</p>
<p>Nu currently requires the <strong>latest stable (1.60 or later)</strong> version of Rust. The best way is to let <code>rustup</code> find the correct version for you. When you first open <code>rustup</code> it will ask what version of Rust you wish to install:</p>
<div><pre><code>Current installation options:

default <span>host</span> triple: x86_64-unknown-linux-gnu
default toolchain: stable
profile: default
modify <span>PATH</span> variable: <span>yes</span>

<span>1</span><span>)</span> Proceed with installation <span>(</span>default<span>)</span>
<span>2</span><span>)</span> Customize installation
<span>3</span><span>)</span> Cancel installation
</code></pre></div><p>Once we are ready, we press 1 and then enter.</p>
<p>If you'd rather not install Rust via <code>rustup</code>, you can also install it via other methods (e.g. from a package in a Linux distro). Just be sure to install a version of Rust that is 1.60 or later.</p>
<h3 id="dependencies" tabindex="-1"> Dependencies</h3>
<h4 id="debian-ubuntu" tabindex="-1"> Debian/Ubuntu</h4>
<p>You will need to install the &quot;pkg-config&quot; and &quot;libssl-dev&quot; package:</p>
<div><pre><code><span>apt</span> <span>install</span> pkg-config libssl-dev
</code></pre></div><p>Linux users who wish to use the <code>rawkey</code> or <code>clipboard</code> optional features will need to install the &quot;libx11-dev&quot; and &quot;libxcb-composite0-dev&quot; packages:</p>
<div><pre><code><span>apt</span> <span>install</span> libxcb-composite0-dev libx11-dev
</code></pre></div><h4 id="rhel-based-distros" tabindex="-1"> RHEL based distros</h4>
<p>You will need to install &quot;libxcb&quot;, &quot;openssl-devel&quot; and &quot;libX11-devel&quot;:</p>
<div><pre><code>yum <span>install</span> libxcb openssl-devel libX11-devel
</code></pre></div><h4 id="macos" tabindex="-1"> macOS</h4>
<p>Using <a href="https://brew.sh/" target="_blank" rel="noopener noreferrer">Homebrew</a>, you will need to install &quot;openssl&quot; and &quot;cmake&quot; using:</p>
<div><pre><code>brew <span>install</span> openssl cmake
</code></pre></div><h3 id="build-using-crates-io" tabindex="-1"> Build using <a href="https://crates.io" target="_blank" rel="noopener noreferrer">crates.io</a></h3>
<p>Nu releases are published as source to the popular Rust package registry <a href="https://crates.io/" target="_blank" rel="noopener noreferrer">crates.io</a>. This makes it easy to build+install the latest Nu release with <code>cargo</code>:</p>
<div><pre><code><span>></span> cargo <span>install</span> nu
</code></pre></div><p>That's it! The <code>cargo</code> tool will do the work of downloading Nu and its source dependencies, building it, and installing it into the cargo bin path so we can run it.</p>
<p>If you want to install with more features, you can use:</p>
<div><pre><code><span>></span> cargo <span>install</span> nu --features<span>=</span>extra
</code></pre></div><p>Once installed, we can run Nu using the <code>nu</code> command:</p>
<div><pre><code>$ nu
/home/jt/Source<span>></span>
</code></pre></div><h3 id="building-from-the-github-repository" tabindex="-1"> Building from the GitHub repository</h3>
<p>We can also build our own Nu from the latest source on GitHub. This gives us immediate access to the latest features and bug fixes. First, clone the repo:</p>
<div><pre><code><span>></span> <span>git</span> clone https://github.com/nushell/nushell.git
</code></pre></div><p>From there, we can build and run Nu with:</p>
<div><pre><code><span>></span> <span>cd</span> nushell
nushell<span>></span> cargo build --workspace --features<span>=</span>extra <span>&amp;&amp;</span> cargo run --features<span>=</span>extra
</code></pre></div><p>You can also build and run Nu in release mode:</p>
<div><pre><code>nushell<span>></span> cargo build --release --workspace --features<span>=</span>extra <span>&amp;&amp;</span> cargo run --release --features<span>=</span>extra
</code></pre></div><p>People familiar with Rust may wonder why we do both a &quot;build&quot; and a &quot;run&quot; step if &quot;run&quot; does a build by default. This is to get around a shortcoming of the new <code>default-run</code> option in Cargo, and ensure that all plugins are built, though this may not be required in the future.</p>
<h2 id="setting-the-login-shell-nix" tabindex="-1"> Setting the login shell (*nix)</h2>
<p><strong>!!! Nu is still in development, and may not be stable for everyday use. !!!</strong></p>
<p>To set the login shell you can use the <a href="https://linux.die.net/man/1/chsh" target="_blank" rel="noopener noreferrer"><code>chsh</code></a> command.
Some Linux distributions have a list of valid shells located in <code>/etc/shells</code> and will disallow changing the shell until Nu is in the whitelist. You may see an error similar to the one below if you haven't updated the <code>shells</code> file:</p>
<div><pre><code>chsh: /home/username/.cargo/bin/nu is an invalid shell
</code></pre></div><p>You can add Nu to the list of allowed shells by appending your Nu binary to the <code>shells</code> file.
The path to add can be found with the command <code>which nu</code>, usually it is <code>$HOME/.cargo/bin/nu</code>.</p>
<h2 id="setting-the-default-shell-windows-terminal" tabindex="-1"> Setting the default shell (Windows Terminal)</h2>
<p>If you are using <a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener noreferrer">Windows Terminal</a> you can set <code>nu</code> as your default shell by adding:</p>
<div><pre><code><span>{</span>
  <span>"guid"</span><span>:</span> <span>"{2b372ca1-1ee2-403d-a839-6d63077ad871}"</span>,
  <span>"hidden"</span><span>:</span> false,
  <span>"icon"</span><span>:</span> <span>"https://www.nushell.sh/icon.png"</span>,
  <span>"name"</span><span>:</span> <span>"Nu Shell"</span>,
  <span>"commandline"</span><span>:</span> <span>"nu.exe"</span>
<span>}</span>
</code></pre></div><p>to <code>&quot;profiles&quot;</code> in your Terminal Settings (JSON-file). The last thing to do is to change the <code>&quot;defaultProfile&quot;</code> to:</p>
<div><pre><code><span>"defaultProfile"</span><span>:</span> <span>"{2b372ca1-1ee2-403d-a839-6d63077ad871}"</span>,
</code></pre></div><p>Now, <code>nu</code> should load on startup of the Windows Terminal.</p>
]]></content:encoded>
      <enclosure url="https://repology.org/badge/vertical-allrepos/nushell.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>Reedline, Nu&amp;apos;s line editor</title>
      <link>www.nushell.sh/book/line_editor.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/line_editor.html</guid>
      <source url="www.nushell.sh/rss.xml">Reedline, Nu's line editor</source>
      <content:encoded><![CDATA[<h1 id="reedline-nu-s-line-editor" tabindex="-1"> Reedline, Nu's line editor</h1>
<p>Nushell's line editor <a href="https://github.com/nushell/reedline" target="_blank" rel="noopener noreferrer">Reedline</a> is a
cross platform line reader designed to be modular and flexible. The engine is
in charge of controlling the command history, validations, completions, hints
and screen paint.</p>
<h2 id="configuration" tabindex="-1"> Configuration</h2>
<h3 id="editing-mode" tabindex="-1"> Editing mode</h3>
<p>Reedline allows you to edit text using two modes: vi and emacs. If not
specified, the default edit mode is emacs mode. In order to select your
favorite you need to modify your config file and write down your preferred
mode.</p>
<p>For example:</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.
    edit_mode: emacs
    <span>..</span>.
  <span>}</span>
</code></pre></div><h4 id="default-keybindings" tabindex="-1"> Default keybindings</h4>
<p>Each edit mode comes with the usual keybinding for vi and emacs text editing.</p>
<p>Emacs and Vi Insert keybindings</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Event</th>
</tr>
</thead>
<tbody>
<tr>
<td>Esc</td>
<td>Esc</td>
</tr>
<tr>
<td>Backspace</td>
<td>Backspace</td>
</tr>
<tr>
<td>End</td>
<td>Move to end of line</td>
</tr>
<tr>
<td>End</td>
<td>Complete history hint</td>
</tr>
<tr>
<td>Home</td>
<td>Move to line start</td>
</tr>
<tr>
<td>Ctr + c</td>
<td>Cancel current line</td>
</tr>
<tr>
<td>Ctr + l</td>
<td>Clear screen</td>
</tr>
<tr>
<td>Ctr + r</td>
<td>Search history</td>
</tr>
<tr>
<td>Ctr + Right</td>
<td>Complete history word</td>
</tr>
<tr>
<td>Ctr + Right</td>
<td>Move word right</td>
</tr>
<tr>
<td>Ctr + Left</td>
<td>Move word left</td>
</tr>
<tr>
<td>Up</td>
<td>Move menu up</td>
</tr>
<tr>
<td>Up</td>
<td>Move up</td>
</tr>
<tr>
<td>Down</td>
<td>Move menu down</td>
</tr>
<tr>
<td>Down</td>
<td>Move down</td>
</tr>
<tr>
<td>Left</td>
<td>Move menu left</td>
</tr>
<tr>
<td>Left</td>
<td>Move left</td>
</tr>
<tr>
<td>Right</td>
<td>History hint complete</td>
</tr>
<tr>
<td>Right</td>
<td>Move menu right</td>
</tr>
<tr>
<td>Right</td>
<td>Move right</td>
</tr>
<tr>
<td>Ctr + b</td>
<td>Move menu left</td>
</tr>
<tr>
<td>Ctr + b</td>
<td>Move left</td>
</tr>
<tr>
<td>Ctr + f</td>
<td>History hint complete</td>
</tr>
<tr>
<td>Ctr + f</td>
<td>Move menu right</td>
</tr>
<tr>
<td>Ctr + f</td>
<td>Move right</td>
</tr>
<tr>
<td>Ctr + p</td>
<td>Move menu up</td>
</tr>
<tr>
<td>Ctr + p</td>
<td>Move up</td>
</tr>
<tr>
<td>Ctr + n</td>
<td>Move menu down</td>
</tr>
<tr>
<td>Ctr + n</td>
<td>Move down</td>
</tr>
</tbody>
</table>
<p>Vi Normal keybindings</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Event</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctr + c</td>
<td>Cancel current line</td>
</tr>
<tr>
<td>Ctr + l</td>
<td>Clear screen</td>
</tr>
<tr>
<td>Up</td>
<td>Move menu up</td>
</tr>
<tr>
<td>Up</td>
<td>Move up</td>
</tr>
<tr>
<td>Down</td>
<td>Move menu down</td>
</tr>
<tr>
<td>Down</td>
<td>Move down</td>
</tr>
<tr>
<td>Left</td>
<td>Move menu left</td>
</tr>
<tr>
<td>Left</td>
<td>Move left</td>
</tr>
<tr>
<td>Right</td>
<td>Move menu right</td>
</tr>
<tr>
<td>Right</td>
<td>Move right</td>
</tr>
</tbody>
</table>
<p>Besides the previous keybindings, while in Vi normal mode you can use the classic
vi mode of executing actions by selecting a motion or an action. The available
options for the combinations are:</p>
<p>Vi Normal motions</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>motion</th>
</tr>
</thead>
<tbody>
<tr>
<td>w</td>
<td>Word</td>
</tr>
<tr>
<td>d</td>
<td>Line end</td>
</tr>
<tr>
<td>0</td>
<td>Line start</td>
</tr>
<tr>
<td>$</td>
<td>Line end</td>
</tr>
<tr>
<td>f</td>
<td>Right until char</td>
</tr>
<tr>
<td>t</td>
<td>Right before char</td>
</tr>
<tr>
<td>F</td>
<td>Left until char</td>
</tr>
<tr>
<td>T</td>
<td>Left before char</td>
</tr>
</tbody>
</table>
<p>Vi Normal actions</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>action</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>Delete</td>
</tr>
<tr>
<td>p</td>
<td>Paste after</td>
</tr>
<tr>
<td>P</td>
<td>Paste before</td>
</tr>
<tr>
<td>h</td>
<td>Move left</td>
</tr>
<tr>
<td>l</td>
<td>Move right</td>
</tr>
<tr>
<td>j</td>
<td>Move down</td>
</tr>
<tr>
<td>k</td>
<td>Move up</td>
</tr>
<tr>
<td>w</td>
<td>Move word right</td>
</tr>
<tr>
<td>b</td>
<td>Move word left</td>
</tr>
<tr>
<td>i</td>
<td>Enter Vi insert at current char</td>
</tr>
<tr>
<td>a</td>
<td>Enter Vi insert after char</td>
</tr>
<tr>
<td>0</td>
<td>Move to start of line</td>
</tr>
<tr>
<td>^</td>
<td>Move to start of line</td>
</tr>
<tr>
<td>$</td>
<td>Move to end of line</td>
</tr>
<tr>
<td>u</td>
<td>Undo</td>
</tr>
<tr>
<td>c</td>
<td>Change</td>
</tr>
<tr>
<td>x</td>
<td>Delete char</td>
</tr>
<tr>
<td>s</td>
<td>History search</td>
</tr>
<tr>
<td>D</td>
<td>Delete to end</td>
</tr>
<tr>
<td>A</td>
<td>Append to end</td>
</tr>
</tbody>
</table>
<h3 id="command-history" tabindex="-1"> Command history</h3>
<p>As mentioned before, Reedline manages and stores all the commands that are
edited and sent to Nushell. To configure the max number of records that
Reedline should store you will need to adjust this value in your config file:</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.
    max_history_size: <span>1000</span>
    <span>..</span>.
  <span>}</span>
</code></pre></div><h3 id="customizing-your-prompt" tabindex="-1"> Customizing your prompt</h3>
<p>Reedline prompt is also highly customizable. In order to construct your perfect
prompt, you could define the next environmental variables in your config file:</p>
<div><pre><code><span># Use nushell functions to define your right and left prompt</span>
def create_left_prompt <span>[</span><span>]</span> <span>{</span>
    <span>let</span> path_segment <span>=</span> <span>(</span><span>$env</span><span>.</span><span>PWD</span><span>)</span>

    <span>$path_segment</span>
<span>}</span>

def create_right_prompt <span>[</span><span>]</span> <span>{</span>
    <span>let</span> time_segment <span>=</span> <span>(</span><span>[</span>
        <span>(</span>date now <span>|</span> <span>date</span> <span>format</span> <span>'%m/%d/%Y %r'</span><span>)</span>
    <span>]</span> <span>|</span> str collect<span>)</span>

    <span>$time_segment</span>
<span>}</span>

let-env PROMPT_COMMAND <span>=</span> <span>{</span> create_left_prompt <span>}</span>
let-env PROMPT_COMMAND_RIGHT <span>=</span> <span>{</span> create_right_prompt <span>}</span>
</code></pre></div><div><p>TIP</p>
<p>You don't have to define the environmental variables using Nushell
functions. You can use simple strings to define them.</p>
</div>
<p>You can also customize the prompt indicator for the line editor by modifying
the next env variables.</p>
<div><pre><code>let-env PROMPT_INDICATOR <span>=</span> <span>"〉"</span>
let-env PROMPT_INDICATOR_VI_INSERT <span>=</span> <span>": "</span>
let-env PROMPT_INDICATOR_VI_NORMAL <span>=</span> <span>"〉"</span>
let-env PROMPT_MULTILINE_INDICATOR <span>=</span> <span>"::: "</span>
</code></pre></div><div><p>TIP</p>
<p>The prompt indicators are environmental variables that represent the
state of the prompt</p>
</div>
<h2 id="keybindings" tabindex="-1"> Keybindings</h2>
<p>Reedline keybindings are powerful constructs that let you build chains of
events that can be triggered with a specific combination of keys.</p>
<p>For example, let's say that you would like to map the completion menu to the
<code>Ctrl + t</code> keybinding (default is <code>tab</code>). You can add the next entry to your
config file.</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    keybindings: <span>[</span>
      <span>{</span>
        name: completion_menu
        modifier: control
        keycode: char_t
        mode: emacs
        event: <span>{</span> send: menu name: completion_menu <span>}</span>
      <span>}</span>
    <span>]</span>

    <span>..</span>.
  <span>}</span>
</code></pre></div><p>After loading this new <code>config.nu</code>, your new keybinding (<code>Ctrl + t</code>) will open
the completion command.</p>
<p>Each keybinding requires the next elements:</p>
<ul>
<li>name: Unique name for your keybinding for easy reference in <code>$config.keybindings</code></li>
<li>modifier: A key modifier for the keybinding. The options are:
<ul>
<li>none</li>
<li>control</li>
<li>alt</li>
<li>shift</li>
<li>control | alt</li>
<li>control | alt | shift</li>
</ul>
</li>
<li>keycode: This represent the key to be pressed</li>
<li>mode: emacs, vi_insert, vi_normal (a single string or a list. e.g.
[<code>vi_insert</code> <code>vi_normal</code>])</li>
<li>event: The type of event that is going to be sent by the keybinding. The
options are:
<ul>
<li>send</li>
<li>edit</li>
<li>until</li>
</ul>
</li>
</ul>
<div><p>TIP</p>
<p>All of the available modifiers, keycodes and events can be found with
the command <code>keybindings list</code></p>
</div>
<div><p>TIP</p>
<p>The keybindings added to <code>vi_insert</code> mode will be available when the
line editor is in insert mode (when you can write text), and the keybindings
marked with <code>vi_normal</code> mode will be available when in normal (when the cursor
moves using h, j, k or l)</p>
</div>
<p>The event section of the keybinding entry is where the actions to be performed
are defined. In this field you can use either a record or a list of records.
Something like this</p>
<div><pre><code>  <span>..</span>.
  event: <span>{</span> send: Enter <span>}</span>
  <span>..</span>.
</code></pre></div><p>or</p>
<div><pre><code>  <span>..</span>.
  event: <span>[</span>
    <span>{</span> edit: Clear <span>}</span>
    <span>{</span> send: Enter <span>}</span>
  <span>]</span>
  <span>..</span>.
</code></pre></div><p>The first keybinding example shown in this page follows the first case; a
single event is sent to the engine.</p>
<p>The next keybinding is an example of a series of events sent to the engine. It
first clears the prompt, inserts a string and then enters that value</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    keybindings: <span>[</span>
    <span>{</span>
      name: change_dir_with_fzf
      modifier: CONTROL
      keycode: Char_t
      mode: emacs
      event:<span>[</span>
          <span>{</span> edit: Clear <span>}</span>
          <span>{</span> edit: InsertString,
            value: <span>"cd (ls | where type == dir | each { |it| <span>$it</span>.name} | str collect (char nl) | fzf | decode utf-8 | str trim)"</span>

          <span>}</span>
          <span>{</span> send: Enter <span>}</span>
        <span>]</span>
    <span>}</span>

    <span>..</span>.
  <span>}</span>
</code></pre></div><p>One disadvantage of the previous keybinding is the fact that the inserted text
will be processed by the validator and saved in the history, making the
keybinding a bit slow and populating the command history with the same command.
For that reason there is the <code>executehostcommand</code> type of event. The next
example does the same as the previous one in a simpler way, sending a single
event to the engine</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    keybindings: <span>[</span>
    <span>{</span>
      name: change_dir_with_fzf
      modifier: CONTROL
      keycode: Char_y
      mode: emacs
      event: <span>{</span>
        send: executehostcommand,
        cmd: <span>"cd (ls | where type == dir | each { |it| <span>$it</span>.name} | str collect (char nl) | fzf | decode utf-8 | str trim)"</span>
      <span>}</span>
    <span>}</span>
  <span>]</span>

    <span>..</span>.
  <span>}</span>
</code></pre></div><p>Before we continue you must have noticed that the syntax changes for edits and
sends, and for that reason it is important to explain them a bit more. A <code>send</code>
is all the <code>Reedline</code> events that can be processed by the engine and an <code>edit</code>
are all the <code>EditCommands</code> that can be processed by the engine.</p>
<h3 id="send-type" tabindex="-1"> Send type</h3>
<p>To find all the available options for <code>send</code> you can use</p>
<div><pre><code>keybindings list <span>|</span> where <span>type</span> <span>==</span> events
</code></pre></div><p>And the syntax for <code>send</code> events is the next one</p>
<div><pre><code>    <span>..</span>.
      event: <span>{</span> send: <span>&lt;</span>NAME OF EVENT FROM LIST<span>></span> <span>}</span>
    <span>..</span>.
</code></pre></div><div><p>TIP</p>
<p>You can write the name of the events with capital letters. The
keybinding parser is case insensitive</p>
</div>
<p>There are two exceptions to this rule: the <code>Menu</code> and <code>ExecuteHostCommand</code>.
Those two events require an extra field to be complete. The <code>Menu</code> needs the
name of the menu to be activated (completion_menu or history_menu)</p>
<div><pre><code>    <span>..</span>.
      event: <span>{</span>
        send: menu
        name: completion_menu
      <span>}</span>
    <span>..</span>.
</code></pre></div><p>and the <code>ExecuteHostCommand</code> requires a valid command that will be sent to the
engine</p>
<div><pre><code>    <span>..</span>.
      event: <span>{</span>
        send: executehostcommand
        cmd: <span>"cd ~"</span>
      <span>}</span>
    <span>..</span>.
</code></pre></div><p>It is worth mentioning that in the events list you will also see <code>Edit([])</code>,
<code>Multiple([])</code> and <code>UntilFound([])</code>. These options are not available for the
parser since they are constructed based on the keybinding definition. For
example, a <code>Multiple([])</code> event is built for you when defining a list of
records in the keybinding's event. An <code>Edit([])</code> event is the same as the
<code>edit</code> type that was mentioned. And the <code>UntilFound([])</code> event is the same as
the <code>until</code> type mentioned before.</p>
<h3 id="edit-type" tabindex="-1"> Edit type</h3>
<p>The <code>edit</code> type is the simplification of the <code>Edit([])</code> event. The <code>event</code> type
simplifies defining complex editing events for the keybindings. To list the
available options you can use the next command</p>
<div><pre><code>keybindings list <span>|</span> where <span>type</span> <span>==</span> edits
</code></pre></div><p>The usual syntax for an <code>edit</code> is the next one</p>
<div><pre><code>    <span>..</span>.
      event: <span>{</span> edit: <span>&lt;</span>NAME OF EDIT FROM LIST<span>></span> <span>}</span>
    <span>..</span>.
</code></pre></div><p>The syntax for the edits in the list that have a <code>()</code> changes a little bit.
Since those edits require an extra value to be fully defined. For example, if
we would like to insert a string where the prompt is located, then you will
have to use</p>
<div><pre><code>    <span>..</span>.
      event: <span>{</span>
        edit: insertstring
        value: <span>"MY NEW STRING"</span>
      <span>}</span>
    <span>..</span>.
</code></pre></div><p>or say you want to move right until the first <code>S</code></p>
<div><pre><code>    <span>..</span>.
      event: <span>{</span>
        edit: moverightuntil
        value: <span>"S"</span>
      <span>}</span>
    <span>..</span>.
</code></pre></div><p>As you can see, these two types will allow you to construct any type of
keybinding that you require</p>
<h3 id="until-type" tabindex="-1"> Until type</h3>
<p>To complete this keybinding tour we need to discuss the <code>until</code> type for event.
As you have seen so far, you can send a single event or a list of events. And
as we have seen, when a list of events is sent, each and every one of them is
processed.</p>
<p>However, there may be cases when you want to assign different events to the
same keybinding. This is especially useful with Nushell menus. For example, say
you still want to activate your completion menu with <code>Ctrl + t</code> but you also
want to move to the next element in the menu once it is activated using the
same keybinding.</p>
<p>For these cases, we have the <code>until</code> keyword. The events listed inside the
until event will be processed one by one with the difference that as soon as
one is successful, the event processing is stopped.</p>
<p>The next keybinding represents this case.</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    keybindings: <span>[</span>
      <span>{</span>
        name: completion_menu
        modifier: control
        keycode: char_t
        mode: emacs
        event: <span>{</span>
          until: <span>[</span>
            <span>{</span> send: menu name: completion_menu <span>}</span>
            <span>{</span> send: menunext <span>}</span>
          <span>]</span>
        <span>}</span>
      <span>}</span>
    <span>]</span>

    <span>..</span>.
  <span>}</span>
</code></pre></div><p>The previous keybinding will first try to open a completion menu. If the menu
is not active, it will activate it and send a success signal. If the keybinding
is pressed again, since there is an active menu, then the next event it will
send is MenuNext, which means that it will move the selector to the next
element in the menu.</p>
<p>As you can see the <code>until</code> keyword allows us to define two events for the same
keybinding. At the moment of this writing, only the Menu events allow this type
of layering. The other non menu event types will always return a success value,
meaning that the <code>until</code> event will stop as soon as it reaches the command.</p>
<p>For example, the next keybinding will always send a <code>down</code> because that event
is always successful</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    keybindings: <span>[</span>
      <span>{</span>
        name: completion_menu
        modifier: control
        keycode: char_t
        mode: emacs
        event: <span>{</span>
          until: <span>[</span>
            <span>{</span> send: down <span>}</span>
            <span>{</span> send: menu name: completion_menu <span>}</span>
            <span>{</span> send: menunext <span>}</span>
          <span>]</span>
        <span>}</span>
      <span>}</span>
    <span>]</span>

    <span>..</span>.
  <span>}</span>
</code></pre></div><h3 id="removing-a-default-keybinding" tabindex="-1"> Removing a default keybinding</h3>
<p>If you want to remove a certain default keybinding without replacing it with a different action, you can set <code>event: null</code>.</p>
<p>e.g. to disable screen clearing with <code>Ctrl + l</code> for all edit modes</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    keybindings: <span>[</span>
      <span>{</span>
        modifier: control
        keycode: char_l
        mode: <span>[</span>emacs, vi_normal, vi_insert<span>]</span>
        event: null
      <span>}</span>
    <span>]</span>

    <span>..</span>.
  <span>}</span>

</code></pre></div><h3 id="troubleshooting-keybinding-problems" tabindex="-1"> Troubleshooting keybinding problems</h3>
<p>Your terminal environment may not always propagate your key combinations on to nushell the way you expect it to.
You can use the command <code>keybindings listen</code> to figure out if certain keypresses are actually received by nushell, and how.</p>
<h2 id="menus" tabindex="-1"> Menus</h2>
<p>Thanks to Reedline, Nushell has menus that can help you with your day to day
shell scripting. Next we present the default menus that are always available
when using Nushell</p>
<h3 id="help-menu" tabindex="-1"> Help menu</h3>
<p>The help menu is there to ease your transition into Nushell. Say you are
putting together an amazing pipeline and then you forgot the internal command
that would reverse a string for you. Instead of deleting your pipe, you can
activate the help menu with <code>ctr+q</code>. Once active just type keywords for the
command you are looking for and the menu will show you commands that match your
input. The matching is done on the name of the commands or the commands
description.</p>
<p>To navigate the menu you can select the next element by using <code>tab</code>, you can
scroll the description by pressing left or right and you can even paste into
the line the available command examples.</p>
<p>The help menu can be configured by modifying the next parameters</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    menus <span>=</span> <span>[</span>
      <span>..</span>.
      <span>{</span>
        name: help_menu
        only_buffer_difference: <span>true</span> <span># Search is done on the text written after activating the menu</span>
        marker: <span>"? "</span>                 <span># Indicator that appears with the menu is active</span>
        type: <span>{</span>
            layout: description      <span># Type of menu</span>
            columns: <span>4</span>               <span># Number of columns where the options are displayed</span>
            col_width: <span>20</span>            <span># Optional value. If missing all the screen width is used to calculate column width</span>
            col_padding: <span>2</span>           <span># Padding between columns</span>
            selection_rows: <span>4</span>        <span># Number of rows allowed to display found options</span>
            description_rows: <span>10</span>     <span># Number of rows allowed to display command description</span>
        <span>}</span>
        style: <span>{</span>
            text: green                   <span># Text style</span>
            selected_text: green_reverse  <span># Text style for selected option</span>
            description_text: yellow      <span># Text style for description</span>
        <span>}</span>
      <span>}</span>
      <span>..</span>.
    <span>]</span>
    <span>..</span>.
</code></pre></div><h3 id="completion-menu" tabindex="-1"> Completion menu</h3>
<p>The completion menu is a context sensitive menu that will present suggestions
based on the status of the prompt. These suggestions can range from path
suggestions to command alternatives. While writing a command, you can activate
the menu to see available flags for an internal command. Also, if you have
defined your custom completions for external commands, these will appear in the
menu as well.</p>
<p>The completion menu by default is accessed by pressing <code>tab</code> and it can be configured by
modifying these values from the config object:</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    menus <span>=</span> <span>[</span>
      <span>..</span>.
      <span>{</span>
        name: completion_menu
        only_buffer_difference: <span>false</span> <span># Search is done on the text written after activating the menu</span>
        marker: <span>"| "</span>                  <span># Indicator that appears with the menu is active</span>
        type: <span>{</span>
            layout: columnar          <span># Type of menu</span>
            columns: <span>4</span>                <span># Number of columns where the options are displayed</span>
            col_width: <span>20</span>             <span># Optional value. If missing all the screen width is used to calculate column width</span>
            col_padding: <span>2</span>            <span># Padding between columns</span>
        <span>}</span>
        style: <span>{</span>
            text: green                   <span># Text style</span>
            selected_text: green_reverse  <span># Text style for selected option</span>
            description_text: yellow      <span># Text style for description</span>
        <span>}</span>
      <span>}</span>
      <span>..</span>.
    <span>]</span>
    <span>..</span>.
</code></pre></div><p>By modifying these parameters you can customize the layout of your menu to your
liking.</p>
<h3 id="history-menu" tabindex="-1"> History menu</h3>
<p>The history menu is a handy way to access the editor history. When activating
the menu (default <code>Ctrl+x</code>) the command history is presented in reverse
chronological order, making it extremely easy to select a previous command.</p>
<p>The history menu can be configured by modifying these values from the config object:</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    menus <span>=</span> <span>[</span>
      <span>..</span>.
      <span>{</span>
        name: help_menu
        only_buffer_difference: <span>true</span> <span># Search is done on the text written after activating the menu</span>
        marker: <span>"? "</span>                 <span># Indicator that appears with the menu is active</span>
        type: <span>{</span>
            layout: list             <span># Type of menu</span>
            page_size: <span>10</span>            <span># Number of entries that will presented when activating the menu</span>
        <span>}</span>
        style: <span>{</span>
            text: green                   <span># Text style</span>
            selected_text: green_reverse  <span># Text style for selected option</span>
            description_text: yellow      <span># Text style for description</span>
        <span>}</span>
      <span>}</span>
      <span>..</span>.
    <span>]</span>
    <span>..</span>.
</code></pre></div><p>When the history menu is activated, it pulls <code>page_size</code> records from the
history and presents them in the menu. If there is space in the terminal, when
you press <code>Ctrl+x</code> again the menu will pull the same number of records and
append them to the current page. If it isn't possible to present all the pulled
records, the menu will create a new page. The pages can be navigated by
pressing <code>Ctrl+z</code> to go to previous page or <code>Ctrl+x</code> to go to next page.</p>
<h4 id="searching-the-history" tabindex="-1"> Searching the history</h4>
<p>To search in your history you can start typing key words for the command you
are looking for. Once the menu is activated, anything that you type will be
replaced by the selected command from your history. for example, say that you
have already typed this</p>
<div><pre><code><span>let</span> a <span>=</span> <span>(</span><span>)</span>
</code></pre></div><p>you can place the cursor inside the <code>()</code> and activate the menu. You can filter
the history by typing key words and as soon as you select an entry, the typed
words will be replaced</p>
<div><pre><code><span>let</span> a <span>=</span> <span>(</span>ls <span>|</span> where size <span>></span> 10MiB<span>)</span>
</code></pre></div><h4 id="menu-quick-selection" tabindex="-1"> Menu quick selection</h4>
<p>Another nice feature of the menu is the ability to quick select something from
it. Say you have activated your menu and it looks like this</p>
<div><pre><code><span>></span>
<span>0</span>: <span>ls</span> <span>|</span> where size <span>></span> 10MiB
<span>1</span>: <span>ls</span> <span>|</span> where size <span>></span> 20MiB
<span>2</span>: <span>ls</span> <span>|</span> where size <span>></span> 30MiB
<span>3</span>: <span>ls</span> <span>|</span> where size <span>></span> 40MiB
</code></pre></div><p>Instead of pressing down to select the fourth entry, you can type <code>!3</code> and
press enter. This will insert the selected text in the prompt position, saving
you time scrolling down the menu.</p>
<p>History search and quick selection can be used together. You can activate the
menu, do a quick search, and then quick select using the quick selection
character.</p>
<h3 id="user-defined-menus" tabindex="-1"> User defined menus</h3>
<p>In case you find that the default menus are not enough for you and you have
the need to create your own menu, Nushell can help you with that.</p>
<p>In order to add a new menu that fulfills your needs, you can use one of the default
layouts as a template. The templates available in nushell are columnar, list or
description.</p>
<p>The columnar menu will show you data in a columnar fashion adjusting the column
number based on the size of the text displayed in your columns.</p>
<p>The list type of menu will always display suggestions as a list, giving you the
option to select values using <code>!</code> plus number combination.</p>
<p>The description type will give you more space to display a description for some
values, together with extra information that could be inserted into the buffer.</p>
<p>Let's say we want to create a menu that displays all the variables created
during your session, we are going to call it <code>vars_menu</code>. This menu will use a
list layout (layout: list). To search for values, we want to use only the things
that are written after the menu has been activated (only_buffer_difference:
true).</p>
<p>With that in mind, the desired menu would look like this</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    menus <span>=</span> <span>[</span>
      <span>..</span>.
      <span>{</span>
        name: vars_menu
        only_buffer_difference: <span>true</span>
        marker: <span>"# "</span>
        type: <span>{</span>
            layout: list
            page_size: <span>10</span>
        <span>}</span>
        style: <span>{</span>
            text: green
            selected_text: green_reverse
            description_text: yellow
        <span>}</span>
        source: <span>{</span> <span>|</span>buffer, position<span>|</span>
            <span>$nu</span>.scope.vars
            <span>|</span> where name <span>=~</span> <span>$buffer</span>
            <span>|</span> sort-by name
            <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> <span>{</span>value: <span>$it</span>.name description: <span>$it</span>.type<span>}</span> <span>}</span>
        <span>}</span>
      <span>}</span>
      <span>..</span>.
    <span>]</span>
    <span>..</span>.
</code></pre></div><p>As you can see, the new menu is identical to the <code>history_menu</code> previously
described. The only huge difference is the new field called <code>source</code>. The
<code>source</code> field is a nushell definition of the values you want to display in the
menu. For this menu we are extracting the data from <code>$nu.scope.vars</code> and we
are using it to create records that will be used to populate the menu.</p>
<p>The required structure for the record is the next one</p>
<div><pre><code><span>{</span>
  value:       <span># The value that will be inserted in the buffer</span>
  description: <span># Optional. Description that will be display with the selected value</span>
  span: <span>{</span>      <span># Optional. Span indicating what section of the string will be replaced by the value</span>
    start:
    end:
  <span>}</span>
  extra: <span>[</span>string<span>]</span> <span># Optional. A list of strings that will be displayed with the selected value. Only works with a description menu</span>
<span>}</span>
</code></pre></div><p>For the menu to display something, at least the <code>value</code> field has to be present
in the resulting record.</p>
<p>In order to make the menu interactive, these two variables are available in
the block: <code>$buffer</code> and <code>$position</code>. The <code>$buffer</code> contains the value captured
by the menu, when the option <code>only_buffer_difference</code> is true, <code>$buffer</code> is the
text written after the menu was activated. If <code>only_buffer_difference</code> is
false, <code>$buffer</code> is all the string in line. The <code>$position</code> variable can be
used to create replacement spans based on the idea you had for your menu. The
value of <code>$position</code> changes based on whether <code>only_buffer_difference</code> is true
or false. When true, <code>$position</code> is the starting position in the string where
text was inserted after the menu was activated. When the value is false,
<code>$position</code> indicates the actual cursor position.</p>
<p>Using this information, you can design your menu to present the information you
require and to replace that value in the location you need it. The only thing
extra that you need to play with your menu is to define a keybinding that will
activate your brand new menu.</p>
<h3 id="menu-keybindings" tabindex="-1"> Menu keybindings</h3>
<p>In case you want to change the default way both menus are activated, you can
change that by defining new keybindings. For example, the next two keybindings
assign the completion and history menu to <code>Ctrl+t</code> and <code>Ctrl+y</code> respectively</p>
<div><pre><code>  <span>let</span> <span>$config</span> <span>=</span> <span>{</span>
    <span>..</span>.

    keybindings: <span>[</span>
      <span>{</span>
        name: completion_menu
        modifier: control
        keycode: char_t
        mode: <span>[</span>vi_insert vi_normal<span>]</span>
        event: <span>{</span>
          until: <span>[</span>
            <span>{</span> send: menu name: completion_menu <span>}</span>
            <span>{</span> send: menupagenext <span>}</span>
          <span>]</span>
        <span>}</span>
      <span>}</span>
      <span>{</span>
        name: history_menu
        modifier: control
        keycode: char_y
        mode: <span>[</span>vi_insert vi_normal<span>]</span>
        event: <span>{</span>
          until: <span>[</span>
            <span>{</span> send: menu name: history_menu <span>}</span>
            <span>{</span> send: menupagenext <span>}</span>
          <span>]</span>
        <span>}</span>
      <span>}</span>
    <span>]</span>

    <span>..</span>.
  <span>}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Loading data</title>
      <link>www.nushell.sh/book/loading_data.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/loading_data.html</guid>
      <source url="www.nushell.sh/rss.xml">Loading data</source>
      <content:encoded><![CDATA[<h1 id="loading-data" tabindex="-1"> Loading data</h1>
<p>Earlier, we saw how you can use commands like <a href="/book/commands/ls.html"><code>ls</code></a>, <a href="/book/commands/ps.html"><code>ps</code></a>, <a href="/book/commands/date.html"><code>date</code></a>, and <a href="/book/commands/sys.html"><code>sys</code></a> to load information about your files, processes, time of date, and the system itself. Each command gives us a table of information that we can explore. There are other ways we can load in a table of data to work with.</p>
<h2 id="opening-files" tabindex="-1"> Opening files</h2>
<p>One of Nu's most powerful assets in working with data is the <a href="/book/commands/open.html"><code>open</code></a> command. It is a multi-tool that can work with a number of different data formats. To see what this means, let's try opening a json file:</p>
<div><pre><code>> open editors/vscode/package.json
──────────────────┬───────────────────────────────────────────────────────────────────────────────
 name             │ lark
 description      │ Lark support for VS Code
 author           │ Lark developers
 license          │ MIT
 version          │ 1.0.0
 repository       │ [row type url]
 publisher        │ vscode
 categories       │ [table 0 rows]
 keywords         │ [table 1 rows]
 engines          │ [row vscode]
 activationEvents │ [table 1 rows]
 main             │ ./out/extension
 contributes      │ [row configuration grammars languages]
 scripts          │ [row compile postinstall test vscode:prepublish watch]
 devDependencies  │ [row @types/mocha @types/node tslint typescript vscode vscode-languageclient]
──────────────────┴───────────────────────────────────────────────────────────────────────────────
</code></pre></div><p>In a similar way to <a href="/book/commands/ls.html"><code>ls</code></a>, opening a file type that Nu understands will give us back something that is more than just text (or a stream of bytes). Here we open a &quot;package.json&quot; file from a JavaScript project. Nu can recognize the JSON text and parse it to a table of data.</p>
<p>If we wanted to check the version of the project we were looking at, we can use the <a href="/book/commands/get.html"><code>get</code></a> command.</p>
<div><pre><code>> open editors/vscode/package.json | get version
1.0.0
</code></pre></div><p>Nu currently supports the following formats for loading data directly into tables:</p>
<ul>
<li>csv</li>
<li>eml</li>
<li>ics</li>
<li>ini</li>
<li>json</li>
<li>nuon</li>
<li>ods</li>
<li>ssv</li>
<li>toml</li>
<li>tsv</li>
<li>url</li>
<li>vcf</li>
<li>xlsx / xls</li>
<li>xml</li>
<li>yaml / yml</li>
</ul>
<p>But what happens if you load a text file that isn't one of these? Let's try it:</p>
<div><pre><code>> open README.md
</code></pre></div><p>We're shown the contents of the file.</p>
<p>Below the surface, what Nu sees in these text files is one large string. Next, we'll talk about how to work with these strings to get the data we need out of them.</p>
<h2 id="handling-strings" tabindex="-1"> Handling Strings</h2>
<p>An important part of working with data coming from outside Nu is that it's not always in a format that Nu understands. Often this data is given to us as a string.</p>
<p>Let's imagine that we're given this data file:</p>
<div><pre><code>> open people.txt
Octavia | Butler | Writer
Bob | Ross | Painter
Antonio | Vivaldi | Composer
</code></pre></div><p>Each bit of data we want is separated by the pipe ('|') symbol, and each person is on a separate line. Nu doesn't have a pipe-delimited file format by default, so we'll have to parse this ourselves.</p>
<p>The first thing we want to do when bringing in the file is to work with it a line at a time:</p>
<div><pre><code>> open people.txt | lines
───┬──────────────────────────────
 0 │ Octavia | Butler | Writer
 1 │ Bob | Ross | Painter
 2 │ Antonio | Vivaldi | Composer
───┴──────────────────────────────
</code></pre></div><p>We can see that we're working with the lines because we're back into a table. Our next step is to see if we can split up the rows into something a little more useful. For that, we'll use the <a href="/book/commands/split.html"><code>split</code></a> command. <a href="/book/commands/split.html"><code>split</code></a>, as the name implies, gives us a way to split a delimited string. We will use <a href="/book/commands/split.html"><code>split</code></a>'s <code>column</code> subcommand to split the contents across multiple columns. We tell it what the delimiter is, and it does the rest:</p>
<div><pre><code>> open people.txt | lines | split column "|"
───┬──────────┬───────────┬───────────
 # │ column1  │ column2   │ column3
───┼──────────┼───────────┼───────────
 0 │ Octavia  │  Butler   │  Writer
 1 │ Bob      │  Ross     │  Painter
 2 │ Antonio  │  Vivaldi  │  Composer
───┴──────────┴───────────┴───────────
</code></pre></div><p>That <em>almost</em> looks correct. It looks like there's an extra space there. Let's <a href="/book/commands/str_trim.html"><code>trim</code></a> that extra space:</p>
<div><pre><code>> open people.txt | lines | split column "|" | str trim
───┬─────────┬─────────┬──────────
 # │ column1 │ column2 │ column3
───┼─────────┼─────────┼──────────
 0 │ Octavia │ Butler  │ Writer
 1 │ Bob     │ Ross    │ Painter
 2 │ Antonio │ Vivaldi │ Composer
───┴─────────┴─────────┴──────────
</code></pre></div><p>Not bad. The <a href="/book/commands/split.html"><code>split</code></a> command gives us data we can use. It also goes ahead and gives us default column names:</p>
<div><pre><code>> open people.txt | lines | split column "|" | str trim | get column1
───┬─────────
 0 │ Octavia
 1 │ Bob
 2 │ Antonio
───┴─────────
</code></pre></div><p>We can also name our columns instead of using the default names:</p>
<div><pre><code>> open people.txt | lines | split column "|" first_name last_name job | str trim
───┬────────────┬───────────┬──────────
 # │ first_name │ last_name │ job
───┼────────────┼───────────┼──────────
 0 │ Octavia    │ Butler    │ Writer
 1 │ Bob        │ Ross      │ Painter
 2 │ Antonio    │ Vivaldi   │ Composer
───┴────────────┴───────────┴──────────
</code></pre></div><p>Now that our data is in a table, we can use all the commands we've used on tables before:</p>
<div><pre><code>> open people.txt | lines | split column "|" first_name last_name job | str trim | sort-by first_name
───┬────────────┬───────────┬──────────
 # │ first_name │ last_name │ job
───┼────────────┼───────────┼──────────
 0 │ Antonio    │ Vivaldi   │ Composer
 1 │ Bob        │ Ross      │ Painter
 2 │ Octavia    │ Butler    │ Writer
───┴────────────┴───────────┴──────────
</code></pre></div><p>There are other commands you can use to work with strings:</p>
<ul>
<li><code>str</code></li>
<li><a href="/book/commands/lines.html"><code>lines</code></a></li>
<li><a href="/book/commands/size.html"><code>size</code></a></li>
</ul>
<p>There is also a set of helper commands we can call if we know the data has a structure that Nu should be able to understand. For example, let's open a Rust lock file:</p>
<div><pre><code>> open Cargo.lock
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
[[package]]
name = "adhoc_derive"
version = "0.1.2"
</code></pre></div><p>The &quot;Cargo.lock&quot; file is actually a .toml file, but the file extension isn't .toml. That's okay, we can use the <code>from</code> command using the <code>toml</code> subcommand:</p>
<div><pre><code>> open Cargo.lock | from toml
──────────┬───────────────────
 metadata │ [row 107 columns]
 package  │ [table 130 rows]
──────────┴───────────────────
</code></pre></div><p>The <code>from</code> command can be used for each of the structured data text formats that Nu can open and understand by passing it the supported format as a subcommand.</p>
<h2 id="opening-in-raw-mode" tabindex="-1"> Opening in raw mode</h2>
<p>While it's helpful to be able to open a file and immediately work with a table of its data, this is not always what you want to do. To get to the underlying text, the <a href="/book/commands/open.html"><code>open</code></a> command can take an optional <code>--raw</code> flag:</p>
<div><pre><code>> open Cargo.toml --raw
[package]                                                                                        name = "nu"
version = "0.1.3"
authors = ["Yehuda Katz &lt;wycats@gmail.com>", "Jonathan Turner &lt;jonathan.d.turner@gmail.com>"]
description = "A shell for the GitHub era"
license = "MIT"
</code></pre></div><h2 id="fetching-urls" tabindex="-1"> Fetching URLs</h2>
<p>In addition to loading files from your filesystem, you can also load URLs by using the <a href="/book/commands/fetch.html"><code>fetch</code></a> command. This will fetch the contents of the URL from the internet and return it:</p>
<div><pre><code>> fetch https://blog.rust-lang.org/feed.xml
──────┬───────────────────
 feed │ {record 2 fields}
──────┴───────────────────
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Metadata</title>
      <link>www.nushell.sh/book/metadata.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/metadata.html</guid>
      <source url="www.nushell.sh/rss.xml">Metadata</source>
      <content:encoded><![CDATA[<h1 id="metadata" tabindex="-1"> Metadata</h1>
<p>In using Nu, you may have come across times where you felt like there was something extra going on behind the scenes. For example, let's say that you try to open a file that Nu supports only to forget and try to convert again:</p>
<div><pre><code>> open Cargo.toml | from toml
error: Expected a string from pipeline
- shell:1:18
1 | open Cargo.toml | from toml
  |                   ^^^^^^^^^ requires string input
- shell:1:5
1 | open Cargo.toml | from toml
  |      ---------- object originates from here
</code></pre></div><p>The error message tells us not only that what we gave <code>from toml</code> wasn't a string, but also where the value originally came from. How would it know that?</p>
<p>Values that flow through a pipeline in Nu often have a set of additional information, or metadata, attached to them. These are known as tags, like the tags on an item in a store. These tags don't affect the data, but they give Nu a way to improve the experience of working with that data.</p>
<p>Let's run the <a href="/book/commands/open.html"><code>open</code></a> command again, but this time, we'll look at the tags it gives back:</p>
<div><pre><code>> open Cargo.toml | metadata
────────┬───────────────────────────────────────────
 span   │ {record 2 fields}
────────┴───────────────────────────────────────────
</code></pre></div><p>Currently, we track only the span of where values come from. Let's take a closer look at that:</p>
<div><pre><code>> open Cargo.toml | metadata | get span
───────┬────
 start │ 5
 end   │ 15
───────┴────
</code></pre></div><p>The span &quot;start&quot; and &quot;end&quot; here refer to where the underline will be in the line. If you count over 5, and then count up to 15, you'll see it lines up with the &quot;Cargo.toml&quot; filename. This is how the error we saw earlier knew what to underline.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Modules</title>
      <link>www.nushell.sh/book/modules.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/modules.html</guid>
      <source url="www.nushell.sh/rss.xml">Modules</source>
      <content:encoded><![CDATA[<h1 id="modules" tabindex="-1"> Modules</h1>
<p>Similar to many other programming languages, Nushell also has modules that let you import custom commands into a current scope.
However, since Nushell is also a shell, modules allow you to import environment variables which can be used to conveniently activate/deactivate various environments.</p>
<p><em>Note! The current implementation of modules is quite bare-bones and will be expanded in the future. For example, it is not yet possible to import a module from within a module.</em></p>
<h2 id="basics" tabindex="-1"> Basics</h2>
<p>A simple module can be defined like this:</p>
<div><pre><code>> module greetings {
     export def hello [name: string] {
         $"hello ($name)!"
     }

     export def hi [where: string] {
         $"hi ($where)!"
     }
}
</code></pre></div><p>or in a file named the same as the the module you want to create:</p>
<div><pre><code># greetings.nu

export def hello [name: string] {
    $"hello ($name)!"
}

export def hi [where: string] {
    $"hi ($where)!"
}
</code></pre></div><p>We defined <code>hello</code> and <code>hi</code> custom commands inside a <code>greetings</code> module.</p>
<p>The <code>export</code> keyword makes it possible to later import the commands from the module.</p>
<p>Similar to <a href="/book/commands/def.html"><code>def</code></a>, it is also possible to mark <a href="/book/commands/def-env.html"><code>def-env</code></a> with the <code>export</code> keyword (you can learn more about <a href="/book/commands/def-env.html"><code>def-env</code></a> in the <a href="/book/environment.html">Environment</a> chapter).</p>
<h2 id="using-modules" tabindex="-1"> Using modules</h2>
<p>By itself, the module does not do anything. To use what the module exports, we need to <a href="/book/commands/use.html"><code>use</code></a> it.</p>
<div><pre><code>> use greetings

> greetings hello "world"
hello world!

> greetings hi "there"
hi there!
</code></pre></div><p>The <code>hello</code> and <code>hi</code> commands are now available with the <code>greetings</code> prefix.</p>
<h2 id="importing-symbols" tabindex="-1"> Importing symbols</h2>
<p>In general, anything after the <a href="/book/commands/use.html"><code>use</code></a> keyword forms an <strong>import pattern</strong> which controls how the symbols are imported.
The import pattern can be one of the following:</p>
<p><code>use greetings</code></p>
<p>Imports all symbols with the module name as a prefix (we saw this in the previous example).</p>
<p><code>use greetings hello</code></p>
<p>The <code>hello</code> symbol will be imported directly without any prefix.</p>
<p><code>use greetings [ hello, hi ]</code></p>
<p>Imports multiple symbols directly without any prefix</p>
<p><code>use greetings *</code></p>
<p>You can also use the module name and the <code>*</code> glob to import all names directly without any prefix</p>
<h2 id="module-files" tabindex="-1"> Module Files</h2>
<p>Nushell lets you implicitly treat a source file as a module.
Let's start by saving the body of the module definition into a file:</p>
<div><pre><code># greetings.nu

export def hello [name: string] {
    $"hello ($name)!"
}

export def hi [where: string] {
    $"hi ($where)!"
}
</code></pre></div><p>Now, you can call <a href="/book/commands/use.html"><code>use</code></a> directly on the file:</p>
<div><pre><code>> use greetings.nu

> greetings hello "world"
hello world!

> greetings hi "there"
hi there!
</code></pre></div><p>Nushell automatically infers the module's name from the stem of the file (&quot;greetings&quot; without the &quot;.nu&quot; extension).
You can use any import patterns as described above with the file name instead of the module name.</p>
<h2 id="local-custom-commands" tabindex="-1"> Local Custom Commands</h2>
<p>Any custom commands defined in a module without the <code>export</code> keyword will work only in the module's scope:</p>
<div><pre><code># greetings.nu

export def hello [name: string] {
    greetings-helper "hello" "world"
}

export def hi [where: string] {
    greetings-helper "hi" "there"
}

def greetings-helper [greeting: string, subject: string] {
    $"($greeting) ($subject)!"
}
</code></pre></div><p>Then, in Nushell we import all definitions from the &quot;greetings.nu&quot;:</p>
<div><pre><code>> use greetings.nu *

> hello "world"
hello world!

> hi "there"
hi there!

> greetings-helper "foo" "bar"  # fails because 'greetings-helper' is not exported
</code></pre></div><h2 id="environment-variables" tabindex="-1"> Environment Variables</h2>
<p>So far we used modules just to import custom commands.
It is possible to export environment variables the same way.
The syntax is slightly different than what you might be used to from commands like <a href="/book/commands/let-env.html"><code>let-env</code></a> or <a href="/book/commands/load-env.html"><code>load-env</code></a>:</p>
<div><pre><code># greetings.nu

export env MYNAME { "Arthur, King of the Britons" }

export def hello [name: string] {
    $"hello ($name)"
}
</code></pre></div><p><code>use</code> works the same way as with custom commands:</p>
<div><pre><code>> use greetings.nu

> $env."greetings MYNAME"
Arthur, King of the Britons

> greetings hello $env."greetings MYNAME"
hello Arthur, King of the Britons!
</code></pre></div><p>You can notice we do not assign the value to <code>MYNAME</code> directly.
Instead, we give it a block of code (<code>{ ...}</code>) that gets evaluated every time we call <a href="/book/commands/use.html"><code>use</code></a>.
We can demonstrate this property, for example, with the <a href="/book/commands/random.html"><code>random</code></a> command:</p>
<div><pre><code>> module roll { export env ROLL { random dice | into string } }

> use roll ROLL

> $env.ROLL
4

> $env.ROLL
4

> use roll ROLL

> $env.ROLL
6

> $env.ROLL
6
</code></pre></div><h2 id="exporting-symbols" tabindex="-1"> Exporting symbols</h2>
<p>As mentioned above, you can export definitions and environment variables from modules. This lets you more easily group related definitions together and export the ones you want to make public.</p>
<p>You can also export aliases and externs, giving you a way to only use these features when you need. Exporting externs also gives you the ability to hide custom completion commands in a module, so they don't have to be part of the global namespace.</p>
<p>Here's the full list of ways you can export:</p>
<ul>
<li><code>export def</code> - export a custom command</li>
<li><code>export def-env</code> - export a custom environment command</li>
<li><code>export env</code> - export an environment variable</li>
<li><code>export alias</code> - export an alias</li>
<li><code>export extern</code> - export a known external definition</li>
</ul>
<h2 id="hiding" tabindex="-1"> Hiding</h2>
<p>Any custom command, alias or environment variable, imported from a module or not, can be &quot;hidden&quot;, restoring the previous definition.
(Note, it is not yet possible to export aliases from modules but they can still be hidden.)
We do this with the <a href="/book/commands/hide.html"><code>hide</code></a> command:</p>
<div><pre><code>> def foo [] { "foo" }

> foo
foo

> hide foo

> foo  # error! command not found!
</code></pre></div><p>The <a href="/book/commands/hide.html"><code>hide</code></a> command also accepts import patterns, just like <a href="/book/commands/use.html"><code>use</code></a>.
The import pattern is interpreted slightly differently, though.
It can be one of the following:</p>
<p><code>hide foo</code> or <code>hide greetings</code></p>
<ul>
<li>If the name is a custom command or an environment variable, hides it directly. Otherwise:</li>
<li>If the name is a module name, hides all of its exports prefixed with the module name</li>
</ul>
<p><code>hide greetings hello</code></p>
<ul>
<li>Hides only the prefixed command / environment variable</li>
</ul>
<p><code>hide greetings [hello, hi]</code></p>
<ul>
<li>Hides only the prefixed commands / environment variables</li>
</ul>
<p><code>hide greetings *</code></p>
<ul>
<li>Hides all of the module's exports, without the prefix</li>
</ul>
<p>Let's show these with examples.
We saw direct hiding of a custom command already.
Let's try environment variables:</p>
<div><pre><code>> let-env FOO = "FOO"

> $env.FOO
FOO

> hide FOO

> $env.FOO  # error! environment variable not found!
</code></pre></div><p>The first case also applies to commands / environment variables brought from a module (using the &quot;greetings.nu&quot; file defined above):</p>
<div><pre><code>> use greetings.nu *

> $env.MYNAME
Arthur, King of the Britons

> hello "world"
hello world!

> hide MYNAME

> $env.MYNAME  # error! environment variable not found!

> hide hello

> hello "world" # error! command not found!
</code></pre></div><p>And finally, when the name is the module name (assuming the previous <code>greetings</code> module):</p>
<div><pre><code>> use greetings.nu

> $env."greetings MYNAME"
Arthur, King of the Britons

> greetings hello "world"
hello world!

> hide greetings

> $env."greetings MYNAME"  # error! environment variable not found!

> greetings hello "world" # error! command not found!
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Moving around your system</title>
      <link>www.nushell.sh/book/moving_around.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/moving_around.html</guid>
      <source url="www.nushell.sh/rss.xml">Moving around your system</source>
      <content:encoded><![CDATA[<h1 id="moving-around-your-system" tabindex="-1"> Moving around your system</h1>
<p>Early shells allow you to move around your filesystem and run commands, and modern shells like Nu allow you to do the same. Let's take a look at some of the common commands you might use when interacting with your system.</p>
<h2 id="viewing-directory-contents" tabindex="-1"> Viewing directory contents</h2>
<div><pre><code><span>></span> <span>ls</span>
</code></pre></div><p>As we've seen in other chapters, <a href="/book/commands/ls.html"><code>ls</code></a> is a command for viewing the contents of a path. Nu will return the contents as a table that we can use.</p>
<p>The <a href="/book/commands/ls.html"><code>ls</code></a> command also takes an optional argument, to change what you'd like to view. For example, we can list the files that end in &quot;.md&quot;</p>
<div><pre><code><span>></span> <span>ls</span> *.md
───┬────────────────────┬──────┬─────────┬────────────
 <span># │ name               │ type │ size    │ modified </span>
───┼────────────────────┼──────┼─────────┼────────────
 <span>0</span> │ CODE_OF_CONDUCT.md │ File │  <span>3.4</span> KB │ <span>5</span> days ago 
 <span>1</span> │ CONTRIBUTING.md    │ File │   <span>886</span> B │ <span>5</span> days ago 
 <span>2</span> │ README.md          │ File │ <span>15.0</span> KB │ <span>5</span> days ago 
 <span>3</span> │ TODO.md            │ File │  <span>1.6</span> KB │ <span>5</span> days ago 
───┴────────────────────┴──────┴─────────┴────────────
</code></pre></div><p>The asterisk (*) in the above optional argument &quot;*.md&quot; is sometimes called a wildcard or a glob. It lets us match anything. You could read the glob &quot;*.md&quot; as &quot;match any filename, so long as it ends with '.md' &quot;</p>
<p>Nu also uses modern globs as well, which allow you access to deeper directories.</p>
<div><pre><code> <span>ls</span> **/*.md
────┬───────────────────────────────────────────┬──────┬─────────┬────────────
 <span>#  │ name                                      │ type │ size    │ modified </span>
────┼───────────────────────────────────────────┼──────┼─────────┼────────────
  <span>0</span> │ .github/ISSUE_TEMPLATE/bug_report.md      │ File │   <span>592</span> B │ <span>5</span> days ago 
  <span>1</span> │ .github/ISSUE_TEMPLATE/feature_request.md │ File │   <span>595</span> B │ <span>5</span> days ago 
  <span>2</span> │ CODE_OF_CONDUCT.md                        │ File │  <span>3.4</span> KB │ <span>5</span> days ago 
  <span>3</span> │ CONTRIBUTING.md                           │ File │   <span>886</span> B │ <span>5</span> days ago 
  <span>4</span> │ README.md                                 │ File │ <span>15.0</span> KB │ <span>5</span> days ago 
  <span>5</span> │ TODO.md                                   │ File │  <span>1.6</span> KB │ <span>5</span> days ago 
  <span>6</span> │ crates/nu-source/README.md                │ File │  <span>1.7</span> KB │ <span>5</span> days ago 
  <span>7</span> │ docker/packaging/README.md                │ File │  <span>1.5</span> KB │ <span>5</span> days ago 
  <span>8</span> │ docs/commands/README.md                   │ File │   <span>929</span> B │ <span>5</span> days ago 
  <span>9</span> │ docs/commands/alias.md                    │ File │  <span>1.7</span> KB │ <span>5</span> days ago 
 <span>10</span> │ docs/commands/append.md                   │ File │  <span>1.4</span> KB │ <span>5</span> days ago
</code></pre></div><p>Here, we're looking for any file that ends with &quot;.md&quot;, and the two asterisks further say &quot;in any directory starting from here&quot;.</p>
<h2 id="changing-the-current-directory" tabindex="-1"> Changing the current directory</h2>
<div><pre><code><span>></span> <span>cd</span> new_directory
</code></pre></div><p>To change from the current directory to a new one, we use the <code>cd</code> command. Just as in other shells, we can use either the name of the directory, or if we want to go up a directory we can use the <code>..</code> shortcut.</p>
<p>Changing the current working directory can also be done if <code>cd</code> is omitted and a path by itself is given:</p>
<div><pre><code><span>></span> ./new_directory
</code></pre></div><p><strong>Note:</strong> changing the directory with <code>cd</code> changes the <code>PWD</code> environment variable. This means that a change of a directory is kept to the current block. Once you exit the block, you'll return to the previous directory. You can learn more about working with this in the <a href="/book/environment.html">environment chapter</a>.</p>
<h2 id="filesystem-commands" tabindex="-1"> Filesystem commands</h2>
<p>Nu also provides some basic filesystem commands that work cross-platform.</p>
<p>We can move an item from one place to another using the <code>mv</code> command:</p>
<div><pre><code><span>></span> <span>mv</span> item location
</code></pre></div><p>We can copy an item from one location to another:</p>
<div><pre><code><span>></span> <span>cp</span> item location
</code></pre></div><p>We can remove an item:</p>
<div><pre><code><span>></span> <span>rm</span> item
</code></pre></div><p>The three commands also can use the glob capabilities we saw earlier with <a href="/book/commands/ls.html"><code>ls</code></a>.</p>
<p>Finally, we can create a new directory using the <code>mkdir</code> command:</p>
<div><pre><code><span>></span> <span>mkdir</span> new_directory
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Nu map from other shells and domain specific languages</title>
      <link>www.nushell.sh/book/nushell_map.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/nushell_map.html</guid>
      <source url="www.nushell.sh/rss.xml">Nu map from other shells and domain specific languages</source>
      <content:encoded><![CDATA[<h1 id="nu-map-from-other-shells-and-domain-specific-languages" tabindex="-1"> Nu map from other shells and domain specific languages</h1>
<p>The idea behind this table is to help you understand how Nu built-ins and plug-ins relate to other known shells and domain specific languages. We've tried to produce a map of all the Nu commands and what their equivalents are in other languages. Contributions are welcome.</p>
<p>Note: this table assumes Nu 0.43 or later.</p>
<table>
<thead>
<tr>
<th>Nushell</th>
<th>SQL</th>
<th>.Net LINQ (C#)</th>
<th>PowerShell (without external modules)</th>
<th>Bash</th>
</tr>
</thead>
<tbody>
<tr>
<td>alias</td>
<td>-</td>
<td>-</td>
<td>alias</td>
<td>alias</td>
</tr>
<tr>
<td>append</td>
<td>-</td>
<td>Append</td>
<td>-Append</td>
<td></td>
</tr>
<tr>
<td>args</td>
<td>-</td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>autoview</td>
<td>-</td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>math avg</td>
<td>avg</td>
<td>Average</td>
<td>Measure-Object, measure</td>
<td></td>
</tr>
<tr>
<td>calc, <code>&lt;math expression&gt;</code></td>
<td>math operators</td>
<td>Aggregate, Average, Count, Max, Min, Sum</td>
<td></td>
<td>bc</td>
</tr>
<tr>
<td>cd</td>
<td>-</td>
<td>-</td>
<td>Set-Location, cd</td>
<td>cd</td>
</tr>
<tr>
<td>clear</td>
<td>-</td>
<td>-</td>
<td>Clear-Host</td>
<td>clear</td>
</tr>
<tr>
<td>compact</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>config</td>
<td>-</td>
<td>-</td>
<td>$Profile</td>
<td>vi .bashrc, .profile</td>
</tr>
<tr>
<td>count</td>
<td>count</td>
<td>Count</td>
<td>Measure-Object, measure</td>
<td>wc</td>
</tr>
<tr>
<td>cp</td>
<td>-</td>
<td>-</td>
<td>Copy-Item, cp, copy</td>
<td>cp</td>
</tr>
<tr>
<td>date</td>
<td>NOW() / getdate()</td>
<td>DateTime class</td>
<td>Get-Date</td>
<td>date</td>
</tr>
<tr>
<td>debug</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>default</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>drop</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>du</td>
<td>-</td>
<td>-</td>
<td></td>
<td>du</td>
</tr>
<tr>
<td>each</td>
<td>cursor</td>
<td></td>
<td>ForEach-Object, foreach, for</td>
<td></td>
</tr>
<tr>
<td>echo</td>
<td>print, union all</td>
<td>-</td>
<td>Write-Output, write</td>
<td>echo</td>
</tr>
<tr>
<td>enter</td>
<td>-</td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>exit</td>
<td>-</td>
<td></td>
<td>exit</td>
<td>exit</td>
</tr>
<tr>
<td>fetch</td>
<td>-</td>
<td>HttpClient,WebClient, HttpWebRequest/Response</td>
<td>Invoke-WebRequest</td>
<td>wget</td>
</tr>
<tr>
<td>first</td>
<td>top, limit</td>
<td>First, FirstOrDefault</td>
<td>Select-Object -First</td>
<td>head</td>
</tr>
<tr>
<td>format</td>
<td></td>
<td>String.Format</td>
<td>String.Format</td>
<td></td>
</tr>
<tr>
<td>from</td>
<td>import flatfile, openjson, cast(variable as xml)</td>
<td>-</td>
<td>Import/ConvertFrom-{Csv,Xml,Html,Json}</td>
<td></td>
</tr>
<tr>
<td>get</td>
<td></td>
<td>Select</td>
<td>(cmd).column</td>
<td></td>
</tr>
<tr>
<td>group-by</td>
<td>group by</td>
<td>GroupBy, group</td>
<td>Group-Object, group</td>
<td></td>
</tr>
<tr>
<td>headers</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>help</td>
<td>sp_help</td>
<td>-</td>
<td>Get-Help, help, man</td>
<td>man</td>
</tr>
<tr>
<td>histogram</td>
<td>-</td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>history</td>
<td>-</td>
<td>-</td>
<td>Get-History, history</td>
<td>history</td>
</tr>
<tr>
<td>inc(<code>*</code>)</td>
<td>-</td>
<td></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>is_empty</td>
<td>is null</td>
<td>String.InNullOrEmpty</td>
<td>String.InNullOrEmpty</td>
<td></td>
</tr>
<tr>
<td>keep, =take</td>
<td>top, limit</td>
<td>Take</td>
<td>Select-Object -First</td>
<td>head</td>
</tr>
<tr>
<td>keep-until</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>keep-while</td>
<td></td>
<td>TakeWhile</td>
<td></td>
<td></td>
</tr>
<tr>
<td>kill</td>
<td>-</td>
<td>-</td>
<td>Stop-Process, kill</td>
<td>kill</td>
</tr>
<tr>
<td>last</td>
<td></td>
<td>Last, LastOrDefault</td>
<td>Select-Object -Last</td>
<td>tail</td>
</tr>
<tr>
<td>lines</td>
<td>-</td>
<td>-</td>
<td>File.ReadAllLines</td>
<td></td>
</tr>
<tr>
<td>ls</td>
<td>-</td>
<td>-</td>
<td>Get-ChildItem, dir, ls</td>
<td>ls</td>
</tr>
<tr>
<td>match(<code>*</code>)</td>
<td>case when</td>
<td>Regex.IsMatch</td>
<td>[regex]</td>
<td></td>
</tr>
<tr>
<td>merge</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>mkdir</td>
<td>-</td>
<td>-</td>
<td>mkdir, md</td>
<td>mkdir</td>
</tr>
<tr>
<td>mv</td>
<td>-</td>
<td>-</td>
<td>Move-Item, mv, move, mi</td>
<td>mv</td>
</tr>
<tr>
<td>next</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>nth</td>
<td>limit x offset y, rownumber =</td>
<td>ElementAt</td>
<td>[x], indexing operator, ElementAt</td>
<td></td>
</tr>
<tr>
<td>open</td>
<td></td>
<td></td>
<td>Get-Content, gc, cat, type</td>
<td>cat</td>
</tr>
<tr>
<td>parse</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>transpose</td>
<td>pivot</td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>post(<code>*</code>)</td>
<td>-</td>
<td>HttpClient,WebClient, HttpWebRequest/Response</td>
<td>Invoke-WebRequest</td>
<td></td>
</tr>
<tr>
<td>prepend</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>prev</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ps(<code>*</code>)</td>
<td>-</td>
<td>-</td>
<td>Get-Process, ps, gps</td>
<td>ps</td>
</tr>
<tr>
<td>pwd</td>
<td>-</td>
<td>-</td>
<td>Get-Location, pwd</td>
<td>pwd</td>
</tr>
<tr>
<td>range</td>
<td></td>
<td>Range</td>
<td>1..10, 'a'..'f'</td>
<td></td>
</tr>
<tr>
<td>reduce</td>
<td></td>
<td>Aggregate</td>
<td></td>
<td></td>
</tr>
<tr>
<td>reject</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>rename</td>
<td>-</td>
<td>-</td>
<td>Rename-Item, ren, rni</td>
<td>mv</td>
</tr>
<tr>
<td>reverse</td>
<td></td>
<td>Reverse</td>
<td>[Array]::Reverse($var)</td>
<td></td>
</tr>
<tr>
<td>rm</td>
<td>-</td>
<td>-</td>
<td>Remove-Item, del, erase, rd, ri, rm, rmdir</td>
<td>rm</td>
</tr>
<tr>
<td>save</td>
<td>-</td>
<td>-</td>
<td>Write-Output, Out-File</td>
<td>&gt; foo.txt</td>
</tr>
<tr>
<td>select</td>
<td>select</td>
<td>Select</td>
<td>Select-Object, select</td>
<td></td>
</tr>
<tr>
<td>shells</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>shuffle</td>
<td></td>
<td>Random</td>
<td>Sort-Object {Get-Random}</td>
<td>-</td>
</tr>
<tr>
<td>size</td>
<td></td>
<td></td>
<td>Measure-Object, measure</td>
<td>wc</td>
</tr>
<tr>
<td>skip</td>
<td>where row_number()</td>
<td>Skip</td>
<td>Select-Object -Skip</td>
<td></td>
</tr>
<tr>
<td>skip until</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>skip while</td>
<td></td>
<td>SkipWhile</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sort-by</td>
<td>order by</td>
<td>OrderBy, OrderByDescending, ThenBy, ThenByDescending</td>
<td>Sort-Object, sort</td>
<td></td>
</tr>
<tr>
<td>split-by</td>
<td></td>
<td>Split</td>
<td>Split</td>
<td></td>
</tr>
<tr>
<td>split column</td>
<td></td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>split row</td>
<td></td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>str(<code>*</code>)</td>
<td>string functions</td>
<td>String class</td>
<td>String class</td>
<td></td>
</tr>
<tr>
<td>str collect</td>
<td>concat_ws</td>
<td>Join</td>
<td>Join-String</td>
<td></td>
</tr>
<tr>
<td>str trim</td>
<td>rtrim, ltrim</td>
<td>Trim, TrimStart, TrimEnd</td>
<td>Trim</td>
<td></td>
</tr>
<tr>
<td>sum</td>
<td>sum</td>
<td>Sum</td>
<td>Measure-Object, measure</td>
<td></td>
</tr>
<tr>
<td>sys(<code>*</code>)</td>
<td>-</td>
<td>-</td>
<td>Get-ComputerInfo</td>
<td>uname, lshw, lsblk, lscpu, lsusb, hdparam, free</td>
</tr>
<tr>
<td>table</td>
<td></td>
<td></td>
<td>Format-Table, ft, Format-List, fl</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>textview(<code>*</code>)</td>
<td>-</td>
<td>-</td>
<td>Get-Content, cat</td>
<td></td>
</tr>
<tr>
<td>tree(<code>*</code>)</td>
<td>-</td>
<td>-</td>
<td>tree</td>
<td></td>
</tr>
<tr>
<td>to</td>
<td>-</td>
<td>-</td>
<td>Export/ConvertTo-{Csv,Xml,Html,Json}</td>
<td></td>
</tr>
<tr>
<td>touch</td>
<td>-</td>
<td>-</td>
<td>Set-Content</td>
<td>touch</td>
</tr>
<tr>
<td>uniq</td>
<td>distinct</td>
<td>Distinct</td>
<td>Get-Unique, gu</td>
<td>uniq</td>
</tr>
<tr>
<td>upsert</td>
<td>As</td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>version</td>
<td>select @@version</td>
<td>-</td>
<td>$PSVersionTable</td>
<td></td>
</tr>
<tr>
<td>with_env</td>
<td>-</td>
<td>-</td>
<td>$env:FOO = 'bar'</td>
<td>export foo = &quot;bar&quot;</td>
</tr>
<tr>
<td>where</td>
<td>where</td>
<td>Where</td>
<td>Where-Object, where, &quot;?&quot; operator</td>
<td></td>
</tr>
<tr>
<td>which</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>which</td>
</tr>
<tr>
<td>wrap</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li><code>*</code> - these commands are part of the standard plugins</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nu map from functional languages</title>
      <link>www.nushell.sh/book/nushell_map_functional.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/nushell_map_functional.html</guid>
      <source url="www.nushell.sh/rss.xml">Nu map from functional languages</source>
      <content:encoded><![CDATA[<h1 id="nu-map-from-functional-languages" tabindex="-1"> Nu map from functional languages</h1>
<p>The idea behind this table is to help you understand how Nu built-ins and plug-ins relate to functional languages. We've tried to produce a map of all the Nu commands and what their equivalents are in other languages. Contributions are welcome.</p>
<p>Note: this table assumes Nu 0.43 or later.</p>
<table>
<thead>
<tr>
<th>Nushell</th>
<th>Clojure</th>
<th>Tablecloth (Ocaml / Elm)</th>
<th>Haskell</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>alias</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>append</td>
<td>conj, into, concat</td>
<td>append, (++), concat, concatMap</td>
<td>(++)</td>
<td></td>
</tr>
<tr>
<td>args</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>autoview</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>math avg</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>into binary</td>
<td>Integer/toHexString</td>
<td></td>
<td>showHex</td>
<td></td>
</tr>
<tr>
<td>calc, <code>&lt;math expression&gt;</code></td>
<td>math operators</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>cd</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>clear</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>clip</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>compact</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>config</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>count</td>
<td>length, size</td>
<td>length, size</td>
<td></td>
</tr>
<tr>
<td>cp</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>java.time.LocalDate/now</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>debug</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>default</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>drop</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>du</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>each</td>
<td>map, mapv, iterate</td>
<td>map, forEach</td>
<td>map, mapM</td>
<td></td>
</tr>
<tr>
<td>echo</td>
<td>println</td>
<td></td>
<td>putStrLn, print</td>
<td></td>
</tr>
<tr>
<td>enter</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>exit</td>
<td>System/exit</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>fetch(<code>*</code>)</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>first</td>
<td>first</td>
<td>head</td>
<td>head</td>
<td></td>
</tr>
<tr>
<td>format</td>
<td>format</td>
<td></td>
<td>Text.Printf.printf</td>
<td></td>
</tr>
<tr>
<td>from</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>get</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>group-by</td>
<td>group-by</td>
<td></td>
<td>group, groupBy</td>
<td></td>
</tr>
<tr>
<td>headers</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>help</td>
<td>doc</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>histogram</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>history</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>inc(<code>*</code>)</td>
<td>inc</td>
<td></td>
<td>succ</td>
<td></td>
</tr>
<tr>
<td>insert</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>empty?</td>
<td>empty?</td>
<td>isEmpty</td>
<td></td>
<td></td>
</tr>
<tr>
<td>keep</td>
<td>take, drop-last, pop</td>
<td>take, init</td>
<td>take, init</td>
<td></td>
</tr>
<tr>
<td>keep-until</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>keep-while</td>
<td>take-while</td>
<td>takeWhile</td>
<td>takeWhile</td>
<td></td>
</tr>
<tr>
<td>kill</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>last</td>
<td>last, peek, take-last</td>
<td>last</td>
<td>last</td>
<td></td>
</tr>
<tr>
<td>lines</td>
<td></td>
<td></td>
<td>lines, words, split-with</td>
<td></td>
</tr>
<tr>
<td>ls</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>match(<code>*</code>)</td>
<td>re-matches, re-seq, re-find</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>merge</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>mkdir</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>mv</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>next</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>nth</td>
<td>nth</td>
<td>Array.get</td>
<td>lookup</td>
<td></td>
</tr>
<tr>
<td>open</td>
<td>with-open</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>parse</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>transpose</td>
<td>(apply mapv vector matrix)</td>
<td></td>
<td>transpose</td>
<td></td>
</tr>
<tr>
<td>post(<code>*</code>)</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>prepend</td>
<td>cons</td>
<td>cons, ::</td>
<td>::</td>
<td></td>
</tr>
<tr>
<td>prev</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ps</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>pwd</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>range, 1..10</td>
<td>range</td>
<td>range</td>
<td>1..10, 'a'..'f'</td>
<td></td>
</tr>
<tr>
<td>reduce</td>
<td>reduce, reduce-kv</td>
<td>foldr</td>
<td>foldr</td>
<td></td>
</tr>
<tr>
<td>reject</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>rename</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>reverse</td>
<td>reverse, rseq</td>
<td>reverse, reverseInPlace</td>
<td>reverse</td>
<td></td>
</tr>
<tr>
<td>rm</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>save</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>select</td>
<td>select-keys</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>shells</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>shuffle</td>
<td>shuffle</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>count</td>
<td></td>
<td>size, length</td>
<td></td>
</tr>
<tr>
<td>skip</td>
<td>rest</td>
<td>tail</td>
<td>tail</td>
<td></td>
</tr>
<tr>
<td>skip until</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>skip while</td>
<td>drop-while</td>
<td>dropWhile</td>
<td>dropWhile, dropWhileEnd</td>
<td></td>
</tr>
<tr>
<td>sort-by</td>
<td>sort, sort-by, sorted-set-by</td>
<td>sort, sortBy, sortWith</td>
<td>sort, sortBy</td>
<td></td>
</tr>
<tr>
<td>split-by</td>
<td>split, split-{at,with,lines}</td>
<td>split, words, lines</td>
<td>split, words, lines</td>
<td></td>
</tr>
<tr>
<td>split column</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>split row</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>str(<code>*</code>)</td>
<td>clojure.string functions</td>
<td>String functions</td>
<td></td>
<td></td>
</tr>
<tr>
<td>str collect</td>
<td>join</td>
<td>concat</td>
<td>intercalate</td>
<td></td>
</tr>
<tr>
<td>str trim</td>
<td>trim, triml, trimr</td>
<td>trim, trimLeft, trimRight</td>
<td>strip</td>
<td></td>
</tr>
<tr>
<td>sum</td>
<td>apply +</td>
<td>sum</td>
<td>sum</td>
<td></td>
</tr>
<tr>
<td>sys</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tree(<code>*</code>)</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>to</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>touch</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>uniq</td>
<td>set</td>
<td>Set.empty</td>
<td>Data.Set</td>
<td></td>
</tr>
<tr>
<td>upsert</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>version</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>with_env</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>what</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>where</td>
<td>filter, filterv, select</td>
<td>filter, filterMap</td>
<td>filter</td>
<td></td>
</tr>
<tr>
<td>which</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>wrap</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li><code>*</code> - these commands are part of the standard plugins</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nu map from imperative languages</title>
      <link>www.nushell.sh/book/nushell_map_imperative.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/nushell_map_imperative.html</guid>
      <source url="www.nushell.sh/rss.xml">Nu map from imperative languages</source>
      <content:encoded><![CDATA[<h1 id="nu-map-from-imperative-languages" tabindex="-1"> Nu map from imperative languages</h1>
<p>The idea behind this table is to help you understand how Nu built-ins and plug-ins relate to imperative languages. We've tried to produce a map of all the Nu commands and what their equivalents are in other languages. Contributions are welcome.</p>
<p>Note: this table assumes Nu 0.43 or later.</p>
<table>
<thead>
<tr>
<th>Nushell</th>
<th>Python</th>
<th>Kotlin (Java)</th>
<th>C++</th>
<th>Rust</th>
</tr>
</thead>
<tbody>
<tr>
<td>alias</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>append</td>
<td>list.append, set.add</td>
<td>add</td>
<td>push_back, emplace_back</td>
<td>push, push_back</td>
</tr>
<tr>
<td>args</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>autoview</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>math avg</td>
<td>statistics.mean</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>calc, = math</td>
<td>math operators</td>
<td>math operators</td>
<td>math operators</td>
<td>math operators</td>
</tr>
<tr>
<td>cd</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>clear</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>clip</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>compact</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>config</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>len</td>
<td>size, length</td>
<td>length</td>
<td>len</td>
</tr>
<tr>
<td>cp</td>
<td>shutil.copy</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>datetime.date.today</td>
<td>java.time.LocalDate.now</td>
<td></td>
<td></td>
</tr>
<tr>
<td>debug</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>default</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>drop</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>du</td>
<td>shutil.disk_usage</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>each</td>
<td>for</td>
<td>for</td>
<td>for</td>
<td>for</td>
</tr>
<tr>
<td>echo</td>
<td>print</td>
<td>println</td>
<td>printf</td>
<td>println!</td>
</tr>
<tr>
<td>enter</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>exit</td>
<td>exit</td>
<td>System.exit, kotlin.system.exitProcess</td>
<td>exit</td>
<td>exit</td>
</tr>
<tr>
<td>fetch</td>
<td>urllib.request.urlopen</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>first</td>
<td>list[0]</td>
<td>List[0], peek</td>
<td>vector[0], top</td>
<td>Vec[0]</td>
</tr>
<tr>
<td>format</td>
<td>format</td>
<td>format</td>
<td>format</td>
<td>format!</td>
</tr>
<tr>
<td>from</td>
<td>csv, json, sqlite3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>get</td>
<td>dict[&quot;key&quot;]</td>
<td>Map[&quot;key&quot;]</td>
<td>map[&quot;key&quot;]</td>
<td>HashMap[&quot;key&quot;], get, entry</td>
</tr>
<tr>
<td>group-by</td>
<td>itertools.groupby</td>
<td>groupBy</td>
<td></td>
<td>group_by</td>
</tr>
<tr>
<td>headers</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>help</td>
<td>help</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>histogram</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>history</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>inc(<code>*</code>)</td>
<td>x += 1</td>
<td>x++</td>
<td>x++</td>
<td>x += 1</td>
</tr>
<tr>
<td>insert</td>
<td>list.insert</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>empty?</td>
<td>is None</td>
<td>isEmpty</td>
<td>empty</td>
<td>is_empty</td>
</tr>
<tr>
<td>keep</td>
<td>list[:x]</td>
<td></td>
<td></td>
<td>&amp;Vec[..x]</td>
</tr>
<tr>
<td>keep until</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>keep while</td>
<td>itertools.takewhile</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>kill</td>
<td>os.kill</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>last</td>
<td>list[-1]</td>
<td></td>
<td></td>
<td>&amp;Vec[Vec.len()-1]</td>
</tr>
<tr>
<td>lines</td>
<td>split, splitlines</td>
<td>split</td>
<td>views::split</td>
<td>split, split_whitespace, rsplit, lines</td>
</tr>
<tr>
<td>ls</td>
<td>os.listdir</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>match(<code>*</code>)</td>
<td>re.findall</td>
<td>Regex.matches</td>
<td>regex_match</td>
<td></td>
</tr>
<tr>
<td>merge</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>mkdir</td>
<td>os.mkdir</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>mv</td>
<td>shutil.move</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>next</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>nth</td>
<td>list[x]</td>
<td>List[x]</td>
<td>vector[x]</td>
<td>Vec[x]</td>
</tr>
<tr>
<td>open</td>
<td>open</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>parse</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>transpose</td>
<td>zip(*matrix)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>post(<code>*</code>)</td>
<td>urllib.request.urlopen</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>prepend</td>
<td>deque.appendleft</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>prev</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ps(<code>*</code>)</td>
<td>os.listdir('/proc')</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>pwd</td>
<td>os.getcwd</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>range</td>
<td>range</td>
<td>.., until, downTo, step</td>
<td>iota</td>
<td>..</td>
</tr>
<tr>
<td>reduce</td>
<td>functools.reduce</td>
<td>reduce</td>
<td>reduce</td>
<td>fold, rfold, scan</td>
</tr>
<tr>
<td>reject</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>rename</td>
<td>shutil.move</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>reverse</td>
<td>reversed, list.reverse</td>
<td>reverse, reversed, asReversed</td>
<td>reverse</td>
<td>rev</td>
</tr>
<tr>
<td>rm</td>
<td>os.remove</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>save</td>
<td>io.TextIOWrapper.write</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>select</td>
<td>{k:dict[k] for k in keylist}</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>shells</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>shuffle</td>
<td>random.shuffle</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>len</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>skip</td>
<td>list[x:]</td>
<td></td>
<td></td>
<td>&amp;Vec[x..],skip</td>
</tr>
<tr>
<td>skip until</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>skip while</td>
<td>itertools.dropwhile</td>
<td></td>
<td></td>
<td>skip_while</td>
</tr>
<tr>
<td>sort-by</td>
<td>sorted, list.sort</td>
<td>sortedBy, sortedWith, Arrays.sort, Collections.sort</td>
<td>sort</td>
<td>sort</td>
</tr>
<tr>
<td>split-by</td>
<td>str.split{,lines}, re.split</td>
<td>split</td>
<td>views::split</td>
<td>split</td>
</tr>
<tr>
<td>split column</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>split row</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>str(<code>*</code>)</td>
<td>str functions</td>
<td>String functions</td>
<td>string functions</td>
<td>&amp;str, String functions</td>
</tr>
<tr>
<td>str collect</td>
<td>str.join</td>
<td>joinToString</td>
<td></td>
<td>join</td>
</tr>
<tr>
<td>str trim</td>
<td>strip, rstrip, lstrip</td>
<td>trim, trimStart, trimEnd</td>
<td>regex</td>
<td>trim, trim*{start,end}, strip*{suffix,prefix}</td>
</tr>
<tr>
<td>sum</td>
<td>sum</td>
<td>sum</td>
<td>reduce</td>
<td>sum</td>
</tr>
<tr>
<td>sys(<code>*</code>)</td>
<td>sys</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tree(<code>*</code>)</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>to</td>
<td>csv, json, sqlite3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>touch</td>
<td>open(path, 'a').close()</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>uniq</td>
<td>set</td>
<td>Set</td>
<td>set</td>
<td>HashSet</td>
</tr>
<tr>
<td>upsert</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>version</td>
<td>sys.version, sys.version_info</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>with-env</td>
<td>os.environ</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>where</td>
<td>filter</td>
<td>filter</td>
<td>filter</td>
<td>filter</td>
</tr>
<tr>
<td>which</td>
<td>shutil.which</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>wrap</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li><code>*</code> - these commands are part of the standard plugins</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nushell operator map</title>
      <link>www.nushell.sh/book/nushell_operator_map.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/nushell_operator_map.html</guid>
      <source url="www.nushell.sh/rss.xml">Nushell operator map</source>
      <content:encoded><![CDATA[<h1 id="nushell-operator-map" tabindex="-1"> Nushell operator map</h1>
<p>The idea behind this table is to help you understand how Nu operators relate to other language operators. We've tried to produce a map of all the nushell operators and what their equivalents are in other languages. Contributions are welcome.</p>
<p>Note: this table assumes Nu 0.14.1 or later.</p>
<table>
<thead>
<tr>
<th>Nushell</th>
<th>SQL</th>
<th>Python</th>
<th>.NET LINQ (C#)</th>
<th>PowerShell</th>
<th>Bash</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>=</td>
<td>==</td>
<td>==</td>
<td>-eq, -is</td>
<td>-eq</td>
</tr>
<tr>
<td>!=</td>
<td>!=, &lt;&gt;</td>
<td>!=</td>
<td>!=</td>
<td>-ne, -isnot</td>
<td>-ne</td>
</tr>
<tr>
<td>&lt;</td>
<td>&lt;</td>
<td>&lt;</td>
<td>&lt;</td>
<td>-lt</td>
<td>-lt</td>
</tr>
<tr>
<td>&lt;=</td>
<td>&lt;=</td>
<td>&lt;=</td>
<td>&lt;=</td>
<td>-le</td>
<td>-le</td>
</tr>
<tr>
<td>&gt;</td>
<td>&gt;</td>
<td>&gt;</td>
<td>&gt;</td>
<td>-gt</td>
<td>-gt</td>
</tr>
<tr>
<td>&gt;=</td>
<td>&gt;=</td>
<td>&gt;=</td>
<td>&gt;=</td>
<td>-ge</td>
<td>-ge</td>
</tr>
<tr>
<td>=~</td>
<td>like</td>
<td>re, in, startswith</td>
<td>Contains, StartsWith</td>
<td>-like, -contains</td>
<td>=~</td>
</tr>
<tr>
<td>!~</td>
<td>not like</td>
<td>not in</td>
<td>Except</td>
<td>-notlike, -notcontains</td>
<td>! &quot;str1&quot; =~ &quot;str2&quot;</td>
</tr>
<tr>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
<td>/</td>
</tr>
<tr>
<td>**</td>
<td>pow</td>
<td>**</td>
<td>Power</td>
<td>Pow</td>
<td>**</td>
</tr>
<tr>
<td>in</td>
<td>in</td>
<td>re, in, startswith</td>
<td>Contains, StartsWith</td>
<td>-In</td>
<td>case in</td>
</tr>
<tr>
<td>not-in</td>
<td>not in</td>
<td>not in</td>
<td>Except</td>
<td>-NotIn</td>
<td></td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>and</td>
<td>and</td>
<td>&amp;&amp;</td>
<td>-And, &amp;&amp;</td>
<td>-a, &amp;&amp;</td>
</tr>
<tr>
<td>||</td>
<td>or</td>
<td>or</td>
<td>||</td>
<td>-Or, ||</td>
<td>-o, ||</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>Operators</title>
      <link>www.nushell.sh/book/operators.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/operators.html</guid>
      <source url="www.nushell.sh/rss.xml">Operators</source>
      <content:encoded><![CDATA[<h1 id="operators" tabindex="-1"> Operators</h1>
<p>Nushell supports the following operators for common math, logic, and string operations:</p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+</code></td>
<td>add</td>
</tr>
<tr>
<td><code>-</code></td>
<td>subtract</td>
</tr>
<tr>
<td><code>*</code></td>
<td>multiply</td>
</tr>
<tr>
<td><code>/</code></td>
<td>divide</td>
</tr>
<tr>
<td><code>**</code></td>
<td>exponentiation (power)</td>
</tr>
<tr>
<td><code>mod</code></td>
<td>modulo</td>
</tr>
<tr>
<td><code>==</code></td>
<td>equal</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>not equal</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>less than</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>less than or equal</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>greater than</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>greater than or equal</td>
</tr>
<tr>
<td><code>=~</code></td>
<td>regex match / string contains another</td>
</tr>
<tr>
<td><code>!~</code></td>
<td>inverse regex match / string does <em>not</em> contain another</td>
</tr>
<tr>
<td><code>in</code></td>
<td>value in list</td>
</tr>
<tr>
<td><code>not-in</code></td>
<td>value not in list</td>
</tr>
<tr>
<td><code>not</code></td>
<td>logical not</td>
</tr>
<tr>
<td><code>&amp;&amp;</code>, <code>and</code></td>
<td>and two Boolean values</td>
</tr>
<tr>
<td>`</td>
<td></td>
</tr>
</tbody>
</table>
<p>Parentheses can be used for grouping to specify evaluation order or for calling commands and using the results in an expression.</p>
<h2 id="order-of-operations" tabindex="-1"> Order of operations</h2>
<p>Math operations are evaluated in the follow order (from highest precedence to lowest):</p>
<ul>
<li>Parentheses (<code>()</code>)</li>
<li>Multiply (<code>*</code>) and Divide (<code>/</code>) and Power (<code>**</code>)</li>
<li>Add (<code>+</code>) and Subtract (<code>-</code>)</li>
</ul>
<div><pre><code>> 3 * (1 + 2)
9
</code></pre></div><h2 id="regular-expression-string-contains-operators" tabindex="-1"> Regular Expression / string-contains Operators</h2>
<p>The <code>=~</code> and <code>!~</code> operators provide a convenient way to evaluate <a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/" target="_blank" rel="noopener noreferrer">regular expressions</a>. You don't need to know regular expressions to use them - they're also an easy way to check whether 1 string contains another.</p>
<ul>
<li><code>string =~ pattern</code> returns <strong>true</strong> if <code>string</code> contains a match for <code>pattern</code>, and <strong>false</strong> otherwise.</li>
<li><code>string !~ pattern</code> returns <strong>false</strong> if <code>string</code> contains a match for <code>pattern</code>, and <strong>true</strong> otherwise.</li>
</ul>
<p>For example:</p>
<div><pre><code>foobarbaz <span>=~</span> bar <span># returns true</span>
foobarbaz <span>!</span>~ bar <span># returns false</span>
<span>ls</span> <span>|</span> where name <span>=~</span> ^nu <span># returns all files whose names start with "nu"</span>
</code></pre></div><p>Both operators use <a href="https://docs.rs/regex/latest/regex/struct.Regex.html#method.is_match" target="_blank" rel="noopener noreferrer">the Rust regex crate's <code>is_match()</code> function</a>.</p>
<h2 id="case-sensitivity" tabindex="-1"> Case Sensitivity</h2>
<p>Operators are usually case-sensitive when operating on strings. There are a few ways to do case-insensitive work instead:</p>
<ol>
<li>In the regular expression operators, specify the <code>(?i)</code> case-insensitive mode modifier:</li>
</ol>
<div><pre><code><span>"FOO"</span> <span>=~</span> <span>"foo"</span> <span># returns false</span>
<span>"FOO"</span> <span>=~</span> <span>"(?i)foo"</span> <span># returns true</span>
</code></pre></div><ol start="2">
<li>Use the <a href="/book/commands/str_contains.html"><code>str contains</code></a> command's <code>--insensitive</code> flag:</li>
</ol>
<div><pre><code><span>"FOO"</span> <span>|</span> str contains --insensitive <span>"foo"</span>
</code></pre></div><ol start="3">
<li>Convert strings to lowercase with <a href="/book/commands/str_downcase.html"><code>str downcase</code></a> before comparing:</li>
</ol>
<div><pre><code><span>(</span><span>"FOO"</span> <span>|</span> str downcase<span>)</span> <span>==</span> <span>(</span><span>"Foo"</span> <span>|</span> str downcase<span>)</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Overlays</title>
      <link>www.nushell.sh/book/overlays.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/overlays.html</guid>
      <source url="www.nushell.sh/rss.xml">Overlays</source>
      <content:encoded><![CDATA[<h1 id="overlays" tabindex="-1"> Overlays</h1>
<p>Overlays act as &quot;layers&quot; of definitions (custom commands, aliases, environment variables) that can be activated and deactivated on demand.
They resemble virtual environments found in some languages, such as Python.</p>
<p><em>Note: To understand overlays, make sure to check <a href="/book/modules.html">Modules</a> first as overlays build on top of modules.</em></p>
<h2 id="basics" tabindex="-1"> Basics</h2>
<p>First, Nushell comes with one default overlay called <code>zero</code>.
You can inspect which overlays are active with the <a href="/book/commands/overlay_list.html"><code>overlay list</code></a> command.
You should see the default overlay listed there.</p>
<p>To create a new overlay, you first need a module:</p>
<div><pre><code>> module spam {
    export def foo [] {
        "foo"
    }

    export alias bar = "bar"

    export env BAZ {
        "baz"
    }
}
</code></pre></div><p>We'll use this module throughout the chapter: Whenever you see <code>overlay add spam</code>, assume <code>spam</code> is referring to this module.</p>
<p>To create the overlay, call <a href="/book/commands/overlay_add.html"><code>overlay add</code></a>:</p>
<div><pre><code>> overlay add spam

> foo
foo

> bar
bar

> $env.BAZ
baz

> overlay list
───┬──────
 0 │ zero
 1 │ spam
───┴──────
</code></pre></div><p>In the following sections, the <code>&gt;</code> prompt will be preceded by the name of the last active overlay.
<code>(spam)&gt; some-command</code> means the <code>spam</code> overlay is the last active overlay when the command was typed.</p>
<h2 id="removing-an-overlay" tabindex="-1"> Removing an Overlay</h2>
<p>If you don't need the overlay definitions anymore, call <a href="/book/commands/overlay_remove.html"><code>overlay remove</code></a>:</p>
<div><pre><code>(spam)> overlay remove spam

(zero)> foo
Error: Can't run executable...

(zero)> overlay list
───┬──────
 0 │ zero
───┴──────
</code></pre></div><p>The overlays are also scoped.
Any added overlays are removed at the end of the scope:</p>
<div><pre><code>(zero)> do { overlay add spam; foo }
foo

(zero)> overlay list
───┬──────
 0 │ zero
───┴──────
</code></pre></div><p>Furthermore, <a href="/book/commands/overlay_remove.html"><code>overlay remove</code></a> without an argument will remove the last active ovelay.</p>
<h2 id="overlays-are-recordable" tabindex="-1"> Overlays are Recordable</h2>
<p>Any new definition (command, alias, environment variable) is recorded into the last active overlay:</p>
<div><pre><code>(zero)> overlay add spam

(spam)> def eggs [] { "eggs" }
</code></pre></div><p>Now, the <code>eggs</code> command belongs to the <code>spam</code> overlay.
If we remove the overlay, we can't call it anymore:</p>
<div><pre><code>(spam)> overlay remove spam

(zero)> eggs
Error: Can't run executable...
</code></pre></div><p>But we can bring it back!</p>
<div><pre><code>(zero)> overlay add spam

(spam)> eggs
eggs
</code></pre></div><p>Overlays remember what you add to them and store that information even if you remove them.
This can let you repeatedly swap between different contexts.</p>
<div><p>TIP</p>
<p>Sometimes, after adding an overlay, you might not want custom definitions to be added into it.
The solution can be to create a new empty overlay that would be used just for recording the custom changes:</p>
<div><pre><code>(zero)> overlay add spam

(spam)> module scratchpad { }

(spam)> overlay add scratchpad

(scratchpad)> def eggs [] { "eggs" }
</code></pre></div><p>The <code>eggs</code> command is added into <code>scratchpad</code> while keeping <code>spam</code> intact.</p>
<p><em>Coming in version 0.64:</em>
To make it less verbose, you can use the <a href="/book/commands/overlay_new.html"><code>overlay new</code></a> command:</p>
<div><pre><code>(zero)> overlay add spam

(spam)> overlay new scratchpad

(scratchpad)> def eggs [] { "eggs" }
</code></pre></div></div>
<h2 id="preserving-definitions" tabindex="-1"> Preserving Definitions</h2>
<p>Sometimes, you might want to remove an overlay, but keep all the custom definitions you added without having to redefine them in the next active overlay:</p>
<div><pre><code>(zero)> overlay add spam

(spam)> def eggs [] { "eggs" }

(spam)> overlay remove --keep spam

(zero)> eggs
eggs
</code></pre></div><p>The <code>--keep</code> flag does exactly that.</p>
<h2 id="ordering-overlays" tabindex="-1"> Ordering Overlays</h2>
<p>The overlays are arranged as a stack.
If multiple overlays contain the same definition, say <code>foo</code>, the one from the last active one would take a precedence.
To bring some overlay to the top of the stack, you can call <code>overlay add</code> again:</p>
<div><pre><code>(zero)> def foo [] { "foo-in-zero" }

(zero)> overlay add spam

(spam)> foo
foo

(spam)> overlay add zero

(zero)> foo
foo-in-zero

(zero)> overlay list
───┬──────
 0 │ spam
 1 │ zero
───┴──────
</code></pre></div><p>Now, the <code>zero</code> overlay takes a precedence.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Parallelism</title>
      <link>www.nushell.sh/book/parallelism.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/parallelism.html</guid>
      <source url="www.nushell.sh/rss.xml">Parallelism</source>
      <content:encoded><![CDATA[<h1 id="parallelism" tabindex="-1"> Parallelism</h1>
<p>Nushell now has early support for running code in parallel. This allows you to process elements of a stream using more hardware resources of your computer.</p>
<p>You will notice these commands with their characteristic <code>par-</code> naming. Each corresponds to a non-parallel version, allowing you to easily write code in a serial style first, and then go back and easily convert serial scripts into parallel scripts with a few extra characters.</p>
<h2 id="par-each" tabindex="-1"> par-each</h2>
<p>The most common parallel command is <a href="/book/commands/par-each.html"><code>par-each</code></a>, a companion to the <a href="/book/commands/each.html"><code>each</code></a> command.</p>
<p>Like <a href="/book/commands/each.html"><code>each</code></a>, <a href="/book/commands/par-each.html"><code>par-each</code></a> works on each element in the pipeline as it comes in, running a block on each. Unlike <a href="/book/commands/each.html"><code>each</code></a>, <a href="/book/commands/par-each.html"><code>par-each</code></a> will do these operations in parallel.</p>
<p>Let's say you wanted to count the number of files in each sub-directory of the current directory. Using <a href="/book/commands/each.html"><code>each</code></a>, you could write this as:</p>
<div><pre><code>> ls | where type == dir | each { |it|
    { name: $it.name, len: (ls $it.name | length) }
}
</code></pre></div><p>We create a record for each entry, and fill it with the name of the directory and the count of entries in that sub-directory.</p>
<p>On your machine, the times may vary. For this machine, it took 21 milliseconds for the current directory.</p>
<p>Now, since this operation can be run in parallel, let's convert the above to parallel by changing <a href="/book/commands/each.html"><code>each</code></a> to <a href="/book/commands/par-each.html"><code>par-each</code></a>:</p>
<div><pre><code>> ls | where type == dir | par-each { |it|
    { name: $it.name, len: (ls $it.name | length) }
}
</code></pre></div><p>On this machine, it now runs in 6ms. That's quite a difference!</p>
<p>As a side note: Because <a href="/book/environment.html#scoping">environment variables are scoped</a>, you can use <code>par-each</code> to work in multiple directories in parallel (notice the <code>cd</code> command):</p>
<div><pre><code>> ls | where type == dir | par-each { |it|
    { name: $it.name, len: (cd $it.name; ls | length) }
}
</code></pre></div><p>You'll notice, if you look at the results, that they come back in different orders each run (depending on the number of hardware threads on your system). As tasks finish, and we get the correct result, we may need to add additional steps if we want our results in a particular order. For example, for the above, we may want to sort the results by the &quot;name&quot; field. This allows both <a href="/book/commands/each.html"><code>each</code></a> and <a href="/book/commands/par-each.html"><code>par-each</code></a> versions of our script to give the same result.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Pipelines</title>
      <link>www.nushell.sh/book/pipeline.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/pipeline.html</guid>
      <source url="www.nushell.sh/rss.xml">Pipelines</source>
      <content:encoded><![CDATA[<h1 id="pipelines" tabindex="-1"> Pipelines</h1>
<p>One of the core designs of Nu is the pipeline, a design idea that traces its roots back decades to some of the original philosophy behind Unix. Just as Nu extends from the single string data type of Unix, Nu also extends the idea of the pipeline to include more than just text.</p>
<h2 id="basics" tabindex="-1"> Basics</h2>
<p>A pipeline is composed of three parts: the input, the filter, and the output.</p>
<div><pre><code>> open "Cargo.toml" | inc package.version --minor | save "Cargo_new.toml"
</code></pre></div><p>The first command, <code>open &quot;Cargo.toml&quot;</code>, is an input (sometimes also called a &quot;source&quot; or &quot;producer&quot;). This creates or loads data and feeds it into a pipeline. It's from input that pipelines have values to work with. Commands like <a href="/book/commands/ls.html"><code>ls</code></a> are also inputs, as they take data from the filesystem and send it through the pipelines so that it can be used.</p>
<p>The second command, <code>inc package.version --minor</code>, is a filter. Filters take the data they are given and often do something with it. They may change it (as with the <a href="/book/commands/inc.html"><code>inc</code></a> command in our example), or they may do another operation, like logging, as the values pass through.</p>
<p>The last command, <code>save &quot;Cargo_new.toml&quot;</code>, is an output (sometimes called a &quot;sink&quot;). An output takes input from the pipeline and does some final operation on it. In our example, we save what comes through the pipeline to a file as the final step. Other types of output commands may take the values and view them for the user.</p>
<p>The <code>$in</code> variable will collect the pipeline into a value for you, allowing you to access the whole stream as a parameter:</p>
<div><pre><code>&gt; echo 1 2 3 | $in.1 * $in.2
6
</code></pre></div><h2 id="multi-line-pipelines" tabindex="-1"> Multi-line pipelines</h2>
<p>If a pipeline is getting a bit long for one line, you can enclose it within <code>(</code> and <code>)</code> to create a subexpression:</p>
<div><pre><code>(
    &quot;01/22/2021&quot; |
    parse &quot;{month}/{day}/{year}&quot; |
    get year
)
</code></pre></div><p>Also see <a href="https://www.nushell.sh/book/variables_and_subexpressions.html#subexpressions" target="_blank" rel="noopener noreferrer">Subexpressions</a></p>
<h2 id="working-with-external-commands" tabindex="-1"> Working with external commands</h2>
<p>Nu commands communicate with each other using the Nu data types (see <a href="/book/types_of_data.html">types of data</a>), but what about commands outside of Nu? Let's look at some examples of working with external commands:</p>
<p><code>internal_command | external_command</code></p>
<p>Data will flow from the internal_command to the external_command. This data will get converted to a string, so that they can be sent to the <code>stdin</code> of the external_command.</p>
<p><code>external_command | internal_command</code></p>
<p>Data coming from an external command into Nu will come in as bytes that Nushell will try to automatically convert to UTF-8 text. If successful, a stream of text data will be sent to internal_command. If unsuccessful, a stream of binary data will be sent to internal command.. Commands like <a href="/book/commands/lines.html"><code>lines</code></a> help make it easier to bring in data from external commands, as it gives discrete lines of data to work with.</p>
<p><code>external_command_1 | external_command_2</code></p>
<p>Nu works with data piped between two external commands in the same way as other shells, like Bash would. The <code>stdout</code> of external_command_1 is connected to the <code>stdin</code> of external_command_2. This lets data flow naturally between the two commands.</p>
<h2 id="behind-the-scenes" tabindex="-1"> Behind the scenes</h2>
<p>You may have wondered how we see a table if <a href="/book/commands/ls.html"><code>ls</code></a> is an input and not an output. Nu adds this output for us automatically using another command called <a href="/book/commands/table.html"><code>table</code></a>. The <a href="/book/commands/table.html"><code>table</code></a> command is appended to any pipeline that doesn't have an output. This allows us to see the result.</p>
<p>In effect, the command:</p>
<div><pre><code>> ls
</code></pre></div><p>And the pipeline:</p>
<div><pre><code>> ls | table
</code></pre></div><p>Are one and the same.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Plugins</title>
      <link>www.nushell.sh/book/plugins.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/plugins.html</guid>
      <source url="www.nushell.sh/rss.xml">Plugins</source>
      <content:encoded><![CDATA[<h1 id="plugins" tabindex="-1"> Plugins</h1>
<p>Nu can be extended using plugins. Plugins behave much like Nu's built-in commands, with the added benefit that they can be added separately from Nu itself.</p>
<p>Nu plugins are executables; Nu launches them as needed and communicates with them over <a href="https://en.wikipedia.org/wiki/Standard_streams" target="_blank" rel="noopener noreferrer">stdin, stdout, and stderr</a>. Nu plugins can use either JSON or <a href="https://capnproto.org/" target="_blank" rel="noopener noreferrer">Cap'n Proto</a> as their communication encoding.</p>
<h2 id="adding-a-plugin" tabindex="-1"> Adding a plugin</h2>
<p>To add a plugin, call the <a href="/book/commands/register.html"><code>register</code></a> command to tell Nu where to find it. As you do, you'll need to also tell Nushell what encoding the plugin uses.</p>
<p>Linux+macOS:</p>
<div><pre><code>> register --encoding=capnp ./my_plugins/my-cool-plugin
</code></pre></div><p>Windows:</p>
<div><pre><code>> register --encoding=capnp .\my_plugins\my-cool-plugin.exe
</code></pre></div><p>When <a href="/book/commands/register.html"><code>register</code></a> is called:</p>
<ol>
<li>Nu launches the plugin and sends it a &quot;Signature&quot; message over stdin</li>
<li>The plugin responds via stdout with a message containing its signature (name, description, arguments, flags, and more)</li>
<li>Nu saves the plugin signature in the file at <code>$nu.plugin-path</code>, so registration is persisted across multiple launches</li>
</ol>
<p>Once registered, the plugin is available as part of your set of commands:</p>
<div><pre><code>> help commands | where is_plugin == true
</code></pre></div><h2 id="examples" tabindex="-1"> Examples</h2>
<p>Nu's main repo contains example plugins that are useful for learning how the plugin protocol works:</p>
<ul>
<li><a href="https://github.com/nushell/nushell/tree/main/crates/nu_plugin_example" target="_blank" rel="noopener noreferrer">Rust</a></li>
<li><a href="https://github.com/nushell/nushell/blob/main/crates/nu_plugin_python/plugin.py" target="_blank" rel="noopener noreferrer">Python</a></li>
</ul>
<h2 id="debugging" tabindex="-1"> Debugging</h2>
<p>The simplest way to debug a plugin is to print to stderr; plugins' standard error streams are redirected through Nu and displayed to the user.</p>
<h2 id="help" tabindex="-1"> Help</h2>
<p>Nu's plugin documentation is a work in progress. If you're unsure about something, the #plugins channel on <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">the Nu Discord</a> is a great place to ask questions!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Regular expressions</title>
      <link>www.nushell.sh/book/regular_expressions.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/regular_expressions.html</guid>
      <source url="www.nushell.sh/rss.xml">Regular expressions</source>
      <content:encoded><![CDATA[<h1 id="regular-expressions" tabindex="-1"> Regular expressions</h1>
<p>Regular expressions in Nushell's commands are handled by the <code>rust-lang/regex</code> crate. If you want to know more, check the crate documentation: &quot;<a href="https://github.com/rust-lang/regex" target="_blank" rel="noopener noreferrer">regex</a>&quot;.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Scripts</title>
      <link>www.nushell.sh/book/scripts.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/scripts.html</guid>
      <source url="www.nushell.sh/rss.xml">Scripts</source>
      <content:encoded><![CDATA[<h1 id="scripts" tabindex="-1"> Scripts</h1>
<p>In Nushell, you can write and run scripts in the Nushell language. To run a script, you can pass it as an argument to the <code>nu</code> commandline application:</p>
<div><pre><code>> nu myscript.nu
</code></pre></div><p>This will run the script to completion in a new instance of Nu. You can also run scripts inside the <em>current</em> instance of Nu using <a href="/book/commands/source.html"><code>source</code></a>:</p>
<div><pre><code>> source myscript.nu
</code></pre></div><p>Let's look at an example script file:</p>
<div><pre><code># myscript.nu
def greet [name] {
  echo "hello" $name
}

greet "world"
</code></pre></div><p>A script file defines the definitions for custom commands as well as the main script itself, which will run after the custom commands are defined.</p>
<p>In the above, first <code>greet</code> is defined by the Nushell interpreter. This allows us to later call this definition. We could have written the above as:</p>
<div><pre><code>greet "world"

def greet [name] {
  echo "hello" $name
}
</code></pre></div><p>There is no requirement that definitions have to come before the parts of the script that call the definitions, allowing you to put them where you feel comfortable.</p>
<h2 id="how-scripts-are-processed" tabindex="-1"> How scripts are processed</h2>
<p>In a script, definitions run first. This allows us to call the definitions using the calls in the script.</p>
<p>After the definitions run, we start at the top of the script file and run each group of commands one after another.</p>
<h2 id="script-lines" tabindex="-1"> Script lines</h2>
<p>To better understand how Nushell sees lines of code, let's take a look at an example script:</p>
<div><pre><code>a
b; c | d
</code></pre></div><p>When this script is run, Nushell will first run the <code>a</code> command to completion and view its results. Next, Nushell will run <code>b; c | d</code> following the rules in the <a href="/book/types_of_data.html#groups">&quot;Groups&quot; section</a>.</p>
<h2 id="parameterizing-scripts" tabindex="-1"> Parameterizing Scripts</h2>
<p>Script files can optionally contain a special &quot;main&quot; command. <code>main</code> will be run after any other Nu code, and is primarily used to add parameters to scripts. You can pass arguments to scripts after the script name (<code>nu &lt;script name&gt; &lt;script args&gt;</code>).</p>
<p>For example:</p>
<div><pre><code><span># myscript.nu</span>

def main <span>[</span>x: int<span>]</span> <span>{</span>
  <span>$x</span> + <span>10</span>
<span>}</span>
</code></pre></div><div><pre><code>> nu myscript.nu 100
110
</code></pre></div><h2 id="shebangs" tabindex="-1"> Shebangs (<code>#!</code>)</h2>
<p>On Linux and macOS you can optionally use a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="noopener noreferrer">shebang</a> to tell the OS that a file should be interpreted by Nu. For example, with the following in a file named <code>myscript</code>:</p>
<div><pre><code>#!/usr/bin/env nu
echo "Hello World!"
</code></pre></div><div><pre><code>> ./myscript
Hello World!
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Shells in shells</title>
      <link>www.nushell.sh/book/shells_in_shells.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/shells_in_shells.html</guid>
      <source url="www.nushell.sh/rss.xml">Shells in shells</source>
      <content:encoded><![CDATA[<h1 id="shells-in-shells" tabindex="-1"> Shells in shells</h1>
<h2 id="working-in-multiple-directories" tabindex="-1"> Working in multiple directories</h2>
<p>While it's common to work in one directory, it can be handy to work in multiple places at the same time. For this, Nu offers the concept of &quot;shells&quot;. As the name implies, they're a way of running multiple shells in one, allowing you to quickly jump between working directories and more.</p>
<p>To get started, let's enter a directory:</p>
<div><pre><code>/home/jonathant/Source/nushell(main)> enter ../book
/home/jonathant/Source/book(main)> ls
────┬────────────────────┬──────┬────────┬─────────────
 #  │ name               │ type │ size   │ modified
────┼────────────────────┼──────┼────────┼─────────────
  0 │ 404.html           │ File │  429 B │ 2 hours ago
  1 │ CONTRIBUTING.md    │ File │  955 B │ 2 hours ago
  2 │ Gemfile            │ File │ 1.1 KB │ 2 hours ago
  3 │ Gemfile.lock       │ File │ 6.9 KB │ 2 hours ago
</code></pre></div><p>Entering is similar to changing directories (as we saw with the <code>cd</code> command). This allows you to jump into a directory to work in it. Instead of changing the directory, we now are in two directories. To see this more clearly, we can use the <a href="/book/commands/shells.html"><code>shells</code></a> command to list the current directories we have active:</p>
<div><pre><code>/home/jonathan/Source/book(main)> shells
───┬────────┬────────────┬─────────────────────────
 # │ active │    name    │          path
───┼────────┼────────────┼─────────────────────────
 0 │ false  │ filesystem │ /home/jt/Source/nushell
 1 │ true   │ filesystem │ /home/jt/Source/book
 2 │ false  │ filesystem │ /home/jt/Source/music
───┴────────┴────────────┴─────────────────────────

</code></pre></div><p>The <a href="/book/commands/shells.html"><code>shells</code></a> command shows us there are three shells currently active: our original &quot;nushell&quot; source directory and now this new &quot;book&quot; directory.</p>
<p>We can jump between these shells with the <code>n</code>, <code>p</code> and <code>g</code> shortcuts, short for &quot;next&quot;, &quot;previous&quot; and &quot;goto&quot;:</p>
<div><pre><code>/home/jonathant/Source/book(main)> n
/home/jonathant/Source/nushell(main)> p
/home/jonathant/Source/book(main)> g 2
/home/jonathant/Source/music(main)>
</code></pre></div><p>We can see the directory changing, but we're always able to get back to a previous directory we were working on. This allows us to work in multiple directories in the same session.</p>
<h2 id="exiting-the-shell" tabindex="-1"> Exiting the shell</h2>
<p>You can leave a shell you have <code>enter</code>ed using the <code>exit</code> command. If this is the last open shell, Nu will quit.</p>
<p>You can always quit Nu, even if multiple shells are active by passing the <code>--now</code> flag to the exit command. Like so: <code>exit --now</code></p>
]]></content:encoded>
    </item>
    <item>
      <title>Stdout, Stderr, and Exit Codes</title>
      <link>www.nushell.sh/book/stdout_stderr_exit_codes.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/stdout_stderr_exit_codes.html</guid>
      <source url="www.nushell.sh/rss.xml">Stdout, Stderr, and Exit Codes</source>
      <content:encoded><![CDATA[<h1 id="stdout-stderr-and-exit-codes" tabindex="-1"> Stdout, Stderr, and Exit Codes</h1>
<p>An important piece of interop between Nushell and external commands is working with the standard streams of data coming from the external.</p>
<p>The first of these important streams is stdout.</p>
<h2 id="stdout" tabindex="-1"> Stdout</h2>
<p>Stdout is the way that most external apps will send data into the pipeline or to the screen. Data sent by an external app to its stdout is received by Nushell by default if it's part of a pipeline:</p>
<div><pre><code>> external | str collect
</code></pre></div><p>The above would call the external named <code>external</code> and would redirect the stdout output stream into the pipeline. With this redirection, Nushell can then pass the data to the next command in the pipeline, here <code>str collect</code>.</p>
<p>Without the pipeline, Nushell will not do any redirection, allowing it to print directly to the screen.</p>
<h2 id="stderr" tabindex="-1"> Stderr</h2>
<p>Another common stream that external applications often use to print error messages is stderr. By default, Nushell does not do any redirection of stderr, which means that by default it will print to the screen.</p>
<p>You can force Nushell to do a redirection by using <code>do -i { ... }</code>. For example, if we wanted to call the external above and redirect its stderr, we would write:</p>
<div><pre><code>> do -i { external }
</code></pre></div><h2 id="exit-code" tabindex="-1"> Exit code</h2>
<p>Finally, external commands have an &quot;exit code&quot;. These codes help give a hint to the caller whether the command ran successfully.</p>
<p>Nushell tracks the last exit code of the recently completed external in one of two ways. The first way is with the <code>LAST_EXIT_CODE</code> environment variable.</p>
<div><pre><code>> do -i { external }
> echo $env.LAST_EXIT_CODE
</code></pre></div><p>The second uses a command called <a href="/book/commands/complete.html"><code>complete</code></a>.</p>
<h2 id="using-the-complete-command" tabindex="-1"> Using the <a href="/book/commands/complete.html"><code>complete</code></a> command</h2>
<p>The <a href="/book/commands/complete.html"><code>complete</code></a> command allows you to run an external to completion, and gather the stdout, stderr, and exit code together in one record.</p>
<p>If we try to run the external <code>cat</code> on a file that doesn't exist, we can see what <a href="/book/commands/complete.html"><code>complete</code></a> does with the streams, including the redirected stderr:</p>
<div><pre><code>> do -i { cat unknown.txt } | complete
╭───────────┬─────────────────────────────────────────────╮
│ stdout    │                                             │
│ stderr    │ cat: unknown.txt: No such file or directory │
│ exit_code │ 1                                           │
╰───────────┴─────────────────────────────────────────────╯
</code></pre></div><h2 id="raw-streams" tabindex="-1"> Raw streams</h2>
<p>Both stdout and stderr are represented as &quot;raw streams&quot; inside of Nushell. These are streams that are streams of bytes rather than structured streams, which are what internal Nushell commands use.</p>
<p>Because streams of bytes can be difficult to work with, especially given how common it is to use output as it was text data, Nushell attempts to convert raw streams into text data. This allows other commands to pull on the output of external commands and receive strings they can further process.</p>
<p>Nushell attempts to convert to text using UTF-8. If at any time the conversion fails, the rest of the stream is assumed to always be bytes.</p>
<p>If you want more control over the decoding of the byte stream, you can use the <a href="/book/commands/decode.html"><code>decode</code></a> command. The <a href="/book/commands/decode.html"><code>decode</code></a> command can be inserted into the pipeline after the external, or other raw stream-creating command, and will handle decoding the bytes based on the argument you give decode. For example, you could decode shift-jis text this way:</p>
<div><pre><code>> 0x[8a 4c] | decode shift-jis
貝
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Table of Contents</title>
      <link>www.nushell.sh/book/table_of_contents.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/table_of_contents.html</guid>
      <source url="www.nushell.sh/rss.xml">Table of Contents</source>
      <content:encoded><![CDATA[<h1 id="table-of-contents" tabindex="-1"> Table of Contents</h1>
<ul>
<li><a href="/book/installation.html">Installation</a> - Installing Nushell</li>
<li><a href="/book/">Introduction</a> - Getting started</li>
<li><a href="/book/thinking_in_nushell.html">Thinking in Nushell</a> - Thinking in Nushell</li>
<li><a href="/book/moving_around.html">Moving around</a> - Moving around in Nushell</li>
<li><a href="/book/types_of_data.html">Types of data</a> - Types of data in Nushell</li>
<li><a href="/book/loading_data.html">Loading data</a> - Loading data and using it</li>
<li><a href="/book/strings.html">Strings</a> - Strings, escape characters, and string interpolation</li>
<li><a href="/book/working_with_lists.html">Working with lists</a> - Working with Nu lists</li>
<li><a href="/book/working_with_tables.html">Working with tables</a> - Working with Nu tables</li>
<li><a href="/book/pipeline.html">Pipeline</a> - How the pipeline works</li>
<li><a href="/book/configuration.html">Configuration</a> - How to configure Nushell</li>
<li><a href="/book/3rdpartyprompts.html">3rd Party Prompts</a> - How to configure 3rd party prompts</li>
<li><a href="/book/custom_commands.html">Custom commands</a> - Creating your own commands</li>
<li><a href="/book/aliases.html">Aliases</a> - How to alias commands</li>
<li><a href="/book/operators.html">Operators</a> - Operators supported by Nushell</li>
<li><a href="/book/math.html">Math</a> - Math operations in Nushell</li>
<li><a href="/book/variables_and_subexpressions.html">Variables and subexpressions</a> - Working with variables and working with subexpressions</li>
<li><a href="/book/environment.html">Environment</a> - Working with environment variables</li>
<li><a href="/book/stdout_stderr_exit_codes.html">Stdout, stderr, and exit codes</a> - Working with stdout, stderr, and exit codes</li>
<li><a href="/book/modules.html">Modules</a> - Creating and using your own modules</li>
<li><a href="/book/scripts.html">Scripts</a> - Creating your own scripts</li>
<li><a href="/book/metadata.html">Metadata</a> - An explanation of Nu's metadata system</li>
<li><a href="/book/creating_errors.html">Creating your own errors</a> - Creating your own error messages</li>
<li><a href="/book/shells_in_shells.html">Shells</a> - Working with multiple locations</li>
<li><a href="/book/escaping.html">Escaping commands</a> - Escaping to native commands of the same name</li>
<li><a href="/book/plugins.html">Plugins</a> - Enhancing Nushell with more features using plugins</li>
<li><a href="/book/parallelism.html">Parallelism</a> - Running your code in parallel</li>
<li><a href="/book/line_editor.html">Line editor</a> - Nushell's line editor</li>
<li><a href="/book/dataframes.html">Dataframes</a> - Working with dataframes in Nushell</li>
<li><a href="/book/coloring_and_theming.html">Coloring and Theming</a> - How to change the colors and themes in Nushell</li>
<li><a href="/book/regular_expressions.html">Regular Expressions</a> - Guide to use regex</li>
<li><a href="/book/coming_from_bash.html">Coming from Bash</a> - Guide for those coming to Nushell from Bash</li>
<li><a href="/book/nushell_map.html">Nushell map from shells/DSL</a> - Guide to show how Nushell compares with SQL, LINQ, PowerShell, and Bash</li>
<li><a href="/book/nushell_map_imperative.html">Nushell map from imperative languages</a> - Guide to show how Nushell compares with Python, Kotlin, C++, C#, and Rust</li>
<li><a href="/book/nushell_map_functional.html">Nushell map from functional languages</a> - Guide to show how Nushell compares with Clojure, Tablecloth (OCaml / Elm) and Haskell</li>
<li><a href="/book/nushell_operator_map.html">Nushell operator map</a> - Guide to show how Nushell operators compare with those in general purpose programming languages</li>
<li><a href="/book/command_reference.html">Command Reference</a> - List of all Nushell's commands</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Thinking in Nu</title>
      <link>www.nushell.sh/book/thinking_in_nushell.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/thinking_in_nushell.html</guid>
      <source url="www.nushell.sh/rss.xml">Thinking in Nu</source>
      <content:encoded><![CDATA[<h1 id="thinking-in-nu" tabindex="-1"> Thinking in Nu</h1>
<p>To help you understand - and get the most out of - Nushell, we've put together this section on &quot;thinking in Nushell&quot;. By learning to think in Nushell and use the patterns it provides, you'll hit fewer issues getting started and be better setup for success.</p>
<p>So what does it mean to think in Nushell? Here are some common topics that come up with new users of Nushell.</p>
<h2 id="nushell-isn-t-bash" tabindex="-1"> Nushell isn't bash</h2>
<p>Nushell is both a programming language and a shell and because of this has its own way of working with files, directories, websites, and more. We've modeled this to work closely with what you may be familiar with other shells. Pipelines work by attaching two commands together:</p>
<div><pre><code>> ls | length
</code></pre></div><p>Nushell, for example, also has support for other common capabilities like getting the exit code from previously run commands.</p>
<p>While it does have these amenities, Nushell isn't bash. The bash way of working, and the POSIX style in general, is not one that Nushell supports. For example, in bash, you might use:</p>
<div><pre><code>> echo "hello" > output.txt
</code></pre></div><p>In Nushell, we use the <code>&gt;</code> as the greater-than operator. This fits better with the language aspect of Nushell. Instead, you pipe to a command that has the job of saving content:</p>
<div><pre><code>> echo "hello" | save output.txt
</code></pre></div><p><strong>Thinking in Nushell:</strong> The way Nushell views data is that data flows through the pipeline until it reaches the user or is handled by a final command. Nushell uses commands to do work. Learning these commands and when to use them helps you compose many kinds of pipelines.</p>
<h2 id="think-of-nushell-as-a-compiled-language" tabindex="-1"> Think of Nushell as a compiled language</h2>
<p>An important part of Nushell's design and specifically where it differs from many dynamic languages is that Nushell converts the source you give it into something to run, and then runs the result. It doesn't have an <code>eval</code> feature which allows you to continue pulling in new source during runtime. This means that tasks like including files to be part of your project need to be known paths, much like includes in compiled languages like C++ or Rust.</p>
<p>For example, the following doesn't make sense in Nushell, and will fail to execute if run as a script:</p>
<div><pre><code>echo "def abc [] { 1 + 2 }" | save output.nu
source "output.nu"
abc
</code></pre></div><p>The <code>source</code> command will grow the source that is compiled, but the <code>save</code> from the earlier line won't have had a chance to run. Nushell runs the whole block as if it were a single file, rather than running one line at a time. In the example, since the output.nu file is not created until after the 'compilation' step, the <code>source</code> command is unable to read definitions from it during parse time.</p>
<p>Another common issue is trying to dynamically create the filename to source from:</p>
<div><pre><code>> source $"($my-path)/common.nu"
</code></pre></div><p>This would require the evaluator to run and evaluate the string, but unfortunately Nushell needs this information at compile-time.</p>
<p><strong>Thinking in Nushell:</strong> Nushell is designed to use a single compile step for all the source you send it, and this is separate from evaluation. This will allow for strong IDE support, accurate error messages, an easier language for third-party tools to work with, and in the future even fancier output like being able to compile Nushell directly to a binary file.</p>
<h2 id="variables-are-immutable" tabindex="-1"> Variables are immutable</h2>
<p>Another common surprise for folks coming from other languages is that Nushell variables are immutable (and indeed some people have started to call them &quot;constants&quot; to reflect this). Coming to Nushell you'll want to spend some time becoming familiar with working in a more functional style, as this tends to help write code that works best with immutable variables.</p>
<p>You might wonder why Nushell uses immutable variables. Early on in Nushell's development we decided to see how long we could go using a more data-focused, functional style in the language. More recently, we added a key bit of functionality into Nushell that made these early experiments show their value: parallelism. By switching from <a href="/book/commands/each.html"><code>each</code></a> to <a href="/book/commands/par-each.html"><code>par-each</code></a> in any Nushell script, you're able to run the corresponding block of code in parallel over the input. This is possible because Nushell's design leans heavily on immutability, composition, and pipelining.</p>
<p>Just because Nushell variables are immutable doesn't mean things don't change. Nushell makes heavy use of the technique of &quot;shadowing&quot;. Shadowing means creating a new variable with the same name as a previously declared variable. For example, say you had an <code>$x</code> in scope, and you wanted a new <code>$x</code> that was one greater:</p>
<div><pre><code>let x = $x + 1
</code></pre></div><p>This new <code>x</code> is visible to any code that follows this line. Careful use of shadowing can make for an easier time working with variables, though it's not required.</p>
<p>Loop counters are another common pattern for mutable variables and are built into most iterating commands, for example you can get both each item and an index of each item using the <code>-n</code> flag on <a href="/book/commands/each.html"><code>each</code></a>:</p>
<div><pre><code>> ls | each -n { |it| $"Number ($it.index) is size ($it.item.size)" }
</code></pre></div><p>You can also use the <a href="/book/commands/reduce.html"><code>reduce</code></a> command to work in the same way you might mutate a variable in a loop. For example, if you wanted to find the largest string in a list of strings, you might do:</p>
<div><pre><code>> [one, two, three, four, five, six] | reduce {|curr, max|
    if ($curr | str length) > ($max | str length) {
        $curr
    } else {
        $max
    }
}
</code></pre></div><p><strong>Thinking in Nushell:</strong> If you're used to using mutable variables for different tasks, it will take some time to learn how to do each task in a more functional style. Nushell has a set of built-in capabilities to help with many of these patterns, and learning them will help you write code in a more Nushell-style. The added benefit of speeding up your scripts by running parts of your code in parallel is a nice bonus.</p>
<h2 id="nushell-s-environment-is-scoped" tabindex="-1"> Nushell's environment is scoped</h2>
<p>Nushell takes multiple design cues from compiled languages. One such cue is that languages should avoid global mutable state. Shells have commonly used global mutation to update the environment, but Nushell steers clear of this approach.</p>
<p>In Nushell, blocks control their own environment. Changes to the environment are scoped to the block where they happen.</p>
<p>In practice, this lets you write some concise code for working with subdirectories, for example, if you wanted to build each sub-project in the current directory, you could run:</p>
<div><pre><code>> ls | each { |it|
    cd $it.name
    make
}
</code></pre></div><p>The <code>cd</code> command changes the <code>PWD</code> environment variables, and this variable change does not escape the block, allowing each iteration to start from the current directory and enter the next subdirectory.</p>
<p>Having the environment scoped like this makes commands more predictable, easier to read, and when the time comes, easier to debug. Nushell also provides helper commands like <a href="/book/commands/def-env.html"><code>def-env</code></a>, <a href="/book/commands/load-env.html"><code>load-env</code></a>, as convenient ways of doing batches of updates to the environment.</p>
<p><code>*</code> - there is one exception here, where <a href="/book/commands/def-env.html"><code>def-env</code></a> allows you to create a command that participates in the caller's environment</p>
<p><strong>Thinking in Nushell:</strong> - The coding best practice of no global mutable variables extends to the environment in Nushell. Using the built-in helper commands will let you more easily work with the environment in Nushell. Taking advantage of the fact that environments are scoped to blocks can also help you write more concise scripts and interact with external commands without adding things into a global environment you don't need.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Types of data</title>
      <link>www.nushell.sh/book/types_of_data.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/types_of_data.html</guid>
      <source url="www.nushell.sh/rss.xml">Types of data</source>
      <content:encoded><![CDATA[<h1 id="types-of-data" tabindex="-1"> Types of data</h1>
<p>Traditionally, Unix shell commands have communicated with each other using strings of text. One command would output text via standard out (often abbreviated 'stdout') and the other would read in text via standard in (or 'stdin'), allowing the two commands to communicate.</p>
<p>We can think of this kind of communication as string-based.</p>
<p>Nu embraces this approach for its commands and expands it to include other kinds of data. Currently, Nu supports two kinds of data types: simple and structured.</p>
<p>Like many programming languages, Nu models data using a set of simple and structured data types. Simple data types include integers, floats, strings, booleans, dates, and paths. It also includes a special type for filesizes.</p>
<h2 id="integers" tabindex="-1"> Integers</h2>
<p>Integers (or round) numbers. Examples include 1, 5, and 100.</p>
<h2 id="decimal" tabindex="-1"> Decimal</h2>
<p>Decimal numbers are numbers with some fractional component. Examples include 1.5, 2.0, and 15.333.</p>
<h2 id="strings" tabindex="-1"> Strings</h2>
<p>A string of characters that represents text. There are a few ways we can represent text in Nushell:</p>
<p><strong>Double quotes</strong></p>
<div><pre><code>"my message"
</code></pre></div><p>Double quotes are the most common form of quotes and one you may see whenever text is required.</p>
<p><strong>Single quotes</strong></p>
<div><pre><code>'my message'
</code></pre></div><p>Single quotes also give you a string value, just like double quotes. The difference here is that they allow you to use double quotes in the text: <code>'he said &quot;can you grab my glass?&quot;'</code></p>
<p><strong>String interpolation</strong>
Nushell supports string interpolation, allowing you to run sub-expressions inside of strings prefixed with <code>$</code>. For instance:</p>
<div><pre><code>> echo $"6 x 7 = (6 * 7)"
6 x 7 = 42
</code></pre></div><div><pre><code>> ls | each { |it| echo $"($it.name) is ($it.size)" }
───┬─────────────────────
 0 │ genawait is 4.1 KB
 1 │ learncpp is 4.1 KB
 2 │ nuscripts is 4.1 KB
───┴─────────────────────
</code></pre></div><p><strong>Bare strings</strong></p>
<div><pre><code>> echo hello
</code></pre></div><p>A unique trait of Nushell is that you can also create a string of one word without any quotes at all.</p>
<p>The above is the same as if we had written:</p>
<div><pre><code>> echo "hello"
</code></pre></div><p>Also see <a href="https://www.nushell.sh/book/loading_data.html#handling-strings" target="_blank" rel="noopener noreferrer">Handling Strings</a>.</p>
<h2 id="lines" tabindex="-1"> Lines</h2>
<p>Lines are strings with an implied OS-dependent line ending. When used, the OS-specific line ending is used.</p>
<h2 id="column-paths" tabindex="-1"> Column paths</h2>
<p>Column paths are a path through the table to a specific sub-table, column, row, or cell.</p>
<p>Eg) The value <code>foo.0.bar</code> in <code>open data.toml | get foo.0.bar</code></p>
<h2 id="glob-patterns-wildcards" tabindex="-1"> Glob patterns (wildcards)</h2>
<p>In Nushell, file operations may also allow you to pass in a glob pattern, sometimes called a 'wildcard'. This allows you to give a pattern that may match multiple file paths.</p>
<p>The most general pattern is the <code>*</code>, which will match all paths. More often, you'll see this pattern used as part of another pattern, for example <code>*.bak</code> and <code>temp*</code>.</p>
<p>In Nushell, we also support double <code>*</code> to talk about traversing deeper paths that are nested inside of other directories. For example, <code>ls **/*</code> will list all the non-hidden paths nested under the current directory.</p>
<p>In addition to <code>*</code>, there is also the <code>?</code> pattern which will match a single character. For example, you can match the word &quot;port&quot; by using the pattern <code>p???</code>.</p>
<h2 id="booleans" tabindex="-1"> Booleans</h2>
<p>Booleans are the state of being true or false. Rather than writing the value directly, it is often a result of a comparison.</p>
<p>The two values of booleans are <code>true</code> and <code>false</code>.</p>
<h2 id="dates" tabindex="-1"> Dates</h2>
<p>Dates and times are held together in the Date value type. Date values used by the system are timezone-aware, and by default use the UTC timezone.</p>
<p>Dates are in three forms, based on the RFC 3339 standard:</p>
<ul>
<li>A date:
<ul>
<li><code>2022-02-02</code></li>
</ul>
</li>
<li>A date and time (in GMT):
<ul>
<li><code>2022-02-02T14:30:00</code></li>
</ul>
</li>
<li>A date and time with timezone:
<ul>
<li><code>2022-02-02T14:30:00+05:00</code></li>
</ul>
</li>
</ul>
<h2 id="duration" tabindex="-1"> Duration</h2>
<p>Durations represent a length of time. A second, 5 weeks, and a year are all durations.</p>
<p>Eg) <code>1wk</code> is the duration of one week.</p>
<p>This chart shows all durations currently supported:</p>
<table>
<thead>
<tr>
<th>Duration</th>
<th>Length</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1ns</code></td>
<td>one nanosecond</td>
</tr>
<tr>
<td><code>1us</code></td>
<td>one microsecond</td>
</tr>
<tr>
<td><code>1ms</code></td>
<td>one millisecond</td>
</tr>
<tr>
<td><code>1sec</code></td>
<td>one second</td>
</tr>
<tr>
<td><code>1min</code></td>
<td>one minute</td>
</tr>
<tr>
<td><code>1hr</code></td>
<td>one hour</td>
</tr>
<tr>
<td><code>1day</code></td>
<td>one day</td>
</tr>
<tr>
<td><code>1wk</code></td>
<td>one week</td>
</tr>
</tbody>
</table>
<h2 id="ranges" tabindex="-1"> Ranges</h2>
<p>A range is a way of expressing a sequence of values from start to finish. They take the form 'start' + '..' + 'end'. For example, the range <code>1..3</code> means the numbers 1, 2, and 3.</p>
<h2 id="inclusive-and-non-inclusive-ranges" tabindex="-1"> Inclusive and non-inclusive ranges</h2>
<p>Ranges are inclusive by default, meaning that the ending value is counted as part of the range. The range <code>1..3</code> includes the number <code>3</code> as the last value in the range.</p>
<p>Sometimes, you may want a range that comes up to a number but doesn't use that number in the output. For this case, you can use <code>..&lt;</code> instead of <code>..</code>. For example, <code>1..&lt;5</code> is the numbers 1, 2, 3, and 4.</p>
<h2 id="open-ended-ranges" tabindex="-1"> Open-ended ranges</h2>
<p>Ranges can also be open-ended. You can remove the start or the end of the range to make it open-ended.</p>
<p>Let's say you wanted to start counting at 3, but you didn't have a specific end in mind. You could use the range <code>3..</code> to represent this. When you use a range that's open-ended on the right side, remember that this will continue counting for as long as possible, which could be a very long time! You'll often want to use open-ended ranges with commands like <code>first</code>, so you can take the number of elements you want from the range.</p>
<p>You can also make the start of the range open. In this case, Nushell will start counting with <code>0</code>, and go up from there. The range <code>..2</code> is the numbers 0, 1, and 2.</p>
<h2 id="file-sizes" tabindex="-1"> File sizes</h2>
<p>File sizes are held in a special integer type called bytes. Examples include <code>100b</code>, <code>15kb</code>, and <code>100mb</code>.</p>
<p>The full list of filesize units are:</p>
<ul>
<li><code>b</code>: bytes</li>
<li><code>kb</code>: kilobytes (aka 1000 bytes)</li>
<li><code>mb</code>: megabytes</li>
<li><code>gb</code>: gigabytes</li>
<li><code>tb</code>: terabytes</li>
<li><code>pb</code>: petabytes</li>
<li><code>kib</code>: kibibytes (aka 1024 bytes)</li>
<li><code>mib</code>: mebibytes</li>
<li><code>gib</code>: gibibytes</li>
<li><code>tib</code>: tebibytes</li>
<li><code>pib</code>: pebibytes</li>
</ul>
<h2 id="binary-data" tabindex="-1"> Binary data</h2>
<p>Binary data, like the data from an image file, is a group of raw bytes.</p>
<p>You can write binary as a literal using any of the <code>0x[...]</code>, <code>0b[...]</code>, or <code>0o[...]</code> forms:</p>
<div><pre><code>> 0x[1F FF]  # Hexadecimal
> 0b[1 1010] # Binary
> 0o[777]    # Octal
</code></pre></div><p>Incomplete bytes will be left-padded with zeros.</p>
<h2 id="structured-data" tabindex="-1"> Structured data</h2>
<p>Structured data builds from the simple data. For example, instead of a single integer, structured data gives us a way to represent multiple integers in the same value. Here's a list of the currently supported structured data types: records, lists and tables.</p>
<h2 id="records" tabindex="-1"> Records</h2>
<p>Records hold key-value pairs, much like objects in JSON. As these can sometimes have many fields, a record is printed up-down rather than left-right:</p>
<div><pre><code>> echo {name: sam, rank: 10}
╭──────┬─────╮
│ name │ sam │
│ rank │ 10  │
╰──────┴─────╯
</code></pre></div><p>You can iterate over records by first transposing it into a table:</p>
<div><pre><code>> echo {name: sam, rank: 10} | transpose key value
╭───┬──────┬───────╮
│ # │ key  │ value │
├───┼──────┼───────┤
│ 0 │ name │  sam  │
│ 1 │ rank │   10  │
╰───┴──────┴───────╯
</code></pre></div><h2 id="lists" tabindex="-1"> Lists</h2>
<p>Lists can hold more than one value. These can be simple values. They can also hold rows, and the combination of a list of records is often called a &quot;table&quot;.</p>
<p>Example: a list of strings</p>
<div><pre><code>> echo [sam fred george]
───┬────────
 0 │ sam
 1 │ fred
 2 │ george
───┴────────
</code></pre></div><h2 id="tables" tabindex="-1"> Tables</h2>
<p>The table is a core data structure in Nushell. As you run commands, you'll see that many of them return tables as output. A table has both rows and columns.</p>
<p>We can create our own tables similarly to how we create a list. Because tables also contain columns and not just values, we pass in the name of the column values:</p>
<div><pre><code>> echo [[column1, column2]; [Value1, Value2]]
───┬─────────┬─────────
 # │ column1 │ column2
───┼─────────┼─────────
 0 │ Value1  │ Value2
───┴─────────┴─────────
</code></pre></div><p>We can also create a table with multiple rows of data:</p>
<div><pre><code>> echo [[column1, column2]; [Value1, Value2] [Value3, Value4]]
───┬─────────┬─────────
 # │ column1 │ column2
───┼─────────┼─────────
 0 │ Value1  │ Value2
 1 │ Value3  │ Value4
───┴─────────┴─────────
</code></pre></div><p>You can also create a table as a list of records:</p>
<div><pre><code>> echo [{name: sam, rank: 10}, {name: bob, rank: 7}]
╭───┬──────┬──────╮
│ # │ name │ rank │
├───┼──────┼──────┤
│ 0 │ sam  │   10 │
│ 1 │ bob  │    7 │
╰───┴──────┴──────╯
</code></pre></div><h2 id="blocks" tabindex="-1"> Blocks</h2>
<p>Blocks represent a block of code in Nu. For example, in the command <code>each { |it| echo $it }</code> the block is the portion contained in curly braces, <code>{ |it| echo $it }</code>. Block parameters are specified between a pair of pipe symbols (for example, <code>|it|</code>) if necessary.</p>
<p>Blocks are a useful way to represent code that can be executed on each row of data. It is idiomatic to use <code>$it</code> as a parameter name in <a href="/book/commands/each.html"><code>each</code></a> blocks, but not required; <code>each { |x| echo $x }</code> works the same way as <code>each { |it| echo $it }</code>.</p>
<h2 id="groups" tabindex="-1"> Groups</h2>
<p>Take this example:</p>
<div><pre><code>foo {
  line1
  line2; line3 | line4
}
</code></pre></div><p>Inside the block, you have two separate groups that run to completion, a group
is a semicolon-separated list of pipelines, the last of which is output to the
screen.</p>
<ul>
<li><code>line1</code> is a group unto itself, so that command will run to completion and get
displayed on the screen.</li>
<li><code>line2</code> is a pipeline inside of the second group. It runs, but its contents
are not viewed on the screen.</li>
<li><code>line3</code> | <code>line4</code> is the second pipeline in the second group. It runs, and its
contents get viewed.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Variables and Subexpressions</title>
      <link>www.nushell.sh/book/variables_and_subexpressions.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/variables_and_subexpressions.html</guid>
      <source url="www.nushell.sh/rss.xml">Variables and Subexpressions</source>
      <content:encoded><![CDATA[<h1 id="variables-and-subexpressions" tabindex="-1"> Variables and Subexpressions</h1>
<p>There are two types of evaluation expressions in Nushell: variables and subexpressions. You know that you're looking at an evaluation expression because it begins with a dollar sign (<code>$</code>). This indicates that when Nushell gets the value in this position, it will need to run an evaluation step to process the expression and then use the resulting value. Both evaluation expression forms support a simple form and a 'path' form for working with more complex data.</p>
<h2 id="variables" tabindex="-1"> Variables</h2>
<p>The simpler of the two evaluation expressions is the variable. During evaluation, a variable is replaced by its value.</p>
<p>If we create a variable, we can print its contents by using <code>$</code> to refer to it:</p>
<div><pre><code>> let my-value = 4
> echo $my-value
4
</code></pre></div><p>Variables in Nushell are immutable, that means that you can not change its value after declaration.
They can be shadowed in nested block, that results in:</p>
<div><pre><code>> let my-value = 4
> do { let my-value = 5; echo $my-value }
5
> echo $my-value
4
</code></pre></div><h2 id="variable-paths" tabindex="-1"> Variable paths</h2>
<p>A variable path works by reaching inside of the contents of a variable, navigating columns inside of it, to reach a final value. Let's say instead of <code>4</code>, we had assigned a table value:</p>
<div><pre><code>> let my-value = [[name]; [testuser]]
</code></pre></div><p>We can use a variable path to evaluate the variable <code>$my-value</code> and get the value from the <code>name</code> column in a single step:</p>
<div><pre><code>> echo $my-value.name
testuser
</code></pre></div><h2 id="subexpressions" tabindex="-1"> Subexpressions</h2>
<p>You can always evaluate a subexpression and use its result by wrapping the expression with parentheses <code>()</code>. Note that previous versions of Nushell (prior to 0.32) used <code>$()</code>.</p>
<p>The parentheses contain a pipeline that will run to completion, and the resulting value will then be used. For example, <code>(ls)</code> would run the <a href="/book/commands/ls.html"><code>ls</code></a> command and give back the resulting table and <code>(git branch --show-current)</code> runs the external git command and returns a string with the name of the current branch. You can also use parentheses to run math expressions like <code>(2 + 3)</code>.</p>
<p>Subexpressions can also be pipelines and not just single commands. If we wanted to get a list of filenames larger than ten kilobytes, we can use an subexpression to run a pipeline and assign this to a variable:</p>
<div><pre><code>> let names-of-big-files = (ls | where size > 10kb)
> echo $names-of-big-files
───┬────────────┬──────┬──────────┬──────────────
 # │    name    │ type │   size   │   modified
───┼────────────┼──────┼──────────┼──────────────
 0 │ Cargo.lock │ File │ 155.3 KB │ 17 hours ago
 1 │ README.md  │ File │  15.9 KB │ 17 hours ago
───┴────────────┴──────┴──────────┴──────────────
</code></pre></div><h2 id="subexpressions-and-paths" tabindex="-1"> Subexpressions and paths</h2>
<p>Subexpressions also support paths. For example, let's say we wanted to get a list of the filenames in the current directory. One way to do this is to use a pipeline:</p>
<div><pre><code>> ls | get name
</code></pre></div><p>We can do a very similar action in a single step using a subexpression path:</p>
<div><pre><code>> echo (ls).name
</code></pre></div><p>It depends on the needs of the code and your particular style which form works best for you.</p>
<h2 id="short-hand-subexpressions-row-conditions" tabindex="-1"> Short-hand subexpressions (row conditions)</h2>
<p>Nushell supports accessing columns in a subexpression using a simple short-hand. You may have already used this functionality before. If, for example, we wanted to only see rows from <a href="/book/commands/ls.html"><code>ls</code></a> where the entry is at least ten kilobytes we can write:</p>
<div><pre><code>> ls | where size > 10kb
</code></pre></div><p>The <code>where size &gt; 10kb</code> is a command with two parts: the command name <a href="/book/commands/where.html"><code>where</code></a> and the short-hand expression <code>size &gt; 10kb</code>. We say short-hand because <code>size</code> here is the shortened version of writing <code>$it.size</code>. This could also be written in any of the following ways:</p>
<div><pre><code>> ls | where $it.size > 10kb
> ls | where ($it.size > 10kb)
> ls | where {|$it| $it.size > 10kb }
</code></pre></div><p>For short-hand syntax to work, the column name must appear on the left-hand side of the operation (like <code>size</code> in <code>size &gt; 10kb</code>).</p>
]]></content:encoded>
    </item>
    <item>
      <title>Working with lists</title>
      <link>www.nushell.sh/book/working_with_lists.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/working_with_lists.html</guid>
      <source url="www.nushell.sh/rss.xml">Working with lists</source>
      <content:encoded><![CDATA[<h1 id="working-with-lists" tabindex="-1"> Working with lists</h1>
<h2 id="creating-lists" tabindex="-1"> Creating lists</h2>
<p>A list is an ordered collection of values.
You can create a <code>list</code> with square brackets, surrounded values separated by spaces and/or commas (for readability).
For example, <code>[foo bar baz]</code> or <code>[foo, bar, baz]</code>.</p>
<h2 id="updating-lists" tabindex="-1"> Updating lists</h2>
<p>You can <code>update</code> and <code>insert</code> values into lists as they flow through the pipeline, for example let's insert the value <code>10</code> into the middle of a list:</p>
<div><pre><code>> [1, 2, 3, 4] | insert 2 10
</code></pre></div><p>We can also use <code>update</code> to replace the 2nd element with the value <code>10</code>.</p>
<div><pre><code>> [1, 2, 3, 4] | update 1 10
</code></pre></div><p>In addition to <code>insert</code> and <code>update</code>, we also have <code>prepend</code> and <code>append</code>. These let you insert to the beginning of a list or at the end of the list, respectively.</p>
<p>For example:</p>
<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>yellow green<span>]</span>
<span>let</span> colors <span>=</span> <span>(</span><span>$colors</span> <span>|</span> prepend red<span>)</span>
<span>let</span> colors <span>=</span> <span>(</span><span>$colors</span> <span>|</span> append purple<span>)</span>
<span>echo</span> <span>$colors</span> <span># [red yellow green purple]</span>
</code></pre></div><h2 id="iterating-over-lists" tabindex="-1"> Iterating over lists</h2>
<p>To iterate over the items in a list, use the <a href="/book/commands/each.html"><code>each</code></a> command with a <a href="/book/types_of_data.html#blocks">block</a>
of Nu code that specifies what to do to each item. The block parameter (e.g. <code>|it|</code> in <code>{ |it| echo $it }</code>) is normally the current list item, but the <code>--numbered</code> (<code>-n</code>) flag can change it to have <code>index</code> and <code>item</code> values if needed. For example:</p>
<div><pre><code><span>let</span> names <span>=</span> <span>[</span>Mark Tami Amanda Jeremy<span>]</span>
<span>$names</span> <span>|</span> each <span>{</span> <span>|</span>it<span>|</span> $<span>"Hello, (<span>$it</span>)!"</span> <span>}</span>
<span># Outputs "Hello, Mark!" and three more similar lines.</span>

<span>$names</span> <span>|</span> each -n <span>{</span> <span>|</span>it<span>|</span> $<span>"(<span>$it</span>.index + 1) - (<span>$it</span>.item)"</span> <span>}</span>
<span># Outputs "1 - Mark", "2 - Tami", etc.</span>
</code></pre></div><p>The <a href="/book/commands/where.html"><code>where</code></a> command can be used to create a subset of a list, effectively filtering the list based on a condition.</p>
<p>The following example gets all the colors whose names end in &quot;e&quot;.</p>
<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>red orange yellow green blue purple<span>]</span>
<span>echo</span> <span>$colors</span> <span>|</span> where <span>(</span><span>$it</span> <span>|</span> str ends-with <span>'e'</span><span>)</span>
</code></pre></div><p>In this example, we keep only values higher than <code>7</code>.</p>
<div><pre><code><span># The block passed to where must evaluate to a boolean.</span>
<span># This outputs the list [orange blue purple].</span>

<span>let</span> scores <span>=</span> <span>[</span><span>7</span> <span>10</span> <span>8</span> <span>6</span> <span>7</span><span>]</span>
<span>echo</span> <span>$scores</span> <span>|</span> where <span>$it</span> <span>></span> <span>7</span> <span># [10 8]</span>
</code></pre></div><p>The <a href="/book/commands/reduce.html"><code>reduce</code></a> command computes a single value from a list.
It uses a block which takes 2 parameters: the current item (conventionally named <code>it</code>) and an accumulator
(conventionally named <code>acc</code>). To specify an initial value for the accumulator, use the <code>--fold</code> (<code>-f</code>) flag.
To change <code>it</code> to have <code>index</code> and <code>item</code> values, add the <code>--numbered</code> (<code>-n</code>) flag.
For example:</p>
<div><pre><code><span>let</span> scores <span>=</span> <span>[</span><span>3</span> <span>8</span> <span>4</span><span>]</span>
<span>echo</span> <span>"total ="</span> <span>(</span><span>$scores</span> <span>|</span> reduce <span>{</span> <span>|</span>it, acc<span>|</span> <span>$acc</span> + <span>$it</span> <span>}</span><span>)</span> <span># 15</span>

<span>echo</span> <span>"total ="</span> <span>(</span><span>$scores</span> <span>|</span> math <span>sum</span><span>)</span> <span># easier approach, same result</span>

<span>echo</span> <span>"product ="</span> <span>(</span><span>$scores</span> <span>|</span> reduce --fold <span>1</span> <span>{</span> <span>|</span>it, acc<span>|</span> <span>$acc</span> * <span>$it</span> <span>}</span><span>)</span> <span># 96</span>

<span>echo</span> <span>$scores</span> <span>|</span> reduce -n <span>{</span> <span>|</span>it, acc<span>|</span> <span>$acc</span> + <span>$it</span>.index * <span>$it</span>.item <span>}</span> <span># 3 + 1*8 + 2*4 = 19</span>
</code></pre></div><h2 id="accessing-the-list" tabindex="-1"> Accessing the list</h2>
<p>To access a list item at a given index, use the <code>$name.index</code> form where <code>$name</code> is a variable that holds a list.</p>
<p>For example, the second element in the list below can be accessed with <code>$names.1</code>.</p>
<div><pre><code><span>let</span> names <span>=</span> <span>[</span>Mark Tami Amanda Jeremy<span>]</span>
<span>$names</span>.1 <span># gives Tami</span>
</code></pre></div><p>If the index is in some variable <code>$index</code> we can use the <code>get</code> command to extract the item from the list.</p>
<div><pre><code><span>let</span> names <span>=</span> <span>[</span>Mark Tami Amanda Jeremy<span>]</span>
<span>let</span> index <span>=</span> <span>1</span>
<span>$names</span> <span>|</span> get <span>$index</span> <span># gives Tami</span>
</code></pre></div><p>The <a href="/book/commands/length.html"><code>length</code></a> command returns the number of items in a list.
For example, <code>[red green blue] | length</code> outputs <code>3</code>.</p>
<p>The <a href="/book/commands/empty.html"><code>empty?</code></a> command determines whether a string, list, or table is empty.
It can be used with lists as follows:</p>
<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>red green blue<span>]</span>
<span>$colors</span> <span>|</span> empty? <span># false</span>

<span>let</span> colors <span>=</span> <span>[</span><span>]</span>
<span>$colors</span> <span>|</span> empty? <span># true</span>
</code></pre></div><p>The <code>in</code> and <code>not-in</code> operators are used to test whether a value is in a list. For example:</p>
<div><pre><code><span>let</span> colors <span>=</span> <span>[</span>red green blue<span>]</span>
<span>'blue'</span> <span>in</span> <span>$colors</span> <span># true</span>
<span>'yellow'</span> <span>in</span> <span>$colors</span> <span># false</span>
<span>'gold'</span> not-in <span>$colors</span> <span># true</span>
</code></pre></div><p>The <a href="/book/commands/any.html"><code>any?</code></a> command determines if any item in a list
matches a given condition.
For example:</p>
<div><pre><code><span># Do any color names end with "e"?</span>
<span>echo</span> <span>$colors</span> <span>|</span> any? <span>(</span><span>$it</span> <span>|</span> str ends-with <span>"e"</span><span>)</span> <span># true</span>

<span># Is the length of any color name less than 3?</span>
<span>echo</span> <span>$colors</span> <span>|</span> any? <span>(</span><span>$it</span> <span>|</span> str length<span>)</span> <span>&lt;</span> <span>3</span> <span># false</span>

<span># Are any scores greater than 7?</span>
<span>echo</span> <span>$scores</span> <span>|</span> any? <span>$it</span> <span>></span> <span>7</span> <span># true</span>

<span># Are any scores odd?</span>
<span>echo</span> <span>$scores</span> <span>|</span> any? <span>$it</span> mod <span>2</span> <span>==</span> <span>1</span> <span># true</span>
</code></pre></div><p>The <a href="/book/commands/all.html"><code>all?</code></a> command determines if every item in a list
matches a given condition.
For example:</p>
<div><pre><code><span># Do all color names end with "e"?</span>
<span>echo</span> <span>$colors</span> <span>|</span> all? <span>(</span><span>$it</span> <span>|</span> str ends-with <span>"e"</span><span>)</span> <span># false</span>

<span># Is the length of all color names greater than or equal to 3?</span>
<span>echo</span> <span>$colors</span> <span>|</span> all? <span>(</span><span>$it</span> <span>|</span> str length<span>)</span> <span>>=</span> <span>3</span> <span># true</span>

<span># Are all scores greater than 7?</span>
<span>echo</span> <span>$scores</span> <span>|</span> all? <span>$it</span> <span>></span> <span>7</span> <span># false</span>

<span># Are all scores even?</span>
<span>echo</span> <span>$scores</span> <span>|</span> all? <span>$it</span> mod <span>2</span> <span>==</span> <span>0</span> <span># false</span>
</code></pre></div><h2 id="converting-the-list" tabindex="-1"> Converting the list</h2>
<p>The <a href="/book/commands/flatten.html"><code>flatten</code></a> command creates a new list from an existing list
by adding items in nested lists to the top-level list.
This can be called multiple times to flatten lists nested at any depth.
For example:</p>
<div><pre><code><span>echo</span> <span>[</span><span>1</span> <span>[</span><span>2</span> <span>3</span><span>]</span> <span>4</span> <span>[</span><span>5</span> <span>6</span><span>]</span><span>]</span> <span>|</span> flatten <span># [1 2 3 4 5 6]</span>

<span>echo</span> <span>[</span><span>[</span><span>1</span> <span>2</span><span>]</span> <span>[</span><span>3</span> <span>[</span><span>4</span> <span>5</span> <span>[</span><span>6</span> <span>7</span> <span>8</span><span>]</span><span>]</span><span>]</span><span>]</span> <span>|</span> flatten <span>|</span> flatten <span>|</span> flatten <span># [1 2 3 4 5 6 7 8]</span>
</code></pre></div><p>The <a href="/book/commands/wrap.html"><code>wrap</code></a> command converts a list to a table. Each list value will
be converted to a separate row with a single column:</p>
<div><pre><code><span>let</span> zones <span>=</span> <span>[</span>UTC CET Europe/Moscow Asia/Yekaterinburg<span>]</span>

<span># Show world clock for selected time zones</span>
<span>$zones</span> <span>|</span> wrap <span>'Zone'</span> <span>|</span> upsert Time <span>{</span><span>|</span>it<span>|</span> <span>(</span>date now <span>|</span> <span>date</span> to-timezone <span>$it</span>.Zone <span>|</span> <span>date</span> <span>format</span> <span>'%Y.%m.%d %H:%M'</span><span>)</span><span>}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Working with strings</title>
      <link>www.nushell.sh/book/working_with_strings.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/working_with_strings.html</guid>
      <source url="www.nushell.sh/rss.xml">Working with strings</source>
      <content:encoded><![CDATA[<h1 id="working-with-strings" tabindex="-1"> Working with strings</h1>
<p>Strings in Nushell help to hold text data for later use. This can include file names, file paths, names of columns,
and much more. Strings are so common that Nushell offers a couple ways to work with them, letting you pick what best
matches your needs.</p>
<h2 id="single-quoted-string" tabindex="-1"> Single-quoted string</h2>
<p>The simplest string in Nushell is the single-quoted string. This string uses the <code>'</code> character to surround some text. Here's the text for hello world as a single-quoted string:</p>
<div><pre><code><span>></span> <span>'hello world'</span>
hello world
</code></pre></div><p>Single-quoted strings don't do anything to the text they're given, making them ideal for holding a wide range of text data.</p>
<h2 id="double-quoted-strings" tabindex="-1"> Double-quoted strings</h2>
<p>For more complex strings, Nushell also offers double-quoted strings. These strings use the <code>&quot;</code> character to surround text. They also support the ability escape characters inside the text using the <code>\</code> character.</p>
<p>For example, we could write the text hello followed by a new line and then world, using escape characters and a double-quoted string:</p>
<div><pre><code><span>></span> <span>"hello<span title="\n">\n</span>world"</span>
hello
world
</code></pre></div><p>Escape characters let you quickly add in a character that would otherwise be hard to type.</p>
<p>Nushell currently supports the following escape characters:</p>
<ul>
<li><code>\&quot;</code> - double-quote character</li>
<li><code>\'</code> - single-quote character</li>
<li><code>\\</code> - backslash</li>
<li><code>\/</code> - forward slash</li>
<li><code>\b</code> - backspace</li>
<li><code>\f</code> - formfeed</li>
<li><code>\r</code> - carriage return</li>
<li><code>\n</code> - newline (line feed)</li>
<li><code>\t</code> - tab</li>
<li><code>\uXXXX</code> - a unicode character (replace XXXX with the number of the unicode character)</li>
</ul>
<h2 id="string-interpolation" tabindex="-1"> String interpolation</h2>
<p>More complex string use cases also need a new form of string: string interpolation. This is a way of building text from both raw text and the result of running expressions. String interpolation combines the results together, giving you a new string.</p>
<p>String interpolation uses <code>$&quot; &quot;</code> and <code>$' '</code> as ways to wrap interpolated text.</p>
<p>For example, let's say we have a variable called <code>$name</code> and we want to greet the name of the person contained in this variable:</p>
<div><pre><code><span>></span> <span>let</span> name <span>=</span> <span>"Alice"</span>
<span>></span> $<span>"greetings, (<span>$name</span>)"</span>
greetings, Alice
</code></pre></div><p>By wrapping expressions in <code>()</code>, we can run them to completion and use the results to help build the string.</p>
<p>String interpolation has both a single-quoted, <code>$' '</code>, and a double-quoted, <code>$&quot; &quot;</code>, form. These correspond to the single-quoted and double-quoted strings: single-quoted string interpolation doesn't support escape characters while double-quoted string interpolation does.</p>
<p>As of version 0.61, interpolated strings support escaping parentheses, so that the <code>(</code> and <code>)</code> characters may be used in a string without Nushell trying to evaluate what appears between them:</p>
<div><pre><code><span>></span> $<span>"2 + 2 is (2 + 2) \(you guessed it!)"</span>
<span>2</span> + <span>2</span> is <span>4</span> <span>(</span>you guessed it<span>!</span><span>)</span>
</code></pre></div><h2 id="splitting-strings" tabindex="-1"> Splitting strings</h2>
<p>The <a href="/book/commands/split_row.html"><code>split row</code></a> command creates a list from a string based on a delimiter.
For example, <code>let colors = (&quot;red,green,blue&quot; | split row &quot;,&quot;)</code> creates the list <code>[red green blue]</code>.</p>
<p>The <a href="/book/commands/split_column.html"><code>split column</code></a> command will create a table from a string based on a delimiter. For example <code>let colors = (&quot;red,green,blue&quot; | split column &quot;,&quot;)</code> creates a table, giving only column to each element.</p>
<p>Finally, the <a href="/book/commands/split_chars.html"><code>split chars</code></a> command will split a string into a list of characters.</p>
<h2 id="the-str-command" tabindex="-1"> The <code>str</code> command</h2>
<p>Many string functions are subcommands of the <code>str</code> command. You can get a full list using <code>help str</code>.</p>
<p>For example, you can look if a string contains a particular character using <code>str contains</code>:</p>
<div><pre><code><span>></span> <span>"hello world"</span> <span>|</span> str contains <span>"w"</span>
<span>true</span>
</code></pre></div><h3 id="trimming-strings" tabindex="-1"> Trimming Strings</h3>
<p>You can trim the sides of a string with the <a href="/book/commands/str_trim.html"><code>str trim</code></a> command. By default, the <a href="/book/commands/str_trim.html"><code>str trim</code></a> commands trims whitespace from both sides of the string. For example</p>
<div><pre><code><span>></span> <span>'       My   string   '</span> <span>|</span> str trim
My   string
</code></pre></div><p>You can specificy on which side the trimming occurs with the <code>--right</code> and <code>--left</code> options.</p>
<p>To trim a specific character, use <code>--char &lt;Character&gt;</code> to specificy the character to trim.</p>
<p>Here's an example of all the options in action:</p>
<div><pre><code><span>></span> <span>'=== Nu shell ==='</span> <span>|</span> str trim -r -c <span>'='</span>
<span>==</span><span>=</span> Nu shell
</code></pre></div><h3 id="substrings" tabindex="-1"> Substrings</h3>
<p>Substrings are slices of a string. They have startpoint and an endpoint. Heres an example of using a substring:</p>
<div><pre><code><span>></span> <span>'Hello World!'</span> <span>|</span> str index-of <span>'o'</span>
<span>4</span>
<span>></span> <span>'Hello World!'</span> <span>|</span> str index-of <span>'r'</span>
<span>8</span>
<span>></span> <span>'Hello World!'</span> <span>|</span> str substring <span>'4,8'</span>
o Wo
</code></pre></div><h3 id="string-padding" tabindex="-1"> String padding</h3>
<p>With the <a href="/book/commands/str_lpad.html"><code>str lpad</code></a> and <a href="/book/commands/str_rpad.html"><code>str rpad</code></a> commands you can add padding to a string. Padding adds characters to string until it's a certain length. For example:</p>
<div><pre><code><span>></span> <span>'1234'</span> <span>|</span> str lpad -l <span>10</span> -c <span>'0'</span>
0000001234
<span>></span> <span>'1234'</span> <span>|</span> str rpad -l <span>10</span> -c <span>'0'</span> <span>|</span> str length
<span>10</span>
</code></pre></div><h3 id="reversing-strings" tabindex="-1"> Reversing Strings</h3>
<p>This can be done easily with the <a href="/book/commands/str_reverse.html"><code>str reverse</code></a> command.</p>
<div><pre><code><span>></span> <span>'Nushell'</span> <span>|</span> str reverse
llehsuN
<span>></span> <span>[</span><span>'Nushell'</span> <span>'is'</span> <span>'cool'</span><span>]</span> <span>|</span> str reverse
╭───┬─────────╮
│ <span>0</span> │ llehsuN │
│ <span>1</span> │ si      │
│ <span>2</span> │ looc    │
╰───┴─────────╯
</code></pre></div><h2 id="string-parsing" tabindex="-1"> String Parsing</h2>
<p>With the <a href="/book/commands/parse.html"><code>parse</code></a> command you can parse a string into columns. For example:</p>
<div><pre><code><span>></span> <span>'Nushell is the best'</span> <span>|</span> parse <span>'{shell} is {type}'</span>
╭───┬─────────┬──────────╮
│ <span># │  shell  │   type   │</span>
├───┼─────────┼──────────┤
│ <span>0</span> │ Nushell │ the best │
╰───┴─────────┴──────────╯
<span>></span> <span>'Bash is kinda cringe'</span> <span>|</span> parse --regex <span>'(?P&lt;shell>\w+) is (?P&lt;type>[\w\s]+)'</span>
╭───┬───────┬──────────────╮
│ <span># │ shell │     type     │</span>
├───┼───────┼──────────────┤
│ <span>0</span> │ Bash  │ kinda cringe │
╰───┴───────┴──────────────╯
</code></pre></div><h2 id="converting-strings" tabindex="-1"> Converting Strings</h2>
<p>There are multiple ways to convert strings to and from other types.</p>
<h3 id="to-string" tabindex="-1"> To String</h3>
<ol>
<li>Using <a href="/book/commands/into_string.html"><code>into string</code></a>. e.g. <code>123 | into string</code></li>
<li>Using string interpolation. e.g. <code>$'(123)'</code></li>
<li>Using <a href="/book/commands/build-string.html"><code>build-string</code></a>. e.g. <code>build-string (123)</code></li>
</ol>
<h3 id="from-string" tabindex="-1"> From String</h3>
<ol>
<li>Using <a href="/book/commands/into.html"><code>into &lt;type&gt;</code></a>. e.g. <code>'123' | into int</code></li>
</ol>
<h2 id="coloring-strings" tabindex="-1"> Coloring Strings</h2>
<p>You can color strings with the <a href="/book/commands/ansi.html"><code>ansi</code></a> command. For example:</p>
<div><pre><code><span>></span> <span>$'(ansi purple_bold)This text is a bold purple!(ansi reset)'</span>
</code></pre></div><p><code>ansi purple_bold</code> makes the text a bold purple
<code>ansi reset</code> resets the coloring to the default. (Tip: You should always end colored strings with <code>ansi reset</code>)</p>
]]></content:encoded>
    </item>
    <item>
      <title>Working with tables</title>
      <link>www.nushell.sh/book/working_with_tables.html</link>
      <guid isPermaLink="false">www.nushell.sh/book/working_with_tables.html</guid>
      <source url="www.nushell.sh/rss.xml">Working with tables</source>
      <content:encoded><![CDATA[<h1 id="working-with-tables" tabindex="-1"> Working with tables</h1>
<p>One of the common ways of seeing data in Nu is through a table. Nu comes with a number of commands for working with tables to make it convenient to find what you're looking for, and for narrowing down the data to just what you need.</p>
<p>To start off, let's get a table that we can use:</p>
<div><pre><code>> ls
───┬───────────────┬──────┬─────────┬────────────
 # │ name          │ type │ size    │ modified
───┼───────────────┼──────┼─────────┼────────────
 0 │ files.rs      │ File │  4.6 KB │ 5 days ago
 1 │ lib.rs        │ File │   330 B │ 5 days ago
 2 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago
 3 │ parse.rs      │ File │ 49.8 KB │ 1 day ago
 4 │ path.rs       │ File │  2.1 KB │ 5 days ago
 5 │ shapes.rs     │ File │  4.7 KB │ 5 days ago
 6 │ signature.rs  │ File │  1.2 KB │ 5 days ago
───┴───────────────┴──────┴─────────┴────────────
</code></pre></div><h2 id="sorting-the-data" tabindex="-1"> Sorting the data</h2>
<p>We can sort a table by calling the <a href="/book/commands/sort-by.html"><code>sort-by</code></a> command and telling it which columns we want to use in the sort. Let's say we wanted to sort our table by the size of the file:</p>
<div><pre><code>> ls | sort-by size
───┬───────────────┬──────┬─────────┬────────────
 # │ name          │ type │ size    │ modified
───┼───────────────┼──────┼─────────┼────────────
 0 │ lib.rs        │ File │   330 B │ 5 days ago
 1 │ signature.rs  │ File │  1.2 KB │ 5 days ago
 2 │ path.rs       │ File │  2.1 KB │ 5 days ago
 3 │ files.rs      │ File │  4.6 KB │ 5 days ago
 4 │ shapes.rs     │ File │  4.7 KB │ 5 days ago
 5 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago
 6 │ parse.rs      │ File │ 49.8 KB │ 1 day ago
───┴───────────────┴──────┴─────────┴────────────
</code></pre></div><p>We can sort a table by any column that can be compared. For example, we could also have sorted the above using the &quot;name&quot;, &quot;accessed&quot;, or &quot;modified&quot; columns.</p>
<h2 id="selecting-the-data-you-want" tabindex="-1"> Selecting the data you want</h2>
<p>We can select data from a table by choosing to select specific columns or specific rows. Let's <a href="/book/commands/select.html"><code>select</code></a> a few columns from our table to use:</p>
<div><pre><code>> ls | select name size
───┬───────────────┬─────────
 # │ name          │ size
───┼───────────────┼─────────
 0 │ files.rs      │  4.6 KB
 1 │ lib.rs        │   330 B
 2 │ lite_parse.rs │  6.3 KB
 3 │ parse.rs      │ 49.8 KB
 4 │ path.rs       │  2.1 KB
 5 │ shapes.rs     │  4.7 KB
 6 │ signature.rs  │  1.2 KB
───┴───────────────┴─────────
</code></pre></div><p>This helps to create a table that's more focused on what we need. Next, let's say we want to only look at the 5 smallest files in this directory:</p>
<div><pre><code>> ls | sort-by size | first 5
───┬──────────────┬──────┬────────┬────────────
 # │ name         │ type │ size   │ modified
───┼──────────────┼──────┼────────┼────────────
 0 │ lib.rs       │ File │  330 B │ 5 days ago
 1 │ signature.rs │ File │ 1.2 KB │ 5 days ago
 2 │ path.rs      │ File │ 2.1 KB │ 5 days ago
 3 │ files.rs     │ File │ 4.6 KB │ 5 days ago
 4 │ shapes.rs    │ File │ 4.7 KB │ 5 days ago
───┴──────────────┴──────┴────────┴────────────
</code></pre></div><p>You'll notice we first sort the table by size to get to the smallest file, and then we use the <code>first 5</code> to return the first 5 rows of the table.</p>
<p>You can also <code>skip</code> rows that you don't want. Let's skip the first two of the 5 rows we returned above:</p>
<div><pre><code>> ls | sort-by size | first 5 | skip 2
───┬───────────┬──────┬────────┬────────────
 # │ name      │ type │ size   │ modified
───┼───────────┼──────┼────────┼────────────
 0 │ path.rs   │ File │ 2.1 KB │ 5 days ago
 1 │ files.rs  │ File │ 4.6 KB │ 5 days ago
 2 │ shapes.rs │ File │ 4.7 KB │ 5 days ago
───┴───────────┴──────┴────────┴────────────
</code></pre></div><p>We've narrowed it to three rows we care about.</p>
<p>Let's look at a few other commands for selecting data. You may have wondered why the rows of the table are numbers. This acts as a handy way to get to a single row. Let's sort our table by the file name and then pick one of the rows with the <code>select</code> command using its row number:</p>
<div><pre><code>> ls | sort-by name
───┬───────────────┬──────┬─────────┬────────────
 # │ name          │ type │ size    │ modified
───┼───────────────┼──────┼─────────┼────────────
 0 │ files.rs      │ File │  4.6 KB │ 5 days ago
 1 │ lib.rs        │ File │   330 B │ 5 days ago
 2 │ lite_parse.rs │ File │  6.3 KB │ 5 days ago
 3 │ parse.rs      │ File │ 49.8 KB │ 1 day ago
 4 │ path.rs       │ File │  2.1 KB │ 5 days ago
 5 │ shapes.rs     │ File │  4.7 KB │ 5 days ago
 6 │ signature.rs  │ File │  1.2 KB │ 5 days ago
───┴───────────────┴──────┴─────────┴────────────

> ls | sort-by name | select 5
───┬───────────────┬──────┬─────────┬────────────
 # │ name          │ type │ size    │ modified
───┼───────────────┼──────┼─────────┼────────────
 0 │ shapes.rs     │ File │  4.7 KB │ 5 days ago
───┴───────────────┴──────┴─────────┴────────────
</code></pre></div><h2 id="getting-data-out-of-a-table" tabindex="-1"> Getting data out of a table</h2>
<p>So far, we've worked with tables by trimming the table down to only what we need. Sometimes we may want to go a step further and only look at the values in the cells themselves rather than taking a whole column. Let's say, for example, we wanted to only get a list of the names of the files. For this, we use the <a href="/book/commands/get.html"><code>get</code></a> command:</p>
<div><pre><code>> ls | get name
───┬───────────────
 0 │ files.rs
 1 │ lib.rs
 2 │ lite_parse.rs
 3 │ parse.rs
 4 │ path.rs
 5 │ shapes.rs
 6 │ signature.rs
───┴───────────────
</code></pre></div><p>We now have the values for each of the filenames.</p>
<p>This might look like the <a href="/book/commands/select.html"><code>select</code></a> command we saw earlier, so let's put that here as well to compare the two:</p>
<div><pre><code>> ls | select name
───┬───────────────
 # │ name
───┼───────────────
 0 │ files.rs
 1 │ lib.rs
 2 │ lite_parse.rs
 3 │ parse.rs
 4 │ path.rs
 5 │ shapes.rs
 6 │ signature.rs
───┴───────────────
</code></pre></div><p>These look very similar! Let's see if we can spell out the difference between these two commands to make it clear:</p>
<ul>
<li><a href="/book/commands/select.html"><code>select</code></a> - creates a new table which includes only the columns specified</li>
<li><a href="/book/commands/get.html"><code>get</code></a> - returns the values inside the column specified as a list</li>
</ul>
<p>The one way to tell these apart looking at the table is that the column names are missing, which lets us know that this is going to be a list of values we can work with.</p>
<p>The <a href="/book/commands/get.html"><code>get</code></a> command can go one step further and take a path to data deeper in the table. This simplifies working with more complex data, like the structures you might find in a .json file.</p>
<h2 id="changing-data-in-a-table" tabindex="-1"> Changing data in a table</h2>
<p>In addition to selecting data from a table, we can also update what the table has. We may want to combine tables, add new columns, or edit the contents of a cell. In Nu, rather than editing in place, each of the commands in the section will return a new table in the pipeline.</p>
<h3 id="concatenating-tables" tabindex="-1"> Concatenating Tables</h3>
<p>We can concatenate tables with identical column names using <a href="/book/commands/append.html"><code>append</code></a>:</p>
<div><pre><code>> let $first = [[a b]; [1 2]]
> let $second = [[a b]; [3 4]]
> $first | append $second
───┬───┬───
 # │ a │ b
───┼───┼───
 0 │ 1 │ 2
 1 │ 3 │ 4
───┴───┴───
</code></pre></div><h3 id="merging-tables" tabindex="-1"> Merging Tables</h3>
<p>We can use the <a href="/book/commands/merge.html"><code>merge</code></a> command to merge two (or more) tables together</p>
<div><pre><code>> let $first = [[a b]; [1 2]]
> let $second = [[c d]; [3 4]]
> $first | merge { $second }
───┬───┬───┬───┬───
 # │ a │ b │ c │ d
───┼───┼───┼───┼───
 0 │ 1 │ 2 │ 3 │ 4
───┴───┴───┴───┴───
</code></pre></div><p>Let's add a third table:</p>
<div><pre><code>> let $third = [[e f]; [5 6]]
</code></pre></div><p>We could join all three tables together like this:</p>
<div><pre><code>> $first | merge { $second } | merge { $third }
───┬───┬───┬───┬───┬───┬───
 # │ a │ b │ c │ d │ e │ f
───┼───┼───┼───┼───┼───┼───
 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6
───┴───┴───┴───┴───┴───┴───
</code></pre></div><p>Or we could use the <a href="/book/commands/reduce.html"><code>reduce</code></a> command to dynamically merge all tables:</p>
<div><pre><code>> [$first $second $third] | reduce {|it, acc| $acc|merge { $it }}
───┬───┬───┬───┬───┬───┬───
 # │ a │ b │ c │ d │ e │ f
───┼───┼───┼───┼───┼───┼───
 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6
───┴───┴───┴───┴───┴───┴───
</code></pre></div><h3 id="adding-a-new-column" tabindex="-1"> Adding a new column</h3>
<p>We can use the <a href="/book/commands/insert.html"><code>insert</code></a> command to add a new column to the table. Let's look at an example:</p>
<div><pre><code>> open rustfmt.toml
─────────┬──────
 edition │ 2018
─────────┴──────
</code></pre></div><p>Let's add a column called &quot;next_edition&quot; with the value 2021:</p>
<div><pre><code>> open rustfmt.toml | insert next_edition 2021
──────────────┬──────
 edition      │ 2018
 next_edition │ 2021
──────────────┴──────
</code></pre></div><p>Notice that we if open the original file, the contents have stayed the same:</p>
<div><pre><code>> open rustfmt.toml
─────────┬──────
 edition │ 2018
─────────┴──────
</code></pre></div><p>Changes in Nu are functional changes, meaning that they work on the values themselves rather than trying to cause a permanent change. This lets us do many different types of work in our pipeline until we're ready to write out the result with any changes we'd like if we choose to. Here we could write out the result using the <a href="/book/commands/save.html"><code>save</code></a> command:</p>
<div><pre><code>> open rustfmt.toml | insert next_edition 2021 | save rustfmt2.toml
> open rustfmt2.toml
──────────────┬──────
 edition      │ 2018
 next_edition │ 2021
──────────────┴──────
</code></pre></div><h3 id="updating-a-column" tabindex="-1"> Updating a column</h3>
<p>In a similar way to the <a href="/book/commands/insert.html"><code>insert</code></a> command, we can also use the <a href="/book/commands/update.html"><code>update</code></a> command to change the contents of a column to a new value. To see it in action let's open the same file:</p>
<div><pre><code>> open rustfmt.toml
─────────┬──────
 edition │ 2018
─────────┴──────
</code></pre></div><p>And now, let's update the edition to point at the next edition we hope to support:</p>
<div><pre><code>> open rustfmt.toml | update edition 2021
─────────┬──────
 edition │ 2021
─────────┴──────
</code></pre></div><p>You can also use the <a href="/book/commands/upsert.html"><code>upsert</code></a> command to insert or update depending on whether the column already exists.</p>
<h3 id="moving-columns" tabindex="-1"> Moving columns</h3>
<p>You can use <code>move</code> to move columns in the table. For example, if we wanted to move the &quot;name&quot; column from <code>ls</code> after the &quot;size&quot; column, we could do:</p>
<div><pre><code>> ls | move name --after size
╭────┬──────┬─────────┬───────────────────┬──────────────╮
│ #  │ type │  size   │       name        │   modified   │
├────┼──────┼─────────┼───────────────────┼──────────────┤
│  0 │ dir  │   256 B │ Applications      │ 3 days ago   │
│  1 │ dir  │   256 B │ Data              │ 2 weeks ago  │
│  2 │ dir  │   448 B │ Desktop           │ 2 hours ago  │
│  3 │ dir  │   192 B │ Disks             │ a week ago   │
│  4 │ dir  │   416 B │ Documents         │ 4 days ago   │
...
</code></pre></div><h3 id="renaming-columns" tabindex="-1"> Renaming columns</h3>
<p>You can also <code>rename</code> columns in a table by passing it through the rename command. If we wanted to run <code>ls</code> and rename the columns, we can use this example:</p>
<div><pre><code>> ls | rename filename filetype filesize date
╭────┬───────────────────┬──────────┬──────────┬──────────────╮
│ #  │     filename      │ filetype │ filesize │     date     │
├────┼───────────────────┼──────────┼──────────┼──────────────┤
│  0 │ Applications      │ dir      │    256 B │ 3 days ago   │
│  1 │ Data              │ dir      │    256 B │ 2 weeks ago  │
│  2 │ Desktop           │ dir      │    448 B │ 2 hours ago  │
│  3 │ Disks             │ dir      │    192 B │ a week ago   │
│  4 │ Documents         │ dir      │    416 B │ 4 days ago   │
...
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Introduction</title>
      <link>www.nushell.sh/contributor-book/</link>
      <guid isPermaLink="false">www.nushell.sh/contributor-book/</guid>
      <source url="www.nushell.sh/rss.xml">Introduction</source>
      <content:encoded><![CDATA[<h1 id="introduction" tabindex="-1"> Introduction</h1>
<p>Hello and welcome to the Nushell Contributor Book. Nushell, or Nu as its often called, is a modern shell written in Rust. You can learn more about Nu and how to use it in the <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">Nu book</a>. In this book, we'll be looking at how to contribute to the Nu project itself, how Nu's code is organized, and the core concepts behind its design.</p>
<p>Contributing to Nu will require at least some basic programmer experience, and it's helpful to have some experience with Rust. That said, we've had people contribute to Nu who have never written a line of Rust before writing their submission. If you are interested in contributing, there's a growing community of people who would like to help you succeed.</p>
<p>This covers three separate areas:</p>
<ol>
<li>The Design Philosophy of Nu</li>
<li>The Implementation of Nu</li>
<li>Best practices of coding for Nu</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Commands</title>
      <link>www.nushell.sh/contributor-book/commands.html</link>
      <guid isPermaLink="false">www.nushell.sh/contributor-book/commands.html</guid>
      <source url="www.nushell.sh/rss.xml">Commands</source>
      <content:encoded><![CDATA[<h1 id="commands" tabindex="-1"> Commands</h1>
<p>Commands are the building blocks for pipelines in Nu. They do the action of the pipeline, whether creating data, changing data as it flows from inputs to outputs, or viewing data once it has exited the pipeline. There are two types of commands: internal commands, those commands built to run inside of Nu, and external commands, commands that are outside of Nu and communicate with standard Unix-style <code>stdin</code>/<code>stdout</code>.</p>
<h2 id="internal-commands" tabindex="-1"> Internal commands</h2>
<p>All commands inside of Nu, including plugins, are internal commands. Internal commands communicate with each other using streams of <a href="https://github.com/nushell/nushell/blob/d30c40b40ebfbb411a503ad7c7bceae8029c6689/crates/nu-source/src/meta.rs#L91" target="_blank" rel="noopener noreferrer">Tagged&lt;Value&gt;</a> and <a href="https://github.com/nushell/nushell/blob/main/crates/nu-errors/src/lib.rs#L179" target="_blank" rel="noopener noreferrer">ShellError</a>.</p>
<h3 id="signature" tabindex="-1"> Signature</h3>
<p>Commands use a light typechecking pass to ensure that arguments passed to them can be handled correctly. To enable this, each command provides a Signature which tells Nu:</p>
<ul>
<li>The name of the command</li>
<li>The positional arguments (e.g. in <code>start x y</code> the <code>x</code> and <code>y</code> are positional arguments)</li>
<li>If the command takes an unbounded number of additional positional arguments (e.g. <code>start a1 a2 a3 ... a99 a100</code>)</li>
<li>The named arguments (e.g. <code>start --now</code>)</li>
<li>If the command is a filter or a sink</li>
</ul>
<p>With this information, a pipeline can be checked for potential problems before it's executed.</p>
<h2 id="external-commands" tabindex="-1"> External commands</h2>
<p>An external command is any command that is not part of the Nu built-in commands or plugins. If a command is called that Nu does not know about, it will call out to the underlying environment with the provided arguments in an attempt to invoke this command as an external program.</p>
<h2 id="communicating-between-internal-and-external-commands" tabindex="-1"> Communicating between internal and external commands</h2>
<h3 id="internal-to-internal" tabindex="-1"> Internal to internal</h3>
<p>Internal commands communicate with each other using the complete value stream that Nu provides, which includes all the built-in file types. This includes communication between internal commands and plugins (in both directions).</p>
<h3 id="internal-to-external" tabindex="-1"> Internal to external</h3>
<p>Internal commands that send text to external commands need to have prepared text strings ahead of time. If an object is sent directly to an external command, that is considered an error as there is no way to infer how the structured data should be represented for the external command. The user is expected to either narrow down to a simple data cell or to use one of the file type converters (like <code>to-json</code>) to convert the table into a string representation.</p>
<p>The external command is opened so that its <code>stdin</code> is redirected, so that the data can be sent to it.</p>
<h3 id="external-to-internal" tabindex="-1"> External to internal</h3>
<p>External commands send a series of strings via their <code>stdout</code>. These strings are read into the pipeline and are made available to the internal command that is next in the pipeline, or displayed to the user if the external command is the last step of the pipeline.</p>
<h3 id="external-to-external" tabindex="-1"> External to external</h3>
<p>External commands communicate with each other via <code>stdin</code>/<code>stdout</code>. As Nu will detect this situation, it will redirect the <code>stdout</code> of the first command to the <code>stdin</code> of the following external command. In this way, the expected behavior of a shell pipeline between external commands is maintained.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Metadata</title>
      <link>www.nushell.sh/contributor-book/metadata.html</link>
      <guid isPermaLink="false">www.nushell.sh/contributor-book/metadata.html</guid>
      <source url="www.nushell.sh/rss.xml">Metadata</source>
      <content:encoded><![CDATA[<h1 id="metadata" tabindex="-1"> Metadata</h1>
<p>All values that flow into and out of commands in Nu are tagged with metadata. You'll see this commonly around the codebase as <code>Tagged&lt;Value&gt;</code>.</p>
<p>Though the metadata that is tracked is still in its early days, we expect to expand this as Nu matures.</p>
<p>Currently, there are two pieces of metadata tracked on each value:</p>
<h2 id="anchor" tabindex="-1"> Anchor</h2>
<p>Anchor represents the location that the value came from originally. If the value was loaded from a file, it will be the filename. If it was loaded from a URL, it will be the URL, and so on.</p>
<h2 id="span" tabindex="-1"> Span</h2>
<p>A span holds the starting and ending locations of a value that was created or referenced on the commandline. These are most commonly used in the underline beneath an error message.</p>
<p>While spans from programming languages traditionally also carry the file the span came from, here we assume the span always spans a value referenced on the commandline rather than in a source file. As Nu gets the ability to run its own source files, this will likely need to be revisited.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Philosophy</title>
      <link>www.nushell.sh/contributor-book/philosophy.html</link>
      <guid isPermaLink="false">www.nushell.sh/contributor-book/philosophy.html</guid>
      <source url="www.nushell.sh/rss.xml">Philosophy</source>
      <content:encoded><![CDATA[<h1 id="philosophy" tabindex="-1"> Philosophy</h1>
<h2 id="core-values" tabindex="-1"> Core Values</h2>
<p>Nu's core value is that working in a shell should be fun. To support this, we believe that:</p>
<ul>
<li>A modern shell should be designed for usability and ergonomics. <strong>Above all else, Nu should be fun to use.</strong></li>
<li>It should provide great informative errors messages when a command will not succeed correctly. This is critically important. A fun shell gives <strong>clear, actionable errors</strong>.</li>
<li>It should be built around supporting casual use, as this is the majority of use in a shell, even by experienced users. Building a shell that is <strong>fun for casual use makes a fun shell for everyone</strong>.</li>
<li>Nu supports experimentation and <strong>growing ideas from experiments to programs</strong>. The ability to evolve ideas to one-liners, scripts, and then to programs is a key role a shell plays. To support this, Nu builds on the idea of composable commands that work on a shared set of datatypes.</li>
</ul>
<h2 id="non-goals" tabindex="-1"> Non-goals</h2>
<ul>
<li><em>Optimal performance</em>. While we care about performance, the focus on performance should be in service of making Nu more usable and enjoyable to use. Best performance on micro-benchmarks is a non-goal.</li>
<li><em>Strictness</em>. We want to help users write good scripts, but we should focus on helping them write correct scripts with good errors and good documentation.</li>
<li><em>POSIX-compliance</em>. Nu intentionally optimizes for a pleasant experience over matching how commandline programs work in a POSIX-compliant way. It's important to be able to interop between Nu commands and external commands, but maintaining strict compatibility is a non-goal.</li>
<li><em>Paradigm adherence</em>. Nu looks at the shell space flexibly, and borrows good ideas where possible from functional programming, systems programming, OOP, and more. Following any particular paradigm rigidly does not serve the goals of the Nu project.</li>
</ul>
<h2 id="basic-design" tabindex="-1"> Basic Design</h2>
<p>The core of the Nu design is the data model. Commands largely follow in service of making it easy to create data, to work with data, and to view data. One of the visible pieces of this work is the pipeline, which borrows heavily from the original Unix ideas of connecting simple programs together into more complex commands. Nu takes this Unix philosophy and extends it from only strings to the wider data set that is more common in modern programming languages.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Plugins</title>
      <link>www.nushell.sh/contributor-book/plugins.html</link>
      <guid isPermaLink="false">www.nushell.sh/contributor-book/plugins.html</guid>
      <source url="www.nushell.sh/rss.xml">Plugins</source>
      <content:encoded><![CDATA[<h1 id="plugins" tabindex="-1"> Plugins</h1>
<h2 id="protocol" tabindex="-1"> Protocol</h2>
<p>Plugins use JSON-RPC over stdin/stdout (much in the same way VSCode plugins do). The protocol is split into two stages.</p>
<p>The first stage of the protocol deals with the initial discovery of the plugin. A plugin is started up and then asked to reply with its configuration. Much the same was as commands, plugins have a signature that they respond to Nu with. Once Nu has this signature, it knows how to later invoke the plugin to do work.</p>
<p>The second stage is the actual doing of work. Here the plugins are sent either a stream of data where they act over the stream element-wise as a filter, or they take all the elements at once in a final processing step as a sink.</p>
<h2 id="discovery" tabindex="-1"> Discovery</h2>
<p>Nu discovers plugins by checking all directories specified by <code>plugin_dirs</code> config entry and the directory where <code>nu</code> executable lies. You can change the configuration by executing <code>config set plugin_dirs [&quot;/path&quot;,&quot;/to&quot;,&quot;/search&quot;]</code> in Nu.
In each directory, Nu is looking for executable files that match the pattern <code>nu_plugin_*</code> where <code>*</code> is a minimum of one alphanumeric character.
On Windows, this has a similar pattern of <code>nu_plugin_*.exe</code> or <code>nu_plugin_*.bat</code>.</p>
<p>Once a matching file has been discovered, Nu will invoke the file and pass to it the first JSON-RPC command: config.
Config replies with the signature of the plugin, which is identical to the signature commands use.</p>
<p>Nu continues in this way until it has traveled across all directories in the path.</p>
<p>After it has traversed the path, it will look in two more directories: the target/debug and the target/release directories. It will pick one or the other depending whether Nu was compiled in debug mode or release mode, respectively. This allows for easier testing of plugins during development.</p>
<h2 id="creating-a-plugin-in-rust" tabindex="-1"> Creating a plugin (in Rust)</h2>
<p>In this section, we'll walk through creating a Nu plugin using Rust.</p>
<p>Let's create our project. For this example, we'll create a simple <code>len</code> command which will return the length of strings it's passed.</p>
<p>First off, we'll create our plugin:</p>
<div><pre><code>> cargo new nu_plugin_len
> cd nu_plugin_len
</code></pre></div><p>Next, we'll add <code>nu</code> to the list of dependencies to the Cargo.toml directory. At the bottom of the new Cargo.toml file, add this new dependency on the <code>nu</code> crate:</p>
<div><pre><code>[dependencies]
nu-plugin = "~0"
nu-protocol = "~0"
nu-source = "~0"
nu-errors = "~0"
</code></pre></div><p>With this, we can open up src/main.rs and create our plugin.</p>
<div><pre><code><span>use</span> <span>nu_errors<span>::</span></span><span>ShellError</span><span>;</span>
<span>use</span> <span>nu_plugin<span>::</span></span><span>{</span>serve_plugin<span>,</span> <span>Plugin</span><span>}</span><span>;</span>
<span>use</span> <span>nu_protocol<span>::</span></span><span>{</span>
    <span>CallInfo</span><span>,</span> <span>Primitive</span><span>,</span> <span>ReturnSuccess</span><span>,</span> <span>ReturnValue</span><span>,</span> <span>Signature</span><span>,</span> <span>UntaggedValue</span><span>,</span> <span>Value</span><span>,</span>
<span>}</span><span>;</span>

<span>struct</span> <span>Len</span><span>;</span>

<span>impl</span> <span>Len</span> <span>{</span>
    <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Len</span> <span>{</span>
        <span>Len</span>
    <span>}</span>

    <span>fn</span> <span>len</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> value<span>:</span> <span>Value</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Value</span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>match</span> <span>&amp;</span>value<span>.</span>value <span>{</span>
            <span>UntaggedValue</span><span>::</span><span>Primitive</span><span>(</span><span>Primitive</span><span>::</span><span>String</span><span>(</span>s<span>)</span><span>)</span> <span>=></span> <span>Ok</span><span>(</span><span>Value</span> <span>{</span>
                value<span>:</span> <span>UntaggedValue</span><span>::</span><span>int</span><span>(</span>s<span>.</span><span>len</span><span>(</span><span>)</span> <span>as</span> <span>i64</span><span>)</span><span>,</span>
                tag<span>:</span> value<span>.</span>tag<span>,</span>
            <span>}</span><span>)</span><span>,</span>
            _ <span>=></span> <span>Err</span><span>(</span><span>ShellError</span><span>::</span><span>labeled_error</span><span>(</span>
                <span>"Unrecognized type in stream"</span><span>,</span>
                <span>"'len' given non-string info by this"</span><span>,</span>
                value<span>.</span>tag<span>.</span>span<span>,</span>
            <span>)</span><span>)</span><span>,</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

<span>impl</span> <span>Plugin</span> <span>for</span> <span>Len</span> <span>{</span>
    <span>fn</span> <span>config</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Signature</span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>Signature</span><span>::</span><span>build</span><span>(</span><span>"len"</span><span>)</span><span>.</span><span>desc</span><span>(</span><span>"My custom len plugin"</span><span>)</span><span>.</span><span>filter</span><span>(</span><span>)</span><span>)</span>
    <span>}</span>

    <span>fn</span> <span>begin_filter</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _<span>:</span> <span>CallInfo</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Vec</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>vec!</span><span>[</span><span>]</span><span>)</span>
    <span>}</span>

    <span>fn</span> <span>filter</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> input<span>:</span> <span>Value</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Vec</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>vec!</span><span>[</span><span>ReturnSuccess</span><span>::</span><span>value</span><span>(</span><span>self</span><span>.</span><span>len</span><span>(</span>input<span>)</span><span>?</span><span>)</span><span>]</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>fn</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>serve_plugin</span><span>(</span><span>&amp;</span><span>mut</span> <span>Len</span><span>::</span><span>new</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span>
</code></pre></div><p>There are a few moving parts here, so let's break them down one by one.</p>
<p>First off, let's look at main:</p>
<div><pre><code><span>fn</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>serve_plugin</span><span>(</span><span>&amp;</span><span>mut</span> <span>Len</span><span>::</span><span>new</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span>
</code></pre></div><p>In main, we just call a single function <code>serve_plugin</code>. This will do the work of calling into our plugin, handling the JSON serialization/deserialization, and sending values and errors back to Nu for us. To start it up, we pass it something that implements the <code>Plugin</code> trait.</p>
<p>Next, above main, is this implementation of the <code>Plugin</code> trait for our particular plugin. Here, we'll implement the Plugin trait for our type, Len, which we'll see more of soon. Let's take a look at how we implement this trait:</p>
<div><pre><code><span>impl</span> <span>Plugin</span> <span>for</span> <span>Len</span> <span>{</span>
    <span>fn</span> <span>config</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Signature</span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>Signature</span><span>::</span><span>build</span><span>(</span><span>"len"</span><span>)</span><span>.</span><span>desc</span><span>(</span><span>"My custom len plugin"</span><span>)</span><span>.</span><span>filter</span><span>(</span><span>)</span><span>)</span>
    <span>}</span>

    <span>fn</span> <span>begin_filter</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _<span>:</span> <span>CallInfo</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Vec</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>vec!</span><span>[</span><span>]</span><span>)</span>
    <span>}</span>

    <span>fn</span> <span>filter</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> input<span>:</span> <span>Value</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Vec</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>vec!</span><span>[</span><span>ReturnSuccess</span><span>::</span><span>value</span><span>(</span><span>self</span><span>.</span><span>len</span><span>(</span>input<span>)</span><span>?</span><span>)</span><span>]</span><span>)</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p>The two most important parts of this implementation are the <code>config</code> part, which is run by Nu when it first starts up. This tells Nu the basic information about the plugin: its name, the parameters it takes, the description, and what kind of plugin it is.
Here, we tell Nu that the name is &quot;len&quot;, give it a basic description for <code>help</code> to display and that we are a filter plugin (rather than a sink plugin).</p>
<p>Next, in the <code>filter</code> implementation, we describe how to do work as values flow into this plugin. Here, we receive one value (a <code>Value</code>) at a time.
We also return either a Vec of values or an error.
Returning a Vec instead of a single value allows us to remove values, or add new ones, in addition to working with the single value coming in.</p>
<p>Because <code>begin_filter</code> doesn't do anything, we can remove it. This would make the above:</p>
<div><pre><code><span>impl</span> <span>Plugin</span> <span>for</span> <span>Len</span> <span>{</span>
    <span>fn</span> <span>config</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Signature</span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>Signature</span><span>::</span><span>build</span><span>(</span><span>"len"</span><span>)</span><span>.</span><span>desc</span><span>(</span><span>"My custom len plugin"</span><span>)</span><span>.</span><span>filter</span><span>(</span><span>)</span><span>)</span>
    <span>}</span>

    <span>fn</span> <span>filter</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> input<span>:</span> <span>Value</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Vec</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>Ok</span><span>(</span><span>vec!</span><span>[</span><span>ReturnSuccess</span><span>::</span><span>value</span><span>(</span><span>self</span><span>.</span><span>len</span><span>(</span>input<span>)</span><span>?</span><span>)</span><span>]</span><span>)</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p>If that's the case, why have a <code>begin_filter</code>? Let's look at the signature of <code>begin_filter</code> a little closer:</p>
<div><pre><code><span>fn</span> <span>begin_filter</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _<span>:</span> <span>CallInfo</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Vec</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
    <span>Ok</span><span>(</span><span>vec!</span><span>[</span><span>]</span><span>)</span>
<span>}</span>
</code></pre></div><p>Our <code>Len</code> command doesn't require any parameters, but if it did this is where we'd get them. From here, we could configure our filter, and then use that with each step in of the <code>filter</code> command over the input.</p>
<p>Next, let's look at <code>Len</code> itself to see what it's doing:</p>
<div><pre><code><span>struct</span> <span>Len</span><span>;</span>

<span>impl</span> <span>Len</span> <span>{</span>
    <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Len</span> <span>{</span>
        <span>Len</span>
    <span>}</span>

    <span>fn</span> <span>len</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> value<span>:</span> <span>Value</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Value</span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>match</span> <span>&amp;</span>value<span>.</span>value <span>{</span>
            <span>UntaggedValue</span><span>::</span><span>Primitive</span><span>(</span><span>Primitive</span><span>::</span><span>String</span><span>(</span>s<span>)</span><span>)</span> <span>=></span> <span>Ok</span><span>(</span><span>Value</span> <span>{</span>
                value<span>:</span> <span>UntaggedValue</span><span>::</span><span>int</span><span>(</span>s<span>.</span><span>len</span><span>(</span><span>)</span> <span>as</span> <span>i64</span><span>)</span><span>,</span>
                tag<span>:</span> value<span>.</span>tag<span>,</span>
            <span>}</span><span>)</span><span>,</span>
            _ <span>=></span> <span>Err</span><span>(</span><span>ShellError</span><span>::</span><span>labeled_error</span><span>(</span>
                <span>"Unrecognized type in stream"</span><span>,</span>
                <span>"'len' given non-string info by this"</span><span>,</span>
                value<span>.</span>tag<span>.</span>span<span>,</span>
            <span>)</span><span>)</span><span>,</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p>We create a very simple <code>Len</code>, in fact, it has no structure at all. Instead, it's just a placeholder that will let us implement the plugin.</p>
<p>From here, we create two methods:</p>
<div><pre><code><span>impl</span> <span>Len</span> <span>{</span>
    <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Len</span> <span>{</span>
        <span>Len</span>
    <span>}</span>
    <span>// ...</span>
<span>}</span>
</code></pre></div><p>The first method is optional, it's just a convenient way to create a new value of the <code>Len</code> type. The real work is done in the second method:</p>
<div><pre><code><span>impl</span> <span>Len</span> <span>{</span>
    <span>// ...</span>

    <span>fn</span> <span>len</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> value<span>:</span> <span>Value</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>Value</span><span>,</span> <span>ShellError</span><span>></span> <span>{</span>
        <span>match</span> <span>&amp;</span>value<span>.</span>value <span>{</span>
            <span>UntaggedValue</span><span>::</span><span>Primitive</span><span>(</span><span>Primitive</span><span>::</span><span>String</span><span>(</span>s<span>)</span><span>)</span> <span>=></span> <span>Ok</span><span>(</span><span>Value</span> <span>{</span>
                value<span>:</span> <span>UntaggedValue</span><span>::</span><span>int</span><span>(</span>s<span>.</span><span>len</span><span>(</span><span>)</span> <span>as</span> <span>i64</span><span>)</span><span>,</span>
                tag<span>:</span> value<span>.</span>tag<span>,</span>
            <span>}</span><span>)</span><span>,</span>
            _ <span>=></span> <span>Err</span><span>(</span><span>ShellError</span><span>::</span><span>labeled_error</span><span>(</span>
                <span>"Unrecognized type in stream"</span><span>,</span>
                <span>"'len' given non-string info by this"</span><span>,</span>
                value<span>.</span>tag<span>.</span>span<span>,</span>
            <span>)</span><span>)</span><span>,</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p>This method will act over each element in the pipeline as it flows into our plugin. For our plugin, we really only care about strings so that we can return their length.</p>
<p>We use Rust's pattern matching to check the type of the Value coming in, and then operate with it if it's a string. The value is a <code>Tagged&lt;Value&gt;</code> so it carries with it where the value came from. If the value isn't a string, we give an error and let the user know where the value came from that is causing the problem. (Note, if we had wanted to also put an error underline under the command name, we could get the <code>name_span</code> from the CallInfo given to <code>begin_filter</code>)</p>
<p>Lastly, let's look at the top of the file:</p>
<div><pre><code><span>use</span> <span>nu_errors<span>::</span></span><span>ShellError</span><span>;</span>
<span>use</span> <span>nu_plugin<span>::</span></span><span>{</span>serve_plugin<span>,</span> <span>Plugin</span><span>}</span><span>;</span>
<span>use</span> <span>nu_protocol<span>::</span></span><span>{</span>
    <span>CallInfo</span><span>,</span> <span>Primitive</span><span>,</span> <span>ReturnSuccess</span><span>,</span> <span>ReturnValue</span><span>,</span> <span>Signature</span><span>,</span> <span>UntaggedValue</span><span>,</span> <span>Value</span><span>,</span>
<span>}</span><span>;</span>
</code></pre></div><p>Here we import everything we need -- types and functions -- to be able to create our plugin.</p>
<p>Once we have finished our plugin, to use it all we need to do is install it.</p>
<div><pre><code>> cargo install --path .
</code></pre></div><p>Once <code>nu</code> starts up, it will discover the plugin and register it as a command.
If you're already running <code>nu</code> during the installation process of your plugin, ensure you restart <code>nu</code> so that it can load and register your plugin.</p>
<div><pre><code>> nu
> echo hello | len
5
> help len
This is my custom len plugin

Usage:
  > len {flags}

flags:
  -h, --help: Display this help message
</code></pre></div><p><strong>Provides executing regular expressions</strong></p>
<p>We basically use the [regex]<a href="https://github.com/rust-lang/regex" target="_blank" rel="noopener noreferrer">https://github.com/rust-lang/regex</a> crate. Unless there is a specific reason, it is recommended to use it.</p>
<h2 id="creating-a-plugin-in-python" tabindex="-1"> Creating a plugin (in Python)</h2>
<p>We can also create plugins in other programming languages. In this section, we'll write the same <code>len</code> plugin in Python.</p>
<p>First, let's look at the full plugin:</p>
<div><pre><code><span>#!/usr/bin/python3</span>
<span>import</span> json
<span>import</span> fileinput
<span>import</span> sys


<span>def</span> <span>print_good_response</span><span>(</span>response<span>)</span><span>:</span>
    json_response <span>=</span> <span>{</span><span>"jsonrpc"</span><span>:</span> <span>"2.0"</span><span>,</span> <span>"method"</span><span>:</span> <span>"response"</span><span>,</span> <span>"params"</span><span>:</span> <span>{</span><span>"Ok"</span><span>:</span> response<span>}</span><span>}</span>
    <span>print</span><span>(</span>json<span>.</span>dumps<span>(</span>json_response<span>)</span><span>)</span>
    sys<span>.</span>stdout<span>.</span>flush<span>(</span><span>)</span>


<span>def</span> <span>get_length</span><span>(</span>string_value<span>)</span><span>:</span>
    string_len <span>=</span> <span>len</span><span>(</span>string_value<span>[</span><span>"item"</span><span>]</span><span>[</span><span>"Primitive"</span><span>]</span><span>[</span><span>"String"</span><span>]</span><span>)</span>
    int_item <span>=</span> <span>{</span><span>"Primitive"</span><span>:</span> <span>{</span><span>"Int"</span><span>:</span> string_len<span>}</span><span>}</span>
    int_value <span>=</span> string_value
    int_value<span>[</span><span>"item"</span><span>]</span> <span>=</span> int_item
    <span>return</span> int_value


<span>for</span> line <span>in</span> fileinput<span>.</span><span>input</span><span>(</span><span>)</span><span>:</span>
    x <span>=</span> json<span>.</span>loads<span>(</span>line<span>)</span>
    method <span>=</span> x<span>.</span>get<span>(</span><span>"method"</span><span>,</span> <span>None</span><span>)</span>
    <span>if</span> method <span>==</span> <span>"config"</span><span>:</span>
        config <span>=</span> <span>{</span><span>"name"</span><span>:</span> <span>"len"</span><span>,</span> <span>"usage"</span><span>:</span> <span>"Return the length of a string"</span><span>,</span> <span>"positional"</span><span>:</span> <span>[</span><span>]</span><span>,</span> <span>"named"</span><span>:</span> <span>{</span><span>}</span><span>,</span> <span>"is_filter"</span><span>:</span> <span>True</span><span>}</span>
        print_good_response<span>(</span>config<span>)</span>
        <span>break</span>
    <span>elif</span> method <span>==</span> <span>"begin_filter"</span><span>:</span>
        print_good_response<span>(</span><span>[</span><span>]</span><span>)</span>
    <span>elif</span> method <span>==</span> <span>"filter"</span><span>:</span>
        int_item <span>=</span> get_length<span>(</span>x<span>[</span><span>"params"</span><span>]</span><span>)</span>
        print_good_response<span>(</span><span>[</span><span>{</span><span>"Ok"</span><span>:</span> <span>{</span><span>"Value"</span><span>:</span> int_item<span>}</span><span>}</span><span>]</span><span>)</span>
    <span>elif</span> method <span>==</span> <span>"end_filter"</span><span>:</span>
        print_good_response<span>(</span><span>[</span><span>]</span><span>)</span>
        <span>break</span>
    <span>else</span><span>:</span>
        <span>break</span>
</code></pre></div><p>Note: there are ways to make the python more robust, but here we've left it simple to help with explanations.</p>
<p>Let's look at how this plugin works, from the bottom to the top:</p>
<div><pre><code><span>for</span> line <span>in</span> fileinput<span>.</span><span>input</span><span>(</span><span>)</span><span>:</span>
    x <span>=</span> json<span>.</span>loads<span>(</span>line<span>)</span>
    method <span>=</span> x<span>.</span>get<span>(</span><span>"method"</span><span>,</span> <span>None</span><span>)</span>
    <span>if</span> method <span>==</span> <span>"config"</span><span>:</span>
        config <span>=</span> <span>{</span><span>"name"</span><span>:</span> <span>"len"</span><span>,</span> <span>"usage"</span><span>:</span> <span>"Return the length of a string"</span><span>,</span> <span>"positional"</span><span>:</span> <span>[</span><span>]</span><span>,</span> <span>"named"</span><span>:</span> <span>{</span><span>}</span><span>,</span> <span>"is_filter"</span><span>:</span> <span>True</span><span>}</span>
        print_good_response<span>(</span>config<span>)</span>
        <span>break</span>
    <span>elif</span> method <span>==</span> <span>"begin_filter"</span><span>:</span>
        print_good_response<span>(</span><span>[</span><span>]</span><span>)</span>
    <span>elif</span> method <span>==</span> <span>"filter"</span><span>:</span>
        int_item <span>=</span> get_length<span>(</span>x<span>[</span><span>"params"</span><span>]</span><span>)</span>
        print_good_response<span>(</span><span>[</span><span>{</span><span>"Ok"</span><span>:</span> <span>{</span><span>"Value"</span><span>:</span> int_item<span>}</span><span>}</span><span>]</span><span>)</span>
    <span>elif</span> method <span>==</span> <span>"end_filter"</span><span>:</span>
        print_good_response<span>(</span><span>[</span><span>]</span><span>)</span>
        <span>break</span>
    <span>else</span><span>:</span>
        <span>break</span>
</code></pre></div><p>For this plugin, we have to serve two basic roles: responding to a request for the plugin configuration, and doing the actual filtering. This code acts as our main loop, responding to messages from Nu by doing some work and then returning a response. Each JSON message is sent to the plugin on a single line, so we need only to read the line and then parse the json it contains.</p>
<p>From there, we look at what method is being invoked. For this plugin, there are four methods we care about: config, begin_filter, filter, and end_filter. When we're sent a 'config' request, we respond with the signature of this plugin, which is a bit of information to tell Nu how the command should be called. Once sent, we break out of the loop so that the plugin can exit and be later called when filtering begins.</p>
<p>The other three methods -- begin_filter, filter, and end_filter -- all work together to do the work of filtering the data coming in. As this plugin will work 1-to-1 with each bit of data, turning strings into their string lengths, we do most of our work in the <code>filter</code> method. The 'end_filter' method here tells us it's time for the plugin to shut down, so we go ahead and break out of the loop.</p>
<div><pre><code><span>def</span> <span>get_length</span><span>(</span>string_value<span>)</span><span>:</span>
    string_len <span>=</span> <span>len</span><span>(</span>string_value<span>[</span><span>"item"</span><span>]</span><span>[</span><span>"Primitive"</span><span>]</span><span>[</span><span>"String"</span><span>]</span><span>)</span>
    int_item <span>=</span> <span>{</span><span>"Primitive"</span><span>:</span> <span>{</span><span>"Int"</span><span>:</span> string_len<span>}</span><span>}</span>
    int_value <span>=</span> string_value
    int_value<span>[</span><span>"item"</span><span>]</span> <span>=</span> int_item
    <span>return</span> int_value
</code></pre></div><p>The work of filtering is done by the <code>get_length</code> function. Here, we assume we're given strings (we could make this more robust in the future and return errors otherwise), and then we extract the string we're given. From there, we measure the length of the string and create a new <code>Int</code> value for that length.</p>
<p>Finally, we use the same item we were given and replace the payload with this new Int. We do this to reuse the metadata that was passed to us with the string, though this is an optional step. We could have instead opted to create new metadata and passed that out instead.</p>
<div><pre><code><span>def</span> <span>print_good_response</span><span>(</span>response<span>)</span><span>:</span>
    json_response <span>=</span> <span>{</span><span>"jsonrpc"</span><span>:</span> <span>"2.0"</span><span>,</span> <span>"method"</span><span>:</span> <span>"response"</span><span>,</span> <span>"params"</span><span>:</span> <span>{</span><span>"Ok"</span><span>:</span> response<span>}</span><span>}</span>
    <span>print</span><span>(</span>json<span>.</span>dumps<span>(</span>json_response<span>)</span><span>)</span>
    sys<span>.</span>stdout<span>.</span>flush<span>(</span><span>)</span>
</code></pre></div><p>Each response from the plugin back to Nu is also a json message that is sent on a single line. We convert the response to json and send it out with this helper function.</p>
<div><pre><code><span>import</span> json
<span>import</span> fileinput
<span>import</span> sys
</code></pre></div><p>All of this takes a few imports to accomplish, so we make sure to include them.</p>
<div><pre><code><span>#!/usr/bin/python3</span>
</code></pre></div><p>Finally, to make it easier to run our Python, we make this file executable (using something like <code>chmod +x nu_plugin_len</code>) and add the path to our python at the top. This trick works for Unix-based platforms, for Windows we would need to create an .exe or .bat file that would invoke the python code for us.</p>
<p>We are using Python 3 because Python 2 will not be maintained past 2020. However our script works accordingly with Python 2 and with Python 3.
Just change the first line into:</p>
<div><pre><code><span>#!/usr/bin/python</span>
</code></pre></div><p>and you are good to go.</p>
<h2 id="creating-a-plugin-in-c" tabindex="-1"> Creating a plugin (in C#)</h2>
<p>You can learn about creating a Nu plugin with C# here:</p>
<ul>
<li><a href="https://github.com/myty/nu-plugin-lib" target="_blank" rel="noopener noreferrer">.Net Core nu-plugin-lib</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Shells</title>
      <link>www.nushell.sh/contributor-book/shells.html</link>
      <guid isPermaLink="false">www.nushell.sh/contributor-book/shells.html</guid>
      <source url="www.nushell.sh/rss.xml">Shells</source>
      <content:encoded><![CDATA[<h1 id="shells" tabindex="-1"> Shells</h1>
<p>Perhaps a bit unique to Nu is the concept of <code>shells</code>, though the idea of working in multiple places at the same time in a shell is fairly common (via pushd/popd, screen, and more). What perhaps makes Nu a little different is that its <code>shells</code> concept is both multiple platform, and that it works both on the filesystem and inside of values.</p>
<p><strong>Note:</strong> The concept of a Value Shell is one of the many open design points of Nu and is subject to change in the future.</p>
<p>A <strong>Shell</strong> is a filesystem-like interface that describes a set of common file operations and how to perform them, including: <code>cd</code>, <code>ls</code>, <code>mkdir</code>, <code>rm</code>, <code>cp</code>, and <code>mv</code>. Not all shell types support all file operations, but the file operations attempt to describe much of what a shell would want to perform.</p>
<p>The two types of Shells currently supported are FilesystemShell and ValueShell, though other shells have been discussed.</p>
<h2 id="filesystem-shell" tabindex="-1"> Filesystem Shell</h2>
<p>The filesystem shell is the shell that works directly with a filesystem and a corresponding paths. By default, Nu opens with a single filesystem shell in the current working directory.</p>
<div><pre><code>> shells
━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━
   │ name       │ path
───┼────────────┼────────────────
 X │ filesystem │ /home/jonathan
━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━
</code></pre></div><p>We can add a new filesystem shell to this list by using the <code>enter</code> command. This will add a new shell+path combination to our ring buffer of shells.</p>
<div><pre><code>> enter Source
/home/jonathan/Source> shells
━━━┯━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━
 # │   │ name       │ path
───┼───┼────────────┼───────────────────────
 0 │   │ filesystem │ /home/jonathan
 1 │ X │ filesystem │ /home/jonathan/Source
━━━┷━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━
</code></pre></div><p>In this way, you can support jumping between working directories. Note that currently Nu doesn't support jumping between running applications, only working directories.</p>
<p><strong>Limitations</strong></p>
<p>There are some limitations of the filesystem shell in its current state of development. One such limitation is that you can not easily add multiple new paths to the ring buffer at a time (for example: <code>enter $it</code>), as each new addition to the ring buffer will change the current directory. This limitation is not inherent in the design of the ring buffer and a future design may wish to separate <code>enter</code> from the changing of the current working directory.</p>
<h2 id="value-shell" tabindex="-1"> Value Shell</h2>
<p>The Value Shell gives you the ability to explore the inside of a structured value by loading a file and treating its contents as if it were a filesystem. This allows you to explore this data through one of the shells in the ring buffer.</p>
<p>The current implementation of the Value Shell is limited to the read-only subset of file operations, namely: <code>cd</code> and <code>ls</code>. Future designs may wish to explore this further, but there are open design questions around mutating an <code>enter</code>ed file and how the rest of the environment observes these changes (e.g. what happens if you enter the file being used by <code>config</code>?)</p>
<p>In a Value Shell, the <code>cd</code> command changes the path that is being observed as the &quot;current working directory&quot; in the object, but in actuality is the field path. This means that the path &quot;/abc/def&quot; is the path &quot;abc.def&quot; outside of the Value Shell.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>