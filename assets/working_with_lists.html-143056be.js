import{_ as p,M as l,p as c,q as r,Q as a,t as s,N as e,U as t,a1 as o}from"./framework-344bb0e4.js";const i={},u=o('<h1 id="working-with-lists" tabindex="-1"><a class="header-anchor" href="#working-with-lists" aria-hidden="true">#</a> Working with lists</h1><h2 id="creating-lists" tabindex="-1"><a class="header-anchor" href="#creating-lists" aria-hidden="true">#</a> Creating lists</h2><p>A list is an ordered collection of values. You can create a <code>list</code> with square brackets, surrounded values separated by spaces and/or commas (for readability). For example, <code>[foo bar baz]</code> or <code>[foo, bar, baz]</code>.</p><h2 id="updating-lists" tabindex="-1"><a class="header-anchor" href="#updating-lists" aria-hidden="true">#</a> Updating lists</h2>',4),d=a("code",null,"update",-1),k=a("code",null,"insert",-1),m=a("code",null,"10",-1),h=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> insert <span class="token number">2</span> <span class="token number">10</span>
<span class="token comment"># [1, 2, 10, 3, 4]</span>
</code></pre></div>`,1),b=a("code",null,"update",-1),g=a("code",null,"10",-1),_=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> update <span class="token number">1</span> <span class="token number">10</span>
<span class="token comment"># [1, 10, 3, 4]</span>
</code></pre></div><h2 id="removing-or-adding-items-from-list" tabindex="-1"><a class="header-anchor" href="#removing-or-adding-items-from-list" aria-hidden="true">#</a> Removing or adding items from list</h2>`,2),v=a("code",null,"insert",-1),f=a("code",null,"update",-1),w=a("code",null,"prepend",-1),$=a("code",null,"append",-1),x=o(`<p>For example:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>yellow green<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> prepend red<span class="token punctuation">)</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> append purple<span class="token punctuation">)</span>
<span class="token variable">$colors</span> <span class="token comment"># [red yellow green purple]</span>
</code></pre></div>`,2),y=a("code",null,"skip",-1),q=a("code",null,"drop",-1),T=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red yellow green purple<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> skip <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> drop <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token variable">$colors</span> <span class="token comment"># [yellow]</span>
</code></pre></div>`,1),A=a("code",null,"last",-1),F=a("code",null,"first",-1),I=a("code",null,"take",-1),M=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red yellow green purple black magenta<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> last <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token variable">$colors</span> <span class="token comment"># [purple black magenta]</span>
</code></pre></div><p>And from the beginning of a list,</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>yellow green purple<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> first <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token variable">$colors</span> <span class="token comment"># [yellow green]</span>
</code></pre></div><h2 id="iterating-over-lists" tabindex="-1"><a class="header-anchor" href="#iterating-over-lists" aria-hidden="true">#</a> Iterating over lists</h2>`,4),z=a("code",null,"each",-1),C=a("code",null,"|it|",-1),N=a("code",null,"{ |it| print $it }",-1),E=a("code",null,"enumerate",-1),V=a("code",null,"index",-1),Y=a("code",null,"item",-1),B=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token variable">$names</span> <span class="token operator">|</span> each <span class="token punctuation">{</span> <span class="token operator">|</span>it<span class="token operator">|</span> $<span class="token string">&quot;Hello, (<span class="token variable">$it</span>)!&quot;</span> <span class="token punctuation">}</span>
<span class="token comment"># Outputs &quot;Hello, Mark!&quot; and three more similar lines.</span>

<span class="token variable">$names</span> <span class="token operator">|</span> enumerate <span class="token operator">|</span> each <span class="token punctuation">{</span> <span class="token operator">|</span>it<span class="token operator">|</span> $<span class="token string">&quot;(<span class="token variable">$it</span>.index + 1) - (<span class="token variable">$it</span>.item)&quot;</span> <span class="token punctuation">}</span>
<span class="token comment"># Outputs &quot;1 - Mark&quot;, &quot;2 - Tami&quot;, etc.</span>
</code></pre></div>`,1),H=a("code",null,"where",-1),J=o(`<p>The following example gets all the colors whose names end in &quot;e&quot;.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red orange yellow green blue purple<span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> where <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># The block passed to \`where\` must evaluate to a boolean.</span>
<span class="token comment"># This outputs the list [orange blue purple].</span>
</code></pre></div><p>In this example, we keep only values higher than <code>7</code>.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">10</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> where <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token comment"># [10 8]</span>
</code></pre></div>`,4),R=a("code",null,"reduce",-1),U=a("code",null,"it",-1),W=a("code",null,"acc",-1),D=a("code",null,"--fold",-1),L=a("code",null,"-f",-1),O=a("code",null,"it",-1),S=a("code",null,"index",-1),Z=a("code",null,"item",-1),Q=a("code",null,"enumerate",-1),j=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">8</span> <span class="token number">4</span><span class="token punctuation">]</span>
$<span class="token string">&quot;total = (<span class="token variable">$scores</span> | reduce { |it, acc| <span class="token variable">$acc</span> + <span class="token variable">$it</span> })&quot;</span> <span class="token comment"># total = 15</span>

$<span class="token string">&quot;total = (<span class="token variable">$scores</span> | math sum)&quot;</span> <span class="token comment"># easier approach, same result</span>

$<span class="token string">&quot;product = (<span class="token variable">$scores</span> | reduce --fold 1 { |it, acc| <span class="token variable">$acc</span> * <span class="token variable">$it</span> })&quot;</span> <span class="token comment"># total = 96</span>

<span class="token variable">$scores</span> <span class="token operator">|</span> enumerate <span class="token operator">|</span> reduce <span class="token parameter variable">--fold</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token operator">|</span>it, acc<span class="token operator">|</span> <span class="token variable">$acc</span> + <span class="token variable">$it</span>.index * <span class="token variable">$it</span>.item <span class="token punctuation">}</span> <span class="token comment"># 0*3 + 1*8 + 2*4 = 16</span>
</code></pre></div><h2 id="accessing-the-list" tabindex="-1"><a class="header-anchor" href="#accessing-the-list" aria-hidden="true">#</a> Accessing the list</h2><p>To access a list item at a given index, use the <code>$name.index</code> form where <code>$name</code> is a variable that holds a list.</p><p>For example, the second element in the list below can be accessed with <code>$names.1</code>.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token variable">$names</span>.1 <span class="token comment"># gives Tami</span>
</code></pre></div><p>If the index is in some variable <code>$index</code> we can use the <code>get</code> command to extract the item from the list.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> index <span class="token operator">=</span> <span class="token number">1</span>
<span class="token variable">$names</span> <span class="token operator">|</span> get <span class="token variable">$index</span> <span class="token comment"># gives Tami</span>
</code></pre></div>`,7),G=a("code",null,"length",-1),K=a("code",null,"[red green blue] | length",-1),P=a("code",null,"3",-1),X=a("code",null,"is-empty",-1),ss=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red green blue<span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> is-empty <span class="token comment"># false</span>

<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> is-empty <span class="token comment"># true</span>
</code></pre></div><p>The <code>in</code> and <code>not-in</code> operators are used to test whether a value is in a list. For example:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red green blue<span class="token punctuation">]</span>
<span class="token string">&#39;blue&#39;</span> <span class="token keyword">in</span> <span class="token variable">$colors</span> <span class="token comment"># true</span>
<span class="token string">&#39;yellow&#39;</span> <span class="token keyword">in</span> <span class="token variable">$colors</span> <span class="token comment"># false</span>
<span class="token string">&#39;gold&#39;</span> not-in <span class="token variable">$colors</span> <span class="token comment"># true</span>
</code></pre></div>`,3),as=a("code",null,"any",-1),ns=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Do any color names end with &quot;e&quot;?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> any <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&quot;e&quot;</span> <span class="token punctuation">}</span> <span class="token comment"># true</span>

<span class="token comment"># Is the length of any color name less than 3?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> any <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token comment"># false</span>

<span class="token comment"># Are any scores greater than 7?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> any <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token punctuation">}</span> <span class="token comment"># true</span>

<span class="token comment"># Are any scores odd?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> any <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token variable">$it</span> mod <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token comment"># true</span>
</code></pre></div>`,1),es=a("code",null,"all",-1),ts=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Do all color names end with &quot;e&quot;?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> all <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&quot;e&quot;</span> <span class="token punctuation">}</span> <span class="token comment"># false</span>

<span class="token comment"># Is the length of all color names greater than or equal to 3?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> all <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str length<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token comment"># true</span>

<span class="token comment"># Are all scores greater than 7?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> all <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token punctuation">}</span> <span class="token comment"># false</span>

<span class="token comment"># Are all scores even?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> all <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token variable">$it</span> mod <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token comment"># false</span>
</code></pre></div><h2 id="converting-the-list" tabindex="-1"><a class="header-anchor" href="#converting-the-list" aria-hidden="true">#</a> Converting the list</h2>`,2),os=a("code",null,"flatten",-1),ps=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> flatten <span class="token comment"># [1 2 3 4 5 6]</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> flatten <span class="token operator">|</span> flatten <span class="token operator">|</span> flatten <span class="token comment"># [1 2 3 4 5 6 7 8]</span>
</code></pre></div>`,1),ls=a("code",null,"wrap",-1),cs=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> zones <span class="token operator">=</span> <span class="token punctuation">[</span>UTC CET Europe/Moscow Asia/Yekaterinburg<span class="token punctuation">]</span>

<span class="token comment"># Show world clock for selected time zones</span>
<span class="token variable">$zones</span> <span class="token operator">|</span> wrap <span class="token string">&#39;Zone&#39;</span> <span class="token operator">|</span> upsert Time <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token punctuation">(</span>date now <span class="token operator">|</span> <span class="token function">date</span> to-timezone <span class="token variable">$it</span>.Zone <span class="token operator">|</span> <span class="token function">date</span> <span class="token function">format</span> <span class="token string">&#39;%Y.%m.%d %H:%M&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre></div>`,1);function rs(is,us){const n=l("RouterLink");return c(),r("div",null,[u,a("p",null,[s("You can "),e(n,{to:"/commands/docs/update.html"},{default:t(()=>[d]),_:1}),s(" and "),e(n,{to:"/commands/docs/insert.html"},{default:t(()=>[k]),_:1}),s(" values into lists as they flow through the pipeline, for example let's insert the value "),m,s(" into the middle of a list:")]),h,a("p",null,[s("We can also use "),e(n,{to:"/commands/docs/update.html"},{default:t(()=>[b]),_:1}),s(" to replace the 2nd element with the value "),g,s(".")]),_,a("p",null,[s("In addition to "),e(n,{to:"/commands/docs/insert.html"},{default:t(()=>[v]),_:1}),s(" and "),e(n,{to:"/commands/docs/update.html"},{default:t(()=>[f]),_:1}),s(", we also have "),e(n,{to:"/commands/docs/prepend.html"},{default:t(()=>[w]),_:1}),s(" and "),e(n,{to:"/commands/docs/append.html"},{default:t(()=>[$]),_:1}),s(". These let you insert to the beginning of a list or at the end of the list, respectively.")]),x,a("p",null,[s("In case you want to remove items from list, there are many ways. "),e(n,{to:"/commands/docs/skip.html"},{default:t(()=>[y]),_:1}),s(" allows you skip first rows from input, while "),e(n,{to:"/commands/docs/drop.html"},{default:t(()=>[q]),_:1}),s(" allows you to skip specific numbered rows from end of list.")]),T,a("p",null,[s("We also have "),e(n,{to:"/commands/docs/last.html"},{default:t(()=>[A]),_:1}),s(" and "),e(n,{to:"/commands/docs/first.html"},{default:t(()=>[F]),_:1}),s(" which allow you to "),e(n,{to:"/commands/docs/take.html"},{default:t(()=>[I]),_:1}),s(" from the end or beginning of the list, respectively.")]),M,a("p",null,[s("To iterate over the items in a list, use the "),e(n,{to:"/commands/docs/each.html"},{default:t(()=>[z]),_:1}),s(" command with a "),e(n,{to:"/book/types_of_data.html#blocks"},{default:t(()=>[s("block")]),_:1}),s(" of Nu code that specifies what to do to each item. The block parameter (e.g. "),C,s(" in "),N,s(") is the current list item, but the "),e(n,{to:"/commands/docs/enumerate.html"},{default:t(()=>[E]),_:1}),s(" filter can be used to provide "),V,s(" and "),Y,s(" values if needed. For example:")]),B,a("p",null,[s("The "),e(n,{to:"/commands/docs/where.html"},{default:t(()=>[H]),_:1}),s(" command can be used to create a subset of a list, effectively filtering the list based on a condition.")]),J,a("p",null,[s("The "),e(n,{to:"/commands/docs/reduce.html"},{default:t(()=>[R]),_:1}),s(" command computes a single value from a list. It uses a block which takes 2 parameters: the current item (conventionally named "),U,s(") and an accumulator (conventionally named "),W,s("). To specify an initial value for the accumulator, use the "),D,s(" ("),L,s(") flag. To change "),O,s(" to have "),S,s(" and "),Z,s(" values, use the "),e(n,{to:"/commands/docs/enumerate.html"},{default:t(()=>[Q]),_:1}),s(" filter. For example:")]),j,a("p",null,[s("The "),e(n,{to:"/commands/docs/length.html"},{default:t(()=>[G]),_:1}),s(" command returns the number of items in a list. For example, "),K,s(" outputs "),P,s(".")]),a("p",null,[s("The "),e(n,{to:"/commands/docs/is-empty.html"},{default:t(()=>[X]),_:1}),s(" command determines whether a string, list, or table is empty. It can be used with lists as follows:")]),ss,a("p",null,[s("The "),e(n,{to:"/commands/docs/any.html"},{default:t(()=>[as]),_:1}),s(" command determines if any item in a list matches a given condition. For example:")]),ns,a("p",null,[s("The "),e(n,{to:"/commands/docs/all.html"},{default:t(()=>[es]),_:1}),s(" command determines if every item in a list matches a given condition. For example:")]),ts,a("p",null,[s("The "),e(n,{to:"/commands/docs/flatten.html"},{default:t(()=>[os]),_:1}),s(" command creates a new list from an existing list by adding items in nested lists to the top-level list. This can be called multiple times to flatten lists nested at any depth. For example:")]),ps,a("p",null,[s("The "),e(n,{to:"/commands/docs/wrap.html"},{default:t(()=>[ls]),_:1}),s(" command converts a list to a table. Each list value will be converted to a separate row with a single column:")]),cs])}const ks=p(i,[["render",rs],["__file","working_with_lists.html.vue"]]);export{ks as default};
