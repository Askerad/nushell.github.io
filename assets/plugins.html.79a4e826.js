import{_ as l,r as i,o as r,c as d,a as e,b as n,w as a,d as t,e as u}from"./app.09d1675d.js";const c={},h=e("h1",{id:"plugins",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#plugins","aria-hidden":"true"},"#"),t(" Plugins")],-1),g=e("p",null,"Nu can be extended using plugins. Plugins behave much like Nu's built-in commands, with the added benefit that they can be added separately from Nu itself.",-1),p=t("Nu plugins are executables; Nu launches them as needed and communicates with them over "),_={href:"https://en.wikipedia.org/wiki/Standard_streams",target:"_blank",rel:"noopener noreferrer"},m=t("stdin, stdout, and stderr"),f=t(". Nu plugins can use either JSON or MSGPACK as their communication encoding."),x=e("h2",{id:"adding-a-plugin",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#adding-a-plugin","aria-hidden":"true"},"#"),t(" Adding a plugin")],-1),b=t("To add a plugin, call the "),N=e("code",null,"register",-1),k=t(" command to tell Nu where to find it. As you do, you'll need to also tell Nushell what encoding the plugin uses."),w=e("p",null,"Linux+macOS:",-1),y=e("div",{class:"language-text ext-text"},[e("pre",{class:"language-text"},[e("code",null,`> register ./my_plugins/my-cool-plugin
`)])],-1),v=e("p",null,"Windows:",-1),S=e("div",{class:"language-text ext-text"},[e("pre",{class:"language-text"},[e("code",null,`> register .\\my_plugins\\my-cool-plugin.exe
`)])],-1),L=t("When "),A=e("code",null,"register",-1),E=t(" is called:"),P=u(`<ol><li>Nu launches the plugin, and wait for plugin tell Nu which communication encoding it should use</li><li>Nu sends it a &quot;Signature&quot; message over stdin</li><li>The plugin responds via stdout with a message containing its signature (name, description, arguments, flags, and more)</li><li>Nu saves the plugin signature in the file at <code>$nu.plugin-path</code>, so registration is persisted across multiple launches</li></ol><p>Once registered, the plugin is available as part of your set of commands:</p><div class="language-text ext-text"><pre class="language-text"><code>&gt; help commands | where is_plugin == true
</code></pre></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Nu&#39;s main repo contains example plugins that are useful for learning how the plugin protocol works:</p>`,5),T={href:"https://github.com/nushell/nushell/tree/main/crates/nu_plugin_example",target:"_blank",rel:"noopener noreferrer"},V=t("Rust"),q={href:"https://github.com/nushell/nushell/blob/main/crates/nu_plugin_python/plugin.py",target:"_blank",rel:"noopener noreferrer"},B=t("Python"),C=e("h2",{id:"debugging",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#debugging","aria-hidden":"true"},"#"),t(" Debugging")],-1),I=e("p",null,"The simplest way to debug a plugin is to print to stderr; plugins' standard error streams are redirected through Nu and displayed to the user.",-1),O=e("h2",{id:"help",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#help","aria-hidden":"true"},"#"),t(" Help")],-1),R=t("Nu's plugin documentation is a work in progress. If you're unsure about something, the #plugins channel on "),D={href:"https://discord.gg/NtAbbGn",target:"_blank",rel:"noopener noreferrer"},G=t("the Nu Discord"),W=t(" is a great place to ask questions!");function H(J,K){const s=i("ExternalLinkIcon"),o=i("RouterLink");return r(),d("div",null,[h,g,e("p",null,[p,e("a",_,[m,n(s)]),f]),x,e("p",null,[b,n(o,{to:"/book/commands/register.html"},{default:a(()=>[N]),_:1}),k]),w,y,v,S,e("p",null,[L,n(o,{to:"/book/commands/register.html"},{default:a(()=>[A]),_:1}),E]),P,e("ul",null,[e("li",null,[e("a",T,[V,n(s)])]),e("li",null,[e("a",q,[B,n(s)])])]),C,I,O,e("p",null,[R,e("a",D,[G,n(s)]),W])])}const $=l(c,[["render",H],["__file","plugins.html.vue"]]);export{$ as default};
