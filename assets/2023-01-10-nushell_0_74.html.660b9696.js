import{_ as r,z as i,A as c,W as h,X as n,C as e,T as o,$ as u,a6 as s,Q as a}from"./framework.3d018c9f.js";const p="/assets/0_74_new_help.cec08a09.png",d="/assets/0_74_io_signatures.be37001d.png",_={},m=n("h1",{id:"nushell-0-74",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nushell-0-74","aria-hidden":"true"},"#"),e(" Nushell 0.74")],-1),g=n("p",null,"Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your command line. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful command line pipelines.",-1),f=n("p",null,[e("Today, we're releasing version 0.74 of Nu. This release includes improvements on handling signatures of "),n("code",null,"exec"),e(" and known externals, improved "),n("code",null,"help"),e(", initial support for parse-time constants, new commands, and many improvements to our existing commands.")],-1),b=n("h1",{id:"where-to-get-it",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#where-to-get-it","aria-hidden":"true"},"#"),e(" Where to get it")],-1),k={href:"https://github.com/nushell/nushell/releases/tag/0.74.0",target:"_blank",rel:"noopener noreferrer"},w={href:"https://crates.io/crates/nu",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"cargo install nu",-1),x=n("p",null,[e("NOTE: The optional dataframe functionality is available by "),n("code",null,"cargo install nu --features=dataframe"),e(".")],-1),y=n("p",null,[e("As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use "),n("code",null,"cargo install nu_plugin_<plugin name>"),e(".")],-1),F=n("h1",{id:"themes-of-this-release-new-features",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#themes-of-this-release-new-features","aria-hidden":"true"},"#"),e(" Themes of this release / New features")],-1),T={id:"known-externals-commands-and-exec-now-have-fall-through-signatures-merelymyself-windsoilder-kubouch",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#known-externals-commands-and-exec-now-have-fall-through-signatures-merelymyself-windsoilder-kubouch","aria-hidden":"true"},"#",-1),C=n("code",null,"exec",-1),q={href:"https://github.com/nushell/nushell/pull/7527",target:"_blank",rel:"noopener noreferrer"},A=s(`<p>A common pitfall in Nushell when defining custom signatures using <code>extern</code> used to be that unrecognized arguments passed to the command would throw an error. Now, arguments are still checked against the <code>extern</code> signature but those that are not recognized are simply ignored.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> extern <span class="token variable"><span class="token variable">\`</span><span class="token function">git</span> checkout<span class="token variable">\`</span></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span> <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> foo  <span class="token comment"># does not throw an error</span>
</code></pre></div><p><code>exec</code> uses similar style which fixes errors with tools like <code>ssh</code> and <code>gdb</code> that internally invoke <code>exec</code>.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> nu <span class="token parameter variable">-c</span> <span class="token string">&#39;exec ls -l&#39;</span>  <span class="token comment"># does not throw an error</span>
</code></pre></div>`,4),S={id:"help-is-now-more-helpful-kubouch",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#help-is-now-more-helpful-kubouch","aria-hidden":"true"},"#",-1),I=n("code",null,"help",-1),U={href:"https://github.com/nushell/nushell/pull/7611",target:"_blank",rel:"noopener noreferrer"},M=s(`<p>For a long time, Nushell had the option to provide custom help messages for commands via comments:</p><div class="language-text" data-ext="text"><pre class="language-text"><code># Some Command
#
# More description goes here
def some-command [] { &#39;foo&#39; }

help some-command  # displays the comments in the help message
</code></pre></div><p>In this release, we allow user-defined help messages with aliases and modules. This goes hand-in-hand with a handful of new <code>help</code> subcommands to explore these help messages.</p><p>The help messages now also treat the first line followed by an empty line as a &quot;brief&quot; description displayed in summary tables generated by <code>help commands</code>, <code>$nu.scope.aliases</code>, etc. The full description is available when querying a particular command/alias/module (e.g., <code>help spam</code>). This brief vs. full separation was already present for built-in commands, like <code>path</code>, but now it is applied also to all user-defined help messages.</p><p>An example of using custom module and alias help messages: <img src="`+p+'" alt="Help messages for modules and aliases"></p><p>The current batch of improvements can still be taken further. For example, custom help messages could possibly be defined also for variables and environment variables (via comments adjacent to <code>let</code> and <code>let-env</code>). We could also further improve the presentation of existing <code>help xxx</code> commands.</p>',6),$={id:"initial-support-for-parse-time-constants-kubouch",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#initial-support-for-parse-time-constants-kubouch","aria-hidden":"true"},"#",-1),W={href:"https://github.com/nushell/nushell/pull/7436",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,[n("em",null,"This is a proof-of-concept that we plan to expand in the future.")],-1),E=s(`<p>A new <code>const</code> keyword is added to Nushell to define &quot;parse-time&quot; constants. Constants defined with <code>const</code> behave the same as variables defined with <code>let</code>, but in addition, they are usable in some contexts that require values known at parse-time. Currently, this applies to files or names passed to <code>use</code>, <code>overlay use</code>, <code>source</code>, and <code>source-env</code>. For example, the following now works:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Source a file from a constant</span>
<span class="token operator">&gt;</span> <span class="token string">&#39;print hello!&#39;</span> <span class="token operator">|</span> save <span class="token parameter variable">--raw</span> say_hello.nu
<span class="token operator">&gt;</span> const fname <span class="token operator">=</span> <span class="token string">&#39;say_hello.nu&#39;</span>
<span class="token operator">&gt;</span> <span class="token builtin class-name">source</span> <span class="token variable">$fname</span>
hello<span class="token operator">!</span>
</code></pre></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Load an overlay from a constant name:</span>
<span class="token operator">&gt;</span> module spam <span class="token punctuation">{</span>
	<span class="token builtin class-name">export</span> def foo <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&gt;</span> const name <span class="token operator">=</span> <span class="token string">&#39;spam&#39;</span>
<span class="token operator">&gt;</span> const new_name <span class="token operator">=</span> <span class="token string">&#39;eggs&#39;</span>
<span class="token operator">&gt;</span> overlay use <span class="token variable">$name</span> as <span class="token variable">$new_name</span>
<span class="token operator">&gt;</span> overlay list <span class="token operator">|</span> last
eggs
<span class="token operator">&gt;</span> foo
foo
</code></pre></div><p>Only a limited subset of values is allowed to be a constant. In general, &quot;simple&quot; values, like strings or integers, and their collections (lists, records) are allowed but values requiring some evaluation (string interpolation, subexpressions, environment variables) are not allowed. The current selection is not set in stone, however, and might change in the future.</p><p>Some future direction we can take this:</p><ul><li>Move parts of <code>$nu</code> to be constant to allow things like <code>source $nu.config-path</code></li><li>Allow modules to have constants (<code>module spam { const CONTENTS = [ &#39;eggs&#39;, &#39;bacon&#39;, &#39;sausage&#39;, &#39;spam&#39; ] }</code>)</li><li>Some limited form of parse-time evaluation to allow static control flow, for example</li></ul><div class="language-text" data-ext="text"><pre class="language-text"><code>const fname = const if $nu.os-info.name == &#39;windows&#39; {
    &#39;C:\\Users\\viking\\spam.nu&#39;
} else {
    &#39;/home/viking/spam.nu&#39;
}
overlay use $fname
</code></pre></div><p>In general, we want to be very conservative with parse-time constants and evaluation because it can be easy to introduce awkward side-effects and performance pitfalls. We plan to extend this only where it brings some tangible benefit to Nushell&#39;s user experience.</p>`,8),z={id:"new-url-encode-command-to-percent-encode-urls-mehulg",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#new-url-encode-command-to-percent-encode-urls-mehulg","aria-hidden":"true"},"#",-1),P=n("code",null,"url encode",-1),V={href:"https://github.com/nushell/nushell/pull/7664",target:"_blank",rel:"noopener noreferrer"},D=s(`<p>To encode text that is used as a path component in a URL we now provide <code>url encode</code>.</p><p>By default it preserves the structure of a URL and only replaces invalid characters. With <code>--all</code> the whole string gets encoded.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;https://example.com/foo bar&#39;</span> <span class="token operator">|</span> url encode
https://example.com/foo%20bar
<span class="token operator">&gt;</span> <span class="token string">&#39;https://example.com/foo bar&#39;</span> <span class="token operator">|</span> url encode <span class="token parameter variable">--all</span>
https%3A%2F%2Fexample%2Ecom%2Ffoo%20bar
</code></pre></div>`,3),G={id:"values-command-to-programmatically-interact-with-records-webbedspace",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#values-command-to-programmatically-interact-with-records-webbedspace","aria-hidden":"true"},"#",-1),j=n("code",null,"values",-1),K={href:"https://github.com/nushell/nushell/pull/7583",target:"_blank",rel:"noopener noreferrer"},J=s(`<p>This is a complement to <code>columns</code>, designed to allow the values of a record to be easily filtered and iterated over using the standard list tools like <code>each</code> and <code>where</code>. The name <code>values</code> is derived from similar functions in Ruby, Python and JavaScript.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>  <span class="token punctuation">{</span>a: <span class="token string">&quot;Happy&quot;</span>, b: <span class="token string">&quot;new&quot;</span>, c: <span class="token string">&quot;year&quot;</span><span class="token punctuation">}</span> <span class="token operator">|</span> values
╭───┬───────╮
│ <span class="token number">0</span> │ Happy │
│ <span class="token number">1</span> │ new   │
│ <span class="token number">2</span> │ year  │
╰───┴───────╯
</code></pre></div><p>It can also operate on tables to convert them to lists-of-lists:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>a b<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> values
╭───┬───────────╮
│ <span class="token number">0</span> │ ╭───┬───╮ │
│   │ │ <span class="token number">0</span> │ <span class="token number">4</span> │ │
│   │ │ <span class="token number">1</span> │ <span class="token number">5</span> │ │
│   │ │ <span class="token number">2</span> │ <span class="token number">6</span> │ │
│   │ ╰───┴───╯ │
│ <span class="token number">1</span> │ ╭───┬───╮ │
│   │ │ <span class="token number">0</span> │ <span class="token number">7</span> │ │
│   │ │ <span class="token number">1</span> │ <span class="token number">8</span> │ │
│   │ │ <span class="token number">2</span> │ <span class="token number">9</span> │ │
│   │ ╰───┴───╯ │
╰───┴───────────╯
</code></pre></div>`,4),Q={id:"get-select-cell-path-access-on-tables-will-now-error-when-encountering-a-hole-kubouch-webbedspace",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#get-select-cell-path-access-on-tables-will-now-error-when-encountering-a-hole-kubouch-webbedspace","aria-hidden":"true"},"#",-1),Y=n("code",null,"get",-1),Z=n("code",null,"select",-1),ee={href:"https://github.com/nushell/nushell/pull/7002",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://github.com/nushell/nushell/pull/7647",target:"_blank",rel:"noopener noreferrer"},oe=s(`<p>Consider the following operations performed on a table:</p><ul><li><code>[{foo: &#39;bar&#39;}, {}] | select foo</code></li><li><code>[{foo: &#39;bar&#39;}, {}] | get foo</code></li><li><code>[{foo: &#39;bar&#39;}, {}].foo</code></li></ul><p>Formerly, this would produce <code>[&#39;bar&#39;, null]</code> - converting the table hole into a <code>null</code>. Now, however, they will produce an error. The original null-conversion behaviour can, as usual, be opted into using the <code>-i</code> flag for <code>get</code> and <code>select</code>: <code>[{foo: &#39;bar&#39;}, {}] | get -i foo</code> produces <code>[&#39;bar&#39;, null]</code>. (There are also plans for a future version of Nushell to expand the cell path syntax to allow certain cell names to be &quot;nullable&quot; - converted to <code>null</code> if they don&#39;t exist.)</p><h2 id="behavior-of-i-ignore-errors-flag-for-get-and-select-when-the-entire-column-is-absent-has-changed" tabindex="-1"><a class="header-anchor" href="#behavior-of-i-ignore-errors-flag-for-get-and-select-when-the-entire-column-is-absent-has-changed" aria-hidden="true">#</a> Behavior of <code>-i</code>/<code>--ignore-errors</code> flag for <code>get</code> and <code>select</code> when the entire column is absent has changed</h2><p>Formerly, if <code>select -i</code> or <code>get -i</code> couldn&#39;t find any value for the given column, it would produce a single <code>null</code>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>〉<span class="token punctuation">[</span><span class="token punctuation">{</span>a:1<span class="token punctuation">}</span> <span class="token punctuation">{</span>b:2<span class="token punctuation">}</span> <span class="token punctuation">{</span>a:3<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token parameter variable">-i</span> foo <span class="token operator">|</span> to nuon
null
</code></pre></div><p>This has been changed so that it now produces a table (or, in the case of <code>get</code>, a list) of all <code>null</code>s:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>〉<span class="token punctuation">[</span><span class="token punctuation">{</span>a:1<span class="token punctuation">}</span> <span class="token punctuation">{</span>b:2<span class="token punctuation">}</span> <span class="token punctuation">{</span>a:3<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token parameter variable">-i</span> foo <span class="token operator">|</span> to nuon
<span class="token punctuation">[</span><span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>null<span class="token punctuation">]</span>, <span class="token punctuation">[</span>null<span class="token punctuation">]</span>, <span class="token punctuation">[</span>null<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre></div><p>This change was made to make this flag work more consistently with <code>default</code> and <code>compact</code>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>〉<span class="token punctuation">[</span><span class="token punctuation">{</span>a:1<span class="token punctuation">}</span> <span class="token punctuation">{</span>b:2<span class="token punctuation">}</span> <span class="token punctuation">{</span>a:3<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token parameter variable">-i</span> a <span class="token operator">|</span> default <span class="token number">0</span> a
<span class="token punctuation">[</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
〉<span class="token punctuation">[</span><span class="token punctuation">{</span>a:1<span class="token punctuation">}</span> <span class="token punctuation">{</span>b:2<span class="token punctuation">}</span> <span class="token punctuation">{</span>a:3<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token parameter variable">-i</span> foo <span class="token operator">|</span> default <span class="token number">0</span> foo
<span class="token punctuation">[</span><span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre></div><p>As you can see, <code>default</code> in the above example can reliably populate an entire table column when some or all of the values don&#39;t exist.</p>`,11),te={id:"certain-misused-punctuation-in-def-definitions-are-now-errors-webbedspace-webbedspace",tabindex:"-1"},se=n("a",{class:"header-anchor",href:"#certain-misused-punctuation-in-def-definitions-are-now-errors-webbedspace-webbedspace","aria-hidden":"true"},"#",-1),ae=n("code",null,"def",-1),le={href:"https://github.com/nushell/nushell/pull/7624",target:"_blank",rel:"noopener noreferrer"},re={href:"https://github.com/nushell/nushell/pull/7606",target:"_blank",rel:"noopener noreferrer"},ie=s('<p>The following misuses of punctuation in <code>def</code> definitions now produce errors:</p><ul><li>Placing a comma between a long flag and its short alternative (e.g. <code>def a [--foo, (-f)] {}</code>)</li><li>Consecutive commas, like <code>def a [foo,,bar] {}</code></li><li>Consecutive colons, like <code>def a [foo::int] {}</code></li><li>Using <code>^</code> in command names, like <code>def ^a [] {}</code></li></ul><h2 id="in-now-works-in-catch-closures" tabindex="-1"><a class="header-anchor" href="#in-now-works-in-catch-closures" aria-hidden="true">#</a> <code>$in</code> now works in <code>catch</code> closures</h2><p><code>$in</code> in <code>catch</code> closures now behaves identically to how it does in other closures, like those given to <code>each</code> (it&#39;s equivalent to what would be the first named argument).</p><p><code>try { &#39;x&#39; | math abs } catch { print $in }</code> behaves the same as <code>try { &#39;x&#39; | math abs } catch {|e| print $e }</code>.</p>',5),ce={id:"mime-types-are-supported-in-ls-with-an-additional-flag-fdncred",tabindex:"-1"},he=n("a",{class:"header-anchor",href:"#mime-types-are-supported-in-ls-with-an-additional-flag-fdncred","aria-hidden":"true"},"#",-1),ue=n("code",null,"ls",-1),pe={href:"https://github.com/nushell/nushell/pull/7616",target:"_blank",rel:"noopener noreferrer"},de=n("p",null,[e("To find out what application your operating system associates with a particular file, you can now use the "),n("code",null,"--mime-type"),e(" or "),n("code",null,"-m"),e(" flag on our "),n("code",null,"ls"),e(" command. This simplifies filtering for particular files and can help you dispatch files to particular programs. When opening files with Nushell directly, "),n("code",null,"open"),e(" will still follow the same heuristics using file endings and the built-in "),n("code",null,"from ..."),e(" command parsers.")],-1),_e={id:"regular-expression-queries-are-cached-for-performance-rgwood",tabindex:"-1"},me=n("a",{class:"header-anchor",href:"#regular-expression-queries-are-cached-for-performance-rgwood","aria-hidden":"true"},"#",-1),ge={href:"https://github.com/nushell/nushell/pull/7587",target:"_blank",rel:"noopener noreferrer"},fe=n("p",null,[e("The primary motivation for this is to make regex and "),n("code",null,"=~"),e(" operator uses in hooks and "),n("code",null,"color_config"),e(" closures more performant.")],-1),be={id:"all-built-in-commands-now-declare-their-pipeline-input-and-output-types-sholderbach",tabindex:"-1"},ke=n("a",{class:"header-anchor",href:"#all-built-in-commands-now-declare-their-pipeline-input-and-output-types-sholderbach","aria-hidden":"true"},"#",-1),we={href:"https://github.com/nushell/nushell/pull/7532",target:"_blank",rel:"noopener noreferrer"},ve=n("p",null,"A few releases back commands internally got the capability to declare not only the types of parameters but also pairs for the input and output on the pipeline. With this release we finally declare those input and output types for all core nushell commands. This can help you as user to see what a command expects from the pipeline and might return. We are exploring how nushell can leverage that for more useful diagnostics and completions. In the future we may introduce syntax for user-defined commands to declare their input and output types explicitly.",-1),xe=n("p",null,[n("img",{src:d,alt:"help for wrap command shows I/O type signatures"})],-1),ye=n("h1",{id:"breaking-changes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#breaking-changes","aria-hidden":"true"},"#"),e(" Breaking changes")],-1),Fe=s('<li><a href="#get-select-cell-path-access-on-tables-will-now-error-when-encountering-a-hole-kubouch-webbedspace"><code>get</code> and <code>select</code> now error when encountering a hole</a></li><li><a href="#behavior-of--i--ignore-errors-flag-for-get-and-select-when-the-entire-column-is-absent-has-changed">the behaviour of <code>-i</code> on <code>get</code> and <code>select</code> has changed</a></li>',2),Te=n("code",null,"columns",-1),Ne={href:"https://github.com/nushell/nushell/pull/7593",target:"_blank",rel:"noopener noreferrer"},Ce=n("code",null,"fill-na",-1),qe=n("code",null,"fill-nan",-1),Ae={href:"https://github.com/nushell/nushell/pull/7565",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://github.com/nushell/nushell/pull/7392",target:"_blank",rel:"noopener noreferrer"},Re=n("code",null,"to toml",-1),Ie={href:"https://github.com/nushell/nushell/pull/7597",target:"_blank",rel:"noopener noreferrer"},Ue=n("li",null,[n("code",null,"exec"),e(" and known externals don't throw errors when unknowns parameters are passed to them")],-1),Me=n("li",null,[n("code",null,"help"),e(" command has been thoroughly refactored and includes several more subcommands. "),n("code",null,"help <word>"),e(" now matches commands, aliases, and modules.")],-1),$e=n("li",null,[e("command names in "),n("code",null,"help commands"),e(" and "),n("code",null,"$nu.scope.commands"),e(" are displayed correctly if they were imported from a module with a prefix")],-1),Le=n("code",null,"hide",-1),We=n("code",null,"hide-env",-1),Be={href:"https://github.com/nushell/nushell/pull/7687",target:"_blank",rel:"noopener noreferrer"},Ee=n("code",null,"math eval",-1),ze=n("code",null,"math",-1),Oe=n("code",null,"help operators",-1),Pe={href:"https://github.com/nushell/nushell/pull/7284",target:"_blank",rel:"noopener noreferrer"},Ve=n("code",null,"last",-1),De=n("code",null,"skip",-1),Ge=n("code",null,"drop",-1),He=n("code",null,"take until",-1),je=n("code",null,"take while",-1),Ke=n("code",null,"skip until",-1),Je=n("code",null,"skip while",-1),Qe=n("code",null,"where",-1),Xe=n("code",null,"reverse",-1),Ye=n("code",null,"shuffle",-1),Ze=n("code",null,"sort-by",-1),en={href:"https://github.com/nushell/nushell/pull/7623",target:"_blank",rel:"noopener noreferrer"},nn=n("h1",{id:"full-changelog",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#full-changelog","aria-hidden":"true"},"#"),e(" Full changelog")],-1),on=n("h2",{id:"nushell",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nushell","aria-hidden":"true"},"#"),e(" Nushell")],-1),tn={href:"https://github.com/nushell/nushell/pull/7719",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/nushell/nushell/pull/7718",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"0.74.0",-1),ln={href:"https://github.com/nushell/nushell/pull/7679",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"where",-1),cn={href:"https://github.com/nushell/nushell/pull/7638",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github.com/nushell/nushell/pull/7632",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"to nuon",-1),pn={href:"https://github.com/nushell/nushell/pull/7629",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"Cargo.lock",-1),_n=n("code",null,"powierza-coefficient 1.0.2",-1),mn={href:"https://github.com/nushell/nushell/pull/7628",target:"_blank",rel:"noopener noreferrer"},gn=n("code",null,"help metadata",-1),fn={href:"https://github.com/nushell/nushell/pull/7627",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"and",-1),kn={href:"https://github.com/nushell/nushell/pull/7596",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/nushell/nushell/pull/7595",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"Span::test_data",-1),xn={href:"https://github.com/nushell/nushell/pull/7564",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"&&",-1),Fn=n("code",null,"to nuon",-1),Tn={href:"https://github.com/nushell/nushell/pull/7544",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"0.73.1",-1),Cn={href:"https://github.com/nushell/nushell/pull/7543",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://github.com/nushell/nushell/pull/7532",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/nushell/nushell/pull/7284",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"math eval",-1),Rn={href:"https://github.com/nushell/nushell/pull/7712",target:"_blank",rel:"noopener noreferrer"},In={href:"https://github.com/nushell/nushell/pull/7660",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://github.com/nushell/nushell/pull/7623",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://github.com/nushell/nushell/pull/7599",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github.com/nushell/nushell/pull/7533",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://github.com/nushell/nushell/pull/7710",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://github.com/nushell/nushell/pull/7688",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://github.com/nushell/nushell/pull/7686",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/nushell/nushell/pull/7681",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://github.com/nushell/nushell/pull/7672",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"nu --help",-1),Pn={href:"https://github.com/nushell/nushell/pull/7670",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"url",-1),Dn={href:"https://github.com/nushell/nushell/pull/7668",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/nushell/nushell/pull/7646",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://github.com/nushell/nushell/pull/7589",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"describe",-1),Kn={href:"https://github.com/nushell/nushell/pull/7588",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"ctrl+c",-1),Qn={href:"https://github.com/nushell/nushell/pull/7587",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github.com/nushell/nushell/pull/7585",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"test_bits",-1),Zn={href:"https://github.com/nushell/nushell/pull/7577",target:"_blank",rel:"noopener noreferrer"},eo=n("code",null,"to text",-1),no={href:"https://github.com/nushell/nushell/pull/7563",target:"_blank",rel:"noopener noreferrer"},oo={href:"https://github.com/nushell/nushell/pull/7559",target:"_blank",rel:"noopener noreferrer"},to={href:"https://github.com/nushell/nushell/pull/7541",target:"_blank",rel:"noopener noreferrer"},so=n("code",null,"--stdin",-1),ao={href:"https://github.com/nushell/nushell/pull/7509",target:"_blank",rel:"noopener noreferrer"},lo=n("code",null,"table",-1),ro={href:"https://github.com/nushell/nushell/pull/7709",target:"_blank",rel:"noopener noreferrer"},io={href:"https://github.com/nushell/nushell/pull/7697",target:"_blank",rel:"noopener noreferrer"},co={href:"https://github.com/nushell/nushell/pull/7708",target:"_blank",rel:"noopener noreferrer"},ho=n("code",null,"str replace",-1),uo={href:"https://github.com/nushell/nushell/pull/7650",target:"_blank",rel:"noopener noreferrer"},po={href:"https://github.com/nushell/nushell/pull/7647",target:"_blank",rel:"noopener noreferrer"},_o=n("code",null,"get",-1),mo={href:"https://github.com/nushell/nushell/pull/7626",target:"_blank",rel:"noopener noreferrer"},go=n("code",null,"ls",-1),fo=n("code",null,"zip",-1),bo={href:"https://github.com/nushell/nushell/pull/7624",target:"_blank",rel:"noopener noreferrer"},ko=n("code",null,"def",-1),wo={href:"https://github.com/nushell/nushell/pull/7606",target:"_blank",rel:"noopener noreferrer"},vo=n("code",null,"^",-1),xo=n("code",null,"def",-1),yo={href:"https://github.com/nushell/nushell/pull/7594",target:"_blank",rel:"noopener noreferrer"},Fo={href:"https://github.com/nushell/nushell/pull/7593",target:"_blank",rel:"noopener noreferrer"},To=n("code",null,"columns",-1),No={href:"https://github.com/nushell/nushell/pull/7592",target:"_blank",rel:"noopener noreferrer"},Co=n("code",null,'Value::string("foo", Span::test_data())',-1),qo=n("code",null,'Value::test_string("foo")',-1),Ao={href:"https://github.com/nushell/nushell/pull/7583",target:"_blank",rel:"noopener noreferrer"},So=n("code",null,"values",-1),Ro={href:"https://github.com/nushell/nushell/pull/7582",target:"_blank",rel:"noopener noreferrer"},Io={href:"https://github.com/nushell/nushell/pull/7569",target:"_blank",rel:"noopener noreferrer"},Uo=n("code",null,"$nothing",-1),Mo=n("code",null,"null",-1),$o={href:"https://github.com/nushell/nushell/pull/7567",target:"_blank",rel:"noopener noreferrer"},Lo=n("code",null,"color_config",-1),Wo={href:"https://github.com/nushell/nushell/pull/7555",target:"_blank",rel:"noopener noreferrer"},Bo={href:"https://github.com/nushell/nushell/pull/7458",target:"_blank",rel:"noopener noreferrer"},Eo=n("code",null,"$in",-1),zo=n("code",null,"catch",-1),Oo={href:"https://github.com/nushell/nushell/pull/7410",target:"_blank",rel:"noopener noreferrer"},Po=n("code",null,"config.filesize_format",-1),Vo=n("code",null,"config.filesize_metric",-1),Do={href:"https://github.com/nushell/nushell/pull/7217",target:"_blank",rel:"noopener noreferrer"},Go={href:"https://github.com/nushell/nushell/pull/7701",target:"_blank",rel:"noopener noreferrer"},Ho={href:"https://github.com/nushell/nushell/pull/7700",target:"_blank",rel:"noopener noreferrer"},jo={href:"https://github.com/nushell/nushell/pull/7677",target:"_blank",rel:"noopener noreferrer"},Ko={href:"https://github.com/nushell/nushell/pull/7616",target:"_blank",rel:"noopener noreferrer"},Jo=n("code",null,"--mime-type(-m)",-1),Qo=n("code",null,"ls",-1),Xo=n("code",null,"type",-1),Yo={href:"https://github.com/nushell/nushell/pull/7586",target:"_blank",rel:"noopener noreferrer"},Zo={href:"https://github.com/nushell/nushell/pull/7545",target:"_blank",rel:"noopener noreferrer"},et={href:"https://github.com/nushell/nushell/pull/7687",target:"_blank",rel:"noopener noreferrer"},nt=n("code",null,"hide",-1),ot={href:"https://github.com/nushell/nushell/pull/7611",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://github.com/nushell/nushell/pull/7570",target:"_blank",rel:"noopener noreferrer"},st={href:"https://github.com/nushell/nushell/pull/7568",target:"_blank",rel:"noopener noreferrer"},at={href:"https://github.com/nushell/nushell/pull/7527",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://github.com/nushell/nushell/pull/7436",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://github.com/nushell/nushell/pull/7683",target:"_blank",rel:"noopener noreferrer"},it={href:"https://github.com/nushell/nushell/pull/7657",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://github.com/nushell/nushell/pull/7607",target:"_blank",rel:"noopener noreferrer"},ht=n("code",null,"from yaml",-1),ut={href:"https://github.com/nushell/nushell/pull/7565",target:"_blank",rel:"noopener noreferrer"},pt=n("code",null,"fill-na",-1),dt=n("code",null,"fill-nan",-1),_t={href:"https://github.com/nushell/nushell/pull/7680",target:"_blank",rel:"noopener noreferrer"},mt=n("code",null,"user",-1),gt=n("code",null,"fetch",-1),ft={href:"https://github.com/nushell/nushell/pull/7674",target:"_blank",rel:"noopener noreferrer"},bt={href:"https://github.com/nushell/nushell/pull/7669",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://github.com/nushell/nushell/pull/7664",target:"_blank",rel:"noopener noreferrer"},wt={href:"https://github.com/nushell/nushell/pull/7649",target:"_blank",rel:"noopener noreferrer"},vt={href:"https://github.com/nushell/nushell/pull/7643",target:"_blank",rel:"noopener noreferrer"},xt={href:"https://github.com/nushell/nushell/pull/7639",target:"_blank",rel:"noopener noreferrer"},yt={href:"https://github.com/nushell/nushell/pull/7002",target:"_blank",rel:"noopener noreferrer"},Ft={href:"https://github.com/nushell/nushell/pull/7636",target:"_blank",rel:"noopener noreferrer"},Tt={href:"https://github.com/nushell/nushell/pull/7635",target:"_blank",rel:"noopener noreferrer"},Nt={href:"https://github.com/nushell/nushell/pull/7625",target:"_blank",rel:"noopener noreferrer"},Ct=n("code",null,"powierza-coefficient",-1),qt=n("code",null,"1.0.2",-1),At={href:"https://github.com/nushell/nushell/pull/7618",target:"_blank",rel:"noopener noreferrer"},St={href:"https://github.com/nushell/nushell/pull/7610",target:"_blank",rel:"noopener noreferrer"},Rt={href:"https://github.com/nushell/nushell/pull/7603",target:"_blank",rel:"noopener noreferrer"},It=n("code",null,"env",-1),Ut={href:"https://github.com/nushell/nushell/pull/7608",target:"_blank",rel:"noopener noreferrer"},Mt=n("code",null,"save",-1),$t={href:"https://github.com/nushell/nushell/pull/7597",target:"_blank",rel:"noopener noreferrer"},Lt={href:"https://github.com/nushell/nushell/pull/7605",target:"_blank",rel:"noopener noreferrer"},Wt={href:"https://github.com/nushell/nushell/pull/7598",target:"_blank",rel:"noopener noreferrer"},Bt={href:"https://github.com/nushell/nushell/pull/7600",target:"_blank",rel:"noopener noreferrer"},Et={href:"https://github.com/nushell/nushell/pull/7580",target:"_blank",rel:"noopener noreferrer"},zt=n("code",null,"start",-1),Ot={href:"https://github.com/nushell/nushell/pull/7539",target:"_blank",rel:"noopener noreferrer"},Pt={href:"https://github.com/nushell/nushell/pull/7392",target:"_blank",rel:"noopener noreferrer"},Vt=n("code",null,"alias",-1),Dt=n("code",null,"def",-1),Gt={href:"https://github.com/nushell/nushell/pull/7560",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://github.com/nushell/nushell/pull/7534",target:"_blank",rel:"noopener noreferrer"},jt=n("code",null,"uniq",-1),Kt=n("code",null,"uniq-by",-1),Jt=n("h2",{id:"documentation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#documentation","aria-hidden":"true"},"#"),e(" Documentation")],-1),Qt={href:"https://github.com/nushell/nushell.github.io/pull/735",target:"_blank",rel:"noopener noreferrer"},Xt={href:"https://github.com/nushell/nushell.github.io/pull/734",target:"_blank",rel:"noopener noreferrer"},Yt={href:"https://github.com/nushell/nushell.github.io/pull/721",target:"_blank",rel:"noopener noreferrer"},Zt={href:"https://github.com/nushell/nushell.github.io/pull/718",target:"_blank",rel:"noopener noreferrer"},es={href:"https://github.com/nushell/nushell.github.io/pull/733",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://github.com/nushell/nushell.github.io/pull/732",target:"_blank",rel:"noopener noreferrer"},os={href:"https://github.com/nushell/nushell.github.io/pull/731",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://github.com/nushell/nushell.github.io/pull/714",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://github.com/nushell/nushell.github.io/pull/729",target:"_blank",rel:"noopener noreferrer"},as={href:"https://github.com/nushell/nushell.github.io/pull/717",target:"_blank",rel:"noopener noreferrer"},ls={href:"https://github.com/nushell/nushell.github.io/pull/716",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://github.com/nushell/nushell.github.io/pull/699",target:"_blank",rel:"noopener noreferrer"},is={href:"https://github.com/nushell/nushell.github.io/pull/727",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://github.com/nushell/nushell.github.io/pull/652",target:"_blank",rel:"noopener noreferrer"},hs={href:"https://github.com/nushell/nushell.github.io/pull/724",target:"_blank",rel:"noopener noreferrer"},us={href:"https://github.com/nushell/nushell.github.io/pull/723",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://github.com/nushell/nushell.github.io/pull/722",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://github.com/nushell/nushell.github.io/pull/720",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://github.com/nushell/nushell.github.io/pull/713",target:"_blank",rel:"noopener noreferrer"},ms={href:"https://github.com/nushell/nushell.github.io/pull/712",target:"_blank",rel:"noopener noreferrer"},gs={href:"https://github.com/nushell/nushell.github.io/pull/711",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://github.com/nushell/nushell.github.io/pull/710",target:"_blank",rel:"noopener noreferrer"},bs=n("h2",{id:"nu-scripts",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nu-scripts","aria-hidden":"true"},"#"),e(" Nu_Scripts")],-1),ks={href:"https://github.com/nushell/nu_scripts/pull/338",target:"_blank",rel:"noopener noreferrer"},ws={href:"https://github.com/nushell/nu_scripts/pull/336",target:"_blank",rel:"noopener noreferrer"},vs={href:"https://github.com/nushell/nu_scripts/pull/335",target:"_blank",rel:"noopener noreferrer"},xs={href:"https://github.com/nushell/nu_scripts/pull/334",target:"_blank",rel:"noopener noreferrer"},ys={href:"https://github.com/nushell/nu_scripts/pull/333",target:"_blank",rel:"noopener noreferrer"},Fs=n("code",null,"dict",-1),Ts=n("code",null,"cdpath",-1),Ns={href:"https://github.com/nushell/nu_scripts/pull/332",target:"_blank",rel:"noopener noreferrer"},Cs=n("h2",{id:"reedline",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reedline","aria-hidden":"true"},"#"),e(" reedline")],-1),qs={href:"https://github.com/nushell/reedline/pull/523",target:"_blank",rel:"noopener noreferrer"},As={href:"https://github.com/nushell/reedline/pull/515",target:"_blank",rel:"noopener noreferrer"};function Ss(Rs,Is){const t=a("ExternalLinkIcon"),l=a("RouterLink");return i(),c("div",null,[m,g,f,h(" more "),b,n("p",null,[e("Nu 0.74 is available as "),n("a",k,[e("pre-built binaries"),o(t)]),e(" or from "),n("a",w,[e("crates.io"),o(t)]),e(". If you have Rust installed you can install it using "),v,e(".")]),x,y,F,n("h2",T,[N,e(" Known externals commands and "),C,e(' now have "fall-through" signatures ('),n("a",q,[e("merelymyself, WindSoilder, kubouch"),o(t)]),e(")")]),A,n("h2",S,[R,e(),I,e(" is now more helpful ("),n("a",U,[e("kubouch"),o(t)]),e(")")]),M,n("h2",$,[L,e(" Initial support for parse-time constants ("),n("a",W,[e("kubouch"),o(t)]),e(")")]),B,n("p",null,[n("em",null,[e("Tip: We also addedd a new "),o(l,{to:"/blog/book/how_nushell_code_gets_run.html"},{default:u(()=>[e("book section")]),_:1}),e(` with an in-depth explanation of Nushell's parsing and evaluation, hopefully clearing up some confusion about things like "Why can't I source a dynamic path?". It also touches on the concept of parse-time constants.`)])]),E,n("h2",z,[O,e(" New "),P,e(" command to percent-encode URLs ("),n("a",V,[e("MehulG"),o(t)]),e(")")]),D,n("h2",G,[H,e(),j,e(" command to programmatically interact with records ("),n("a",K,[e("webbedspace"),o(t)]),e(")")]),J,n("h2",Q,[X,e(),Y,e(", "),Z,e(", cell path access on tables will now error when encountering a hole ("),n("a",ee,[e("kubouch"),o(t)]),e(", "),n("a",ne,[e("webbedspace"),o(t)]),e(")")]),oe,n("h2",te,[se,e(" Certain misused punctuation in "),ae,e(" definitions are now errors ("),n("a",le,[e("webbedspace"),o(t)]),e(", "),n("a",re,[e("webbedspace"),o(t)]),e(")")]),ie,n("h2",ce,[he,e(" MIME-types are supported in "),ue,e(" with an additional flag. ("),n("a",pe,[e("fdncred"),o(t)]),e(")")]),de,n("h2",_e,[me,e(" Regular expression queries are cached for performance ("),n("a",ge,[e("rgwood"),o(t)]),e(")")]),fe,n("h2",be,[ke,e(" All built-in commands now declare their pipeline input and output types ("),n("a",we,[e("sholderbach"),o(t)]),e(")")]),ve,xe,ye,n("ul",null,[Fe,n("li",null,[Te,e(" will now error for data that is not a table or a record ("),n("a",Ne,[e("#7593"),o(t)]),e(")")]),n("li",null,[e("The dataframe specific command "),Ce,e(" has been renamed to "),qe,e(" to better represent its capabilities ("),n("a",Ae,[e("#7565"),o(t)]),e(")")]),n("li",null,[e("The requirements for the names of a nu command and a command alias have been tightened to avoid some problems ("),n("a",Se,[e("#7392"),o(t)]),e(")")]),n("li",null,[Re,e(" will only produce output for records now as the output for tables is ambiguous and may be invalid to parse ("),n("a",Ie,[e("#7597"),o(t)]),e(")")]),Ue,Me,$e,n("li",null,[Le,e(" command no longer hides environment variables. Use "),We,e(" instead. ("),n("a",Be,[e("#7687"),o(t)]),e(")")]),n("li",null,[Ee,e(" has been removed in favour of the direct "),ze,e(" commands and expressions (see "),Oe,e(" as well) ("),n("a",Pe,[e("#7284"),o(t)]),e(")")]),n("li",null,[Ve,e(", "),De,e(", "),Ge,e(", "),He,e(", "),je,e(", "),Ke,e(", "),Je,e(", "),Qe,e(", "),Xe,e(", "),Ye,e(", and "),Ze,e(" are now stricter about which types of data they accept ("),n("a",en,[e("#7623"),o(t)]),e(")")])]),nn,on,n("ul",null,[n("li",null,[e("sholderbach created "),n("a",tn,[e("Commit the lockfile for 0.74"),o(t)]),e(", and "),n("a",sn,[e("Bump version to "),an,o(t)]),e(", and "),n("a",ln,[e("[Chore] cleanup in "),rn,e(" implementation"),o(t)]),e(", and "),n("a",cn,[e("Try to use the latest tagged virtualenv"),o(t)]),e(", and "),n("a",hn,[e("Fix quoting of empty string in "),un,o(t)]),e(", and "),n("a",pn,[e("Update "),dn,e(" to "),_n,o(t)]),e(", and "),n("a",mn,[e("Fix the syntax highlighting in "),gn,o(t)]),e(", and "),n("a",fn,[e("Fix usage of deprecated C-style logical "),bn,o(t)]),e(", and "),n("a",kn,[e("Include clippy check for dataframe in CI"),o(t)]),e(", and "),n("a",wn,[e("Further cleanup of "),vn,e(" usage + span fixes"),o(t)]),e(", and "),n("a",xn,[e("Fix "),yn,e(" quotation in "),Fn,e(" after proptest fail"),o(t)]),e(", and "),n("a",Tn,[e("Bump to new development version "),Nn,o(t)]),e(", and "),n("a",Cn,[e("Fix line-end trimming in subexpression"),o(t)]),e(", and "),n("a",qn,[e("Add more input/output type annotations"),o(t)]),e(", and "),n("a",An,[e("Remove "),Sn,e(" command"),o(t)])]),n("li",null,[e("WindSoilder created "),n("a",Rn,[e("Auto-Completion: put ` tildes around filenames with parentheses"),o(t)]),e(", and "),n("a",In,[e("revert changes on prepend and append"),o(t)]),e(", and "),n("a",Un,[e("last, skip, drop, take until, take while, skip until, skip while, where, reverse, shuffle, append, prepend and sort-by raise error when given non-lists "),o(t)]),e(", and "),n("a",Mn,[e("fix python plugin example"),o(t)]),e(", and "),n("a",$n,[e("avoid panic when using from nuon"),o(t)])]),n("li",null,[e("rgwood created "),n("a",Ln,[e('Revert "Primitives now use color closures..."'),o(t)]),e(", and "),n("a",Wn,[e("Add benchmarks for evaluating default env+config"),o(t)]),e(", and "),n("a",Bn,[e("Add Criterion benchmarks for parser"),o(t)]),e(", and "),n("a",En,[e("Upgrade all remaining crates to Rust 2021"),o(t)]),e(", and "),n("a",zn,[e("Reorder flags in "),On,o(t)]),e(", and "),n("a",Pn,[e("Clarify "),Vn,e(" base command"),o(t)]),e(", and "),n("a",Dn,[e("Delete unused files"),o(t)]),e(", and "),n("a",Gn,[e("Tweak new input type error message"),o(t)]),e(", and "),n("a",Hn,[e("Make stream info visible to users in "),jn,o(t)]),e(", and "),n("a",Kn,[e("Fix error message when interrupting table with "),Jn,o(t)]),e(", and "),n("a",Qn,[e("Add LRU regex cache"),o(t)]),e(", and "),n("a",Xn,[e("Re-enable "),Yn,o(t)]),e(", and "),n("a",Zn,[e("Make "),eo,e(" stream ListStreams"),o(t)]),e(", and "),n("a",no,[e("Add some cell path tests"),o(t)]),e(", and "),n("a",oo,[e("Add cross-rs config"),o(t)]),e(", and "),n("a",to,[e("Clarify "),so,e(" flag"),o(t)]),e(", and "),n("a",ao,[lo,e(": Check stream timeout on every item"),o(t)])]),n("li",null,[e("stormasm created "),n("a",ro,[e("clean up some extra logging code in the cli"),o(t)]),e(", and "),n("a",io,[e("move BufferedReader out of nu-command"),o(t)])]),n("li",null,[e("webbedspace created "),n("a",co,[e("Improve wording of "),ho,e(" help messages"),o(t)]),e(", and "),n("a",uo,[e("Primitives now use color closures when printed on the command line"),o(t)]),e(", and "),n("a",po,[e("Make "),_o,e(" hole errors and cell path hole errors identical (improvement on #7002)"),o(t)]),e(", and "),n("a",mo,[e("Slight edits to "),go,e(" and "),fo,e("'s help text"),o(t)]),e(", and "),n("a",bo,[ko,e(": make various punctuation misuses into errors"),o(t)]),e(", and "),n("a",wo,[e("Disallow "),vo,e(" in "),xo,e(" command names"),o(t)]),e(", and "),n("a",yo,[e("Add extra_usage messages for subcommand-only commands"),o(t)]),e(", and "),n("a",Fo,[To,e(" now errors when given a non-record non-table"),o(t)]),e(", and "),n("a",No,[e("Change instances of "),Co,e(" to "),qo,o(t)]),e(", and "),n("a",Ao,[e("Add "),So,e(" command (see #7166)"),o(t)]),e(", and "),n("a",Ro,[e("Fix signatures of commands which accept records also"),o(t)]),e(", and "),n("a",Io,[e("Change other instances of "),Uo,e(" to "),Mo,o(t)]),e(", and "),n("a",$o,[e("Fix #7551 record support in "),Lo,o(t)]),e(", and "),n("a",Wo,[e("Remove preview.rs"),o(t)]),e(", and "),n("a",Bo,[e("Make "),Eo,e(" work in "),zo,e(" closures"),o(t)]),e(", and "),n("a",Oo,[e("Make "),Po,e("/"),Vo,e(" conflict resolution consistent"),o(t)]),e(", and "),n("a",Do,[e("Standardise the use of ShellError::UnsupportedInput and ShellError::TypeMismatch and add spans to every instance of the former"),o(t)])]),n("li",null,[e("dependabot[bot] created "),n("a",Go,[e("Bump tokio from 1.21.2 to 1.24.1"),o(t)])]),n("li",null,[e("fdncred created "),n("a",Ho,[e("align durations to the right"),o(t)]),e(", and "),n("a",jo,[e("fix register-plugins script"),o(t)]),e(", and "),n("a",Ko,[e("add "),Jo,e(" to "),Qo,e(" in the "),Xo,e(" column"),o(t)]),e(", and "),n("a",Yo,[e("add metadata to wrap"),o(t)]),e(", and "),n("a",Zo,[e("fix the wix file to overwrite with save -f"),o(t)])]),n("li",null,[e("kubouch created "),n("a",et,[e("Remove environment variable hiding from "),nt,o(t)]),e(", and "),n("a",ot,[e("Expand Nushell's help system"),o(t)]),e(", and "),n("a",tt,[e("Remove shape-directed import pattern parsing"),o(t)]),e(", and "),n("a",st,[e("Small parser refactors"),o(t)]),e(", and "),n("a",at,[e('Add "fall-through" signatures'),o(t)]),e(", and "),n("a",lt,[e("Initial support for parse-time constants"),o(t)])]),n("li",null,[e("Mehrbod2002 created "),n("a",rt,[e("Continue and Break on Try/Catch "),o(t)]),e(", and "),n("a",it,[e("Recursion def"),o(t)]),e(", and "),n("a",ct,[e("Fix and Allow Number and Boolean type to be key in "),ht,o(t)]),e(", and "),n("a",ut,[e("Fix #6888 and rename "),pt,e(" to "),dt,o(t)])]),n("li",null,[e("hikilaka created "),n("a",_t,[e("Make "),mt,e(" parameter optional in "),gt,o(t)])]),n("li",null,[e("xxnuo created "),n("a",ft,[e("Fix build-all-windows.cmd"),o(t)])]),n("li",null,[e("aniou created "),n("a",bt,[e("Extend config support from F1-F12 to F1-F20, #7666"),o(t)])]),n("li",null,[e("MehulG created "),n("a",kt,[e("Url encode to escape special characters"),o(t)])]),n("li",null,[e("TornaxO7 created "),n("a",wt,[e("adding link to list of nu-plugins"),o(t)])]),n("li",null,[e("Decodetalkers created "),n("a",vt,[e("fix: ci problem"),o(t)]),e(", and "),n("a",xt,[e("fix: empty cell in select"),o(t)]),e(", and "),n("a",yt,[e('return Error if get meet nothing and without "i"'),o(t)])]),n("li",null,[e("Yethal created "),n("a",Ft,[e("Simplify register-plugins.nu"),o(t)])]),n("li",null,[e("jaudiger created "),n("a",Tt,[e("doc: correct some really tiny typos."),o(t)])]),n("li",null,[e("micouy created "),n("a",Nt,[e("Update "),Ct,e(" to "),qt,o(t)])]),n("li",null,[e("Kangaxx-0 created "),n("a",At,[e("early return for parsing closure and block with interchanged shape"),o(t)])]),n("li",null,[e("hustcer created "),n("a",St,[e("Fix const examples"),o(t)]),e(", and "),n("a",Rt,[e("Fix an example of "),It,e(" command"),o(t)])]),n("li",null,[e("NotLebedev created "),n("a",Ut,[e("Fix "),Mt,e(" error handling"),o(t)]),e(", and "),n("a",$t,[e("To toml fix"),o(t)])]),n("li",null,[e("zhiburt created "),n("a",Lt,[e("Fix table expand wrap in case no header is there"),o(t)]),e(", and "),n("a",Wt,[e("Fix some issues with table wrapping of lists"),o(t)])]),n("li",null,[e("kianmeng created "),n("a",Bt,[e("Fix typos by codespell"),o(t)])]),n("li",null,[e("merelymyself created "),n("a",Et,[e("let "),zt,e(" open anything and everything"),o(t)]),e(", and "),n("a",Ot,[e("let case_insensitive option work for variable completion as well"),o(t)]),e(", and "),n("a",Pt,[e("tighter restrictions on "),Vt,e(" and "),Dt,e(" names"),o(t)])]),n("li",null,[e("swarnimarun created "),n("a",Gt,[e("chore: make the config setup messages consistent"),o(t)])]),n("li",null,[e("raccmonteiro created "),n("a",Ht,[jt,e(" and "),Kt,e(" optimization (#7477)"),o(t)])])]),Jt,n("ul",null,[n("li",null,[e("kubouch created "),n("a",Qt,[e("Link to the new parse-eval page"),o(t)]),e(", and "),n("a",Xt,[e("Start Design Notes chapter; Add parse-eval notes"),o(t)]),e(", and "),n("a",Yt,[e("Fix wrong PATH append example"),o(t)]),e(", and "),n("a",Zt,[e("Add image; Fmt"),o(t)])]),n("li",null,[e("WindSoilder created "),n("a",es,[e("update breaking changes"),o(t)]),e(", and "),n("a",ns,[e("Try to rename from blog text to changeLog"),o(t)])]),n("li",null,[e("sholderbach created "),n("a",os,[e("Fix #705: sidebar links German."),o(t)]),e(", and "),n("a",ts,[e("Fix styling on 0.73 release notes"),o(t)])]),n("li",null,[e("hustcer created "),n("a",ss,[e("fix i18n.nu script and update i18n-meta conf"),o(t)]),e(", and "),n("a",as,[e("Refresh docs for v0.73"),o(t)]),e(", and "),n("a",ls,[e("Fix book/make_docs.nu for nu v0.73+"),o(t)]),e(", and "),n("a",rs,[e("Update book/make_docs.nu for nu v0.72.1+"),o(t)])]),n("li",null,[e("webbedspace created "),n("a",is,[e("Add my changes"),o(t)]),e(", and "),n("a",cs,[e("Fixed various issues in make_docs.nu"),o(t)])]),n("li",null,[e("TornaxO7 created "),n("a",hs,[e("Update plugins.md"),o(t)]),e(", and "),n("a",us,[e("Update custom_completions.md"),o(t)]),e(", and "),n("a",ps,[e("Update aliases.md"),o(t)]),e(", and "),n("a",ds,[e("Fix syntax error for menu"),o(t)])]),n("li",null,[e("Tengs-Penkwe created "),n("a",_s,[e('Add section "Output result to external commands"'),o(t)])]),n("li",null,[e("sschneider-ihre-pvs created "),n("a",ms,[e("Update help.md"),o(t)])]),n("li",null,[e("merelymyself created "),n("a",gs,[e("clarify columns and rows"),o(t)])]),n("li",null,[e("rgwood created "),n("a",fs,[e("Mention breaking save change"),o(t)])])]),bs,n("ul",null,[n("li",null,[e("kubouch created "),n("a",ks,[e("Fix broken conda prompt"),o(t)])]),n("li",null,[e("fdncred created "),n("a",ws,[e("update coloring scripts with newer syntax"),o(t)]),e(", and "),n("a",vs,[e("update 20k script with save changes"),o(t)]),e(", and "),n("a",xs,[e("update sparkline script"),o(t)])]),n("li",null,[e("skelly37 created "),n("a",ys,[e("Fix "),Fs,e(" and "),Ts,e(" for 0.73"),o(t)])]),n("li",null,[e("maxim-uvarov created "),n("a",Ns,[e("Function to format nicely big numbers: number-format.nu"),o(t)])])]),Cs,n("ul",null,[n("li",null,[e("sholderbach created "),n("a",qs,[e("Fix the Github actions badge"),o(t)])]),n("li",null,[e("CozyPenguin created "),n("a",As,[e("Make reedline handling cursor shapes more configurable"),o(t)])])])])}const Ms=r(_,[["render",Ss],["__file","2023-01-10-nushell_0_74.html.vue"]]);export{Ms as default};
