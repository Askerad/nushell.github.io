(window.webpackJsonp=window.webpackJsonp||[]).push([[503],{1277:function(e,a,o){"use strict";o.r(a);var t=o(35),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"overlays"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#overlays"}},[e._v("#")]),e._v(" Overlays")]),e._v(" "),o("p",[e._v('Overlays act as "layers" of definitions (custom commands, aliases, environment variables) that can be activated and deactivated on demand.\nThey resemble virtual environments found in some languages, such as Python.')]),e._v(" "),o("p",[o("em",[e._v("Note: To understand overlays, make sure to check "),o("RouterLink",{attrs:{to:"/book/modules.html"}},[e._v("Modules")]),e._v(" first as overlays build on top of modules.")],1)]),e._v(" "),o("h2",{attrs:{id:"basics"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#basics"}},[e._v("#")]),e._v(" Basics")]),e._v(" "),o("p",[e._v("First, Nushell comes with one default overlay called "),o("code",[e._v("zero")]),e._v(".\nYou can inspect which overlays are active with the "),o("RouterLink",{attrs:{to:"/book/commands/overlay_list.html"}},[o("code",[e._v("overlay list")])]),e._v(" command.\nYou should see the default overlay listed there.")],1),e._v(" "),o("p",[e._v("To create a new overlay, you first need a module:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('> module spam {\n    export def foo [] {\n        "foo"\n    }\n\n    export alias bar = "bar"\n\n    export env BAZ {\n        "baz"\n    }\n}\n')])])]),o("p",[e._v("We'll use this module throughout the chapter: Whenever you see "),o("code",[e._v("overlay add spam")]),e._v(", assume "),o("code",[e._v("spam")]),e._v(" is referring to this module.")]),e._v(" "),o("p",[e._v("To create the overlay, call "),o("RouterLink",{attrs:{to:"/book/commands/overlay_add.html"}},[o("code",[e._v("overlay add")])]),e._v(":")],1),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("> overlay add spam\n\n> foo\nfoo\n\n> bar\nbar\n\n> $env.BAZ\nbaz\n\n> overlay list\n───┬──────\n 0 │ zero\n 1 │ spam\n───┴──────\n")])])]),o("p",[e._v("In the following sections, the "),o("code",[e._v(">")]),e._v(" prompt will be preceded by the name of the last active overlay.\n"),o("code",[e._v("(spam)> some-command")]),e._v(" means the "),o("code",[e._v("spam")]),e._v(" overlay is the last active overlay when the command was typed.")]),e._v(" "),o("h2",{attrs:{id:"removing-an-overlay"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#removing-an-overlay"}},[e._v("#")]),e._v(" Removing an Overlay")]),e._v(" "),o("p",[e._v("If you don't need the overlay definitions anymore, call "),o("RouterLink",{attrs:{to:"/book/commands/overlay_remove.html"}},[o("code",[e._v("overlay remove")])]),e._v(":")],1),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("(spam)> overlay remove spam\n\n(zero)> foo\nError: Can't run executable...\n\n(zero)> overlay list\n───┬──────\n 0 │ zero\n───┴──────\n")])])]),o("p",[e._v("The overlays are also scoped.\nAny added overlays are removed at the end of the scope:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("(zero)> do { overlay add spam; foo }\nfoo\n\n(zero)> overlay list\n───┬──────\n 0 │ zero\n───┴──────\n")])])]),o("p",[e._v("Furthermore, "),o("RouterLink",{attrs:{to:"/book/commands/overlay_remove.html"}},[o("code",[e._v("overlay remove")])]),e._v(" without an argument will remove the last active ovelay.")],1),e._v(" "),o("h2",{attrs:{id:"overlays-are-recordable"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#overlays-are-recordable"}},[e._v("#")]),e._v(" Overlays are Recordable")]),e._v(" "),o("p",[e._v("Any new definition (command, alias, environment variable) is recorded into the last active overlay:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('(zero)> overlay add spam\n\n(spam)> def eggs [] { "eggs" }\n')])])]),o("p",[e._v("Now, the "),o("code",[e._v("eggs")]),e._v(" command belongs to the "),o("code",[e._v("spam")]),e._v(" overlay.\nIf we remove the overlay, we can't call it anymore:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("(spam)> overlay remove spam\n\n(zero)> eggs\nError: Can't run executable...\n")])])]),o("p",[e._v("But we can bring it back!")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("(zero)> overlay add spam\n\n(spam)> eggs\neggs\n")])])]),o("p",[e._v("Overlays remember what you add to them and store that information even if you remove them.\nThis can let you repeatedly swap between different contexts.")]),e._v(" "),o("h2",{attrs:{id:"preserving-definitions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#preserving-definitions"}},[e._v("#")]),e._v(" Preserving Definitions")]),e._v(" "),o("p",[e._v("Sometimes, you might want to remove an overlay, but keep all the custom definitions you added without having to redefine them in the next active overlay:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('(zero)> overlay add spam\n\n(spam)> def eggs [] { "eggs" }\n\n(spam)> overlay remove --keep spam\n\n(zero)> eggs\neggs\n')])])]),o("p",[e._v("The "),o("code",[e._v("--keep")]),e._v(" flag does exactly that.")]),e._v(" "),o("h2",{attrs:{id:"ordering-overlays"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ordering-overlays"}},[e._v("#")]),e._v(" Ordering Overlays")]),e._v(" "),o("p",[e._v("The overlays are arranged as a stack.\nIf multiple overlays contain the same definition, say "),o("code",[e._v("foo")]),e._v(", the one from the last active one would take a precedence.\nTo bring some overlay to the top of the stack, you can call "),o("code",[e._v("overlay add")]),e._v(" again:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('(zero)> def foo [] { "foo-in-zero" }\n\n(zero)> overlay add spam\n\n(spam)> foo\nfoo\n\n(spam)> overlay add zero\n\n(zero)> foo\nfoo-in-zero\n\n(zero)> overlay list\n───┬──────\n 0 │ spam\n 1 │ zero\n───┴──────\n')])])]),o("p",[e._v("Now, the "),o("code",[e._v("zero")]),e._v(" overlay takes a precedence.")])])}),[],!1,null,null,null);a.default=r.exports}}]);