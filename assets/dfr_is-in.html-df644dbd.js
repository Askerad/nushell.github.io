import{_ as o,p,q as r,Q as a,t as s,v as e,a1 as t}from"./framework-344bb0e4.js";const c={},l={id:"frontmatter-title-for-dataframe",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-dataframe","aria-hidden":"true"},"#",-1),u={class:"command-title"},d=t(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; dfr is-in (other)</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>other</code>: right series</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Checks if elements from a series are contained in right series</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> dfr into-df<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">|</span> dfr into-df <span class="token operator">|</span> dfr is-in <span class="token variable">$other</span>
╭───┬───────╮
│ <span class="token comment"># │ is_in │</span>
├───┼───────┤
│ <span class="token number">0</span> │ <span class="token boolean">false</span> │
│ <span class="token number">1</span> │ <span class="token boolean">true</span>  │
│ <span class="token number">2</span> │ <span class="token boolean">true</span>  │
│ <span class="token number">3</span> │ <span class="token boolean">true</span>  │
│ <span class="token number">4</span> │ <span class="token boolean">false</span> │
│ <span class="token number">5</span> │ <span class="token boolean">false</span> │
│ <span class="token number">6</span> │ <span class="token boolean">false</span> │
╰───┴───────╯

</code></pre></div>`,7),k={id:"frontmatter-title-for-expression",tabindex:"-1"},h=a("a",{class:"header-anchor",href:"#frontmatter-title-for-expression","aria-hidden":"true"},"#",-1),m={class:"command-title"},f=t(`<h2 id="signature-1" tabindex="-1"><a class="header-anchor" href="#signature-1" aria-hidden="true">#</a> Signature</h2><p><code>&gt; dfr is-in (list)</code></p><h2 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h2><ul><li><code>list</code>: List to check if values are in</li></ul><h2 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h2><p>Creates a is-in expression</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> <span class="token function">df</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>a b<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>one <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>two <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>three <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> dfr into-df<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$df</span> <span class="token operator">|</span> dfr with-column <span class="token punctuation">(</span>dfr col a <span class="token operator">|</span> dfr is-in <span class="token punctuation">[</span>one two<span class="token punctuation">]</span> <span class="token operator">|</span> dfr as a_in<span class="token punctuation">)</span>
╭───┬───────┬───┬───────╮
│ <span class="token comment"># │   a   │ b │ a_in  │</span>
├───┼───────┼───┼───────┤
│ <span class="token number">0</span> │ one   │ <span class="token number">1</span> │ <span class="token boolean">true</span>  │
│ <span class="token number">1</span> │ two   │ <span class="token number">2</span> │ <span class="token boolean">true</span>  │
│ <span class="token number">2</span> │ three │ <span class="token number">3</span> │ <span class="token boolean">false</span> │
╰───┴───────┴───┴───────╯

</code></pre></div>`,7);function b(n,_){return p(),r("div",null,[a("h1",l,[i,s(),a("code",null,e(n.$frontmatter.title),1),s(" for dataframe")]),a("div",u,e(n.$frontmatter.dataframe),1),d,a("h1",k,[h,s(),a("code",null,e(n.$frontmatter.title),1),s(" for expression")]),a("div",m,e(n.$frontmatter.expression),1),f])}const x=o(c,[["render",b],["__file","dfr_is-in.html.vue"]]);export{x as default};
