<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="English">
  <id>www.nushell.sh/</id>
  <title>Nushell</title>
  <subtitle>A new type of shell.</subtitle>
  <updated>2022-06-05T02:14:25.272Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="www.nushell.sh/feed.atom"/>
  <link rel="alternate" href="www.nushell.sh/"/>
  <contributor>
    <name>Jonathan Turner</name>
  </contributor>
  <contributor>
    <name>The Nu Authors</name>
  </contributor>
  <entry>
    <title type="html">Introducing nushell</title>
    <id>www.nushell.sh/blog/2019-08-23-introducing-nushell.html</id>
    <link href="www.nushell.sh/blog/2019-08-23-introducing-nushell.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="introducing-nushell" tabindex="-1"> Introducing nushell</h1>
<p>Today, we're introducing a new shell, written in Rust. It draws inspiration from the classic Unix philosophy of pipelines, the structured data approach of PowerShell, functional programming, systems programming, and more.</p>
<p>It's called Nushell, or just Nu for short. We have a <a href="https://book.nushell.sh/en" target="_blank" rel="noopener noreferrer">book</a> (¡también se habla <a href="https://book.nushell.sh/es" target="_blank" rel="noopener noreferrer">Español</a>!). We have a <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">repo</a>.</p>
<p>This release was made by Jonathan Turner (me), Yehuda Katz, and Andrés Robalino, with contributions from Odin Dutton.</p>
<p><img src="@source/assets/images/nushell-autocomplete4.gif" alt="Nu in action"></p>
<h1 id="but-why" tabindex="-1"> But why?</h1>
<p>Many of us have gotten used to bash (or zsh/fish/etc), and don't understand why you would need another kind of shell. That was me, too, a few months ago before I started working on this. My friend Yehuda had discovered PowerShell and was going on and on about how amazing it was to do more with the shell, but until he actually gave me a demo, I didn't really believe him.</p>
<p>Then he talked me into joining him on an idea he had. What if we could take the ideas of a structured shell and make it more functional (as opposed to object-oriented)? What if, like PowerShell, it worked on Windows, Linux, and macOS? What if it had great error messages? I fell in love with the project ideas, made a few new friends, and many nights and weekends later I'd like to show you what we've made.</p>
<p>In this post, I'll talk about how a few simple ideas drive how Nu works, what Nu can do with them, and where we hope to go in the future.</p>
<h1 id="simple-ideas" tabindex="-1"> Simple ideas</h1>
<p>To Nu, everything is data. When you type <code>ls</code>, you're given a table of information about the directory you're listing:</p>
<p><img src="@source/assets/images/nu_ls.png" alt="ls command"></p>
<p>Rather than having to remember different flags to <code>ls</code>, we can just work with the data it gives back. We can find the files greater than a certain size:</p>
<p><img src="@source/assets/images/nu_ls_filter.png" alt="ls with filtering"></p>
<p>Or we could choose to sort it by a column, or only show directories, or more. That by itself is fun but perhaps not compelling enough.</p>
<p><img src="@source/assets/images/nu_ps_filter.png" alt="ps with filtering"></p>
<p>Where this simple concept - that everything in Nu is data - starts to shine when we try other commands and realize that we're using the same commands to filter, to sort, etc. Rather than having the need to remember all the parameters to all the commands, we can just use the same verbs to act over our data, regardless of where the data came from. Nu pushes this idea even further.</p>
<p><img src="@source/assets/images/open_cargo.png" alt="opening toml file"></p>
<p>Nu also understands structured text files like JSON, TOML, YAML, and more. Opening these files gives us the same tables we saw with <code>ls</code> and <code>ps</code>. Again, this lets us use the same commands to filter our data, explore it, and use it.</p>
<h1 id="working-with-the-outside-world" tabindex="-1"> Working with the outside world</h1>
<p>The above approach could be fun, but if we're not careful, it could become a walled garden. What happens outside of the commands Nu comes with?</p>
<p>First, let's take a look at working with a file that Nu doesn't understand.</p>
<div><pre><code>> open people.psv
Octavia | Butler | Writer
Bob | Ross | Painter
Antonio | Vivaldi | Composer
</code></pre></div><p>To work with this in Nu, we need to do two steps: figure out where the rows are, and then figure out what the columns are. The rows are pretty easy, we just have one record per row:</p>
<div><pre><code>> open people.psv | lines
---+------------------------------
 # | value
---+------------------------------
 0 | Octavia | Butler | Writer
 1 | Bob | Ross | Painter
 2 | Antonio | Vivaldi | Composer
---+------------------------------
</code></pre></div><p>Next, we can create our columns by splitting each row at the pipe (<code>|</code>) symbol:</p>
<div><pre><code>> open people.psv | lines | split-column "|"
---+----------+-----------+-----------
 # | Column1  | Column2   | Column3
---+----------+-----------+-----------
 0 | Octavia  |  Butler   |  Writer
 1 | Bob      |  Ross     |  Painter
 2 | Antonio  |  Vivaldi  |  Composer
---+----------+-----------+-----------
</code></pre></div><p>That's already good enough that we can work with the data. We can go a step further and name the columns if we want:</p>
<div><pre><code>> open people.psv | lines | split-column " | " firstname lastname job
---+-----------+----------+----------
 # | firstname | lastname | job
---+-----------+----------+----------
 0 | Octavia   | Butler   | Writer
 1 | Bob       | Ross     | Painter
 2 | Antonio   | Vivaldi  | Composer
---+-----------+----------+----------
</code></pre></div><p>But what about working with commands outside of Nu? Let's first call the native version of <code>ls</code> instead of the Nu version:</p>
<div><pre><code>> ^ls
assets	     Cargo.lock  docs	images	 Makefile.toml	README.md     rustfmt2.toml  src     tests
Cargo2.toml  Cargo.toml  extra	LICENSE  open		readonly.txt  rustfmt.toml   target
</code></pre></div><p>We'll use the same commands we used on data to bring it into Nu:</p>
<div><pre><code>^ls | split-row " " file
----+---------------
 #  | value
----+---------------
 0  | assets
 1  | Cargo2.toml
 2  | Cargo.lock
 3  | Cargo.toml
 4  | docs
 5  | extra
 6  | images
 7  | LICENSE
 8  | Makefile.toml
 9  | open
 10 | README.md
 11 | readonly.txt
 12 | rustfmt2.toml
 13 | rustfmt.toml
 14 | src
 15 | target
 16 | tests
----+---------------
</code></pre></div><p>Or maybe we want to work with the native <code>ls -la</code>:</p>
<div><pre><code>^ls -la | lines | split-column " "
----+------------+---------+----------+----------+---------+---------+---------+---------+---------------
 #  | Column1    | Column2 | Column3  | Column4  | Column5 | Column6 | Column7 | Column8 | Column9
----+------------+---------+----------+----------+---------+---------+---------+---------+---------------
 0  | total      | 296     |          |          |         |         |         |         |
 1  | drwxr-xr-x | 13      | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | .
 2  | drwxr-xr-x | 21      | jonathan | jonathan | 4096    | Aug     | 22      | 17:00   | ..
 3  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Aug     | 3       | 05:39   | assets
 4  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Aug     | 21      | 19:29   | .azure
 5  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Jun     | 23      | 05:09   | .cargo
 6  | -rw-r--r-- | 1       | jonathan | jonathan | 2963    | Aug     | 22      | 20:17   | Cargo2.toml
 7  | -rw-r--r-- | 1       | jonathan | jonathan | 201255  | Aug     | 24      | 03:24   | Cargo.lock
 8  | -rw-r--r-- | 1       | jonathan | jonathan | 3127    | Aug     | 24      | 03:24   | Cargo.toml
 9  | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Jun     | 17      | 15:32   | docs
 10 | -rw-r--r-- | 1       | jonathan | jonathan | 148     | Jun     | 17      | 15:32   | .editorconfig
 11 | drwxr-xr-x | 4       | jonathan | jonathan | 4096    | Aug     | 22      | 19:29   | extra
 12 | drwxr-xr-x | 8       | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | .git
 13 | -rw-r--r-- | 1       | jonathan | jonathan | 58      | Aug     | 10      | 11:08   | .gitignore
 14 | drwxr-xr-x | 2       | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | images
 15 | -rw-r--r-- | 1       | jonathan | jonathan | 1085    | Jun     | 17      | 15:32   | LICENSE
 16 | -rw-r--r-- | 1       | jonathan | jonathan | 614     | Jun     | 17      | 15:32   | Makefile.toml
 17 | -rw-r--r-- | 1       | jonathan | jonathan | 0       | Aug     | 23      | 04:58   | open
 18 | -rw-r--r-- | 1       | jonathan | jonathan | 11375   | Aug     | 24      | 03:24   | README.md
 19 | -r--r--r-- | 1       | jonathan | jonathan | 0       | Jul     | 4       | 03:51   | readonly.txt
 20 | -rw-r--r-- | 1       | jonathan | jonathan | 37      | Aug     | 23      | 04:54   | rustfmt2.toml
 21 | -rw-r--r-- | 1       | jonathan | jonathan | 16      | Aug     | 1       | 19:45   | rustfmt.toml
 22 | drwxr-xr-x | 10      | jonathan | jonathan | 4096    | Aug     | 24      | 03:24   | src
 23 | drwxr-xr-x | 4       | jonathan | jonathan | 4096    | Aug     | 22      | 19:22   | target
 24 | drwxr-xr-x | 4       | jonathan | jonathan | 4096    | Aug     | 22      | 04:15   | tests
 25 | drwxrwxr-x | 2       | jonathan | jonathan | 4096    | Jul     | 19      | 15:18   | .vscode
----+------------+---------+----------+----------+---------+---------+---------+---------+---------------
</code></pre></div><p>After a bit of experimenting, we might come up with a command like this:</p>
<div><pre><code>> ^ls -la | lines | skip 1 | split-column " " perms files group user size month day time name
----+------------+-------+----------+----------+--------+-------+-----+-------+---------------
 #  | perms      | files | group    | user     | size   | month | day | time  | name
----+------------+-------+----------+----------+--------+-------+-----+-------+---------------
 0  | drwxr-xr-x | 13    | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | .
 1  | drwxr-xr-x | 21    | jonathan | jonathan | 4096   | Aug   | 22  | 17:00 | ..
 2  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Aug   | 3   | 05:39 | assets
 3  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Aug   | 21  | 19:29 | .azure
 4  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Jun   | 23  | 05:09 | .cargo
 5  | -rw-r--r-- | 1     | jonathan | jonathan | 2963   | Aug   | 22  | 20:17 | Cargo2.toml
 6  | -rw-r--r-- | 1     | jonathan | jonathan | 201255 | Aug   | 24  | 03:24 | Cargo.lock
 7  | -rw-r--r-- | 1     | jonathan | jonathan | 3127   | Aug   | 24  | 03:24 | Cargo.toml
 8  | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Jun   | 17  | 15:32 | docs
 9  | -rw-r--r-- | 1     | jonathan | jonathan | 148    | Jun   | 17  | 15:32 | .editorconfig
 10 | drwxr-xr-x | 4     | jonathan | jonathan | 4096   | Aug   | 22  | 19:29 | extra
 11 | drwxr-xr-x | 8     | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | .git
 12 | -rw-r--r-- | 1     | jonathan | jonathan | 58     | Aug   | 10  | 11:08 | .gitignore
 13 | drwxr-xr-x | 2     | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | images
 14 | -rw-r--r-- | 1     | jonathan | jonathan | 1085   | Jun   | 17  | 15:32 | LICENSE
 15 | -rw-r--r-- | 1     | jonathan | jonathan | 614    | Jun   | 17  | 15:32 | Makefile.toml
 16 | -rw-r--r-- | 1     | jonathan | jonathan | 0      | Aug   | 23  | 04:58 | open
 17 | -rw-r--r-- | 1     | jonathan | jonathan | 11375  | Aug   | 24  | 03:24 | README.md
 18 | -r--r--r-- | 1     | jonathan | jonathan | 0      | Jul   | 4   | 03:51 | readonly.txt
 19 | -rw-r--r-- | 1     | jonathan | jonathan | 37     | Aug   | 23  | 04:54 | rustfmt2.toml
 20 | -rw-r--r-- | 1     | jonathan | jonathan | 16     | Aug   | 1   | 19:45 | rustfmt.toml
 21 | drwxr-xr-x | 10    | jonathan | jonathan | 4096   | Aug   | 24  | 03:24 | src
 22 | drwxr-xr-x | 4     | jonathan | jonathan | 4096   | Aug   | 22  | 19:22 | target
 23 | drwxr-xr-x | 4     | jonathan | jonathan | 4096   | Aug   | 22  | 04:15 | tests
 24 | drwxrwxr-x | 2     | jonathan | jonathan | 4096   | Jul   | 19  | 15:18 | .vscode
----+------------+-------+----------+----------+--------+-------+-----+-------+---------------
</code></pre></div><p>Because Nu let's you manipulate your data until it's how you want it, there's a feeling of playing with your data. You get used to using the verbs, and then you can use them on anything. When you're ready, you can write it back to disk.</p>
<p>Oh, before I forget - I wanted to quickly show how to get data from Nu back out into the outside world. Here's an example of calling <code>echo</code> on each filename in a directory:</p>
<div><pre><code>> ls | get name | echo $it
</code></pre></div><p>You can see that we can mix-and-match commands that are inside of Nu with those that are outside, and data will still flow between them as expected. But Nu is more than just a pipeline.</p>
<h1 id="more-than-a-pipeline" tabindex="-1"> More than a pipeline</h1>
<p>As we built Nu, we realized we could experiment with other parts of how a shell works. The first of these experiments lead us to an observation: if everything is data in Nu, we should be able to view this data.</p>
<p><img src="@source/assets/images/view_source.png" alt="viewing source file"></p>
<p>We've seen the tables. Nu also supports opening and looking at text and binary data. If we open a source file, we can scroll around in a syntax-highlighted file. If we open an xml, we can look at its data. We can even open a binary file and look at what's inside (hint: there's even a fun easter egg if you open certain kinds binary files, especially if you've installed Nu with the optional <code>rawkey</code> feature).</p>
<p>Being able to view data is helpful, and this kind of polish extends to other aspects, like error messages:</p>
<p><img src="@source/assets/images/nu_error2.png" alt="simple error"></p>
<p>Nu takes heavy inspiration from the <a href="https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html" target="_blank" rel="noopener noreferrer">error messages in Rust</a>. As much as possible, draw your eyes to the problem.</p>
<p>Combined with the pipeline, some pretty interesting errors are possible:</p>
<p><img src="@source/assets/images/nu_error_metadata.png" alt="error with metadata"></p>
<p>You might wonder how does that even work. Nu has a metadata system (still early!) that you can read about in the <a href="https://book.nushell.sh/en/metadata" target="_blank" rel="noopener noreferrer">Metadata chapter</a> of the <a href="https://book.nushell.sh" target="_blank" rel="noopener noreferrer">Nu book</a>. Let's just take a quick peek at it:</p>
<div><pre><code>> open Cargo.toml
------------+--------------+------------------+----------+----------
 bin        | dependencies | dev-dependencies | lib      | package
------------+--------------+------------------+----------+----------
 [11 items] | [object]     | [object]         | [object] | [object]
------------+--------------+------------------+----------+----------
> open Cargo.toml | tags
----------+------------------------------------------
 span     | origin
----------+------------------------------------------
 [object] | /home/jonathan/Source/nushell/Cargo.toml
----------+------------------------------------------
</code></pre></div><p>Data that flows through the pipeline gets a set of additional metadata tagged to it. We can use this later to figure out how to display the contents, show a better error message, and more.</p>
<h1 id="shells-plural" tabindex="-1"> Shells, plural</h1>
<p>Let's say you're in a directory, but you'd really like to flip back and forth between it and one or two others. You could open up multiple tabs, multiple terminals, if you're on a Unix system you could use &quot;screen&quot;, and probably even more than that. What if the shells were just built in?</p>
<p>In Nu, we can <code>enter</code> a directory, which adds it to a ring of shells we can bounce between:</p>
<div><pre><code>> enter ../rhai/
/home/jonathan/Source/rhai(master)> shells
---+---+------------+-------------------------------
 # |   | name       | path
---+---+------------+-------------------------------
 0 |   | filesystem | /home/jonathan/Source/nushell
 1 | X | filesystem | /home/jonathan/Source/rhai
---+---+------------+-------------------------------
</code></pre></div><p>Using <code>n</code> and <code>p</code> we can jump back and forth between the shells. <code>exit</code> gets us out of a shell.</p>
<p>You might noticed that <code>name</code> column in the <code>shells</code> table. Why's that there? Oh no... oh yes.</p>
<div><pre><code>> enter Cargo.toml
/> shells
---+---+--------------------------------------------+-------------------------------
 # |   | name                                       | path
---+---+--------------------------------------------+-------------------------------
 0 |   | filesystem                                 | /home/jonathan/Source/nushell
 1 |   | filesystem                                 | /home/jonathan/Source/rhai
 2 | X | {/home/jonathan/Source/nushell/Cargo.toml} | /
---+---+--------------------------------------------+-------------------------------
</code></pre></div><p>That's right, we're in the file. Can we <code>cd</code>? Oh yes, we can:</p>
<div><pre><code>/> ls
------------+--------------+------------------+----------+----------
 bin        | dependencies | dev-dependencies | lib      | package
------------+--------------+------------------+----------+----------
 [11 items] | [object]     | [object]         | [object] | [object]
------------+--------------+------------------+----------+----------
/> cd bin
/bin> ls
----+----------------------+---------------------------
 #  | name                 | path
----+----------------------+---------------------------
 0  | nu_plugin_inc        | src/plugins/inc.rs
 1  | nu_plugin_sum        | src/plugins/sum.rs
 2  | nu_plugin_add        | src/plugins/add.rs
 3  | nu_plugin_edit       | src/plugins/edit.rs
 4  | nu_plugin_str        | src/plugins/str.rs
 5  | nu_plugin_skip       | src/plugins/skip.rs
 6  | nu_plugin_sys        | src/plugins/sys.rs
 7  | nu_plugin_tree       | src/plugins/tree.rs
 8  | nu_plugin_binaryview | src/plugins/binaryview.rs
 9  | nu_plugin_textview   | src/plugins/textview.rs
 10 | nu                   | src/main.rs
----+----------------------+---------------------------
</code></pre></div><h1 id="plugins" tabindex="-1"> Plugins</h1>
<p>Nu can't come with everything you might want to do with it, so we're releasing Nu with the ability to extend it with plugins. There's more information in the <a href="https://book.nushell.sh/en/plugins" target="_blank" rel="noopener noreferrer">plugins chapters</a>. Nu will look for these plugins in your path, and load them up on startup.</p>
<h1 id="all-because-of-rust" tabindex="-1"> All because of Rust</h1>
<p>Nu would not have been possible without Rust. Internally, it uses async/await, async streams, and liberal use of &quot;serde&quot; to manage serializing and deserializing into the common data format and to communicate with plugins.</p>
<p>We also heavily leveraged <a href="https://crates.io" target="_blank" rel="noopener noreferrer">crates.io</a>. The ability to load numerous file formats, display messages, draw tables, and more all came from the hundreds (thousands?) of generous developers who wrote the crates we use in Nu. A <strong>huge</strong> thank you to everyone who contributed to Nu without ever knowing it.</p>
<h1 id="what-s-next" tabindex="-1"> What's next?</h1>
<p>Nu is just getting started. In this release, we have a foundation to build on. Next, we'll work towards stability, the abilty to use Nu as your main shell, the ability to write functions and scripts in Nu, and much more.</p>
<p>If you want to give it a spin, the <a href="https://book.nushell.sh/en/installation" target="_blank" rel="noopener noreferrer">installation instructions</a> will help you get started. If you want to chat come by our <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a></p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.3.0</title>
    <id>www.nushell.sh/blog/2019-09-24-nushell_0_3_0.html</id>
    <link href="www.nushell.sh/blog/2019-09-24-nushell_0_3_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-3-0" tabindex="-1"> Nushell 0.3.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce that today we're releasing Nushell 0.3.0. Nu has seen numerous bugfixes, performance improvements, and features added since its initial public release (which was only a few weeks ago!)</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.3.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.3.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo +nightly install nu</code> (or if you want all the features <code>cargo +nightly install nu --all-features</code>).</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="new-table-design-porges-jonathandturner" tabindex="-1"> New table design (Porges, jonathandturner)</h2>
<p><img src="@source/assets/images/utf8_table.png" alt="Table with utf8 box drawing"></p>
<p>One of the most striking differences is that Nu now uses UTF-8 box drawing to draw its tables.</p>
<p><img src="@source/assets/images/utf8_light_table.png" alt="Table with utf8 box drawing in light mode"></p>
<p>The table is also configurable. If you feel like the table is a bit too heavy, you can also configure it to work in light mode using this command:</p>
<div><pre><code>> config --set [table_mode light]
</code></pre></div><h2 id="new-file-formats-pmeredit-est31-andrasio-jonathandturner" tabindex="-1"> New file formats (pmeredit, est31, andrasio, jonathandturner)</h2>
<p>Nu now natively supports new file formats, including: bson, tsv, sqlite, and url-encoded strings.</p>
<h2 id="new-commands-incrop-ramonsnir-ijt-jonathandturner-andrasio-jonnywalker81-chhetripradeep-pka" tabindex="-1"> New commands (incrop, ramonsnir, ijt, jonathandturner, andrasio, JonnyWalker81, chhetripradeep, pka)</h2>
<p>Since the 0.2.0 release, Nu has gained a set of additional commands, including:</p>
<ul>
<li><code>help</code> - built-in help system</li>
<li><code>reverse</code> - reverse a table</li>
<li><code>last</code> - like the <code>first</code> command, but working from the bottom of the table, return n rows</li>
<li><code>embed</code> - create a new table using the current table as a start</li>
<li><code>fetch</code> - get the contents of a URL (this originally lived in <code>open</code>)</li>
<li><code>post</code> - post to a URL and get the results</li>
<li><code>pwd</code> - print the working directory</li>
<li><code>env</code> - give access to a number of important paths and environment settings</li>
<li><code>pivot</code> - pivot a table so that rows become columns and vice-versa</li>
<li><code>echo</code> - a built-in echo command</li>
</ul>
<h2 id="error-improvements-jonathandturner" tabindex="-1"> Error improvements (jonathandturner)</h2>
<p><img src="@source/assets/images/did_you_mean.png" alt="Improve error messages"></p>
<p>We've made steady progress on improving error messages. Recently, we added &quot;did you mean?&quot; errors to help when you mistype the name of columns. Nu 0.3.0 also has gone through a few passes to generally polish the errors to include more information when an error occurs.</p>
<h2 id="shell-features-pka-wycats-twe4ked-andrasio-iamcodemaker" tabindex="-1"> Shell features (pka, wycats, twe4ked, andrasio, iamcodemaker)</h2>
<p>Nu now supports <code>~</code> to refer to your home directory as part of a path. You can also use <code>cd -</code> to return to a previous directory you were working in.</p>
<p>The shell itself also got a few updates. You can now enable 'vi' mode, if you'd prefer vi-like bindings (by running <code>config --set [edit_mode vi]</code>). On non-Windows platforms, you can also use Ctrl-R to enable Sublime-style history searching (we're hoping to enable Windows support for this soon).</p>
<h2 id="plugin-improvements-jonathandturner-andrasio" tabindex="-1"> Plugin improvements (jonathandturner, andrasio)</h2>
<p>Plugins have continued to mature, and it's now possible to use plugins to extend Nu with support for new file formats.</p>
<p>We've also added documentation on how to <a href="https://github.com/nushell/contributor-book/blob/master/en/plugins.md" target="_blank" rel="noopener noreferrer">write Nu plugins in both Rust and Python</a>, with info on Ruby coming soon.</p>
<h2 id="docker-support-vsoch-drsensor" tabindex="-1"> Docker support (vsoch, DrSensor)</h2>
<p>If you're interested in using Nu and Docker together, be sure to check out the <a href="https://github.com/nushell/nushell/blob/master/docs/docker.md" target="_blank" rel="noopener noreferrer">new Docker support</a>.</p>
<h2 id="book-progress" tabindex="-1"> Book progress</h2>
<p>The <a href="http://book.nushell.sh" target="_blank" rel="noopener noreferrer">Nu book</a> is now available in <em>three</em> languages: English, Spanish, and Japanese.</p>
<p>We've also created a <a href="https://github.com/nushell/contributor-book/blob/master/en/README.md" target="_blank" rel="noopener noreferrer">Nu contributor book</a>, which will help developers who want to contribute to Nu learn about its philosophy, design, and how to create plugins.</p>
<h2 id="acknowledgements" tabindex="-1"> Acknowledgements</h2>
<p>est31, pmeredit, twe4ked, DrSensor, vsoch, pka, jankoprowski, Porges, max-sixty, ijt, djc, vthriller, taiki-e, oskarskog, iamcodemaker, JonnyWalker81, yaahc, tim77, svartalf, ramonsnir, orf, lesichkovm, ineol, incrop, eoinkelly, devnought, chhetripradeep, aidanharris, GuillaumeGomez, and BatmanAod for contributing to the Nu codebase. Also a <em>big</em> thanks to our issue reporters!</p>
<p>ymgyt - for the Japanese version of the Nu book!</p>
<p>mistydemeo, romanlevin, ralvessa, pka, lord, kkalyan, jankprowski, and boisgera for helping with the book.</p>
<h2 id="looking-ahead" tabindex="-1"> Looking ahead</h2>
<p>We're hard at work on the <a href="https://github.com/nushell/nushell/issues/261" target="_blank" rel="noopener noreferrer">upcoming milestone release</a>. If you'd like to help, feel free to jump in! We have an active <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> you can join for both users and contributors.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.4.0</title>
    <id>www.nushell.sh/blog/2019-10-15-nushell-0_4_0.html</id>
    <link href="www.nushell.sh/blog/2019-10-15-nushell-0_4_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-4-0" tabindex="-1"> Nushell 0.4.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today we're happy to announce the 0.4.0 release of Nushell. The <a href="https://github.com/nushell/nushell/releases/tag/0.4.0" target="_blank" rel="noopener noreferrer">0.4.0 release</a> marks a continually maturing shell that is now starting to show signs of stability. And, of course, a few fun features along the way.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.4.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.4.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo +beta install nu</code> (or if you want all the features <code>cargo +beta install nu --all-features</code>).</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="new-colors-wycats" tabindex="-1"> New Colors (wycats)</h2>
<p><img src="@source/assets/images/0_4_0_new_colors.png" alt="Example of nushell">
New colors!</p>
<p>With 0.4.0, we're adding some new colors to show off different types of the command, where errors might be happening, and if the command is internal or external. The coloring is just the tip of the iceberg, as it were, and builds from a reworking of the parser to make it more accurate, more stable, and more feature-complete.</p>
<h2 id="streaming-table-jonathandturner" tabindex="-1"> Streaming table (jonathandturner)</h2>
<p><img src="@source/assets/images/0_4_0_streaming_table.gif" alt="Animation of a long table streaming out">
Streaming tables</p>
<p>Up to this point, we've taken a few shortcuts with how streams worked in Nushell. We knew that a table, in theory, was a stream of rows. In practice, though, this wasn't the case as the code has lots of assumptions about how tables worked.</p>
<p>With the 0.4.0, we're taking a big step in the direction of full support for streams. You'll see that now data will start being printed as it becomes available, with tables printing pages of 50 rows at a time (by default). This allows you to get deep listings of files (eg using <code>ls **</code>), work with streams from external sources, and more.</p>
<h2 id="better-ctrl-c-support-jonathandturner-landaire" tabindex="-1"> Better ctrl-c support (jonathandturner, landaire)</h2>
<p>As part of having streams of tables, it's always helpful to be able to say &quot;stop!&quot; when you need to. With 0.4.0, using ctrl-c to stop the output should be a lot more responsive and will take you back to the prompt.</p>
<h2 id="textview-gets-vi-keys-jonnywalker81" tabindex="-1"> Textview gets VI keys (JonnyWalker81)</h2>
<p>The built-in text viewer now lets you use vi keys for navigation thanks to JonnyWalker81's work.</p>
<h2 id="onto-the-beta-compiler-est31" tabindex="-1"> Onto the Beta compiler (est31)</h2>
<p>For those of you wondering if and when Nu was going to be usable on stable Rust, you need but wait just a little longer. Contributer est31 has been hard at work at moving Nu onto stable Rust and has now successfully moved Nu off of nightly and onto beta. As beta matures and becomes the next release of Rust, we'll be able to move Nu onto stable. This should help people who are working to distribute Nu on various distributions.</p>
<h2 id="brazilian-portuguese-book-marcelocg" tabindex="-1"> Brazilian Portuguese book (marcelocg)</h2>
<p>Contributor marcelocg surprised us with a translation of the Nu book into Brazillian Portuguese. Obrigado, Marcelo!</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="from-ssv-t-hart" tabindex="-1"> from-ssv (t-hart)</h3>
<p>To follow along with our <code>from-csv</code> (comma-separated-values) and <code>from-tsv</code> (tab-separated-values), we now have a new way of handle importing content from commands that output their own tables: <code>from-ssv</code>. Like its siblings, it looks for values separated by a separator, using the spaces to show where the breaks between cells should be.</p>
<h3 id="match-rnxpyke" tabindex="-1"> match (rnxpyke)</h3>
<p>We're continuing to evolve our support for matching string data. Recently, we began experimenting with a <code>match</code> command that can find matches in strings for you. We plan to continue experimenting and exploring what's possible in this space in the future.</p>
<h2 id="lots-of-new-documentation-sdfnz-twe4ked-chhetripradeep-mfarberbrodsky-cristicismas-charles-schleich-coolshaurya-notryanb-pema99-gilesv-yahsinhuangtw-jesterornot-nalshihabi-marcelocg-sorrell-pizzafox-iggy14750-drsensor-mlbright-bradybromley-andrasio-piotrek-szczygiel" tabindex="-1"> Lots of new documentation (sdfnz, twe4ked, chhetripradeep, mfarberbrodsky, cristicismas, Charles-Schleich, coolshaurya, notryanb, pema99, gilesv, yahsinhuangtw, JesterOrNot, nalshihabi, marcelocg, sorrell, pizzafox, iggy14750, DrSensor, mlbright, BradyBromley, andrasio, piotrek-szczygiel)</h2>
<p>Happy hacktoberfest! Lots of people wanted to jump in and help document all of our commands, help fix docs that are already there, and generally give things a bit of polish. Much appreciated everyone who came by and contributed.</p>
<h2 id="tons-of-stability-fixes-thegedge-jonathandturner-wycats-jonnywalker81-vsoch-pka" tabindex="-1"> Tons of stability fixes (thegedge, jonathandturner, wycats, JonnyWalker81, vsoch, pka)</h2>
<p>As always, there were a bunch of stability and correctness both in Nu and in the CI that support Nu's development</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We'll continuing filling out the features that will let folks use Nu as their everyday shell. Coming up are better support for the environment, path, and for command aliases.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.5.0</title>
    <id>www.nushell.sh/blog/2019-11-05-nushell-0_5_0.html</id>
    <link href="www.nushell.sh/blog/2019-11-05-nushell-0_5_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-5-0" tabindex="-1"> Nushell 0.5.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're happy to announce the 0.5.0 release for Nu. We've got lots of new features, including some long-requested ones, in this release.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.5.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0_5_0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo +beta install nu</code> (or if you want all the features <code>cargo +beta install nu --all-features</code>).</p>
<h1 id="nu-as-a-login-shell-jonathandturner" tabindex="-1"> Nu as a login shell (jonathandturner)</h1>
<p>One of the key features that landed in 0.5.0 is set of new capabilities that work together to allow you to use Nu as a login shell, completely independent of bash or other hosting shells. For this, we've built in support for querying and updating the environment variables and the path.</p>
<p>To get started, you'll need to first copy the environment you're using into the config. Luckily, we've also made some improvements there:</p>
<div><pre><code><span>></span> config --set <span>[</span>path <span>$nu</span>:path<span>]</span>
<span>></span> config --set <span>[</span>env <span>$nu</span>:env<span>]</span>
</code></pre></div><p>Version 0.7.2 and later (added: Dec 24, 2019) :</p>
<div><pre><code><span>></span> config <span>set</span> <span>[</span>path <span>$nu</span>.path<span>]</span>
<span>></span> config <span>set</span> <span>[</span>env <span>$nu</span>.env<span>]</span>
</code></pre></div><p>Once these values are set, you'll be able to use Nu as your login shell.</p>
<h2 id="new-variables" tabindex="-1"> New variables</h2>
<p>As you saw above, we've added a few new built-in variables. These will let you know what the current values that Nu can see are for your environment, path, and the config itself.</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:env
<span>></span> <span>echo</span> <span>$nu</span>:path
<span>></span> <span>echo</span> <span>$nu</span>:config
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.env
<span>></span> <span>echo</span> <span>$nu</span>.path
<span>></span> <span>echo</span> <span>$nu</span>.config
</code></pre></div><h2 id="adding-paths-to-your-path" tabindex="-1"> Adding paths to your PATH</h2>
<p>One of the first things you'll notice is that the new $nu:path is structured. If you run the echo above, you might see something like this:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:path
━━━┯━━━━━━━━━━━━━━━━━━
 <span># │ &lt;value></span>
───┼──────────────────
 <span>0</span> │ /usr/local/sbin
 <span>1</span> │ /usr/local/bin
 <span>2</span> │ /usr/sbin
 <span>3</span> │ /usr/bin
 <span>4</span> │ /sbin
 <span>5</span> │ /bin
 <span>6</span> │ /usr/games
 <span>7</span> │ /usr/local/games
 <span>8</span> │ /snap/bin
━━━┷━━━━━━━━━━━━━━━━━━
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.path
━━━┯━━━━━━━━━━━━━━━━━━
 <span># │ &lt;value></span>
───┼──────────────────
 <span>0</span> │ /usr/local/sbin
 <span>1</span> │ /usr/local/bin
 <span>2</span> │ /usr/sbin
 <span>3</span> │ /usr/bin
 <span>4</span> │ /sbin
 <span>5</span> │ /bin
 <span>6</span> │ /usr/games
 <span>7</span> │ /usr/local/games
 <span>8</span> │ /snap/bin
━━━┷━━━━━━━━━━━━━━━━━━
</code></pre></div><p>We've added two new commands: <code>prepend</code> for adding items to the start of a table and <code>append</code> for adding items to the end of a table. With these commands, we can now query out the path, update it, and save it back.</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:path <span>|</span> prepend <span>"/my/new/directory"</span> <span>|</span> config --set_into path
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.path <span>|</span> prepend <span>"/my/new/directory"</span> <span>|</span> config set_into path
</code></pre></div><h2 id="adding-variables-to-your-environment" tabindex="-1"> Adding variables to your environment</h2>
<p>You can use a similar set of steps to add new variables, or change existing variables, in your environment.</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>:env <span>|</span> insert GREETING hello_world <span>|</span> config --set_into <span>env</span>
</code></pre></div><p>Version 0.7.2 and later:</p>
<div><pre><code><span>></span> <span>echo</span> <span>$nu</span>.env <span>|</span> insert GREETING hello_world <span>|</span> config set_into <span>env</span>
</code></pre></div><p><em>Note: the previous <code>add</code> command of previous releases has been renamed <code>insert</code> to remove confusion with mathematical functions.</em></p>
<h1 id="on-going-improvements" tabindex="-1"> On-going improvements</h1>
<p>We're continuing to improve the commands we currently ship as part of Nu. Here are a few you might find helpful:</p>
<h2 id="substrings-flare576" tabindex="-1"> Substrings (Flare576)</h2>
<p>The <code>str</code> command now supports being able to retrieve a substring from the strings given, so you could return, for example, the first 5 characters and stop after that.</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> get name
━━━━┯━━━━━━━━━━━━━━━━━━━━
 <span>#  │ &lt;value></span>
────┼────────────────────
  <span>0</span> │ target
  <span>1</span> │ CODE_OF_CONDUCT.md
  <span>2</span> │ .cargo
  <span>3</span> │ src
  <span>4</span> │ features.toml
  <span>5</span> │ rustfmt.toml
</code></pre></div><div><pre><code><span>></span> <span>ls</span> <span>|</span> get name <span>|</span> str --substring <span>"0,3"</span>
━━━━┯━━━━━━━━━
 <span>#  │ &lt;value></span>
────┼─────────
  <span>0</span> │ <span>tar</span>
  <span>1</span> │ COD
  <span>2</span> │ .ca
  <span>3</span> │ src
  <span>4</span> │ fea
  <span>5</span> │ rus
</code></pre></div><h2 id="recycling-jdvr" tabindex="-1"> Recycling (jdvr)</h2>
<p>Ever wish you could <code>rm</code> things, but not forever? You can now tell <code>rm</code> to send items to your platform's recycle bin rather than deleting them forever. As with our other commands, this works across all the platforms that Nu supports.</p>
<div><pre><code><span>></span> <span>rm</span> myfile.txt --trash
</code></pre></div><h2 id="parameter-descriptions-jonathandturner" tabindex="-1"> Parameter descriptions (jonathandturner)</h2>
<p>We're also continuing to improve the built-in help system. New in this release are descriptions for the flags and parameters that the command uses. For example, here's a look at what the help for <code>rm</code> now looks like:</p>
<div><pre><code><span>></span> <span>help</span> <span>rm</span>
Remove a <span>file</span>

Usage:
  <span>></span> <span>rm</span> <span>&lt;</span>path<span>></span> <span>{</span>flags<span>}</span>

parameters:
  <span>&lt;</span>path<span>></span> the <span>file</span> path to remove

flags:
  --trash: use the recycle bin on the platform instead of permanently deleting
  --recursive: delete subdirectories recursively
</code></pre></div><h1 id="new-commands" tabindex="-1"> New commands</h1>
<p>In addition to the new <code>append</code> and <code>prepend</code> we mentioned earlier, we've added a few new commands to Nu.</p>
<h2 id="average-notryanb" tabindex="-1"> Average (notryanb)</h2>
<p>Growing our set of mathematics functions for working with numbers, we now have an <code>average</code> command which will take the average of values given to it.</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> get size <span>|</span> average
</code></pre></div><h2 id="read-jonathandturner" tabindex="-1"> Read (jonathandturner)</h2>
<p>We've also introduced a new command to load in strings as tables. This new <code>read</code> command will take a pattern that describes the columns, their names, and where they are in each row of the string.</p>
<div><pre><code><span>></span> <span>open</span> .editorconfig
root <span>=</span> <span>true</span>

<span>[</span>*<span>]</span>
indent_style <span>=</span> space
indent_size <span>=</span> <span>4</span>
charset <span>=</span> utf-8
trim_trailing_whitespace <span>=</span> <span>true</span>
insert_final_newline <span>=</span> <span>false</span>
end_of_line <span>=</span> lf
</code></pre></div><div><pre><code><span>></span> <span>open</span> .editorconfig <span>|</span> <span>read</span> <span>"{variable} = {value}"</span>
━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━
 <span># │ variable                 │ value</span>
───┼──────────────────────────┼───────
 <span>0</span> │ root                     │ <span>true</span>
 <span>1</span> │ indent_style             │ space
 <span>2</span> │ indent_size              │ <span>4</span>
 <span>3</span> │ charset                  │ utf-8
 <span>4</span> │ trim_trailing_whitespace │ <span>true</span>
 <span>5</span> │ insert_final_newline     │ <span>false</span>
 <span>6</span> │ end_of_line              │ lf
</code></pre></div><h1 id="bugfixes-jonathandturner-jesterornot-thegedge-andrasio-wycats-notryanb-detegr-t-hart" tabindex="-1"> Bugfixes (jonathandturner, JesterOrNot, thegedge, andrasio, wycats, notryanb, Detegr, t-hart)</h1>
<p>As always, we've had lots of bugfixes. A <em>huge</em> &quot;thank you!&quot; to folks who reported issues, fixed issues, and just generally shared their experience with the shell. It's much appreciated and helps to continue making Nu that much better.</p>
<h1 id="survey" tabindex="-1"> Survey</h1>
<p>If you haven't already taken it, we'd love to hear your feedback in a quick (roughly 3 question) <a href="https://t.co/nujSjnI0dr?amp=1" target="_blank" rel="noopener noreferrer">survey</a>.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>There are a bunch of areas we're currently working on to make Nu more stable and feature complete. Until this work is finished, please consider Nu to be somewhere in the <em>pre-alpha</em> to <em>alpha</em> quality level.</p>
<p>That said, we're excited to merge this work and continue to take steps towards a more full-featured shell. Soon to be coming will be Nu working on stable Rust(!!), some improvements in the Nu internal engine which will make it possible to have better streaming and cleaner commands, and features like aliases.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 2019 Survey Results</title>
    <id>www.nushell.sh/blog/2019-11-23-nushell-survey-results.html</id>
    <link href="www.nushell.sh/blog/2019-11-23-nushell-survey-results.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-2019-survey-results" tabindex="-1"> Nushell 2019 Survey Results</h1>
<p>Recently, we ran a short survey to see how you were feeling about <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">Nushell</a>. We wanted to give a very hearty &quot;thank you!&quot; to everyone who participated. These surveys are a great way to gather information about how people are feeling, where they're happy, and where they feel there are pain points.</p>
<p>In total, <strong>160</strong> people responded. An impressive amount for a project still in its first few months in the public.</p>
<h1 id="do-you-use-nu" tabindex="-1"> Do you use Nu?</h1>
<p><img src="@source/assets/images/nushell_survey_2019_percent.png" alt="63.1% don't use, 24.4% use but stopped, 12.5% use"></p>
<p>The survey welcomed both users and non-users of Nu. In our first question, we wanted to see how many folks are using Nu already. Perhaps unsurprising for a project still missing major functionality, most respondents aren't users, yet. As we'll see, there are themes around what people are waiting for before they jump in.</p>
<p>But first, let's take a look at the responses from folks how are currently using Nu.</p>
<h1 id="nu-users" tabindex="-1"> Nu users</h1>
<h2 id="what-do-you-like-20-responses" tabindex="-1"> What do you like? (20 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_fave_features.png" alt="favorite features (tables #1 by a long margin)"></p>
<p>Overwhelmingly, Nu users love tables! People currently using Nushell felt that tables and Nu's structured approach were their favorite features.</p>
<p>People also enjoyed the rich support for different file formats that Nu ships with as well as its focus on being cross-platform.</p>
<p>Other topics mentioned: syntax highlighting, good plugins, shells feature, tags feature, and that it is written in Rust.</p>
<h3 id="quotes" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;The structured data handling is awesome!&quot;</em></li>
<li><em>&quot;Tables! \o/&quot;</em></li>
<li><em>&quot;It makes it easier to work with data on the command line. I especially love that it's cross-platform.&quot;</em></li>
</ul>
<h2 id="where-should-nushell-improve-20-responses" tabindex="-1"> Where should Nushell improve? (20 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_needs_work.png" alt="needs work: top ones are autocomplete, shortcuts, tool integration"></p>
<p>Nu users also pointed out a few areas where they hoped Nu would improve over time. Top of mind were improvements around auto-completion, improving the keyboard shortcuts, and better integration with existing shells and tools.</p>
<p>There were also a batch of additional improvements people wished for: full scripting support, better examples/documentation, improved stability, interactive table viewing, more commands, smarter table drawing, better coloring, better error messages, aliases, prompt customization, and general performance improvements.</p>
<h3 id="quotes-1" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;Better documentation for how to write custom wrappers around existing tools.&quot;</em></li>
<li><em>&quot;The coloring and autocomplete and a scripting language&quot;</em></li>
<li><em>&quot;Compatibility with other shells. It's annoying that I often have to add quotes when copying a command from a website.&quot;</em></li>
<li><em>&quot;Honestly, I wish I knew enough about Nu that I could add a bunch of documentation to show others what it could do.&quot;</em></li>
</ul>
<h1 id="nu-non-users" tabindex="-1"> Nu non-users</h1>
<h2 id="what-s-stopping-you-from-using-nu-100-responses" tabindex="-1"> What's stopping you from using Nu? (100 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_blockers.png" alt="blocked adoption: top ones are time and maturity"></p>
<p>We also asked for feedback from people not using Nu what their thoughts were. What are the kinds of things that block them from using Nu?</p>
<p>Top of the list are &quot;time&quot; and &quot;maturity&quot;. Many people mentioned that it takes time to learn a new system, and time is a precious resource (don't we know it!). Maturity also came up for a lot of folks - if it's not mature yet, the time investment might go to waste. In general, there was a sense of waiting until things are further along before jumping in.</p>
<p>We also heard from many people who were perfectly comfortable in their current shells, whether it be zsh, bash, or fish. For these responders, Nu doesn't offer a compelling reason to switch, yet.</p>
<h3 id="quotes-2" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;I'm very invested in bash already, but I love the concept and the work being done.&quot;</em></li>
<li><em>&quot;Too comfy with the current shell, also I am lazy, but the project is awesome&quot;</em></li>
<li><em>&quot;I don’t transform data in the shell much, so the core value proposition of nu shell doesn’t resonate well with me.&quot;</em></li>
<li><em>&quot;I know a lot about traditional shells and don't want to re-learn how to do all that in nushell&quot;</em></li>
</ul>
<h2 id="used-nu-but-stopped-38-responses" tabindex="-1"> Used Nu but stopped (38 responses)</h2>
<p><img src="@source/assets/images/nushell_survey_2019_stoppers.png" alt="made me stop: top ones are maturity, time, and don't need it"></p>
<p>For those folks who tried Nu, but decided it wasn't for them, we also gave them a chance to tell us why. Similarly to the previous question, &quot;stability&quot; and &quot;time&quot; were at the top of the list.</p>
<p>Digging in a bit further, it's not only that Nu itself is changing, but that the package ecosystem hadn't stayed up-to-date with Nu's releases, or didn't yet offer a package. This meant it was easy to not be able to keep up, even if they had time to.</p>
<p>Other topics that came up: needing better autocomplete, needing aliases, better scripting, support for Windows network drives, and improved documentation.</p>
<h3 id="quotes-3" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;It was interesting, but I have a pretty significant ecosystem built around my flows in Bash and Zsh I can't give up just yet. Maybe that's just something I need to work with.&quot;</em></li>
<li><em>&quot;Also the lack of documentation around the different commands is a major impediment.&quot;</em></li>
<li><em>&quot;Lack of middle-of-the-word completion, mostly. Also all the aliases I have defined that I’d need to port over.&quot;</em></li>
</ul>
<h1 id="anything-else-we-should-know-68-responses" tabindex="-1"> Anything else we should know? (68 responses)</h1>
<p><img src="@source/assets/images/nushell_survey_2019_anything_else.png" alt="so much love"></p>
<p>As our final question, we gave responders a chance to give us any last thoughts they felt we should know.</p>
<p>Overwhelming, people sent us love and encouragement. Lots of it. We wanted to take a moment to appreciate everyone who sent us kind notes to keep going, that they loved what we were building and were excited to try it in the future, and how much they loved the concept. Thank you! We're excited to keep going, and it feels great to hear from people who are enthusiastic about the project.</p>
<h3 id="quotes-4" tabindex="-1"> Quotes</h3>
<ul>
<li><em>&quot;Keep going! Will definitely give Nu a try when it's more mature.&quot;</em></li>
<li><em>&quot;I love how much effort is being put into communication and evolution of the tool.&quot;</em></li>
<li><em>&quot;It is an interesting and worthwhile take on the command line environment.&quot;</em></li>
<li><em>&quot;It's a great project, I wanna use it as my daily driver&quot;</em></li>
<li><em>&quot;I'm super super duper excited to use this shell&quot;</em></li>
<li><em>&quot;I think Nushell is an awesome project. Thanks for doing this&quot;</em></li>
</ul>
<p>And thank <em>you</em> for responding to our survey!</p>
<h1 id="conclusions" tabindex="-1"> Conclusions</h1>
<p>The astute reader may already see some of the changes we've done recently were directly inspired by comments in this survey, and more are planned. This has been a great help, and we're looking forward to growing Nu with you in the coming months.</p>
<p>As always, feel free to come by our <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>, say hi on <a href="https://twitter.com/nu_shell" target="_blank" rel="noopener noreferrer">twitter</a>, or drop us a note in our <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.6.0</title>
    <id>www.nushell.sh/blog/2019-11-26-nushell-0_6_0.html</id>
    <link href="www.nushell.sh/blog/2019-11-26-nushell-0_6_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-6-0" tabindex="-1"> Nushell 0.6.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.6.0 release of Nu. This release has a bunch of new features, bugfixes, and general improvements.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.6.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.6.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code> (or if you want all the features <code>cargo install nu --all-features</code>).</p>
<h1 id="starship-support-southclaws-jonathandturner" tabindex="-1"> Starship support (Southclaws, jonathandturner)</h1>
<p><img src="@source/assets/images/0_6_0_starship_prompt.png" alt="Example of starship prompt">
<em>Welcome to the starship!</em></p>
<p>Having a configurable prompt has been a regularly requested feature, dating back to our first release of Nu. With 0.6.0, we're excited to show off the ability to integrate with <a href="https://starship.rs/" target="_blank" rel="noopener noreferrer">starship</a>. Starship is a powerful prompt being built in Rust, and it includes tons of fun features.</p>
<p>To use the Starship support, enable the starship feature (the binary releases will have this on by default). After this, you'll want to <a href="https://starship.rs/config/" target="_blank" rel="noopener noreferrer">configure starship</a> to meet your needs.</p>
<p>Here's the config I use in the screenshot above:</p>
<div><pre><code>❯ cat ~/.config/starship.toml
add_newline = false

[git_branch]
symbol = "📙 "

[git_status]
disabled = true
</code></pre></div><p>To enable Starship support, make sure to enable the <code>starship</code> feature, or to use the all-features build:</p>
<div><pre><code>> cargo install nu --features starship-prompt
</code></pre></div><p>or</p>
<div><pre><code>> cargo install nu --all-features
</code></pre></div><h1 id="stable-rust-est31" tabindex="-1"> Stable Rust (est31)</h1>
<p>Nu now works on stable Rust!</p>
<p>Contributor est31 did a ton of work soon after our first Nu release, but it wasn't until just recently that it fully paid off. With the Rust 1.39 release, Nu now fully works on stable Rust! We're excited for what this means for package authors, as they will now have a stable dependency they can use to build Nu from, rather than tracking nightly.</p>
<h1 id="new-website-new-blog-sebastian-xyz" tabindex="-1"> New website! New blog! (sebastian-xyz)</h1>
<p>We're starting to work on an actual website, complete with a blog. In fact, where you're seeing this now is on our new site. We're excited to finally have something more official, and looking forward to growing the website in the weeks to come.</p>
<p>If you're a web developer or designer and you want to help out, please join us! You can find us on the <a href="https://github.com/nushell/nushell.github.io" target="_blank" rel="noopener noreferrer">website repo</a> and <a href="https://github.com/nushell/blog" target="_blank" rel="noopener noreferrer">blog repo</a>.</p>
<h1 id="new-features" tabindex="-1"> New features</h1>
<h2 id="histogram-andrasio" tabindex="-1"> histogram (andrasio)</h2>
<p>As we extend Nu's ability to function as a shell, we also wanted to include some features that help with doing some data analysis on structured data you're working with. In this release is a new <code>histogram</code> feature which gives a quick histogram of the data you're looking at:</p>
<div><pre><code><span>></span> <span>open</span> tests/fixtures/formats/caco3_plastics.csv <span>|</span> histogram origin
━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 <span># │ origin   │ frequency</span>
───┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────────
 <span>0</span> │ COLOMBIA │ ***********************************************************************************************
   │          │ *****
 <span>1</span> │ SPAIN    │ ************************************************************
 <span>2</span> │ TURKEY   │ ********************
━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
</code></pre></div><h2 id="split-by-andrasio" tabindex="-1"> split-by (andrasio)</h2>
<p>When working with tables inside of tables, it's sometimes helpful to be able to group and regroup data so that the end result can be easily processed or charted. With this release, we've add a new command: <code>split-by</code>. Split-by is similar to <code>group-by</code>, in a way you can think of it as a re-group as it will create new groups to wrap your existing groups.</p>
<p>To see how this works, let's say we have some shipping data, and we want to group these by the region:</p>
<div><pre><code><span>></span> <span>open</span> tests/fixtures/formats/caco3_plastics.csv <span>|</span> group-by origin

━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━
 SPAIN          │ COLOMBIA       │ TURKEY
────────────────┼────────────────┼────────────────
 <span>[</span>table <span>3</span> rows<span>]</span> │ <span>[</span>table <span>5</span> rows<span>]</span> │ <span>[</span>table <span>1</span> rows<span>]</span>
━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━
</code></pre></div><p>Next, let's say we know that inside of these new columns is a table that has a column called <code>shipped_at</code>. What we want to do is to <code>group-by</code> again, but this time use that new column to create new groups:</p>
<div><pre><code>/home/jonathan/Source/nushell<span>(</span>better_duration<span>)</span><span>></span> <span>open</span> tests/fixtures/formats/caco3_plastics.csv <span>|</span> group-by origin <span>|</span> split-by shipped_at
━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━
 <span>18</span>/03/2016  │ <span>27</span>/07/2016  │ <span>24</span>/06/2016  │ 07/07/2016     │ 01/01/1900     │ 01/11/2016     │ 04/10/2016
─────────────┼─────────────┼─────────────┼────────────────┼────────────────┼────────────────┼──────────────
 <span>[</span>row SPAIN<span>]</span> │ <span>[</span>row SPAIN<span>]</span> │ <span>[</span>row SPAIN<span>]</span> │ <span>[</span>row COLOMBIA<span>]</span> │ <span>[</span>row COLOMBIA<span>]</span> │ <span>[</span>row COLOMBIA<span>]</span> │ <span>[</span>row TURKEY<span>]</span>
━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━
</code></pre></div><p>What we have as a result is a kind of (row, column) grouping of the table data, which would allow you to graph for each date on one axis, and for each origin on the other.</p>
<h2 id="default-and-compact-andrasio" tabindex="-1"> default and compact (andrasio)</h2>
<p>One of the sticky issues working with tables is that sometimes you'll have gaps in the data. Perhaps there just isn't a value for that row.</p>
<p>To help with that, we've added two new commands: <code>default</code> and <code>compact</code>.</p>
<p>Default, as the name implies, will allow you to give blank spots a default value. Compact instead will allow you to remove a row if there's a blank in that position.</p>
<p>Here's an example of default:</p>
<div><pre><code><span>></span> <span>open</span> amigos.json <span>|</span> get amigos
━━━┯━━━━━━━━━━━┯━━━━━━━━━━━━
 <span># │ name      │ rusty_luck</span>
───┼───────────┼────────────
 <span>0</span> │ Yehuda    │          <span>1</span>
 <span>1</span> │ Jonathan  │          <span>1</span>
 <span>2</span> │ Andres    │          <span>1</span>
 <span>3</span> │ GorbyPuff │
━━━┷━━━━━━━━━━━┷━━━━━━━━━━━━
</code></pre></div><p>We can default the missing column from the table like this:</p>
<div><pre><code><span>></span> <span>open</span> amigos.json <span>|</span> get amigos <span>|</span> default rusty_luck <span>1</span> giving:

━━━┯━━━━━━━━━━┯━━━━━━━━━━━━
 <span># │ name     │ rusty_luck</span>
───┼──────────┼────────────
 <span>0</span> │ Yehuda   │          <span>1</span>
 <span>1</span> │ Jonathan │          <span>1</span>
 <span>2</span> │ Andres   │          <span>1</span>
 <span>3</span> │ GorbyPuff│          <span>1</span>
━━━┷━━━━━━━━━━┷━━━━━━━━━━━━
</code></pre></div><h2 id="format-jonathandturner" tabindex="-1"> format (jonathandturner)</h2>
<p>To add to the abilities of outputting tables of various into readable strings, we've recently added the <code>format</code> command. This allows you to convert table data into a string by following a formatting pattern:</p>
<div><pre><code><span>></span> <span>ls</span> <span>|</span> <span>format</span> <span>"name is {name}"</span>
━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 <span>#  │ &lt;value></span>
────┼────────────────────────────
  <span>0</span> │ name is .azure
  <span>1</span> │ name is features.toml
  <span>2</span> │ name is Cargo.toml
  <span>3</span> │ name is LICENSE
  <span>4</span> │ name is target
  <span>5</span> │ name is images
  <span>6</span> │ name is tests
</code></pre></div><h2 id="from-xlsx-jonathandturner" tabindex="-1"> from-xlsx (jonathandturner)</h2>
<p>We now have an early start at Excel support. With it, you can now import Excel files as tables.</p>
<h1 id="on-going-improvements" tabindex="-1"> On-going improvements</h1>
<p>Lots of improvements to existing commands this time around.</p>
<h2 id="simple-and-full-ls-jonathandturner" tabindex="-1"> Simple and full <code>ls</code> (jonathandturner)</h2>
<p>To make <code>ls</code> work better on smaller terminals (including the bog standard 80x24 login size), we've shrunk <code>ls</code> a tiny bit by default. Have no worry, though, the original columns and more are available in the new <code>ls --full</code>.</p>
<h2 id="fuzzy-matching-bndbsh" tabindex="-1"> Fuzzy matching (bndbsh)</h2>
<div><pre><code>❯ <span>ls</span> <span>|</span> where name <span>=~</span> <span>"yml"</span>
━━━━━━━━━━━━━┯━━━━━━┯━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━
 name        │ <span>type</span> │ size  │ accessed   │ modified
─────────────┼──────┼───────┼────────────┼────────────
 .gitpod.yml │ File │ <span>780</span> B │ a week ago │ a week ago
━━━━━━━━━━━━━┷━━━━━━┷━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━
</code></pre></div><p>A long-requested feature is the ability to match strings a bit more fuzzily. With 0.6.0, you'll be able to do just that with the new <code>=~</code> (fuzzy match to include) and <code>!~</code> (fuzzy match to exclude) commands.</p>
<h2 id="from-csv-now-with-separator-drmason13" tabindex="-1"> <code>from-csv</code>, now with separator (drmason13)</h2>
<p>Sometimes you might find a .csv file in the wild that uses a different separator than comma. You can now configure <code>from-csv</code> to use a different character as the separator using, for example, <code>from-csv --separator &quot;;&quot;</code>.</p>
<h2 id="nth-can-take-multiple-row-numbers-andrasio" tabindex="-1"> nth can take multiple row numbers (andrasio)</h2>
<p>You can now pass multiple row numbers to <code>nth</code>. For example <code>nth 1 3 5</code> will return those three separate rows as a new table.</p>
<h2 id="column-paths-can-now-include-row-numbers-wycats-andrasio" tabindex="-1"> Column paths can now include row numbers (wycats, andrasio)</h2>
<p>Sometimes when you're trying to get to data inside an inner table, you want to describe travelling through a particular row to get there. With recent improvements, you can now include the row number in the column path (assuming it is not the first part of the path).</p>
<h2 id="duration-support-jonathandturner-aloso" tabindex="-1"> Duration support (jonathandturner, Aloso)</h2>
<div><pre><code>❯ <span>ls</span> <span>|</span> where accessed <span>&lt;</span> 1w
━━━┯━━━━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━
 <span># │ name          │ type      │ size     │ accessed    │ modified</span>
───┼───────────────┼───────────┼──────────┼─────────────┼─────────────
 <span>0</span> │ Cargo.toml    │ File      │   <span>4.7</span> KB │ an hour ago │ an hour ago
 <span>1</span> │ Makefile.toml │ File      │    <span>449</span> B │ <span>2</span> days ago  │ <span>2</span> days ago
 <span>2</span> │ README.md     │ File      │  <span>19.5</span> KB │ an hour ago │ an hour ago
 <span>3</span> │ Cargo.lock    │ File      │ <span>170.7</span> KB │ an hour ago │ an hour ago
 <span>4</span> │ crates        │ Directory │   <span>4.1</span> KB │ an hour ago │ an hour ago
 <span>5</span> │ TODO.md       │ File      │   <span>1.3</span> KB │ an hour ago │ an hour ago
━━━┷━━━━━━━━━━━━━━━┷━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━
</code></pre></div><p>It's now possible to use duration values in Nu. This allows us to check for files accessed less than a week ago, as you see in the example above.</p>
<h2 id="renamed-read-to-parse-jonathandturner" tabindex="-1"> Renamed <code>read</code> to <code>parse</code> (jonathandturner)</h2>
<p>To help with at-a-glance readability, we've renamed <code>read</code> to <code>parse</code>. While <code>read</code> felt more friendly, it could easily be confused for reading input, reading a file, etc.</p>
<h1 id="general-improvements-wycats-thegedge-drmason13-jonathandturner-uma1317-jesterornot-andrasio-burniintree" tabindex="-1"> General improvements (wycats, thegedge, drmason13, jonathandturner, uma1317, JesterOrNot, andrasio, BurNiinTRee)</h1>
<p>There has been a ton of work behind the scenes on Nu itself. We now have a much-improved internal debugging system and better module separation courtesy of wycats. There are also a number of general cleanups and bugfixes that have gone into the release.</p>
<h1 id="survey-results" tabindex="-1"> Survey results</h1>
<p>We recently ran a survey to ask Nu users/non-users what they thought of Nu. If you're interested, definitely check out the <a href="https://www.nushell.sh/blog/2019-11-23-nushell-survey-results.html" target="_blank" rel="noopener noreferrer">results of the survey</a></p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're still hard at work on &quot;MVP #2&quot;. It will be the next milestone on our way to the eventual 1.0. If you'd like to help with code, docs, translation, testing, or just want to come chat and throw ideas around, we'd love to have you! You can find us on <a href="">discord</a>, <a href="https://twitter.com/nu_shell" target="_blank" rel="noopener noreferrer">twitter</a>, and <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.7.0</title>
    <id>www.nushell.sh/blog/2019-12-18-nushell-0_7_0.html</id>
    <link href="www.nushell.sh/blog/2019-12-18-nushell-0_7_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-7-0" tabindex="-1"> Nushell 0.7.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.7.0 release of Nu. This release has a couple new features, bugfixes, and lots of internal improvements on the way to upcoming features.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.7.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.7.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code> (or if you want all stable features <code>cargo install nu --features=stable</code>).</p>
<h1 id="ranges-wycats-sebastian-xyz" tabindex="-1"> Ranges (wycats, sebastian-xyz)</h1>
<p>We've added ranges as new fundamental type in Nu. To use it, use <code>&lt;number&gt;..&lt;number&gt;</code>. Currently, you can use it with the new <code>range</code> command, which lets you do commands like:</p>
<div><pre><code>ls | range 3..5
</code></pre></div><p>And return rows 3 through 5 of the table that <code>ls</code> gives you.</p>
<h1 id="autocomplete-improvements-jonathandturner" tabindex="-1"> Autocomplete improvements (jonathandturner)</h1>
<p>As we improve the parser, we are getting more opportunities to do more with the results. One feature we added recently is the ability to autocomplete flags for internal commands.</p>
<p>For example, if you want to see what's available for the <code>config</code> command, you can now type <code>config --</code> and then immediately use the <code>&lt;tab&gt;</code> key to cycle through possible options.</p>
<h1 id="nu-becomes-multiple-crates-wycats-jonathandturner" tabindex="-1"> Nu becomes multiple crates (wycats, jonathandturner)</h1>
<p>Part of a big effort to get Nu ready for script support is to refactor the current codebase to make it cleaner and easier to work with.</p>
<p>For the last few weeks, a big part of this refactor involved splitting our growing monolith of a codebase into separate sub-crates that work together to give the same functionality. As we've done so, we've been able to clean up some of the interfaces between the code. The end result is something that already is easier to work with, and we're excited about what this means for future development.</p>
<p>One side effect of this work is that we've now separated out the plugins from the main <code>nu</code> crate. This gives you more options to configure your Nu setup how you want, as each optional crate can be separately installed.</p>
<p>From cargo, you can install the main crate with:</p>
<div><pre><code>cargo install nu
</code></pre></div><p>Then, you can install the plugins the same way. You can find them because they have a name starting with <code>nu_plugin_</code>. For example, to install the textview plugin:</p>
<div><pre><code>cargo install nu_plugin_textview
</code></pre></div><p>The current set of plugins includes:</p>
<ul>
<li>nu_plugin_average</li>
<li>nu_plugin_binaryview</li>
<li>nu_plugin_fetch</li>
<li>nu_plugin_inc</li>
<li>nu_plugin_match</li>
<li>nu_plugin_post</li>
<li>nu_plugin_ps</li>
<li>nu_plugin_str</li>
<li>nu_plugin_sum</li>
<li>nu_plugin_sys</li>
<li>nu_plugin_textview</li>
<li>nu_plugin_tree</li>
</ul>
<p>By default, Nu will install a small set of these plugins (&quot;sys&quot;, &quot;ps&quot;, &quot;textview&quot;, &quot;inc&quot;, &quot;str&quot;). You can optionally turn this off using:</p>
<div><pre><code>cargo install nu --no-default-features
</code></pre></div><h1 id="introducing-stable-and-unstable-features" tabindex="-1"> Introducing: stable and unstable features</h1>
<p>Another part of the current refactor work is that we're splitting the &quot;stable&quot; and &quot;unstable&quot; features up. This lets us experiment a bit easier before a command becomes a stable part of the releases.</p>
<p>Now, to install all the stable features, you can use:</p>
<div><pre><code>cargo install nu --features=stable
</code></pre></div><p>If you want to get both stable <em>and</em> unstable features, use:</p>
<div><pre><code>cargo install nu --all-features
</code></pre></div><p>Warning: unless you're working on Nu itself you may not want to install all features currently, as you'll see that we're working on an internal tracing tool.</p>
<h1 id="moving-the-book-s-sebastian-xyz" tabindex="-1"> Moving the book(s) (sebastian-xyz)</h1>
<p>We've been hard at working building up the websites. In the previous release, we talked about &quot;nushell.sh&quot; and the new website there. Since then, we've consolidated the books into the new website. Please update your book links to point to the new site:</p>
<ul>
<li>Nu book - <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">nushell.sh/book</a></li>
<li>Contributor book - <a href="https://www.nushell.sh/contributor-book/" target="_blank" rel="noopener noreferrer">nushell.sh/contributor-book</a></li>
<li>Cookbook (in-progress) - <a href="https://www.nushell.sh/cookbook/" target="_blank" rel="noopener noreferrer">nushell.sh/cookbook</a></li>
</ul>
<h1 id="command-improvements" tabindex="-1"> Command improvements</h1>
<h2 id="embed-wrap-jonathandturner-andrasio" tabindex="-1"> Embed -&gt; Wrap (jonathandturner, andrasio)</h2>
<p>For better readability, we've renamed the <code>embed</code> command to <code>wrap</code>. As the name implies, you can now <code>wrap</code> one table with another. You can also use <code>wrap</code> to create a table from a stream of values.</p>
<p>For example, you may have a list of strings you want to turn into a table:</p>
<div><pre><code>> ls | get name
────┬────────────────────
 #  │ &lt;value>
────┼────────────────────
  0 │ target
  1 │ CODE_OF_CONDUCT.md
  2 │ .cargo
  3 │ src
  4 │ features.toml
  5 │ TODO.md
</code></pre></div><p>We can now name this table using <code>wrap</code>:</p>
<div><pre><code>> ls | get name | wrap filename
────┬────────────────────
 #  │ filename
────┼────────────────────
  0 │ target
  1 │ CODE_OF_CONDUCT.md
  2 │ .cargo
  3 │ src
  4 │ features.toml
  5 │ TODO.md
</code></pre></div><h1 id="internal-improvements-wycats-jonathandturner-thibran-thegedge" tabindex="-1"> Internal improvements (wycats, jonathandturner, thibran, thegedge)</h1>
<p>Though not visible as additional new features, a group of us has been at work refactoring and cleaning up Nu's internals. This should help us both fix some long-standing bugs as well as make way for new features in the future.</p>
<p>We've also internally introduced a new &quot;line&quot; type, which represents strings that carry a line ending with them. This helps us more easily traffic string data through the system and know how best to output it at the end of the pipeline.</p>
<h1 id="bugfixes" tabindex="-1"> Bugfixes</h1>
<p>Of course, with each release, there are the usual bugfixes. We've improved tilde expansion (naufraghi), how internal pipelines are handled (thegedge), and more.</p>
<h1 id="improved-docs-tchak-coolshaurya-sebastian-xyz" tabindex="-1"> Improved docs (tchak, coolshaurya, sebastian-xyz)</h1>
<p>A big &quot;thank you!&quot; for folks continuing to work on the on-going command documentation efforts. Already, we're seeing people <a href="/book/command_reference.html">read about the commands</a> on the new website to help them learn Nu, which is great!</p>
<h1 id="what-s-next" tabindex="-1"> What's next?</h1>
<p>You might have noticed that with 0.7.0, we're seemingly getting close to 1.0. What happens after 0.9.0? Are we going to take the leap?</p>
<p>In short, not just yet. After 0.9.0, we'll release 0.10.0. Nu is maturing, but it isn't quite ready for the big One-Point-Oh. We'll continue maturing it until it's ready to make the move.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Happy Nu Year 2020</title>
    <id>www.nushell.sh/blog/2019-12-31-happy-nu-year-2020.html</id>
    <link href="www.nushell.sh/blog/2019-12-31-happy-nu-year-2020.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="happy-nu-year-2020" tabindex="-1"> Happy Nu Year 2020</h1>
<p><img src="@source/assets/images/happy_nu_year_2020.png" alt="Happy Nu Year!"></p>
<p>2019 was quite the year for Nushell. We landed the initial commit on May 10th, and 1881 commits later we find ourselves at the end of 2019. What all happened this year?</p>
<p>We started off with quite the bang! After quietly working on Nu for a few months, we wrote up a <a href="https://www.nushell.sh/blog/2019-08-23-introducing-nushell.html" target="_blank" rel="noopener noreferrer">blog post</a> to explain what Nu was. To our surprise, the post got a surprisingly warm reception! Soon, we were recording a podcast with the Changelog to <a href="https://changelog.com/podcast/363" target="_blank" rel="noopener noreferrer">talk about Nu</a>.</p>
<p>As the excitement calmed back to everyday levels, we got to the work of turning this minimum-viable product into the real thing. More than 65 people joined us to help fix bugs, test code, write docs, and explore new directions.</p>
<h2 id="where-are-we" tabindex="-1"> Where are we?</h2>
<p>At the end of 2019, where are we?</p>
<ul>
<li>We now have a <a href="https://nushell.sh" target="_blank" rel="noopener noreferrer">website</a>, a <a href="https://www.nushell.sh/blog" target="_blank" rel="noopener noreferrer">blog</a>, <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">three</a> <a href="https://www.nushell.sh/contributor-book/" target="_blank" rel="noopener noreferrer">different</a> <a href="https://www.nushell.sh/cookbook/" target="_blank" rel="noopener noreferrer">books</a>, and the results of our <a href="https://www.nushell.sh/blog/2019-11-23-nushell-survey-results.html" target="_blank" rel="noopener noreferrer">first survey</a></li>
<li>We released 6 different releases: <a href="https://www.nushell.sh/blog/2019-08-23-introducing-nushell.html" target="_blank" rel="noopener noreferrer">0.2</a>, <a href="https://www.nushell.sh/blog/2019-09-24-nushell_0_3_0.html" target="_blank" rel="noopener noreferrer">0.3</a>, <a href="https://www.nushell.sh/blog/2019-10-15-nushell-0_4_0.html" target="_blank" rel="noopener noreferrer">0.4</a>, <a href="https://www.nushell.sh/blog/2019-11-05-nushell-0_5_0.html" target="_blank" rel="noopener noreferrer">0.5</a>, <a href="https://www.nushell.sh/blog/2019-11-26-nushell-0_6_0.html" target="_blank" rel="noopener noreferrer">0.6</a>, and <a href="https://www.nushell.sh/blog/2019-12-18-nushell-0_7_0.html" target="_blank" rel="noopener noreferrer">0.7</a>.</li>
<li>Nu gained features. Lots of them. New table designs, new file formats, lots of new commands, improvements to error reporting, plugins (in <a href="https://github.com/lefticus/nu_plugin_calc" target="_blank" rel="noopener noreferrer">C++</a>, <a href="https://vsoch.github.io/2019/nushell-plugin-golang/" target="_blank" rel="noopener noreferrer">Go</a>, <a href="https://github.com/vsoch/nushell-plugin-python" target="_blank" rel="noopener noreferrer">Python</a>, and <a href="https://github.com/andrasio/nu-plugin/tree/master/examples" target="_blank" rel="noopener noreferrer">Ruby</a>), new colors, support for streaming tables, vi mode, moved to the stable Rust compiler, login shell support, recycle bin support, starship.rs support, fuzzy matching, duration and date comparison, ranges, improved autocomplete, and a bunch of internal improvements to make way for 2020.</li>
<li>Thanks to all the reports, PRs, and help debugging we've made a ton of progress in making Nu more stable and complete</li>
</ul>
<h2 id="what-s-ahead" tabindex="-1"> What's ahead?</h2>
<p>That said, it's &quot;<a href="https://twitter.com/yoshuawuyts/status/1210367651354161152?s=20" target="_blank" rel="noopener noreferrer">def early days</a>&quot; for Nu, as one recent user put it. We couldn't agree more. It's not <em>quite</em> ready for people to use as their everyday shell. Things we're working on in 2020 to make it possible for everyone to use Nu in their day-to-day work:</p>
<ul>
<li>Stability fixes! We'll be working hard to make Nu rock solid.</li>
<li>Aliases, variables, functions, scripts</li>
<li>Better integration with the native OS</li>
<li>Improved line editing</li>
<li>A better motto (lots of people confused about what &quot;Github-era&quot; means)</li>
</ul>
<p>In short, it's been a lot of fun, a lot of work, and we met some new friends along the way. A very big &quot;thanks!&quot; to all our contributors this year!</p>
<h2 id="nushell-repo" tabindex="-1"> Nushell repo</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/nushell/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
────┬───────────────────
 <span>#  │ &lt;value></span>
────┼───────────────────
  <span>0</span> │ Aloso
  <span>1</span> │ BatmanAoD
  <span>2</span> │ BradyBromley
  <span>3</span> │ BurNiinTRee
  <span>4</span> │ Detegr
  <span>5</span> │ DrSensor
  <span>6</span> │ Flare576
  <span>7</span> │ GuillaumeGomez
  <span>8</span> │ JesterOrNot
  <span>9</span> │ JonnyWalker81
 <span>10</span> │ Paradiesstaub
 <span>11</span> │ Porges
 <span>12</span> │ Southclaws
 <span>13</span> │ aidanharris
 <span>14</span> │ andrasio
 <span>15</span> │ bndbsh
 <span>16</span> │ chhetripradeep
 <span>17</span> │ coolshaurya
 <span>18</span> │ cristicismas
 <span>19</span> │ davidrobertmason
 <span>20</span> │ devnought
 <span>21</span> │ djc
 <span>22</span> │ drmason13
 <span>23</span> │ eoinkelly
 <span>24</span> │ est31
 <span>25</span> │ gilesv
 <span>26</span> │ iamcodemaker
 <span>27</span> │ incrop
 <span>28</span> │ ineol
 <span>29</span> │ jankoprowski
 <span>30</span> │ jdvr
 <span>31</span> │ jerodsanto
 <span>32</span> │ jonathandturner
 <span>33</span> │ landaire
 <span>34</span> │ lesichkovm
 <span>35</span> │ marcelocg
 <span>36</span> │ max-sixty
 <span>37</span> │ mfarberbrodsky
 <span>38</span> │ miller-time
 <span>39</span> │ mlbright
 <span>40</span> │ nalshihabi
 <span>41</span> │ naufraghi
 <span>42</span> │ notryanb
 <span>43</span> │ oknozor
 <span>44</span> │ orf
 <span>45</span> │ oskarskog
 <span>46</span> │ piotrek-szczygiel
 <span>47</span> │ pizzafox
 <span>48</span> │ pka
 <span>49</span> │ pmeredit
────┴───────────────────
────┬───────────────
 <span>#  │ &lt;value></span>
────┼───────────────
 <span>50</span> │ quebin31
 <span>51</span> │ ramonsnir
 <span>52</span> │ rnxpyke
 <span>53</span> │ rtlechow
 <span>54</span> │ sdfnz
 <span>55</span> │ sebastian-xyz
 <span>56</span> │ svartalf
 <span>57</span> │ t-hart
 <span>58</span> │ taiki-e
 <span>59</span> │ tchak
 <span>60</span> │ thegedge
 <span>61</span> │ tim77
 <span>62</span> │ twe4ked
 <span>63</span> │ uma0317
 <span>64</span> │ vsoch
 <span>65</span> │ vthriller
 <span>66</span> │ wycats
 <span>67</span> │ yaahc
 <span>68</span> │ yahsinhuangtw
────┴───────────────
</code></pre></div><h2 id="nushell-book-repo" tabindex="-1"> Nushell book repo</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/book/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
────┬─────────────────
 <span>#  │ &lt;value></span>
────┼─────────────────
  <span>0</span> │ Andrew-Webb
  <span>1</span> │ andrasio
  <span>2</span> │ boisgera
  <span>3</span> │ jankoprowski
  <span>4</span> │ jonathandturner
  <span>5</span> │ landaire
  <span>6</span> │ lord
  <span>7</span> │ marcelocg
  <span>8</span> │ mistydemeo
  <span>9</span> │ mlh758
 <span>10</span> │ pizzafox
 <span>11</span> │ pka
 <span>12</span> │ romanlevin
 <span>13</span> │ rtlechow
 <span>14</span> │ sebastian-xyz
 <span>15</span> │ ymgyt
────┴─────────────────
</code></pre></div><h2 id="contributor-book" tabindex="-1"> Contributor book</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/contributor-book/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
───┬─────────────────
 <span># │ &lt;value></span>
───┼─────────────────
 <span>0</span> │ andrasio
 <span>1</span> │ daveremy
 <span>2</span> │ jankoprowski
 <span>3</span> │ jonathandturner
 <span>4</span> │ sebastian-xyz
───┴─────────────────
</code></pre></div><h2 id="cookbook" tabindex="-1"> Cookbook</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/cookbook/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
───┬─────────────────
 <span># │ &lt;value></span>
───┼─────────────────
 <span>0</span> │ jonathandturner
 <span>1</span> │ notryanb
 <span>2</span> │ sebastian-xyz
───┴─────────────────
</code></pre></div><h2 id="blog" tabindex="-1"> Blog</h2>
<div><pre><code><span>></span> fetch https://api.github.com/repos/nushell/blog/stats/contributors <span>|</span> get author <span>|</span> sort-by login <span>|</span> get login
───┬─────────────────
 <span># │ &lt;value></span>
───┼─────────────────
 <span>0</span> │ Aloso
 <span>1</span> │ jonathandturner
 <span>2</span> │ sebastian-xyz
 <span>3</span> │ waldyrious
───┴─────────────────
</code></pre></div>]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.8.0</title>
    <id>www.nushell.sh/blog/2020-01-07-nushell-0_8_0.html</id>
    <link href="www.nushell.sh/blog/2020-01-07-nushell-0_8_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-8-0" tabindex="-1"> Nushell 0.8.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.8.0 release of Nu. This continues a series of internal improvements, with better stability and correctness, and, of course, new features.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.8.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.8.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<div><pre><code>❯ ls nu_plugin_* | sort-by name | get name
────┬──────────────────────
 #  │ &lt;value>
────┼──────────────────────
  0 │ nu_plugin_average
  1 │ nu_plugin_binaryview
  2 │ nu_plugin_fetch
  3 │ nu_plugin_inc
  4 │ nu_plugin_match
  5 │ nu_plugin_post
  6 │ nu_plugin_ps
  7 │ nu_plugin_str
  8 │ nu_plugin_sum
  9 │ nu_plugin_sys
 10 │ nu_plugin_textview
 11 │ nu_plugin_tree
────┴──────────────────────
</code></pre></div><h1 id="unwrapping-your-presents-jonathandturner-andrasio-with-help-from-ubsan" tabindex="-1"> Unwrapping your presents (jonathandturner, andrasio, with help from ubsan)</h1>
<p>A classic trick when writing Rust is to use the <code>.unwrap()</code> method. This method gives you a quick way to say &quot;panic if you see this happen&quot;. When prototyping, it's easy to use this as a way to develop code more quickly, but as a codebase matures you move away from it.</p>
<p>It was time for Nu to move away from using this shortcut. Fixing the unwraps is a lot of work, but the end result is a codebase that reports errors more reliably and doesn't panic as often if something unexpected happens -- which just is what you want when you're making a shell!</p>
<p>We're happy to say there are now no more unwraps in the Nu codebase. We have more improvements in mind, but this already is a big upgrade from where we were a few weeks ago.</p>
<h1 id="clippy-cleanliness-thibran-vorot93-jonathandturner" tabindex="-1"> Clippy cleanliness (thibran, vorot93, jonathandturner)</h1>
<p>Along the same theme of making code as clean as we can, we recently adopted using the <code>clippy</code> tool. Clippy is a tool to help point out common mistakes or inefficiencies in your Rust code. The end result of working through its warnings is often a cleaner looking codebase that's also a bit more efficient as a result.</p>
<p>The Nu codebase is now clippy-clean, and we're enforcing this on every new checkin to the codebase.</p>
<h1 id="improved" tabindex="-1"> Improved</h1>
<h2 id="which-gets-better-avandesa" tabindex="-1"> <code>which</code> gets better (avandesa)</h2>
<div><pre><code><span>></span> <span>which</span> <span>which</span>
───────┬──────────────────────────┬─────────
 arg   │ path                     │ <span>builtin</span>
───────┼──────────────────────────┼─────────
 <span>which</span> │ nushell built-in <span>command</span> │ Yes
───────┴──────────────────────────┴─────────
</code></pre></div><p>We're in the process of improving some of our existing built-in commands to make them more Nu-like. In this release, the <code>which</code> command has a bit more of a Nu-feel. It will tell you the path and if the command is an internal builtin command or an external command.</p>
<h2 id="ps-gets-better-jonathandturner" tabindex="-1"> <code>ps</code> gets better (jonathandturner)</h2>
<div><pre><code>─────┬───────┬──────────────────────────────────────┬──────────┬─────────┬──────────┬──────────
 #   │ pid   │ name                                 │ status   │ cpu     │ mem      │ virtual
─────┼───────┼──────────────────────────────────────┼──────────┼─────────┼──────────┼──────────
 250 │  4729 │ ibus-engine-simple                   │ Sleeping │  0.0000 │   3.3 MB │ 176.7 MB
 251 │  5964 │ gedit                                │ Sleeping │  0.0000 │  29.2 MB │ 496.5 MB
 252 │  5860 │ seahorse                             │ Sleeping │  0.0000 │  24.0 MB │ 488.7 MB
 253 │  6594 │ gnome-terminal-server                │ Sleeping │  0.0000 │  47.8 MB │ 675.0 MB
</code></pre></div><p>The <code>ps</code> command has gained a few new columns: &quot;mem&quot; and &quot;virtual&quot; for helping you track memory usage.</p>
<h2 id="openoffice-ods-support-coolshaurya" tabindex="-1"> OpenOffice .ods support (coolshaurya)</h2>
<p>Fresh off the presses is initial support for opening .ods files. Similarly to our xlsx support, this will allow you to open .ods files and read in their data, separated by the sheets.</p>
<h2 id="improved-keyboard-navigation-aloso" tabindex="-1"> Improved keyboard navigation (Aloso)</h2>
<p>We now support moving left by-word using the ctrl+left and ctrl+right keyboard shortcuts.</p>
<h1 id="new-commands" tabindex="-1"> New commands</h1>
<h2 id="uniq-notryanb" tabindex="-1"> uniq (notryanb)</h2>
<p>With 0.8.0, you'll also be able to remove duplicate rows from your tables with the <code>uniq</code> command:</p>
<div><pre><code>> open test.csv
───┬────────────┬───────────┬────────────┬──────
 # │ first_name │ last_name │ rusty_at   │ type
───┼────────────┼───────────┼────────────┼──────
 0 │ Andrés     │ Robalino  │ 10/11/2013 │ A
 1 │ Andrés     │ Robalino  │ 10/11/2013 │ A
 2 │ Jonathan   │ Turner    │ 10/12/2013 │ B
 3 │ Yehuda     │ Katz      │ 10/11/2013 │ A
───┴────────────┴───────────┴────────────┴──────
</code></pre></div><div><pre><code>> open test.csv | uniq
───┬────────────┬───────────┬────────────┬──────
 # │ first_name │ last_name │ rusty_at   │ type
───┼────────────┼───────────┼────────────┼──────
 0 │ Andrés     │ Robalino  │ 10/11/2013 │ A
 1 │ Jonathan   │ Turner    │ 10/12/2013 │ B
 2 │ Yehuda     │ Katz      │ 10/11/2013 │ A
───┴────────────┴───────────┴────────────┴──────
</code></pre></div><h1 id="new-built-in-variable-jonathandturner" tabindex="-1"> New built-in variable (jonathandturner)</h1>
<p>With 0.8.0, we've moved away from the <code>$nu:path</code> built-ins. Now, there's just one built-in for internal values: <code>$nu</code>. Using <code>echo $nu</code> will show you the table of current values.</p>
<h1 id="fixing-bugs-jonathandturner-sandorex-miller-time-quebin31-thegedge" tabindex="-1"> Fixing bugs (jonathandturner, sandorex, miller-time, quebin31, thegedge)</h1>
<p>As always, we also fixed bugs. In 0.8.0, you'll see improvements with UTF-8, the <code>pick</code> command, correctly handling required positional arguments, CTRL+L clear screen, and faster response times for external commands.</p>
<h1 id="what-s-coming" tabindex="-1"> What's coming</h1>
<p>We're well on our way to 0.10.0. That's right, we're not close to our 1.0 release just yet. After 0.9, we'll continue with a release every three weeks. Expect to see Nu continue to mature and stabilize.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.9.0</title>
    <id>www.nushell.sh/blog/2020-01-28-nushell-0_9_0.html</id>
    <link href="www.nushell.sh/blog/2020-01-28-nushell-0_9_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-9-0" tabindex="-1"> Nushell 0.9.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're happy to announce the 0.9.0 release of Nu. This release offers better help and error feedback, better support for the native shell, new commands, lots of command improvements, and bugfixes.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.9.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.9.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="help-available-on-all-commands-amanita-muscaria" tabindex="-1"> <code>--help</code> available on all commands (Amanita-muscaria)</h2>
<p>One of the first things a user might do in a new shell is to type a familiar command and pass it <code>--help</code>. A perfectly reasonable thing to do, and with 0.9.0 it does exactly you'd expect. It will now print out the help information for the given command for all internal commands (much in the same way as using <code>help &lt;command name&gt;</code>)</p>
<h2 id="better-error-feedback-wycats-andrasio" tabindex="-1"> Better error feedback (wycats, andrasio)</h2>
<p><img src="@source/assets/images/0_9_0_error_highlight.png" alt="Better inline errors!"></p>
<p>Our improvements to the parser as part of 0.9.0 also come with some fun perks. One of these is that unknown flags, and similar errors, will now get highlighted red to let you know that this isn't a valid input to the command.</p>
<h2 id="shelling-out-jonathandturner" tabindex="-1"> Shelling out (jonathandturner)</h2>
<p>An early feature of Nu that people that has been a popular request to bring back is &quot;shelling out&quot;. When Nu doesn't recognize a command, it will try to find it as an external command. In the last few versions, this was limited as Nu was not able to execute shell scripts, .cmd scripts... basically anything that wasn't an executable. The problem is that lots of apps use scripts as a way to configure what to execute (commands like <code>code</code>, <code>npm</code>, and others are common scripts behind the scenes).</p>
<p>With 0.9.0, we're returning to our earlier behavior and executing both binaries and shell scripts by calling to the platform-native shell when we call an external command. While this should largely be invisible as a user, more things should &quot;just work&quot; how they would in bash or Windows Terminal.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="du-amanita-muscaria" tabindex="-1"> du (Amanita-muscaria)</h3>
<p>Nu now has its own <code>du</code> command to show the disk usage of a part of the file system. This is a handy way of quickly looking for where all your free space went.</p>
<div><pre><code>❯ du
───┬───────────────┬─────────┬────────────────
 # │ name          │ size    │ contents
───┼───────────────┼─────────┼────────────────
 0 │ .git          │  4.7 MB │ [table 6 rows]
 1 │ .jekyll-cache │ 49.0 KB │ [table 1 rows]
 2 │ _includes     │   881 B │
 3 │ _layouts      │  4.3 KB │
 4 │ _posts        │ 82.4 KB │
 5 │ _sass         │ 21.5 KB │
 6 │ _site         │  5.3 MB │ [table 4 rows]
 7 │ assets        │  2.4 MB │ [table 1 rows]
 8 │ images        │  2.4 MB │
───┴───────────────┴─────────┴────────────────
</code></pre></div><h3 id="clear-jesterornot" tabindex="-1"> clear (JesterOrNot)</h3>
<p>Short, sweet, and to the point, you can now <code>clear</code> your screen with the new <code>clear</code> command. Like our other commands, this works across all the platforms Nu runs on.</p>
<h2 id="new-welcome-message-jonathandturner" tabindex="-1"> New welcome message (jonathandturner)</h2>
<div><pre><code>Welcome to Nushell 0.9.0 (type 'help' for more info)
nushell on 📙 bump_to_0_9_0 is 📦 v0.9.0 via 🦀 v1.40.0
❯
</code></pre></div><p>The first time you open Nu now you'll be greeted by a brief message to tell you the version of Nu and a reminder to use the <code>help</code> command to learn more about Nu and how it works.</p>
<h2 id="improved-table-streaming-jonathandturner" tabindex="-1"> Improved table streaming (jonathandturner)</h2>
<p>If you've used earlier versions of Nu, you may have wondered why every 50 rows we start a new table. This is where the implementation showed through a bit more than it should. As tables are printed, they are created and then displayed as enough rows are available. This means that output will spool to the screen and not wait for the table to finish processing before you see something. In general, it's good to see the tables earlier, but seeing a different shape of table every 50 rows can be annoying.</p>
<p>We've updated table output to be a lot cleaner, using this logic:</p>
<ul>
<li>If rows are being output quickly, build a larger table before outputting it</li>
<li>If rows are being output slowly, buffer a smaller number of rows and display them (just as before)</li>
<li>If rows change shape, switch to showing a different table. This helps you visually see when your data source is giving you a new kind of data</li>
</ul>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<h3 id="ls-and-rm-now-error-when-a-path-isn-t-found-amanita-muscaria" tabindex="-1"> <code>ls</code> and <code>rm</code> now error when a path isn't found (Amanita-muscaria)</h3>
<p>Adding a bit of polish this release, <code>ls</code> and <code>rm</code> will now error if you pass them a path they can't find.</p>
<h3 id="ls-can-optionally-show-just-the-filename-coolshaurya" tabindex="-1"> <code>ls</code> can optionally show just the filename (coolshaurya)</h3>
<p>If you've used <code>ls</code> on your subdirectories, you might have noticed that the subdirectory becomes part of the filename. This can be great for building up a pipeline (and a script in the future), but sometimes all you care about is the filename. You can now pass <code>ls</code> the <code>--short-names</code> command flag to get just the filename.</p>
<h3 id="ls-can-also-optionally-show-symlink-targets-josephtlyons" tabindex="-1"> <code>ls</code> can also optionally show symlink targets (JosephTLyons)</h3>
<p>Further improving <code>ls</code>, you can now see the symlink targets with the <code>--full</code> flag.</p>
<h3 id="ls-smaller-by-default-now-with-more-info-with-full-jonathandturner" tabindex="-1"> <code>ls</code> smaller by default, now with more info with <code>--full</code> (jonathandturner)</h3>
<p>To make Nu easier to use on smaller terminals, the <code>ls</code> command will now try to take up less space by default. The columns from earlier version of Nu (and a few more!) are still available, now behind the <code>--full</code> flag.</p>
<h3 id="from-xml-now-includes-attributes-borimino" tabindex="-1"> <code>from-xml</code> now includes attributes (Borimino)</h3>
<p>One of the first commands we built to import file data into Nu was <code>from-xml</code>. It was good enough to get started, and with 0.9.0 it improves to being a more precise representation of what's in the XML file. The command will now include attribute values as part of the table.</p>
<h3 id="sort-by-works-with-more-value-types-koenaad" tabindex="-1"> <code>sort-by</code> works with more value types (koenaad)</h3>
<p>Our sorting command <code>sort-by</code> can now work over more value types, which simplifies some common sorting tasks.</p>
<h3 id="debug-now-pretty-prints-its-output-sandorex" tabindex="-1"> <code>debug</code> now pretty-prints its output (sandorex)</h3>
<p>When working on Nu itself, there's a handy <code>debug</code> command which gives you all the information about the value coming through the pipeline. This is now prett-printed by default to make it easier to read.</p>
<h3 id="autocompletion-can-now-be-configured-jacobious52" tabindex="-1"> autocompletion can now be configured (Jacobious52)</h3>
<p>Autocompletion at the Nu prompt can now be changed between circular (the default) and list.</p>
<div><pre><code>> config --set [completion_mode list]
</code></pre></div><h3 id="more-improvements-to-which-avandesa" tabindex="-1"> More improvements to <code>which</code> (avandesa)</h3>
<p>The structured <code>which</code> continues to improve 0.9.0 and will now give an error in cases that it could not be performed correctly.</p>
<h3 id="improvements-to-calling-external-commands-thegedge-andrasio-koenaad" tabindex="-1"> Improvements to calling external commands (thegedge, andrasio, koenaad)</h3>
<p>A batch of improvements should allow external commands to feel a bit faster and work more consistently with the pipeline.</p>
<h2 id="documentation" tabindex="-1"> Documentation</h2>
<h3 id="more-command-docs-coolshaurya" tabindex="-1"> More command docs (coolshaurya)</h3>
<p>We're continuing to document the commands that are available and continue filling out command documentation where it's missing.</p>
<h3 id="more-readmes-and-code-documentation-notryanb-jonathandturner" tabindex="-1"> More READMEs and code documentation (notryanb, jonathandturner)</h3>
<p>Contributors to Nu will also appreciate that we're working our way through the code and source repositories and documenting how each part works. This should help developers get used to Nu from the inside and find a much easier path to jump in.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>With 0.9.0, we've added a lot of &quot;quality of life&quot; improvements that we hope you enjoy. We'd love to hear from you how 0.9.0 works for you.</p>
<p>Next release will be 0.10.0, as we continue to improve Nu. We're excited about what's coming, and can't wait to play with it ourselves!</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.10.0</title>
    <id>www.nushell.sh/blog/2020-02-18-nushell-0_10_0.html</id>
    <link href="www.nushell.sh/blog/2020-02-18-nushell-0_10_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-10-0" tabindex="-1"> Nushell 0.10.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Greetings and welcome to the 10th release of Nushell! Yes, that's right this is the tenth release of Nu we've put out in the wild, and oh is this release wild. So let's stop dilly-dallying and get right to it, shall we?</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.10.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.10.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="scripts-thegedge-jonathandturner" tabindex="-1"> Scripts! (thegedge, jonathandturner)</h2>
<p>Yes, you read that right, we're just beginning to add support for running Nu scripts. So far, these scripts are simple things. Nu will go line by line and run each line. But we're looking forward to building up support with more features as we go.</p>
<p>To run a script, you just call <code>nu</code> and pass in it the script file:</p>
<div><pre><code><span>></span> <span>cat</span> hello_world.nu
<span>echo</span> hello
<span>echo</span> world

<span>></span> nu hello_world.nu
hello
world
</code></pre></div><h2 id="running-commands-from-outside-nu-jonathandturner" tabindex="-1"> Running commands from outside Nu (jonathandturner)</h2>
<p>Another fun features in this release is the ability to run a Nu command from outside of Nu. Just like shells like Bash and Windows CMD, you can now pass the <code>-c</code> flag and give the pipeline you want to run:</p>
<div><pre><code><span>></span> ./nu -c <span>"ls | get name"</span>
─────┬───────────────────────────────
 <span>#   │ &lt;value></span>
─────┼───────────────────────────────
   <span>0</span> │ .cargo-lock
   <span>1</span> │ .fingerprint
   <span>2</span> │ build
   <span>3</span> │ deps
</code></pre></div><h2 id="shorthand-flags-amanita-muscaria" tabindex="-1"> Shorthand flags (Amanita-muscaria)</h2>
<p>Tired of typing those long flags that every Nu command seems to have? Worry no more! You can now use short flags in many common Nu commands. For example:</p>
<p>Instead of:</p>
<div><pre><code><span>></span> <span>ls</span> --full
</code></pre></div><p>You can now use:</p>
<div><pre><code><span>></span> <span>ls</span> -f
</code></pre></div><p>The shorthand flags are listed as part of the updated help section</p>
<h2 id="did-someone-say-flags-andrasio" tabindex="-1"> Did someone say flags? (andrasio)</h2>
<p>If you're coming to Nu from other CLIs, you might have wondered why you always had to put flags at the end. A little annoying, right? We fixed it.</p>
<div><pre><code><span>></span> <span>ls</span> *.sh --full
</code></pre></div><p>and now:</p>
<div><pre><code>> ls --full *.sh
</code></pre></div><p>Use whichever you like best.</p>
<h2 id="more-plugins-by-default-andrasio" tabindex="-1"> More plugins by default (andrasio)</h2>
<p>We've extended the set of plugins installed with <code>cargo install nu --features=stable</code> to the whole set of stable plugins. This cuts down on the amount of extra plugins to install if you want the full set. It should also help cut down on the confusion when users expected a command to be available but wasn't installed by default. You can still install without these additional commands, if you like, and pick and choose the ones you want.</p>
<h2 id="calc-command-coolshaurya" tabindex="-1"> <code>calc</code> command (coolshaurya)</h2>
<p>There's a new <code>calc</code> command in development that can calculate the result of math expressions in a string.</p>
<div><pre><code><span>></span> <span>echo</span> <span>"2+3"</span> <span>|</span> calc
<span>5.000000000000000</span>
</code></pre></div><h2 id="kill-command-sandorex" tabindex="-1"> <code>kill</code> command (sandorex)</h2>
<p>Nu now also has a cross-platform <code>kill</code> command, for killing processes.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<h3 id="external-commands-can-access-nu-andrasio" tabindex="-1"> External commands can access <code>$nu</code> (andrasio)</h3>
<p>External commands commands can now access the <code>$nu</code> variable that holds internal values for Nu.</p>
<h3 id="datetime-parsing-amanita-muscaria" tabindex="-1"> Datetime parsing (Amanita-muscaria)</h3>
<p>You can now parse datetime strings using the <code>str</code> command.</p>
<h3 id="du-command-now-shows-apparent-and-physical-disk-usage-amanita-muscaria" tabindex="-1"> <code>du</code> command now shows apparent and physical disk usage (Amanita-muscaria)</h3>
<p>The <code>du</code> command now lets you see both the amount of space that directories appear to take as well as the amount of total actual space they take up on the disk.</p>
<h3 id="better-help-message-jonathandturner" tabindex="-1"> Better <code>help</code> message (jonathandturner)</h3>
<p>By default, the <code>help</code> command now prints a little more information by default to help you get started.</p>
<h2 id="lots-of-bugfixes-improvements-thegedge-ultrawelfare-jonathandturner-andrasio-avandesa-notryanb-coolshaurya-twitu" tabindex="-1"> Lots of bugfixes/improvements (thegedge, UltraWelfare, jonathandturner, andrasio, avandesa, notryanb, coolshaurya, twitu)</h2>
<p>Better errors for incorrect <code>mv</code> and incorrect flags, better performance running external commands, better code documentation, plugins can now have numbers in their names, test directories can now have spaces in their names, fixed some issues with <code>cp</code>, moved off of the &quot;futures-preview&quot; crate to &quot;futures&quot; official, fixes to working with external commands that don't send line endings, improvements to <code>textview</code> and more.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>Adding the ability to run scripts gives Nu a lot more potential when used in larger tasks, and we're excited to continue to grow this support. This work comes out of the work to add aliases, which we're currently working on. It also opens up the possibility of running Nu from other hosts in the future.</p>
<p>Scripting also lends itself to needing more structure, variables, and more. We're looking ahead to those, too.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.11.0</title>
    <id>www.nushell.sh/blog/2020-03-10-nushell_0_11_0.html</id>
    <link href="www.nushell.sh/blog/2020-03-10-nushell_0_11_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-11-0" tabindex="-1"> Nushell 0.11.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release the 0.11.0 release of Nu. This release continues to push us forward with new commands, improved engine internals, bugfixes, and more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.11.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.11.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="compound-shorthand-flags-amanita-muscaria" tabindex="-1"> Compound shorthand flags (Amanita-muscaria)</h2>
<p>Over the last few releases, we've seen the ability for flags to have shorthand version. You no longer needed to use <code>--full</code> if the flag supported the shorter <code>-f</code> version.</p>
<p>In this release, we've taken it one step further and allowed you to combine multiple shorthand flags into one group. For example, <code>ls --full --short-names</code> can now be written as <code>ls -fs</code></p>
<h2 id="improvements-and-cleanup-for-ls-bocom-quebin31-lincis-equal-l2" tabindex="-1"> Improvements and cleanup for <code>ls</code> (Bocom, quebin31, lincis, equal-l2)</h2>
<p>A lot of improvements went into <code>ls</code> for this release. The updated <code>ls</code> command is now more forgiving of coming across directories the user can't access and will simply show what it can and continue, it can work with named pipes on systems with them, it shows a more reasonable display for zero-length files, and the internals of <code>ls</code> have been cleaned a bit to make way for future improvements.</p>
<h2 id="external-command-output-no-longer-blocks-thegedge" tabindex="-1"> External command output no longer blocks (thegedge)</h2>
<p>Continuing our series of improvements to working with external commands, we have a few updates in this release. The first of these updates is an improvement to how content streams out of externals. With 0.11.0, this content will no longer block, which allows content to flow more easily between external and internal commands. As a result, some corner cases that came up with a series of commands in a pipeline not working because one blocks no longer is an issue.</p>
<h2 id="allow-externals-to-output-texts-or-binary-jonathandturner-thegedge" tabindex="-1"> Allow externals to output texts or binary (jonathandturner, thegedge)</h2>
<p>The second update to externals now allows externals to freely output either text or strings, and for this content to be read in a block at a time into Nu. This allows externals to stream any content they wish, and for this stream to continue for as long as needed.</p>
<h2 id="new-shuffle-command-hirschenberger" tabindex="-1"> New <code>shuffle</code> command (hirschenberger)</h2>
<p>With 0.11.0, we introduce a new <code>shuffle</code> command that will let you shuffle the rows of a table. This allows you to choose to not always process data the same way, or to search through data more stochastically.</p>
<div><pre><code>❯ help commands | shuffle
─────┬──────────────┬───────────────────────────────────────────────────────────────────────────────────────────────
 #   │ name         │ description
─────┼──────────────┼───────────────────────────────────────────────────────────────────────────────────────────────
   0 │ textview     │ Autoview of text data.
   1 │ pwd          │ Output the current working directory.
   2 │ sort-by      │ Sort by the given columns.
   3 │ tree         │ View the contents of the pipeline as a tree.
   4 │ du           │ Find disk usage sizes of specified items
   5 │ table        │ View the contents of the pipeline as a table.
</code></pre></div><h2 id="new-column-rename-command-andrasio" tabindex="-1"> New column <code>rename</code> command (andrasio)</h2>
<p>You can also now use the new <code>rename</code> command to rename a column to a new name.</p>
<div><pre><code>❯ help commands | rename action description
─────┬──────────────┬───────────────────────────────────────────────────────────────────────────────────────────────
 #   │ action       │ description
─────┼──────────────┼───────────────────────────────────────────────────────────────────────────────────────────────
   0 │ append       │ Append the given row to the table
   1 │ autoview     │ View the contents of the pipeline as a table or list.
   2 │ average      │ Compute the average of a column of numerical values.
   3 │ binaryview   │ Autoview of binary data.
</code></pre></div><h2 id="merge-the-env-command-into-the-nu-variable-jonathandturner" tabindex="-1"> Merge the <code>env</code> command into the <code>$nu</code> variable (jonathandturner)</h2>
<p>The <code>$nu</code> variable has grown to include values that were previously part of <code>env</code>, effectively merging the two into the <code>$nu</code> variable. This allows you to easily find out where the history file is stored, where config is stored, and where a good temp directory are all in one place:</p>
<div><pre><code>❯ echo $nu.home-dir $nu.temp-dir $nu.config-path $nu.history-path
───┬──────────────────────────────────────────────────────────────────────
 # │ &lt;value>
───┼──────────────────────────────────────────────────────────────────────
 0 │ C:\Users\joturner
 1 │ C:\Users\joturner\AppData\Local\Temp\
 2 │ C:\Users\joturner\AppData\Roaming\nu shell developers\nu\config.toml
 3 │ C:\Users\joturner\AppData\Local\nu shell developers\nu\history.txt
───┴──────────────────────────────────────────────────────────────────────
</code></pre></div><h2 id="the-format-command-can-now-use-column-paths-andrasio" tabindex="-1"> The <code>format</code> command can now use column paths (andrasio)</h2>
<p>The <code>format</code> command is a handy way of putting column data into a string for displaying, but it previously had the restriction that you couldn't use it to print out information that was deeper in the table. With 0.11.0, we've removed that restriction.</p>
<div><pre><code>❯ open Cargo.toml | format "The edition is {package.edition}"
The edition is 2018
</code></pre></div><h2 id="allow-help-to-be-printed-with-h-in-more-cases-rabisg0" tabindex="-1"> Allow help to be printed with <code>-h</code> in more cases (rabisg0)</h2>
<p>You should now be able to use <code>-h</code> to reach the help of a command in more cases than was previously allowed, making it a universal way to get to the help text.</p>
<h2 id="improved-documentation-coolshaurya-amanita-muscaria-notryanb" tabindex="-1"> Improved documentation (coolshaurya, Amanita-muscaria, notryanb)</h2>
<p>Documentation for <code>du</code>, <code>uniq</code>, <code>debug</code>, and plugin docs have all been improved in this release.</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're excited to continue to polish how Nu works to make it more reliable and more efficient. Of course, we're also working on adding new much-requested features like aliases in upcoming releases. If you'd like to help with aliases or with Nu in general -- even if you want to help with a part of the project outside of just coding -- we'd love to have you. Come visit us on <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a> or the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>.</p>
]]></content>
    <author>
      <name>Jonathan Turner</name>
    </author>
    <contributor>
      <name>Jonathan Turner</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by Jonathan Turner</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.12.0</title>
    <id>www.nushell.sh/blog/2020-03-31-nushell_0_12_0.html</id>
    <link href="www.nushell.sh/blog/2020-03-31-nushell_0_12_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-12-0" tabindex="-1"> Nushell 0.12.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release version 0.12.0 of Nu!</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.12.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.12.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's new</h1>
<h2 id="automatic-cd-jonathandturner" tabindex="-1"> Automatic <code>cd</code> (jonathandturner)</h2>
<div><pre><code>nushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0
❯ docs
nushell/docs on 📙 master
❯ ..
nushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0
</code></pre></div><p>Fish and Windows users rejoice, you can now <code>cd</code> to a directory or drive by typing its name in the shell. This also allows Windows users to change drives by giving just the drive name. Now, when you use the drive letter, we'll switch drives and return you to your previous working directory on that drive (eg <code>D:</code> will change to the D: drive and <code>cd</code> to the path you had been at previousy).</p>
<h2 id="type-inference-andrasio" tabindex="-1"> Type inference (andrasio)</h2>
<div><pre><code>❯ open tests/fixtures/formats//caco3_plastics.csv | get cif_per_net_weight
───┬─────────
 # │ &lt;value>
───┼─────────
 0 │  0.2300
 1 │  0.3100
 2 │  0.1400
 3 │  0.2300
 4 │  0.2100
 5 │  0.2800
 6 │  0.3000
 7 │  0.2500
 8 │  0.2800
───┴─────────
nushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0
❯ open tests/fixtures/formats//caco3_plastics.csv | get cif_per_net_weight | sum
2.23
</code></pre></div><p>We've been hard at work at improving how we read in unstructured data. In this release, you'll see the beginning of type inference as data is read in. In the above example, you can see how we now autodetect decimal numbers and then can later sum them together.</p>
<h2 id="jupyter-notebook-support-jonathandturner" tabindex="-1"> Jupyter notebook support (jonathandturner)</h2>
<p><img src="@source/assets/images/0_12_0_jupyter.png" alt="image of Nu in Jupyter notebook"></p>
<p>Nu's core design goal is that it should be easier to work with your system and your data. In this release, we take a step beyond being just a shell with <a href="https://github.com/nushell/nu_jupyter" target="_blank" rel="noopener noreferrer">Jupyter notebook support</a>.</p>
<h2 id="ls-all-quebin31" tabindex="-1"> <code>ls --all</code> (quebin31)</h2>
<div><pre><code>❯ ls
────┬─────────────────────────────────────────────────────┬──────┬──────────┬──────────────
 #  │                        name                         │ type │   size   │   modified
────┼─────────────────────────────────────────────────────┼──────┼──────────┼──────────────
  0 │ CODE_OF_CONDUCT.md                                  │ File │   3.4 KB │ 5 months ago
  1 │ Cargo.lock                                          │ File │ 104.5 KB │ 23 mins ago
  2 │ Cargo.toml                                          │ File │   5.5 KB │ 23 mins ago
...

❯ ls --all
────┬─────────────────────────────────────────────────────┬──────┬──────────┬──────────────
 #  │                        name                         │ type │   size   │   modified
────┼─────────────────────────────────────────────────────┼──────┼──────────┼──────────────
  0 │ .azure                                              │ Dir  │          │ 2 weeks ago
  1 │ .cargo                                              │ Dir  │          │ 2 weeks ago
  2 │ .circleci                                           │ Dir  │          │ 2 weeks ago
...
</code></pre></div><p>With 0.12.0, you can now show hidden files when listing directory contents with <code>ls</code>.</p>
<h2 id="from-ics-and-from-vcf-pulpdrew" tabindex="-1"> <code>from-ics</code> and <code>from-vcf</code> (pulpdrew)</h2>
<p>The file support contines to improve, as we add support for vCard and iCal file formats.</p>
<h2 id="to-md-and-to-html-jonathandturner" tabindex="-1"> <code>to-md</code> and <code>to-html</code> (jonathandturner)</h2>
<div><pre><code>❯ ls | to-md
|name|type|size|modified|
|-|-|-|-|
|CODE_OF_CONDUCT.md|File|3.4 KB|5 months ago|
|Cargo.lock|File|104.5 KB|21 mins ago|
</code></pre></div><p>You can now output to markdown and html using the new converters.</p>
<h2 id="headers-samhedin" tabindex="-1"> <code>headers</code> (samhedin)</h2>
<div><pre><code>❯ open tests/fixtures/formats/sample_data.ods | get SalesOrders
────┬────────────┬─────────┬──────────┬─────────┬─────────┬───────────┬───────────
 #  │  Column0   │ Column1 │ Column2  │ Column3 │ Column4 │  Column5  │  Column6
────┼────────────┼─────────┼──────────┼─────────┼─────────┼───────────┼───────────
  0 │ OrderDate  │ Region  │ Rep      │ Item    │ Units   │ Unit Cost │ Total
  1 │ 2018-01-06 │ East    │ Jones    │ Pencil  │ 95.0000 │    1.9900 │  189.0500

❯ open tests/fixtures/formats/sample_data.ods | get SalesOrders | headers
────┬────────────┬─────────┬──────────┬─────────┬─────────┬───────────┬───────────
 #  │ OrderDate  │ Region  │   Rep    │  Item   │  Units  │ Unit Cost │   Total
────┼────────────┼─────────┼──────────┼─────────┼─────────┼───────────┼───────────
  0 │ 2018-01-06 │ East    │ Jones    │ Pencil  │ 95.0000 │    1.9900 │  189.0500
  1 │ 2018-01-23 │ Central │ Kivell   │ Binder  │ 50.0000 │   19.9900 │  999.4999
</code></pre></div><p>Sometimes when working with data, you've managed to read in columns of data and notice that the first row is the headers you want. Previously, this required a lot of twiddling to lift the row into being the header. With 0.12.0, this has become much simpler with the <code>header</code> command.</p>
<h2 id="ps-full-mode-jonathandturner" tabindex="-1"> <code>ps --full</code> mode (jonathandturner)</h2>
<p>We're extending the information you can get back from <code>ps</code>. You are now able to get the original commandline and more for each process using the new <code>ps --full</code>.</p>
<h2 id="rm-can-now-take-multiple-arguments-to-remove-multiple-files-at-once-pulpdrew" tabindex="-1"> <code>rm</code> can now take multiple arguments to remove multiple files at once (pulpdrew)</h2>
<p>Sometimes we're missing a feature and you wonder how we made it that long 😄. In this release, you can now pass multiple files to <code>rm</code> for deletion.</p>
<h2 id="row-rotation-jonathandturner" tabindex="-1"> Row rotation (jonathandturner)</h2>
<div><pre><code>❯ sys
─────────┬─────────────────────────────────────────
 host    │ [row 7 columns]
 cpu     │ [row cores current ghz max ghz min ghz]
 disks   │ [table 9 rows]
 mem     │ [row free swap free swap total total]
 temp    │ [table 8 rows]
 net     │ [table 4 rows]
 battery │ [table 1 rows]
─────────┴─────────────────────────────────────────
</code></pre></div><p>When working with data with lots of columns, it can sometimes be a pain to watch it print to the screen only to see that the data is missing columns because they won't fit. In this version, we're experimenting with a way to help this by auto-rotating a row when it is printed by itself. This will allow more of the row to fit into the screen.</p>
<h2 id="configurable-table-headers-amanita-muscaria" tabindex="-1"> Configurable table headers (Amanita-muscaria)</h2>
<p>You may have noticed that the headers in the above examples were centered. How's that for sneaking a feature in?</p>
<p>With 0.12.0, you can configure your table look a bit more by changing how the headers are displayed. Here are the new <code>config</code> settings:</p>
<ul>
<li>header_color: Available colors are from term::color module</li>
<li>header_align: Sets header alignment center/left/right</li>
<li>header_style: Sets style bold, underlined, italic. More than one can be used</li>
</ul>
<h2 id="lots-of-bugfixes-improvements-sosthene-guedon-quebin31-neuronull-andrasio-thegedge-vsoch-jonathandturner-jonstodle" tabindex="-1"> Lots of bugfixes/improvements (Sosthene-Guedon, quebin31, neuronull, andrasio, thegedge, vsoch, jonathandturner, jonstodle)</h2>
<p>Open no longer fails silently, improved CSV opening, improve canonicalize of filenames, <code>sys</code> now properly says user sessions, moved <code>shuffle</code> to being an internal command, relaxed file modes, cleaned up <code>which</code> implementation, fix Docker build matrix, streams can now be interrupted, improvements to <code>du</code>, <code>get</code> now will remove blank values for easier processing, respect CARGO_TARGET_DIR when set, allow <code>..</code> and <code>/</code> to be mv targets,</p>
<h2 id="documentation-improvements-pulpdrew-nickgerace-waldyrious-kloun" tabindex="-1"> Documentation improvements (pulpdrew, nickgerace, waldyrious, kloun)</h2>
<p>Docs for <code>from-ics</code> and <code>from-vcf</code>, quickstart section for Docker users, docs for <code>skip</code> and <code>skip-while</code>, typos and whitespace fixes, typo in <code>calc</code> docs</p>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>&quot;Just keep going!&quot; as Yehuda Katz would say, and we intend to. Lots of internal improvements are coming, and of course aliases which has become a daily request.</p>
<p>We'd also like to hear from you. Let us know what would make Nu work better for your workflows, drop us a line in <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> or <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>. We'd love to hear from you!</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.13.0</title>
    <id>www.nushell.sh/blog/2020-04-21-nushell_0_13_0.html</id>
    <link href="www.nushell.sh/blog/2020-04-21-nushell_0_13_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-13-0" tabindex="-1"> Nushell 0.13.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release version 0.13.0 of Nu! This is by <em>far</em> one the the biggest releases, yet. Let's dive in!</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.13.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.13.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="aliases-jonathandturner" tabindex="-1"> Aliases (jonathandturner)</h2>
<p>Yes, it's true. Nu now supports aliases so that those long pipelines now have new life as concise, reusable commands.</p>
<div><pre><code>> alias myecho [msg] { echo $msg }
> myecho "hello world!"
hello world!
</code></pre></div><p>The alias has a name, a list of optional parameters, and the block that will execute. This block can refer to the parameters using their variable names.</p>
<h2 id="startup-commands-jonathandturner" tabindex="-1"> Startup commands (jonathandturner)</h2>
<p>With aliases, it's helpful to be able to start up Nu with your favorite aliases ready to go. To this end, we've now added the <code>startup</code> config variable. Adding a table of strings to this config variable enables you to run all of these commands as Nu starts up.</p>
<div><pre><code>> config --set [startup ["alias myecho [msg] { echo $msg }"]]
</code></pre></div><p>You can read more about setting <code>config</code> variables in <a href="https://www.nushell.sh/book/configuration.html" target="_blank" rel="noopener noreferrer">the book</a></p>
<h2 id="multi-dot-paths-quebin31" tabindex="-1"> Multi-dot paths (quebin31)</h2>
<p>In some shells, you can use multiple dots to mean go back even more directories. In addition to the common <code>..</code>, to go back to the previous directory, you can now also use <code>...</code> to go back two directories, <code>....</code> to go back three, and so on.</p>
<h2 id="semicolon-support-jonathandturner" tabindex="-1"> Semicolon support (jonathandturner)</h2>
<p>A long standing annoyance when using Nu day in and day out is that you can't compose two different pipelines together. Sometimes you want to run a build, and then run the output of the build if it succeeds.</p>
<p>In Bash, you might do something like this:</p>
<div><pre><code>> make &amp;&amp; ./run/my/app
</code></pre></div><p>If make succeeds, then your app runs. We're introducing the ';' separator which does this (beware bash users that this ';' will stop if the left-hand fails). You can write the above bash line as this in Nu 0.13.0:</p>
<div><pre><code>> make; ./run/my/app
</code></pre></div><p>Note that commands that you may be used to printing to the terminal when you run them directly may not print anything when used on the left-hand side of the <code>;</code>. This is because the data comes out and, being structured, it just gets consumed before it's viewed. If you prefer to see the output of a command on the left of the <code>;</code>, you can pass it through <code>autoview</code> to do this for you:</p>
<div><pre><code>> ls | autoview ; echo "done"
</code></pre></div><h2 id="math-operations-jonathandturner" tabindex="-1"> Math operations (jonathandturner)</h2>
<p>Wish you had a calculator or want to do a quick computation on something in your table? With 0.13.0, you can now switch into &quot;math mode&quot; and do a quick calculation. To switch into math mode, use the <code>=</code> operator as the command name.</p>
<div><pre><code>> = 3 + 4
7
</code></pre></div><p>You can use this in pipelines as well, do something like:</p>
<div><pre><code>ls | get size | = $it + 1mb
</code></pre></div><p>It doesn't end there. Not only are the basic +, -, *, and / available, but you can use these new operators:</p>
<h3 id="checking-if-a-value-is-in-a-member-of-the-given-table-with-in" tabindex="-1"> checking if a value is in a member of the given table with <code>in:</code></h3>
<div><pre><code>> = a in: [a b c]
true
> = d in: [a b c]
false
</code></pre></div><h3 id="and-to-create-compound-comparisons" tabindex="-1"> <code>&amp;&amp;</code> and <code>||</code> to create compound comparisons</h3>
<div><pre><code>> ls | where name > 'f' &amp;&amp; size > 1kb
</code></pre></div><h3 id="parens-to-allow-grouping" tabindex="-1"> Parens to allow grouping</h3>
<div><pre><code>= (1 + 2) * (3 + 4)
21
</code></pre></div><h2 id="new-parser-logic-jonathandturner" tabindex="-1"> New parser logic (jonathandturner)</h2>
<p>Early in this release cycle, we began experimenting with different ways we could write the parser going forward. Being able to parse commands, where each command could dictate how the parser works for that command, is a special challenge of how Nu works. After a bit of experimenting, we found a way forward that quickly seemed to fix some of the long-standing bugs. Not only this, but it opened up the way for a set of new features.</p>
<p>If you find issues with this new parser logic where code that used to work no longer works, please let us know. This will help us work out any issues as we build new features on it.</p>
<h2 id="external-improvements-thegedge-jonathandturner" tabindex="-1"> External improvements (thegedge, jonathandturner)</h2>
<p>With 0.13.0, we're taking a big step to making externals work in a way much more in-line with how internals work. This allows us to provide better support for varibles, column paths, coloring, error handling, and more.</p>
<h2 id="many-bugfixes-and-improvements-drsensor-thegedge-quebin31-jonathandturenr-avendesa-and-more" tabindex="-1"> Many bugfixes and improvements (DrSensor, thegedge, quebin31, jonathandturenr, avendesa, and more)</h2>
<ul>
<li>Better docker publish for each release (DrSensor)</li>
<li>Correctly delete symlinks (thegedge)</li>
<li>Better path canonicalization (quebin31)</li>
<li>Simplify <code>cp</code> and allow recursive copying (quebin31)</li>
<li>Make trash optional (jonathandturner)</li>
<li>Add support for <code>$true</code> and <code>$false</code> (jonathandturner)</li>
<li>Fixes for a few path and <code>where</code>-related issues (avendesa)</li>
<li>Plus fixes in our dependencies, many thanks to those crate owners!</li>
</ul>
<h2 id="pipeline-blocks-and-the-new-each-command-jonathandturner" tabindex="-1"> Pipeline blocks and the new <code>each</code> command (jonathandturner)</h2>
<p>Starting with 0.13.0, blocks can now contain pipelines (including <code>;</code>-separated multiple pipeline blocks). This allowed us to create the first command to take advantage of this: <code>each</code>. The new <code>each</code> command will run over each row in a table and do something for each. For example, let's say you wanted to convert each row of a table to separate JSON, rather than converting the whole table:</p>
<div><pre><code>> ls | each { to-json }
</code></pre></div><h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<p>With the math operations above, we're now changing the default type of syntax in a block. Where as before, the expanded version of where was:</p>
<p>(0.12.0)</p>
<div><pre><code>> ls | where { $it.size > 10kb }
</code></pre></div><p>(0.13.0)</p>
<div><pre><code>> ls | where { = $it.size > 10kb }
</code></pre></div><p>This is because blocks are now pipelines by default, so you need the extra <code>=</code> to switch into the math mode, which allows using the comparison operator <code>&gt;</code>.</p>
<p>You can also still use the shorthand versions of these comparisons:</p>
<div><pre><code>> ls | where size > 10kb
> ls | where $it.size > 10kb
</code></pre></div><h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>With 0.13.0, we've landed some important features that fill in gaps for using Nu as your daily driver, and we're excited to hear from our users. Looking forward, there's a lot of polish we'd like to put on these new features, including updating the book, cleaning up the code, writing more test cases, and fixing some of our bug backlog. This will also give us time to &quot;kick the tires&quot; on these new features as well, using them in our day-to-day work. We're currently planning for the following release to be more focused on &quot;polish&quot;. After this, of course, there are many more features to come!</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.14.0</title>
    <id>www.nushell.sh/blog/2020-05-12-nushell_0_14_0.html</id>
    <link href="www.nushell.sh/blog/2020-05-12-nushell_0_14_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-14-0" tabindex="-1"> Nushell 0.14.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>We're excited to release version 0.14.0 of Nu!</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.14.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.14.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="temporary-environment-variables-jonathandturner" tabindex="-1"> Temporary environment variables (jonathandturner)</h2>
<p>A feature requested by many, many folks is finally here. Up until now, to change an environment variable, you had to update the <code>config</code> settings, and then these changes would be permanent. This makes working with certain kinds of commands, which need some additional environment information, annoying to use.</p>
<p>With 0.14.0, you'll now be able to temporarily set an environment variable. To do so, you can use the new <code>with-env</code> command. This command takes the variable/value pair and the block to run once the environment is set:</p>
<div><pre><code>> with-env [DEBUG true] { command arg1 arg2 }
</code></pre></div><p>Bash, as well as many other shells, use a handy shorthand form, which we also now support. You can write the above as:</p>
<div><pre><code>> DEBUG=true command arg1 arg2
</code></pre></div><h2 id="starting-things-off-right-1ntegr8" tabindex="-1"> Starting things off right (1ntEgr8)</h2>
<p>Modern desktops have a way to associate file types with applications and often have a way to run that application automatically when you open a file of that type. In macOS, you can use the <code>open</code> command, <code>start</code> on Windows, and a variety of related <code>start</code> command in Linux.</p>
<p>In 0.14.0, we've added a unified <code>start</code> command that works across platforms that will run the associated application for a file type. For example, if you've associated your .py files with VSCode, you can edit them now using <code>start myfile.py</code>.</p>
<h2 id="nu-gets-a-calendar-josephtlyons" tabindex="-1"> Nu gets a calendar (JosephTLyons)</h2>
<p>A fun surprise for this release is the recently-added <code>cal</code> command, which will give you a calendar in table form.</p>
<div><pre><code>> cal
───┬────────┬────────┬─────────┬───────────┬──────────┬────────┬──────────
 # │ sunday │ monday │ tuesday │ wednesday │ thursday │ friday │ saturday
───┼────────┼────────┼─────────┼───────────┼──────────┼────────┼──────────
 0 │        │        │         │           │          │      1 │        2
 1 │      3 │      4 │       5 │         6 │        7 │      8 │        9
 2 │     10 │     11 │      12 │        13 │       14 │     15 │       16
 3 │     17 │     18 │      19 │        20 │       21 │     22 │       23
 4 │     24 │     25 │      26 │        27 │       28 │     29 │       30
 5 │     31 │        │         │           │          │        │
───┴────────┴────────┴─────────┴───────────┴──────────┴────────┴──────────
</code></pre></div><p>You can pass in flags to give you additional columns for the year, month, and even get calendars from the past or future.</p>
<h2 id="commands-get-some-helpful-examples-elichai" tabindex="-1"> Commands get some helpful examples (elichai)</h2>
<p>A last minute update also gave us a big improvement in our built-in help. Starting with 0.14, we'll now have examples as part of the help commands can use:</p>
<p><img src="@source/assets/images/0_14_0_help_examples.png" alt="image of new command help with colored example"></p>
<p>We're working to add examples to all commands. If that's something you're interested in helping with, come join us on <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>.</p>
<h2 id="subcommands-jonathandturner" tabindex="-1"> Subcommands (jonathandturner)</h2>
<p>As we fill out more forms of commands that Nu can represent, one type that we weren't able to do was subcommands. This meant all of our commands were at the top level, making it more difficult to find what you needed. Additionally, many external commands use subcommands, which meant we had no way to effectively wrap them in Nu.</p>
<p>With 0.14, you can now define subcommands. Subcommands each get a unique signature which has its own coloring, autocomplete, etc.</p>
<div><pre><code>> open myfile.txt | from csv --headerless
</code></pre></div><h2 id="breaking-changes-renaming-some-commands-jonathandturner-andrasio" tabindex="-1"> Breaking changes: renaming some commands (jonathandturner, andrasio)</h2>
<p>You may have noticed above that the <code>from-csv</code> is now <code>from csv</code>, that is, the <code>csv</code> part is now a subcommand of the <code>from</code> command. We've moved all <code>from-*</code> and <code>to-*</code> commands to be subcommands. This change was requested by users as part of an effort to streamline how conversion commands work.</p>
<p>Another set of changes requested by users was to update the names of some of the commands to the more common forms:</p>
<ul>
<li><code>pick</code> is now <code>select</code>. This matches more closely with SQL, LINQ, and shells with similar functionality.</li>
<li><code>edit</code> is now <code>update</code></li>
</ul>
<p>While we are cautious to take breaking changes, we're confident - judging from user feedback - that these changes make Nu more ergonomic and easier to learn.</p>
<h2 id="ls-learns-read-directory-sizes-josephtlyons" tabindex="-1"> <code>ls</code> learns read directory sizes (JosephTLyons)</h2>
<p>A few users have wondered why Nu doesn't print the full directory size as part of <code>ls</code>. With 0.14, you'll now be able to get just that with the new <code>--du</code> argument to <code>ls</code>. Note: this isn't enabled by default as calculating the directory size can take quite a lot of processing.</p>
<h2 id="startup-speedups-fdncred" tabindex="-1"> Startup speedups (fdncred)</h2>
<p>It's important to make a good first impression, and with this release Nu gets a speed boost for the initial startup. It will now load plugins in parallel rather than one after another. In some cases, this can lead to startups 3x-4x faster than previous versions.</p>
<h2 id="auto-cd-speedups-quebin31" tabindex="-1"> Auto-cd speedups (quebin31)</h2>
<p>We've also gotten a boost when using the automatic change directory. You'll notice that 0.14 is a lot snappier when you type a directory to automatically jump to.</p>
<h2 id="lots-of-new-commands" tabindex="-1"> Lots of new commands</h2>
<ul>
<li><code>from eml</code> (aeshirey) - have lots of saved emails lying around and want to process them? With 0.14, you can now easily load them into Nu</li>
<li><code>empty?</code> (andrasio) - you can now check multiple columns for emptiness, and if empty, give them a value</li>
<li><code>skip-until</code>, <code>keep-while</code>, <code>keep-until</code> (andrasio) - similar to <code>skip-while</code>, you can optionally <code>skip</code> or <code>keep</code> rows if they meet a condition or until they meet a condition</li>
<li><code>merge</code> (andrasio) - ever have two related tables and wish you could merge them into one? The new <code>merge</code> command can help you do that</li>
<li><code>not-in:</code> operator (jonathandturner) - going along with the <code>in:</code> operator is the new <code>not-in:</code>, which checks that a value isn't in the given list</li>
</ul>
<h2 id="it-expansion-jonathandturner-thegedge" tabindex="-1"> It-expansion (jonathandturner, thegedge)</h2>
<p>We've streamlined how <code>$it</code> is handled. The <code>$it</code> variable has always implied iteration (<code>$it</code> gets the name from iteration, item, and being &quot;it&quot;). In 0.14, we've made this more explicit with an expansion that happens inside of Nu.</p>
<p>Now, with Nu sees an <code>$it</code>, it expands it to a full <code>each</code> call.</p>
<div><pre><code>> ls | echo $it.name
</code></pre></div><p>Internally, now expands to:</p>
<div><pre><code>> ls | each { echo $it.name }
</code></pre></div><p>This helps us be more uniform about when iteration will happen. We've also updated how externals are handled so they can take advantage of this, making them work a lot more closely with how internals work.</p>
<h2 id="doc-and-book-updates-nespera-jonathandturner-fdncred-jzaefferer-siedentop" tabindex="-1"> Doc and book updates (nespera, jonathandturner, fdncred, jzaefferer, siedentop)</h2>
<p>We're continuing to fill out help information on each of the commands. This release adds a few more to the list of documented commands.</p>
<p>The <a href="https://www.nushell.sh/book/" target="_blank" rel="noopener noreferrer">book</a> has also gone through a big revision to bring it up-to-date with the 0.14 release. We've also added tables to help you transition from Bash, PowerShell, SQL, and LINQ. A big thanks to our contributors to help find and fix issues. There's more work to do here. If you're writing-inclined, come join us!</p>
<h2 id="bugfixes-and-polish-quebin31-burniintree-avandesa-pka-homburg-rimathia-thegedge-jonathandturner-mhmdanas-jesterornot" tabindex="-1"> Bugfixes and polish (quebin31, BurNiinTree, avandesa, pka, homburg, rimathia, thegedge, jonathandturner, mhmdanas, JesterOrNot)</h2>
<p>Lots of bugfixes and polish for this release. A big &quot;thanks!&quot; to everyone that joined in and filed bugs, fixed bugs, and gave feedback on discord, github, and twitter.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've got lots of fun things planned for upcoming releases: more intelligent autocomplete, autocomplete for popular external commands, and more streamlining of the engine itself.</p>
<p>If you'd like to help out by writing code, writing docs, helping with the website, or just have an idea, come join us on <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> or <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">github</a>. We'd love to hear from you!</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.15.0</title>
    <id>www.nushell.sh/blog/2020-06-09-nushell_0_15_0.html</id>
    <link href="www.nushell.sh/blog/2020-06-09-nushell_0_15_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-15-0" tabindex="-1"> Nushell 0.15.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.15 of Nu - and it has a few last-minute surprises we hope you'll find as much fun as we do.</p>
<p>As many of you know, this release was delayed as part of a wide-spread effort to elevate Black voices and raise awareness of police violence, a movement which has now grown worldwide. We encourage you to take time to understand what this movement stands for, why it's happening, and to get involved where you can.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.15.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.15.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="per-directory-environment-variables-samhedin" tabindex="-1"> Per-directory environment variables (samhedin)</h2>
<p>Right before the announcement of 0.15, we had a surprise feature land - per-directory environment variables. This allows you to configure some environment variables specific to the directory (including subdirectories) that you're currently in, and Nu will set these environment variables as you <code>cd</code> into the directory and unset them as you <code>cd</code> out.</p>
<p>How it works:</p>
<p>In your config, create a new config setting called <code>nu_env_dirs</code> and set it to a list of directories you want to allow to control their own environments:</p>
<div><pre><code>> config --set [nu_env_dirs ["/home/sam", "/home/sam/github", "/home/sam/github/test"]
</code></pre></div><p>Note: after setting the above config settings, restart Nu so that they can be picked up.</p>
<p>Once set, you can now create a <code>.nu-env</code> file in the directory that you want to control the environment in:</p>
<div><pre><code>> open .nu-env
[env]
var = "value"
anothervar = "anothervalue"
</code></pre></div><p>With this file in place, you can <code>cd</code> into one of the directories you've configured and see the new environment variables now available.</p>
<h2 id="improvements-to-auto-complete-aaronc81" tabindex="-1"> Improvements to auto-complete (AaronC81)</h2>
<p>Starting with 0.15, you can now get autocompletions for external commands in your PATH.</p>
<p>Additionally, auto-completing a filepath with a space now is handled with cleaner logic than in previous versions.</p>
<h2 id="argument-invocation-jonathandturner-cjpearce" tabindex="-1"> Argument invocation (jonathandturner, cjpearce)</h2>
<p>You're now able to run a pipeline inside of another command as an argument, and then use the results that come out.</p>
<div><pre><code>> echo $(ls | where size > 10kb | count)
3
</code></pre></div><h2 id="string-interpolation-jonathandturner" tabindex="-1"> String interpolation (jonathandturner)</h2>
<p>We also support string interpolation, or building a string from text and running commands. For example, if we wanted to print out the current path to the history file with a message, we could do:</p>
<p>{% raw %}</p>
<div><pre><code>> echo `My current history path is {{$nu.history-path}}`
My current history path is /home/jonathant/.local/share/nu/history.txt
</code></pre></div><p>{% endraw %}</p>
<h2 id="prettier-errors-jonathandturner-brendanzab" tabindex="-1"> Prettier errors (jonathandturner, brendanzab)</h2>
<p>We've switched from language-reporting to codespan, giving us nicer looking errors:</p>
<p><img src="@source/assets/images/0_15_0_prettier_errors.png" alt="image of a prettier error message"></p>
<h2 id="big-history-by-default-aeosynth-lightclient" tabindex="-1"> Big history by default (aeosynth, lightclient)</h2>
<p>Let's start with 100k line history. You can also configure the history size using the new &quot;history_size&quot; config setting.</p>
<h2 id="command-updates" tabindex="-1"> Command updates</h2>
<h3 id="alias-now-has-a-save-flag-to-save-the-alias-to-your-config-startup-1ntegr8" tabindex="-1"> <code>alias</code> now has a <code>--save</code> flag to save the alias to your config startup (1ntEgr8)</h3>
<p>Ever have an alias you wanted to save but then had to look up all the steps to do so? Haven't we all.</p>
<p>With 0.15, it's easy to save an alias you like by using the <code>--save</code> flag.</p>
<h3 id="add-str-to-decimal-k-brk-routrohan" tabindex="-1"> Add <code>str to-decimal</code> (k-brk, routrohan)</h3>
<p>You can now easily parse decimal (sometimes called real or floating point numbers) using the new <code>str</code> subcommand.</p>
<h3 id="fetch-now-can-take-username-password-he4d" tabindex="-1"> <code>fetch</code> now can take username/password (he4d)</h3>
<p>Like its counterpart <code>post</code>, <code>fetch</code> can now accept a username/password to login to fetch URL contents.</p>
<h3 id="average-now-works-over-tables-andrasio" tabindex="-1"> <code>average</code> now works over tables (andrasio)</h3>
<p>In addition to using <code>average</code> on a column, you can now run it over a whole table.</p>
<h3 id="start-now-supports-glob-paths-arashout" tabindex="-1"> <code>start</code> now supports glob paths (arashout)</h3>
<p>You can now pass multiple values to <code>start</code> at one time using the new glob support.</p>
<div><pre><code>> start file*.rs
</code></pre></div><h3 id="plugins-no-longer-scan-whole-path-jonathandturner-fdncred" tabindex="-1"> Plugins no longer scan whole PATH (jonathandturner, fdncred)</h3>
<p>As we looking into startup times, we saw that scanning the whole PATH for plugins is quite costly. Even more, few people had used the feature to put plugins in a different directory than the <code>nu</code> application itself.</p>
<p>With 0.15, by default we will only look in the directory of the <code>nu</code> application. You can still manually store your plugins elsewhere by adding directories to the new &quot;plugin_dirs&quot; config setting.</p>
<h3 id="echo-now-will-iterate-over-a-range-jonathandturner" tabindex="-1"> <code>echo</code> now will iterate over a range (jonathandturner)</h3>
<div><pre><code>> echo 1..3
───┬───
 0 │ 1
 1 │ 2
 2 │ 3
───┴───
</code></pre></div><h3 id="where-command-speedups-jonathandturner" tabindex="-1"> <code>where</code> command speedups (jonathandturner)</h3>
<p>We did some work to optimize how command blocks are executed, which helps to speed up <code>where</code> quite a bit for long running queries.</p>
<h3 id="du-can-now-be-canceled-with-ctrl-c-josephtlyons" tabindex="-1"> <code>du</code> can now be canceled with ctrl-c (JosephTLyons)</h3>
<p>For those long-running <code>du</code> runs that you want to stop short, you can now use <code>ctrl-c</code> to exit back to Nu.</p>
<h3 id="with-env-shorthand-now-works-with-quoted-strings-as-well-k-brk" tabindex="-1"> <code>with-env</code> shorthand now works with quoted strings as well (k-brk)</h3>
<p>Now support: passing a string as a value in environment shorthands:</p>
<div><pre><code>> FOO="My Bar" command arg1 arg2
</code></pre></div><h3 id="add-config-option-for-rm-always-trash-filalex77" tabindex="-1"> Add config option for &quot;rm_always_trash&quot; (filalex77)</h3>
<p>If you'd prefer to always <code>rm</code> to the recycle bin instead of permanently deleting, you can enable the new &quot;rm_always_trash&quot; config setting.</p>
<h3 id="parse-now-also-takes-a-regex-flag-filalex77" tabindex="-1"> <code>parse</code> now also takes a <code>--regex</code> flag (filalex77)</h3>
<p>For when you need to do a bit more serious parsing work, you can now use regex from inside of the <code>parse</code> command.</p>
<h3 id="various-improvements-to-auto-pivot-fdncred-samboy218" tabindex="-1"> Various improvements to auto-pivot (fdncred, Samboy218)</h3>
<p>Previously, we always auto-pivoted the single row. Now, you can configure whether or not you want the row to pivot before it's displayed, including a new heuristic mode that will attempt to only pivot the row if necessary.</p>
<h3 id="histogram-now-has-a-count-josephtlyons" tabindex="-1"> <code>histogram</code> now has a count (JosephTLyons)</h3>
<p>You'll now be able to see the count of each of the rows in the histogram.</p>
<h3 id="format-can-now-access-variables-as-well-as-column-names-jonathandturner" tabindex="-1"> <code>format</code> can now access variables as well as column names (jonathandturner)</h3>
<p>Previously, <code>format</code> would only allow you to pass in column names. This meant that also printing a variable's value was a bit convoluted. With 0.15, you can pass in either a column name, or a variable (including a full variable path like <code>$nu.history-path</code>)</p>
<h3 id="to-json-now-has-pretty-printing-support-josephtlyons" tabindex="-1"> <code>to json</code> now has pretty printing support (JosephTLyons)</h3>
<p>You can now get <code>to json</code> to give you pretty-printed output, using the new <code>--pretty &lt;indent size&gt;</code> flag.</p>
<div><pre><code>> echo $nu | to json --pretty 2
</code></pre></div><h3 id="consumers-of-nu-cli-can-now-register-custom-commands-daschl" tabindex="-1"> Consumers of <code>nu-cli</code> can now register custom commands (daschl)</h3>
<p>If you're building applications and want to use <code>nu</code> as a library instead of directly as a cli, it's now possible to pass in your own set of custom commands that Nu will enable as internal commands.</p>
<h2 id="doc-and-book-updates" tabindex="-1"> Doc and book updates</h2>
<p>Contributor &quot;zombie110year&quot; has been working on translating the book to Simplified Chinese. If you'd like to help, let us know!</p>
<p>Also thanks to mhmdanas, andrasio, shiena, q-b, jzaefferer, Samboy218, ryepesg, 0xABAD, sseering, hilias, Dimagog, and fdncred for contributing to the book and continuing to help make it better.</p>
<h2 id="bugfixes-and-polish-daschl-josephtlyons-utam0k-arashout-andrasio-fdncred-johnae-jonathandturner-thegedge-shaaraddalvi-notryanb-emnudge-kelli314-coolshaurya-johnterickson-klnusbaum-adminxvii-delapouite-hdhoang" tabindex="-1"> Bugfixes and polish (daschl, JosephTLyons, utam0k, arashout, andrasio, fdncred, johnae, jonathandturner, thegedge, shaaraddalvi, notryanb, EmNudge, Kelli314, coolshaurya, johnterickson, klnusbaum, AdminXVII, Delapouite, hdhoang)</h2>
<p>There are <em>far</em> too many improvements and bugfixes to list here, but another <em>huge</em> thank you to everyone who has helped fix an issue, report an issue, chatted with us on twitter and discord, and just shared your love for Nu with others.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>With 0.15, we've closed another set of gaps in what people need in a shell. We're looking to continue improving completions, as well as growing the parser to support Nu scripts not just line-by-line, but as whole source files. We're also working on improving jupyter support, file encoding for better support across languages, and more.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.16.0</title>
    <id>www.nushell.sh/blog/2020-06-30-nushell_0_16_0.html</id>
    <link href="www.nushell.sh/blog/2020-06-30-nushell_0_16_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-16-0" tabindex="-1"> Nushell 0.16.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.16 of Nu</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.16.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.16.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-automated-release-binaries-charlespierce-fdncred-jonathandturner" tabindex="-1"> New automated release binaries (charlespierce, fdncred, jonathandturner)</h2>
<p>Up to this point, we've hand-rolled all the binary releases. The process has been time-consuming and error-prone. Starting with 0.16.0, we'll be releasing using the GitHub release automation. The first benefits you'll see is that we've also added a wix-based installer for Windows users. The second, perhaps harder to see, benefit is a more relaxed release process that's easier on the project maintainers 😃</p>
<p>Please note: as part of this, we took the opportunity to also align the directory structure across platforms. Apologies in advance for any inconvenience this might cause.</p>
<h2 id="new-textview-fdncred" tabindex="-1"> New textview (fdncred)</h2>
<p>We've had a few requests for an improved text viewing experience, so with 0.16.0 we're trying out a new viewer based on the <a href="https://crates.io/crates/bat" target="_blank" rel="noopener noreferrer">bat</a> crate. We also support quite a lot of <a href="https://github.com/nushell/nushell/pull/2010" target="_blank" rel="noopener noreferrer">configuration settings</a> for this new text viewer.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="let-s-get-random-josephtlyons" tabindex="-1"> Let's get <code>random</code> (JosephTLyons)</h3>
<p>We have a new top-level command: <code>random</code>. To start, there are three sub-commands:</p>
<ul>
<li><code>random uuid</code> - generate random UUIDs</li>
<li><code>random bool</code> - a random &quot;coin flip&quot; with optional bias</li>
<li><code>random dice</code> - roll a single or a set of dice, optionally setting the number of sides and number of dices</li>
</ul>
<h3 id="more-math-josephtlyons-arashout-andrasio-amousa11" tabindex="-1"> More <code>math</code> (JosephTLyons, arashout, andrasio, amousa11)</h3>
<p>We've consolidated and added to our math operations. Now available as part of the 0.16.0 release:</p>
<ul>
<li><code>math avg</code> - averages a list of numbers</li>
<li><code>math sum</code> - totals a list of numbers</li>
<li><code>math mode</code> - gets the mode of a list of numbers</li>
<li><code>math median</code> - gets the median of a list of numbers</li>
<li><code>math min</code> - gets the minimum value of a list of numbers</li>
<li><code>math max</code> - gets the maximum value of a list of numbers</li>
</ul>
<h3 id="other-commands" tabindex="-1"> Other commands</h3>
<ul>
<li><a href="https://github.com/nushell/nushell/pull/1992" target="_blank" rel="noopener noreferrer"><code>every</code></a> - lets you skip every n-rows (kubouch)</li>
<li><code>ansi</code> - lets you output ANSI color codes to color your strings (jonathandturner, fdncred)</li>
<li><code>char</code> - makes it possible to output newlines and tabs (jonathandturner)</li>
<li><code>do</code> - runs a block to completion, optionally ignoring errors (jonathandturner)</li>
</ul>
<h2 id="custom-prompts-jonathandturner" tabindex="-1"> Custom prompts (jonathandturner)</h2>
<p>You can now run a pipeline which returns a string, or list of strings, that is used to create a custom prompt. To do so, set the pipeline you want to use in the config for the <code>prompt</code> setting.</p>
<p>A simple example:</p>
<div><pre><code>> config --set [prompt "echo '> '"]
</code></pre></div><p>We've also added a new <code>ansi</code> command to let you change the color. Let's use it to change the prompt to blue:</p>
<div><pre><code>> config --set [prompt "echo $(ansi blue) '> '"]
</code></pre></div><p>You can make the prompt even fancier. For example, this prompt prints the current directory, git branch, and current date and time:</p>
<div><pre><code>> config --set [prompt 'echo [ $(ansi green) $(pwd) $(ansi reset) $(do -i {git rev-parse --abbrev-ref HEAD } | trim | echo [ "(" $(ansi blue) $it $(ansi reset) ")" ] | str collect) $(char newline) $(ansi cyan) $(date --format "%d/%m/%Y %H:%M:%S").formatted $(ansi reset) "> " ]']
</code></pre></div><p><img src="@source/assets/images/0_16_0_prompt_3.png" alt="image of full prompt"></p>
<p><em>Example of full prompt</em></p>
<p>Or update your prompt to show an abbreviated path:</p>
<div><pre><code>> config --set [prompt 'echo [ $(ansi green) $(pwd | split row "/" | first $(pwd | split row "/" | count | = $it - 1 ) | each { str substring "0,1" | format "{$it}/" } | append $(pwd | split row "/" | last ) | str collect) $(do -i { git rev-parse --abbrev-ref HEAD | trim | echo $(ansi reset) "(" $(ansi blue) $it $(ansi reset) ")" | str collect }) $(ansi reset) "> "]']
</code></pre></div><p>(note: the above assumes Unix-based systems, so on Windows use &quot;&quot; as the path separator))</p>
<p><img src="@source/assets/images/0_16_0_prompt_4.png" alt="image of abbreviated prompt"></p>
<p><em>Example of abbreviated prompt</em></p>
<h2 id="rfc-process-jzaefferer" tabindex="-1"> RFC process (jzaefferer)</h2>
<p>We now have an <a href="https://github.com/nushell/rfcs" target="_blank" rel="noopener noreferrer">RFC process</a> if you want to propose new features and breaking changes to Nu. Come let us know what you think and share your vision with us.</p>
<h2 id="starship-becomes-optional-fdncred" tabindex="-1"> Starship becomes optional (fdncred)</h2>
<p>We've made enabling starship a configuration option, rather than always being on. This allows you to opt-in, if you'd like the starship experience, but removes the requirement that you have to know to build without starship if you'd rather not have it (which may not be possible if you're using binary releases).</p>
<p>To enable starship, set the <code>use_starship</code> setting:</p>
<div><pre><code>> config --set [use_starship $true]
</code></pre></div><h2 id="new-table-drawing-jonathandturner" tabindex="-1"> New table drawing (jonathandturner)</h2>
<p>With 0.16.0, we now use a new table drawing algorithm. Here's the before and after for comparison:</p>
<p><img src="@source/assets/images/0_16_0_before_table.png" alt="image of a table before"></p>
<p><em>Table drawn with 0.15.0</em></p>
<p><img src="@source/assets/images/0_16_0_after_table.png" alt="image of a table before"></p>
<p><em>Table drawn with 0.16.0</em></p>
<p>If you're struggling to see much difference, that's a good thing! Where you'll really see the difference is in the time it takes to draw these tables:</p>
<p><img src="@source/assets/images/0_16_0_rendering_time.png" alt="image of a table before"></p>
<p><em>0.16.0 renders tables 40% faster than 0.15.0</em></p>
<h2 id="simplified-chinese-nu-book-zombie110year" tabindex="-1"> Simplified Chinese Nu book (zombie110year)</h2>
<p>Over the past few weeks we've seen steady progress on the Simplified Chinese translation of the Nu book. With this release, another set of translated chapters were added.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><code>to toml</code> now properly disallows incorrect top-level values (arashout)</li>
<li><code>mkdir</code> can now optionally show the names of directories created (utam0k)</li>
<li><code>uniq</code> can now optional provide the counts of each value in the result (siedentop)</li>
<li><code>cal</code> will now allow you to configure the start day of the week (JosephTLyons)</li>
<li>Division by zero is now an error that's caught and shown to the user (bailey-layzer)</li>
<li><code>date</code> can now output formatted datetime strings (fdncred)</li>
<li>Docs added for autoview, touch, and pwd (orientnab)</li>
<li>New <code>str collect</code> allows you to join a list of strings into a single string (jonathandturner)</li>
<li>Wix build support (fdncred)</li>
<li>Fixes for running external commands using the new Windows links feature (fdncred)</li>
<li><code>open</code> can now optionally take an encoding (fdncred)</li>
<li>The <code>config</code> settings file can now be readonly (jonathandturner)</li>
</ul>
<h2 id="internal-improvements" tabindex="-1"> Internal improvements</h2>
<ul>
<li>Replaced use of <code>async_stream</code> macro with creating async streams directly (JosephTLyons, jonathandturner)</li>
<li>Fixes to the <code>ps</code> process time algorithm (svartalf)</li>
<li>Interruptible stream API is now public (daschl)</li>
<li>We now test Windows drive changing during our CI tests (HiranmayaGundu)</li>
<li>Errors are now bubbled up earlier when possible (jonathandturner)</li>
<li>Config loading no longer panics if it doesn't succeed (jonathandturner)</li>
<li>Clean up and formatting of our docs (JosephTLyons)</li>
<li>Optimization work to not clone in some places (utam0k)</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We are looking into a few areas for the next release: further improving our per-directory environments, improving compile times, continuing to do code cleanup and pay down tech debt, and possibly more.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.17.0</title>
    <id>www.nushell.sh/blog/2020-07-21-nushell_0_17_0.html</id>
    <link href="www.nushell.sh/blog/2020-07-21-nushell_0_17_0.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-17-0" tabindex="-1"> Nushell 0.17.0</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.17 of Nu, the first Nu to include WebAssembly, custom keybindings, and much more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.17.0 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.17.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="webassembly-support-jonathandturner-and-upcoming-wasm-based-playground-jzaefferer-jonathandturner" tabindex="-1"> WebAssembly support (jonathandturner) and upcoming wasm-based playground (jzaefferer, jonathandturner)</h2>
<p><img src="@source/assets/images/0_17_0_playground.png" alt="image of a wasm-based Nushell playground"></p>
<p><em>Nu, now in your browser</em></p>
<p>As part of on-going cleanup and portability work, with 0.17 it's now possible to build Nu and target WebAssembly, allowing you to run Nu in the browser and call into it from JavaScript. This is the first (experimental!) step in building towards an interactive playground and possibly more. We're hoping to talk more about this porting process in the coming days.</p>
<p>If you'd like to see what we're building, <a href="https://www.nushell.sh/demo/" target="_blank" rel="noopener noreferrer">check it out</a>.</p>
<h2 id="custom-keybindings-jonathandturner" tabindex="-1"> Custom keybindings (jonathandturner)</h2>
<p>Nushell now also supports custom keybindings. To configure your keybindings, you can add a keybindings.yml file beside your config file. You can find out the location for your system using:</p>
<div><pre><code>> echo $nu.keybinding-path
/home/jonathan/.config/nu/keybindings.yml
</code></pre></div><p>You can base your custom file off this <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/keybindings.yml" target="_blank" rel="noopener noreferrer">example keybindings file</a>.</p>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="benchmark-pag4k" tabindex="-1"> <code>benchmark</code> (pag4k)</h3>
<p>The new <code>benchmark</code> command will time a block and output the length of time it took to run:</p>
<div><pre><code>> benchmark { echo "hello" }
363us 528ns
</code></pre></div><h3 id="str-reverse-josephtlyons" tabindex="-1"> <code>str reverse</code> (JosephTLyons)</h3>
<p>The <code>str reverse</code> command will reverse the characters of a string:</p>
<div><pre><code>> echo "hello world" | str reverse
dlrow olleh
</code></pre></div><h3 id="str-length-jonathandturner" tabindex="-1"> <code>str length</code> (jonathandturner)</h3>
<p>On a related note, you can now also get the length of a string.</p>
<div><pre><code>> echo "hello world" | str length
11
</code></pre></div><h3 id="str-from-bailey-layzer" tabindex="-1"> <code>str from</code> (bailey-layzer)</h3>
<p>In previous versions of Nu, it was difficult to format numbers for precision and digit grouping. Starting with 0.17, there's now a new <code>str from</code> subcommand to help with this.</p>
<div><pre><code>> echo 1.456123 | str from --decimals 2
1.46

> echo 1234567 | str from --group-digits
1,234,567
</code></pre></div><h3 id="math-stddev-and-math-variance-amousa11" tabindex="-1"> <code>math stddev</code> and <code>math variance</code> (amousa11)</h3>
<p>You can now calculate standard deviation and variance in your numeric datasets:</p>
<div><pre><code>> echo [ 1 2 3 4 5 ] | math stddev
1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573

> echo [ 1 2 3 4 5 ] | math variance
2
</code></pre></div><h3 id="if-jonathandturner" tabindex="-1"> <code>if</code> (jonathandturner)</h3>
<p>Ever want to run one block if a condition was true and another if the condition was false? Now you can!</p>
<div><pre><code>> echo 0..5 | if $it > 3 { echo big } { echo small }
───┬───────
 0 │ small
 1 │ small
 2 │ small
 3 │ small
 4 │ big
 5 │ big
───┴───────
</code></pre></div><p>The keen observer might notice we're stealthly sneaking in more commands you might use in future scripting.</p>
<h3 id="split-chars-jonathandturner" tabindex="-1"> <code>split chars</code> (jonathandturner)</h3>
<p>To more easily work with the characters in a string, you can now split the characters into separate items:</p>
<div><pre><code>> echo "hello" | split chars
───┬───
 0 │ h
 1 │ e
 2 │ l
 3 │ l
 4 │ o
───┴───
</code></pre></div><h3 id="move-column-andrasio" tabindex="-1"> <code>move column</code> (andrasio)</h3>
<p>Finally, you can now move columns in your table:</p>
<div><pre><code>> ls
───┬──────────────────────────────────┬──────┬─────────┬────────────
 # │ name                             │ type │ size    │ modified
───┼──────────────────────────────────┼──────┼─────────┼────────────
 0 │ 0.bootstrap.js                   │ File │ 30.9 KB │ 1 hour ago
 1 │ 46a44c28f12d33243854.module.wasm │ File │  5.4 MB │ 1 hour ago
 2 │ bootstrap.js                     │ File │ 16.3 KB │ 1 hour ago
 3 │ index.html                       │ File │  1.4 KB │ 1 hour ago
───┴──────────────────────────────────┴──────┴─────────┴────────────

> ls | move column size --before type
───┬──────────────────────────────────┬─────────┬──────┬────────────
 # │ name                             │ size    │ type │ modified
───┼──────────────────────────────────┼─────────┼──────┼────────────
 0 │ 0.bootstrap.js                   │ 30.9 KB │ File │ 1 hour ago
 1 │ 46a44c28f12d33243854.module.wasm │  5.4 MB │ File │ 1 hour ago
 2 │ bootstrap.js                     │ 16.3 KB │ File │ 1 hour ago
 3 │ index.html                       │  1.4 KB │ File │ 1 hour ago
───┴──────────────────────────────────┴─────────┴──────┴────────────
</code></pre></div><h2 id="early-draft-of-a-new-website-pontaoski" tabindex="-1"> Early draft of a new website (pontaoski)</h2>
<p>We're working on a refresh of our website. If you're interested in giving it a look, we've got an <a href="https://github.com/nushell/website_exploration" target="_blank" rel="noopener noreferrer">early draft started</a>. If you'd like to help us with the design, reach out over github or discord.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><code>sort-by</code> can now sort with case-insensitivity (JosephTLyons)</li>
<li><code>alias</code> of externals should now be improved (bailey-layzer)</li>
<li><code>history</code> should be able to correctly store more than 100 rows now (fdncred)</li>
<li><code>to html</code> will now output pretty hex when given a binary it doesn't recognize (jonathandturner), and now has color themes (fdncred)</li>
<li><code>uniq</code> can now also work with simple values (k-brk)</li>
<li>Completions now have their own abstraction, so we can more easily improve them in the future (thegedge)</li>
<li><code>table</code> now prints column numbers a bit more orderly way (Porges)</li>
<li><code>str</code> made parsing more strict, to let the user know if there were parsing errors (andrasio)</li>
<li><code>group-by</code> can now take a block that allows for deep keying for grouping (andrasio)</li>
<li>autoenv (directory-specific environments) can now run commands on entry/exit (samhedin)</li>
<li><code>str trim</code> can now take an optional character to trim (bailey-layzer)</li>
<li>duration pretty-print is now easier to read (jonathandturner), durations are also now stored as nanoseconds internally (pag4k)</li>
<li><code>str substring</code> supports more argument types now (andrasio)</li>
<li>completions for filepaths should now work in more cases (almindor)</li>
<li><code>rm</code> now gives nicer output (arashout)</li>
<li><code>ls -f</code> will now do a better job of keeping the tables aligned (arashout)</li>
<li>general parser improvements (philip-peterson, jonathandturner)</li>
<li><code>each</code> can now number the outputs it creates, allowing for enumeration (jonathandturner)</li>
</ul>
<h2 id="bug-fixes-tests-and-more-philip-peterson-josephtlyons-u5surf-thegedge-arashout-jonathandturner" tabindex="-1"> Bug fixes, tests and more (philip-peterson, JosephTLyons, u5surf, thegedge, arashout, jonathandturner)</h2>
<p>Parsing now has more test coverage. Internal code cleanups. Command description copy paste issues fixed. Ensure that the MaybeTextCodec gets properly cleared. Fix documentation to renamed subcommands and <code>str to-int</code>. Internally more commands were moved to process their streams lazily. We can now generate documentation from reading the built-in docs on each command.</p>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<h3 id="bson-and-sqlite-move-to-plugins-jonathandturner" tabindex="-1"> BSON and Sqlite move to plugins (jonathandturner)</h3>
<p>As part of the portability work, we've moved the <code>from bson</code>, <code>to bson</code>, <code>from sqlite</code> and <code>to sqlite</code> out of internal commands and into plugins. The functionality should remain largely unchanged, with the only difference being that you'll need to install these plugins for this functionality.</p>
<h3 id="command-renames" tabindex="-1"> Command renames</h3>
<ul>
<li><code>calc</code> is now <code>math eval</code> to join the <code>math</code> subcommand family (coolshaurya)</li>
<li><code>keep-until</code> and <code>keep-while</code> are now subcommands: <code>keep until</code> and <code>keep while</code> (k-brk)</li>
<li><code>skip-while</code> and <code>skip-until</code> are also now subcommands: <code>skip while</code> and skip until (andrasio)</li>
<li><code>config</code> is now split into subcommands based on the command flag, eg) <code>config set</code>, <code>config get</code>, etc. (ritobanrc, jonathandturner)</li>
</ul>
<h2 id="looking-forward" tabindex="-1"> Looking forward</h2>
<p>Just when we think we'll slow down a little, we're surprised by the amount of community feedback and help. This release covered nearly 4(!) pages of pull requests. Not bad for three weeks for work!</p>
<p>There's some parser work coming up to help continue removing roadblocks to using Nu as a scripting language, improving completions, and generally continuing to polish Nu.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.18</title>
    <id>www.nushell.sh/blog/2020-08-11-nushell_0_18.html</id>
    <link href="www.nushell.sh/blog/2020-08-11-nushell_0_18.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-18" tabindex="-1"> Nushell 0.18</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.18 of Nu. The focus of this release was largely to polish what is already there, ensuring that internally parts work together better, are more consistent, and are easier to maintain. We've also added new commands for working with paths, URLs, strings, and lists.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.18 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.18.1" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<p><em>Please note:</em> as part of last minute changes, we had to bump the first release version of 0.18 to 0.18.1 instead of 0.18.0.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2292" target="_blank" rel="noopener noreferrer"><code>reduce</code> command</a> to reduce a list of values into a value (bailey-layzer)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2255" target="_blank" rel="noopener noreferrer"><code>path basename</code>, <code>path extension</code>, <code>path expand</code></a> for working with path values (mattyhall)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2264" target="_blank" rel="noopener noreferrer"><code>path type</code> and <code>path exists</code></a> for more path-related functionality (mattyhall)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2262" target="_blank" rel="noopener noreferrer"><code>str ltrim</code> and <code>str rtrim</code></a> to trim off left-hand and right-hand characters (k-brk)</li>
<li><strong>New:</strong> <a href="https://github.com/nushell/nushell/pull/2269" target="_blank" rel="noopener noreferrer"><code>str starts-with</code> and <code>str ends-with</code></a> to check if a string begins or ends with a given substring (k-brk)</li>
<li><strong>New:</strong> the <a href="https://github.com/nushell/nushell/pull/2274" target="_blank" rel="noopener noreferrer"><code>url</code> subcommands</a> for dealing with URLs (mattyhall)</li>
<li>The history file path is <a href="https://github.com/nushell/nushell/pull/2320" target="_blank" rel="noopener noreferrer">now configurable</a> (Amanita-muscaria)</li>
<li>The startup banner can now be <a href="https://github.com/nushell/nushell/pull/2314" target="_blank" rel="noopener noreferrer">turned off</a> (avranju)</li>
<li><code>version</code> now contains the <a href="https://github.com/nushell/nushell/pull/2333" target="_blank" rel="noopener noreferrer">features</a> that Nu was built with (andrasio)</li>
<li><code>math stddev</code> and <code>math variance</code> can now <a href="https://github.com/nushell/nushell/pull/2310" target="_blank" rel="noopener noreferrer">sample the input</a> (andrasio)</li>
<li><code>do -i</code> will also <a href="https://github.com/nushell/nushell/pull/2309" target="_blank" rel="noopener noreferrer">ignore stderr output</a> from external commands (jonathandturner)</li>
<li><code>to html</code> now has <a href="https://github.com/nushell/nushell/pull/2308" target="_blank" rel="noopener noreferrer">many themes to choose from</a> (fdncred)</li>
<li><code>to html</code> also now has <a href="https://github.com/nushell/nushell/pull/2273" target="_blank" rel="noopener noreferrer">list output</a> (coolshaurya)</li>
<li>More of the line editor settings are <a href="https://github.com/nushell/nushell/pull/2238" target="_blank" rel="noopener noreferrer">now configurable</a> (fdncred)</li>
<li><code>str to-datetime</code> can now <a href="https://github.com/nushell/nushell/pull/2303" target="_blank" rel="noopener noreferrer">parse many more date formats</a> (nmandery)</li>
<li><code>str collect</code> now optionally takes <a href="https://github.com/nushell/nushell/pull/2289" target="_blank" rel="noopener noreferrer">a separator value</a> (coolshaurya)</li>
<li><code>histogram</code> can now <a href="https://github.com/nushell/nushell/pull/2300" target="_blank" rel="noopener noreferrer">work with simple values</a> (andrasio)</li>
<li><code>ls -al</code> (and <code>ps -l</code>) are now the preferred way of getting a full listing (JosephTLyons)</li>
<li><code>insert</code> now <a href="https://github.com/nushell/nushell/pull/2265" target="_blank" rel="noopener noreferrer">takes a block</a> to do the work of inserting values (coolshaurya)</li>
</ul>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<p>The flags for --full in <code>ls</code> and <code>ps</code> has been changed to --long (-l) to better align with habits from other shells.</p>
<p>Line editor config settings have <a href="https://github.com/nushell/nushell/pull/2238" target="_blank" rel="noopener noreferrer">moved to their own section</a>.</p>
<h2 id="demo-site-jzaefferer-jonathandturner" tabindex="-1"> Demo site (jzaefferer, jonathandturner)</h2>
<p>There have been a number of improvements to the new wasm-based demo site, including new colors, command improvements, pivoting of long tables, and more.</p>
<h2 id="bugfixes-fdncred-kornelski-josephtlyons-andrasio-thegedge-jonathandturner-jzaefferer-warrenseine-coolshaurya" tabindex="-1"> Bugfixes (fdncred, kornelski, JosephTLyons, andrasio, thegedge, jonathandturner, jzaefferer, warrenseine, coolshaurya)</h2>
<p>Fixed issues with different types of symlinks on Windows, Nu will now used the support app_dirs crate, lots of internal match logic cleanup, internal representation of data summaries got a cleanup, getting ready to add a winget package, the first wave of parser cleanups ahead of future completion work, cleaned up unnecessary extra build steps, new command examples, improvements to the new <code>path</code> command errors, fixed histogram example, and consistency improvements.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We're nearly to the first birthday for Nu! In the near future, we'll continue to improve completions, work on a possible new <a href="https://github.com/nushell/rfcs/pull/3" target="_blank" rel="noopener noreferrer">data frames</a> implementation, continuing to push the wasm implementation futher, and more.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">One year of Nushell</title>
    <id>www.nushell.sh/blog/2020-08-23-year_of_nushell.html</id>
    <link href="www.nushell.sh/blog/2020-08-23-year_of_nushell.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="one-year-of-nushell" tabindex="-1"> One year of Nushell</h1>
<p>Hard to imagine that it's already been a year since Nu first went public. At the time, it was largely a demo of what could be possible, but still needed quite a bit of work to make it ready for everyday use. A year later and we've learned a lot, and made a few mistakes along the way. In this post, we look back over the year and see how we did and where we might be going in the future.</p>
<h1 id="history" tabindex="-1"> History</h1>
<p>When Nu first started, it started with a simple idea: the output of <code>ls</code>, <code>ps</code>, and <code>sysinfo</code> should all output the same thing. Taking a page from PowerShell, we explored outputting structured data and quickly settled on a table design that would support the output of each of the three commands, with the added ability of streaming the output as it became available.</p>
<p>Around this idea, we then built a set of &quot;filters&quot;, like the <code>where</code> clause, borrowed from SQL, and a growing set of data types we would support natively. Soon, we were able to write more complex statements like <code>ls | where size &gt; 10kb</code>. This became the crux of the idea - commands that output values from a core set of data types into a stream, composed together with the traditional UNIX pipe (<code>|</code>), so that you could build up a complex set of commands that work over the data as it streams through.</p>
<h1 id="nushell-today" tabindex="-1"> Nushell today</h1>
<h2 id="contributors" tabindex="-1"> Contributors</h2>
<p>Before we got started talking about Nushell today, we wanted to give a <em>big</em> &quot;thank you!&quot; to everyone who has contributed to Nu to get us to this point. Nu is what it is because of your help.</p>
<p>1ntEgr8, AaronC81, AdminXVII, aeosynth, aeshirey, aidanharris, almindor, Aloso, Amanita-muscaria, amousa11, andrasio, Andrew-Webb, arashout, arnaldo2792, avandesa, avranju, bailey-layzer, BatmanAoD, bndbsh, Bocom, boisgera, Borimino, BradyBromley, BurNiinTRee, Byron, candostdagdeviren, casidiablo, charlespierce, chhetripradeep, cjpearce, coolshaurya, cristicismas, DangerFunPants, daschl, daveremy, davidrobertmason, Delapouite, dependabot[bot], Detegr, devnought, Dimagog, djc, drmason13, DrSensor, elichai, eltonlaw, EmNudge, eoinkelly, equal-l2, est31, fdncred, filalex77, Flare576, gilesv, gorogoroumaru, GuillaumeGomez, hdhoang, he4d, hilias, HiranmayaGundu, hirschenberger, homburg, iamcodemaker, incrop, ineol, Jacobious52, jankoprowski, JCavallo, jdvr, jerodsanto, JesterOrNot, johnae, johnterickson, jonathandturner, JonnyWalker81, jonstodle, JosephTLyons, jzaefferer, k-brk, Kelli314, klnusbaum, kloun, kornelski, kubouch, kvrhdn, landaire, lesichkovm, LhKipp, lightclient, lincis, lord, luccasmmg, marcelocg, matsuu, mattclarke, mattyhall, max-sixty, mfarberbrodsky, mhmdanas, mike-morr, miller-time, mistydemeo, mlbright, mlh758, morrme, nalshihabi, naufraghi, nespera, neuronull, nickgerace, nmandery, notryanb, oknozor, orf, orientnab, oskarskog, oylenshpeegul, pag4k, Paradiesstaub, philip-peterson, piotrek-szczygiel, pizzafox, pka, pmeredit, pontaoski, Porges, pulpdrew, q-b, quebin31, rabisg0, ramonsnir, rimathia, ritobanrc, rnxpyke, romanlevin, routrohan, rrichardson, rtlechow, rutrum, ryuichi1208, Samboy218, samhedin, sandorex, sdfnz, sebastian-xyz, shaaraddalvi, shiena, siedentop, Sosthene-Guedon, Southclaws, svartalf, taiki-e, Tauheed-Elahee, tchak, thegedge, tim77, Tiwalun, twe4ked, twitu, u5surf, UltraWelfare, uma0317, utam0k, vsoch, vthriller, waldyrious, warrenseine, wycats, yaahc, yahsinhuangtw, yanganto, ymgyt, zombie110year</p>
<h1 id="what-is-nushell" tabindex="-1"> What is Nushell?</h1>
<p>Nushell is an interactive programming language for working with your files, your system, and your data as a shell, a notebook, and more.</p>
<h2 id="nu-is-more-than-a-shell" tabindex="-1"> Nu is more than a shell</h2>
<p>It's easy to think of Nushell as just a shell. It's even got 'shell' in the name. It's the first and probably main way you'll interact with it. So why say it's &quot;more than a shell&quot;?</p>
<p>In truth, Nushell is actually two things at once: Nu and Nushell. Nu is an interactive language for processing streams of structured data, data that you're probably getting from files, your system, a web address, etc.</p>
<p>So what's Nushell?</p>
<p>Nushell is taking the Nu language and putting it into a shell, and building around it a set of shell features to make it feel comfortable to use as a login shell. Completions, pretty error messages, and the like.</p>
<p>When we say that &quot;Nu is more than a shell&quot;, does that imply that Nu can be used in other places, too? Absolutely. We've got two more hosts that let you run Nu, a <a href="https://github.com/nushell/nu_jupyter" target="_blank" rel="noopener noreferrer">jupyter-based</a> host that lets you run Nu in jupyter notebooks, and a <a href="https://github.com/nushell/demo" target="_blank" rel="noopener noreferrer">WebAssembly-based</a> host that we use to create the <a href="https://www.nushell.sh/demo/" target="_blank" rel="noopener noreferrer">Nu playground</a></p>
<p>The idea of Nu runs deeper than just the shell, to being a language that's relatively easy to learn, yet powerful enough to do real work with your system, to process large amounts of data, to interactively let you iterate quickly on an idea, to invite exploration by building up a pipeline one piece at a time. There's really no shortage of ambition for where we hope to go.</p>
<h1 id="the-design-of-nu" tabindex="-1"> The design of Nu</h1>
<p>Nu's original design has proven surprisingly robust thus far. Some of its core ideas are continuing to pay dividends a year later. Let's look at the designs that still feel right.</p>
<h2 id="pipelines-are-infinite" tabindex="-1"> Pipelines are infinite</h2>
<p>When we first started writing Nu, we took a few shortcuts that had us processing all the data in a pipeline at once. Very quickly, we realize this wasn't going to work. External commands (think <code>cat /dev/random</code>) can output an infinite stream of data, and the system needs to be able to handle it. Understanding this, we transitioned to a different model: data flows between command as infinite streams of structured data. As the data is processed, we avoid collecting the data whenever possible to allow this streaming to happen.</p>
<p>Because the streams can be infinite, even the printing out of tables is done a batch at a time.</p>
<h2 id="separating-viewing-data-from-the-data-itself" tabindex="-1"> Separating viewing data from the data itself</h2>
<p>Coming from other shells, the idea of running <code>echo</code> or <code>ls</code> goes hand-in-hand with printing something to the terminal. It's difficult to see that there two steps going on behind the scenes: creating the information and then displaying it to the screen.</p>
<p>In Nu, these two steps are distinct. The <code>echo</code> command gets data ready to output into stream, but doesn't do any work to print it to the screen. Likewise, <code>ls</code> gets ready to output a stream of file and directory entries, but doesn't actually display this information.</p>
<p>That's because both <code>echo</code> and <code>ls</code> are lazy commands. They'll only do the work if the data is pulled from the stream. As a result, the step of viewing the data is separate from the step of creating it.</p>
<p>Behind the scenes, Nu converts a standalone <code>ls</code> to be the pipeline <code>ls | autoview</code>. The work of viewing comes from <code>autoview</code> and it handles working with the data and calling the proper viewer. In this way, we're able to keep things as structured data for as long as possible, and only convert it to be displayed as the final step before being shown to the user. (note: the wasm-based demo and jupyter do a similar step, but instead of adding <code>autoview</code>, they add <code>to html</code>)</p>
<h2 id="rich-data-types" tabindex="-1"> Rich data types</h2>
<p>In a similar way to working with structured data, rather than only plain text, Nu takes a different approach to data types as well. Nu takes the traditional set of basic types, like strings and numbers, and extends them into a richer set of basic data primitives.</p>
<p>Numbers are represented internally as big numbers and big decimals, rather than integers and floating point machine-based representations. This gives us more flexibility to do math more accurately, and generally removes the worry of whether the number you want to work with will fit in the integer or float size you have available.</p>
<p>We carry this further, by also representing values common in modern computer usage: URLs, file paths, file sizes, durations, and dates are all examples of built-in data types. By building them in, Nu can have better syntax and type checking with their use.</p>
<p>For example, in Nu it's possible to write <code>= 1min + 1sec</code> to create a duration that is one minute one second long. You can also use the file sizes, like being able to filter a directory list by the size of the file <code>ls | where size &gt; 10kb</code>.</p>
<p>Nu also can help if you try to mix types that shouldn't. For example, if you had written: <code>= 1min + 1kb</code> it seems you didn't mean to add time and file sizes together, and Nu gives you an error if you do:</p>
<div><pre><code>error: Coercion error
  ┌─ shell:1:3
  │
1 │ = 1min + 1kb
  │   ^^^^   --- filesize(in bytes)
  │   │
  │   duration
</code></pre></div><p><em>note: we'll be making this error better in the future</em></p>
<p>Data in Nu also isn't just the value, but it's also a set of metadata that comes with the value. For example, if you load data from a file using the <code>open</code> command, we track the place that it's loaded along with the data that's loaded. We can see this metadata using the <code>tags</code> command:</p>
<div><pre><code>open package.json | tags
───┬─────────────────┬──────────────────────────────────────────────────────────────────────────────
 # │      span       │                                    anchor
───┼─────────────────┼──────────────────────────────────────────────────────────────────────────────
 0 │ [row end start] │ /home/jonathan/Source/servo/tests/wpt/web-platform-tests/webrtc/tools/packag
   │                 │ e.json
───┴─────────────────┴──────────────────────────────────────────────────────────────────────────────
</code></pre></div><p>This extra information allows us to know how to view the contents, and even save you time when you use the <code>save</code> command, as it will use the original location by default.</p>
<h2 id="keeping-it-fun" tabindex="-1"> Keeping it fun</h2>
<p>Something we attached to early on was the idea that Nu should be fun. It should be fun to work on, it should be fun to contribute to, and it should be fun to use.</p>
<p>Nu is really about play. You play with your data, you play with the structures that make up your files and filesystem, you play with what web services give back to you. Everything about Nu is made to invite you to explore how things work and how data is put together. As you play, you learn more about Nu works and how to better use it. We firmly believe that learning doesn't have to hurt. At its best, the pleasure of exploration over time yields expertise without punishing you along the way. Humans just get better at something when we love to pick it up day after day, experimenting as we go. With Nu, we can ask questions like &quot;what if I do this?&quot; because the system is built to let us ask the question and answer it ourselves.</p>
<p>Nu takes this one step further. The error reporting system comes from the design of <a href="https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html" target="_blank" rel="noopener noreferrer">Rust's error messages</a>, with clear messages to help guide you to success.</p>
<p>The goal for Nu is that it won't require you to be a wiz with the commandline or with complex programming practices. Instead, you start where you feel comfortable, and grow a line at a time. With Nu, as your comfort grows, single lines easily grow to multiple lines, and (eventually) to larger programs. You don't need separate styles of thinking when experimenting and another for building your application. In Nu, these are (or will be) one and the same.</p>
<h2 id="crossplatform" tabindex="-1"> Crossplatform</h2>
<p>One of the first decisions we made in making Nu is that it should not only be cross-platform, but should feel as native as possible across platforms. Commands should work the same, regardless of the platform you're on, without any loss of functionality if you switch from one OS to another. This has meant saying &quot;no&quot; a few times when someone offered to a cool feature, only to find out it didn't work well on one of the supported systems. The benefit, though, is that Nu users can move between OSes comfortably.</p>
<p>Nu lets you use common shortcuts, too. In Windows, you can change drives using the common <code>D:</code> shorthand. You can use <code>cd ~</code> and <code>cd -</code> as easy shorthands to jump between home and previous directories, too.</p>
<h2 id="getting-it-right" tabindex="-1"> Getting <code>$it</code> right</h2>
<p>Early on, when we were first brainstorming how something like Nushell might work, we rediscovered the idea of iteration having its own special variable. The iteration variable, item variable, or simple the &quot;it&quot; variable, gave us a way to talk about the current row of data flowing through the pipeline. When we can talk about the current row, it was then easier to say how to handle the current row.</p>
<p>The simplest version is:</p>
<div><pre><code>ls | echo $it
</code></pre></div><p>To <code>echo $it</code> doesn't really do anything interesting, it just passes along the value it was handed. It's when we combine this with variable paths that things get a little more interesting:</p>
<div><pre><code>ls | echo $it.name
</code></pre></div><p>Now, in 4 words we've asked Nu to list all the files in the current directory and output only the names. This pipeline, if there are 100s of thousands of files, will happily stream out its results as it finds new files. As in this case:</p>
<div><pre><code>ls **/* | echo $it.name
</code></pre></div><p>Once you have a mental model for using <code>$it</code>, it becomes common to grab it when working on data a row at a time.</p>
<p>A note for those wondering how this works under the hood: if an <code>$it</code> is found a part of an argument not otherwise inside of a block, it's &quot;it-expanded&quot;. We replace the command with a call to <code>each</code> and the block.</p>
<p>This turns:</p>
<div><pre><code>ls | echo $it.name
</code></pre></div><p>Into:</p>
<div><pre><code>ls | each { echo $it.name }
</code></pre></div><p>The <code>each</code> command handles walking along each row and calling the block each time, setting the variable <code>$it</code> to the current row value.</p>
<h2 id="everything-is-a-macro" tabindex="-1"> Everything is a macro</h2>
<p>In Nu, a command has the form <code>&lt;cmd&gt; &lt;arg1&gt; &lt;arg2&gt;</code>. To the lisp-lovers among you, this should look very familiar. Slap on a pair of parens and you have yourself an s-expression.</p>
<p>You may be wondering - if you choose a cmd-arg-arg form, how do you write something like:</p>
<div><pre><code>where size > 10kb
</code></pre></div><p>This is where Nu's parser steps up. The parser we use is a type-driven, recursive descent parser. If you look at the signature for the <code>where</code> command in the Rust code, you'll see it says:</p>
<div><pre><code><span>Signature</span><span>::</span><span>build</span><span>(</span><span>"where"</span><span>)</span><span>.</span><span>required</span><span>(</span>
    <span>"condition"</span><span>,</span>
    <span>SyntaxShape</span><span>::</span><span>Math</span><span>,</span>
    <span>"the condition that must match"</span><span>,</span>
<span>)</span>
</code></pre></div><p>That is, the <code>where</code> command takes a single parameter, a <code>condition</code>, which has a SyntaxShape of Math. This shape drives the parser to use different parser logic.</p>
<p>In math mode, we can now parse an expression using operator precedence. The <code>where</code> command tells the parser to treat all of the free parameters as a single expression, to parse that expression, and to pass it as the single argument. The canonical form is more precise, though a bit more cumbersome:</p>
<div><pre><code>where { = $it.size > 10kb }
</code></pre></div><p>You can also see a few other steps thrown in, like the expansion of a short-hand path into the full variable path using <code>$it</code>.</p>
<h2 id="kebabs-and-question-marks" tabindex="-1"> Kebabs and question marks</h2>
<p>Being able to use <code>-</code> in the names of commands, sometimes called &quot;kebab case&quot;, is a handy feature and one we enjoy. In Nu, you can use it whenever you need to pass an identifier. <code>kebab-case-rules</code>.</p>
<p>In addition to kebab case, you can use <code>?</code> as part of the identifier, allowing names in a Ruby-style. We use it in the command <code>empty?</code>.</p>
<h2 id="code-growth" tabindex="-1"> Code growth</h2>
<p>Nushell currently sits at just over 55k lines of code, built from almost 1300 merged pull requests.</p>
<p><img src="@source/assets/images/year_1_kloc.png" alt="image of a Nu growing from under 20000 lines of code to over 55000 lines of code"></p>
<p><em>Growth in code size with each version</em></p>
<h1 id="surprises" tabindex="-1"> Surprises?</h1>
<p>It's funny, when you start working on a shell it's easy to think &quot;it'll be like a REPL&quot;. In fact, it's closer to creating an interactive IDE for the terminal. As people came to Nu from other shells, including shells like fish, there was a strong assumption that completions would be stellar, that it will integrate well with existing workflows, and it will support configuring the prompt, the keybindings, and more.</p>
<p>It also turns out that getting a shell correct is a lot more experimentation and a lot less following what the textbooks say. In practice, things like 'stdout' and 'stderr' are used in a variety of ways, as are the exit codes output by programs. Our initial designs started with a stricter view of these ideas, and softened over time as we saw that the real world is a much fuzzier place than we realized.</p>
<h1 id="quirks" tabindex="-1"> Quirks</h1>
<p>Nu hasn't been without a few quirks. Like any awkward growth spurt, we've had our awkward times and still have a few &quot;curious&quot; areas.</p>
<h2 id="no-variables-yet" tabindex="-1"> No variables, yet</h2>
<p>Had you a time machine and told us a year ago that we still wouldn't have variables today, we probably wouldn't have believed you. Isn't that an important part of a language?</p>
<p>Yes, it's definitely important. But we're also surprised just how far you can get without them. When you think about how you work with a piece of data, maybe you break it apart, maybe you work over the lines, or maybe you search inside of it. Each of these has a built-in way to perform the task in Nu and none require user-defined variables.</p>
<p>That, of course, has its limits. At some point you want to take the result of one batch of commands and store it for later. We're thinking through how to do this, and it comes down to a few basic questions:</p>
<ul>
<li>Should variables work in a traditional way? That is, should we fully evaluate what we pass to the variable during assignment?</li>
<li>Or, should Nu instead &quot;hold&quot; the pipeline you use during the assignment, so that you can run it whenever you want the value of the variable (possibly caching the result if possible)? This is less traditional, but more in line with a language that works lazily on potentially endless streams of data.</li>
</ul>
<p>There are other questions we still need to answer as well, like how do variables and function definitions play together? How do variables shadow each other (or even if they're allowed)?</p>
<h2 id="to-view-or-not-to-view" tabindex="-1"> To view or not to view</h2>
<p>Nushell, being a language focused on working on structured data, has a few quirks with how and when the data is viewed. For one, Nushell has multiple types of data, and different types of data may have different viewing needs. To help with this, we created <code>autoview</code>, a command that will look at the data and detect a variety of different cases. Once it's identified the shape of the data, it will call out to the viewing command that handles viewing that particular kind of data.</p>
<p>Autoview is applied to any of the data being output directly to the user, which is the case for the last step of a pipeline. For example, the pipeline <code>ls</code> is actually <code>ls | autoview</code> behind the scenes. The <code>ls</code> command outputs each row of data corresponding to the files in the directory, creating a table. These rows are passed to <code>autoview</code> which detects that we need to view a table, calls the <code>table</code> command, which then views the data. This generally feels natural, well, most of the time.</p>
<p>It makes sense that <code>ls | where size &gt; 10kb</code> doesn't output the data that flows between the two commands. If we did, it wouldn't be clear what the actual answer was. But what about in this situation: <code>ls; echo &quot;done&quot;</code>? Do we output the result of <code>ls</code> or not?</p>
<p>In the current version of Nu, we don't. We treat anything to the left of <code>;</code> as &quot;do this, finish it, but don't run 'autoview'&quot;. This let's you do a series of different kinds of processing and only then view the end result.</p>
<p>This seems reasonable until you see something like <code>echo &quot;hello&quot;; echo &quot;world&quot;</code> and only see the output &quot;world&quot; and then have to stop and think through all the steps that led to that output.</p>
<h2 id="getting-turned-around" tabindex="-1"> Getting turned around</h2>
<p>As it turns out, the terminal is small. Want to view a few columns? Generally not a problem. Want to open that random CSV file from work with 30 columns? Well, now we might have a problem. How does that 30 column file actually look when you print it out in the terminal, with a nicely drawn table?</p>
<p>For some cases, we found we could be helpful by rotating the table so that the columns go along the side instead of the top. This is especially handy when there's only one row of data as it reads more like a record.</p>
<p>That being said, it's not without its trade-offs. To some folks, rotating the table when they aren't expecting it can be very disorienting. We're still working to figure out the best defaults and heuristics.</p>
<h1 id="future-work" tabindex="-1"> Future work</h1>
<h2 id="focus" tabindex="-1"> Focus</h2>
<p>Nushell is in the stage of the project where we're still experimenting with what the language should be, how it works in practice, and finding out what its most important core values are. Rust, the language Nushell is written in, went through a similar stage. As it found its most important values, it tried on others. Once people started to create real projects in Rust, and show what was possible with this core part of the language, the design began to gel and then solidify as it arrived at 1.0. As part of that, early ideas were modified or discarded altogether.</p>
<p>Nushell will go through a similar stage. As it grows, it will find its sweet spot, its niche that it naturally fills. The design will come from features built to solve real problems, and we'll polish these features, improving their utility, error messages, documentation, and overall flow. The end result will be a sharper, more focused Nushell that feels like the tool you want in your toolbox. Some early adopters are already giving us feedback that Nushell is well on its way of meeting this role, and we're excited to continue to explore and refine as we go.</p>
<h2 id="exploring-the-data-model" tabindex="-1"> Exploring the data model</h2>
<p>There are some really juicy open questions that we'll work on in the coming year. We already have a fairly rich set of data primitives, like strings, dates, file sizes, durations, and more. Figuring out what makes sense to be built-in vs what should be added from outside of the core Nu data model will take a bit of time and finesse as we get more experience working with Nu in the real world.</p>
<h2 id="shifting-to-being-a-full-language" tabindex="-1"> Shifting to being a full language</h2>
<p>Looking at Nu today, you can see some common parts of languages like <code>if</code> or <code>open</code>, but it doesn't yet feel like there's enough syntax to build up full programs. You can't define your own commands, your own variables, and you can't build out a project across multiple files. We're working to address all of these limitations so that Nu can function not only for one-liners, but also for much more.</p>
<h2 id="getting-completions-really-good" tabindex="-1"> Getting completions <em>really</em> good</h2>
<p>A regular point of feedback is that people want completions where possible. We've got some ideas here that will allow us to have completions in far more places, including external commands (think <code>git checkout &lt;TAB&gt;</code>). We're laying the groundwork for this now, and looking forward to rolling out more functionality as we go.</p>
<h1 id="conclusion" tabindex="-1"> Conclusion</h1>
<p>We had far more support and made far more progress than we could have ever predicted a year ago. Today's Nu is something many people use as their daily driver, and it gets stronger with each release. We're excited to bring Nu to a broader audience as we continue to improve usability, grow its feature set, and refine its internals.</p>
<p>If you'd like to try out Nu, you can download it from the <a href="https://github.com/nushell/nushell/releases" target="_blank" rel="noopener noreferrer">github releases page</a>, from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>, or from the many <a href="https://repology.org/project/nushell/versions" target="_blank" rel="noopener noreferrer">other distributions</a>.</p>
<p>If you'd like to help us create Nu, please do! You can find us on the <a href="https://github.com/nushell/nushell" target="_blank" rel="noopener noreferrer">Nushell github</a> and on our <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord server</a>. If you use Twitter, <a href="https://twitter.com/nu_shell" target="_blank" rel="noopener noreferrer">come say hi</a>, we'd love to chat.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.19</title>
    <id>www.nushell.sh/blog/2020-09-01-nushell_0_19.html</id>
    <link href="www.nushell.sh/blog/2020-09-01-nushell_0_19.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-19" tabindex="-1"> Nushell 0.19</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.19 of Nu. In this version, we fill some long-lived gaps in Nu, improve completions, theming, and much more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.19 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.19.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-completion-engine-thegedge" tabindex="-1"> New completion engine (thegedge)</h2>
<p><img src="@source/assets/images/0_19_autocomplete.gif" alt="animation of Nu completion"></p>
<p>Nushell's completion suggestions are now built around the nushell parser. This means completers can now use a much richer context to provide relevant suggestions. This is still a work in progress, but one immediate improvement is that we can now complete commands, flags, and arguments in most nested structures. For example, <code>echo $(l&lt;TAB&gt;</code> will show you all commands that start with l.</p>
<p>The completion work is still very &quot;new&quot;, with parts landing in the hours before the release, so please give it a spin and let us know where we can keep improving it.</p>
<h2 id="improved-theming-fdncred" tabindex="-1"> Improved theming (fdncred)</h2>
<p><img src="@source/assets/images/0_19_heart_theme.png" alt="image of a Nu table built with hearts"></p>
<p><em>Nu, with love</em></p>
<p>We're continuing to expand what's possible with Nu's themes, allowing you to configure more areas of how your data is displayed.</p>
<p><img src="@source/assets/images/0_19_table_colors.png" alt="image of a Nu table custom colors"></p>
<p>You can also configure how the various Nu data types are displayed. You can learn about the <a href="https://github.com/nushell/nushell/pull/2449" target="_blank" rel="noopener noreferrer">new custom data colors</a> if you're interested in configuring them for yourself. There's also and example <code>config.toml</code> <a href="https://github.com/nushell/nushell/blob/main/docs/sample_config/config.toml" target="_blank" rel="noopener noreferrer">here</a> with an example of how to set the colors you like.</p>
<h2 id="table-literals-jonathandturner" tabindex="-1"> Table literals (jonathandturner)</h2>
<p>Starting with 0.19, you can now write table values like you would other kinds of values. To do so, separate a row of header names from the data using a <code>;</code>. For example:</p>
<div><pre><code>> echo [[name size]; [JT 185] [KJ 160]]
───┬──────┬──────
 # │ name │ size
───┼──────┼──────
 0 │ JT   │  185
 1 │ KJ   │  160
───┴──────┴──────
</code></pre></div><p>To be a valid table, the number of columns needs to line up.</p>
<h2 id="multiline-edits-jonathandturner" tabindex="-1"> Multiline edits (jonathandturner)</h2>
<p>In addition to the new table literals, we're opening up multiline commands. Initially, this will be for the line editor, but we'll extend this further as we improve parser support.</p>
<p>You can now also write the above:</p>
<div><pre><code>> echo [
[name, size];
[JT, 185]
[KJ, 160]
]
───┬──────┬──────
 # │ name │ size
───┼──────┼──────
 0 │ JT   │  185
 1 │ KJ   │  160
───┴──────┴──────
</code></pre></div><p>You might have noticed we now also allow commas to separate cells. These are intended to help readability and give a more familiar syntax for people coming from other languages.</p>
<h2 id="nushell-celebrates-its-first-year-in-the-public" tabindex="-1"> Nushell celebrates its first year in the public</h2>
<p>We recently sat down and wrote about <a href="http://www.nushell.sh/blog/2020/08/23/year_of_nushell.html" target="_blank" rel="noopener noreferrer">where Nushell has come over the last year</a> and some thoughts about where it's going. The blog post is a wealth of information about Nu's philosophy and direction. Well worth a read.</p>
<h2 id="command-improvements" tabindex="-1"> Command improvements</h2>
<ul>
<li><code>size</code> now gives back <a href="https://github.com/nushell/nushell/pull/2473" target="_blank" rel="noopener noreferrer">simpler columns</a> (gillespiecd)</li>
<li><code>uniqe</code> has <a href="https://github.com/nushell/nushell/pull/2472" target="_blank" rel="noopener noreferrer">more examples</a> (gillespiecd)</li>
<li><code>ls</code> will tolerate more <a href="https://github.com/nushell/nushell/pull/2466" target="_blank" rel="noopener noreferrer">OS errors while listing</a> (gorogoroumaru)</li>
<li><code>cd .</code> now <a href="https://github.com/nushell/nushell/pull/2457" target="_blank" rel="noopener noreferrer">does the expected</a> (VincentWo)</li>
<li><code>math stddev</code> and <code>math variance</code> both received updates (gillespiecd)</li>
<li>List literals can <a href="https://github.com/nushell/nushell/pull/2454" target="_blank" rel="noopener noreferrer">now have commas</a> (jonathandturner)</li>
<li><code>str index-of</code> can now do a <a href="https://github.com/nushell/nushell/pull/2430" target="_blank" rel="noopener noreferrer">reverse find</a> (fdncred)</li>
<li>A new <a href="https://github.com/nushell/nushell/pull/2429" target="_blank" rel="noopener noreferrer">PowerShell plugin sample</a> (fdncred)</li>
<li>New <a href="https://github.com/nushell/nushell/pull/2428" target="_blank" rel="noopener noreferrer"><code>path dirname</code> and <code>path filestem</code> subcommands</a> (fdncred)</li>
<li>The <code>alias</code> command now has <a href="https://github.com/nushell/nushell/pull/2418" target="_blank" rel="noopener noreferrer">optional type inference</a> (bailey-layzer)</li>
<li>The line editor hinter is <a href="https://github.com/nushell/nushell/pull/2405" target="_blank" rel="noopener noreferrer">now configurable</a> (amitdev)</li>
<li><code>version</code> now includes the <a href="https://github.com/nushell/nushell/pull/2390" target="_blank" rel="noopener noreferrer">git hash when built locally</a> (coolshaurya)</li>
<li><code>touch</code> can now take <a href="https://github.com/nushell/nushell/pull/2386" target="_blank" rel="noopener noreferrer">multiple arguments</a> (jzaefferer)</li>
<li><code>date</code> now has <a href="https://github.com/nushell/nushell/pull/2383" target="_blank" rel="noopener noreferrer">subcommands</a> (gorogoroumaru)</li>
<li>A new <a href="https://github.com/nushell/nushell/pull/2381" target="_blank" rel="noopener noreferrer"><code>sleep</code> command</a> (LhKipp)</li>
<li>Improvements to <code>ls</code> and <a href="https://github.com/nushell/nushell/pull/2379" target="_blank" rel="noopener noreferrer">hidden files</a> (mattclarke)</li>
<li><code>sort-by</code> errors <a href="https://github.com/nushell/nushell/pull/2366" target="_blank" rel="noopener noreferrer">now point to mismatched types</a> (luccasmmg)</li>
<li><code>str</code> subcommands for <a href="https://github.com/nushell/nushell/pull/2360" target="_blank" rel="noopener noreferrer">various capitalizations</a> (rrichardson)</li>
<li>Time units are now <a href="https://github.com/nushell/nushell/pull/2356" target="_blank" rel="noopener noreferrer">more readable</a> (mattclarke)</li>
<li>Exit scripts from per-directory environments are now <a href="https://github.com/nushell/nushell/pull/2352" target="_blank" rel="noopener noreferrer">run in the original directory</a> (samhedin)</li>
<li>We've also got a <a href="https://github.com/nushell/contributor-book/pull/29" target="_blank" rel="noopener noreferrer">Portuguese translation of the contributor book(!!)</a> (vpperego)</li>
<li>Improved <a href="https://github.com/nushell/book/pull/126" target="_blank" rel="noopener noreferrer">RHEL installation instructions</a> (arnaldo2792)</li>
</ul>
<h2 id="more-cleanup-and-improvements-gillespiecd-jonathandturner-marcoleni-andrasio-dmeijboom-thegedge-jzaefferer-ryuichi1208-josephtlyons" tabindex="-1"> More cleanup and improvements (gillespiecd, jonathandturner, Marcoleni, andrasio, dmeijboom, thegedge, jzaefferer, ryuichi1208, JosephTLyons)</h2>
<p>Cleanups in math commands, extra bits of command help, reformating of the command list, better email samples, cleaned up spans in pipelines, fix to <code>header</code> command with mismatched columns, cleanup of dependency usage, cleaned up display config, added crossreferences in command help, subcommands are now sorted before being listed, some dockerfile improvements, nu-cli now has nu-data split off from it, column count now won't break on empty tables, wasm is now tested on CI, improvements to <code>histogram</code> and <code>count</code>,</p>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<h3 id="starship-is-now-external" tabindex="-1"> Starship is now external</h3>
<p>To help Nu focus a bit more on the core capabilities, and to free up it to update separate from Nu, Starship is now external. Once you install Starship, you can set your prompt to use starship using:</p>
<div><pre><code>> config set prompt `echo $(starship prompt)`
</code></pre></div><p>You can also set Nu to use other prompts as well. For example, if you like powerline, you can also use this:</p>
<div><pre><code>> config set prompt `echo $(powerline shell left)`
</code></pre></div><h3 id="no-more-auto-pivot-by-default" tabindex="-1"> No more auto-pivot by default</h3>
<p>Based on feedback from users, we've now disabled any auto-pivoting of tables by default. You can still re-enable this behavior in your config, but we will no longer rotate any tables without being explicitly asked.</p>
<div><pre><code># To only rotate large tables:
> config set pivot_mode auto

# To always rotate a single row to be vertical:
> config set pivot_mode always
</code></pre></div><h3 id="time-units-are-now-renamed" tabindex="-1"> Time units are now renamed</h3>
<p>To make it easier, and more readable, to work with a variety of units in the future, we've renamed the time units.</p>
<p>Instead of <code>1s</code>, you'll now use <code>1sec</code>. Most units for time now follow 3 letters instead of a single letter. You can read more about the <a href="https://github.com/nushell/nushell/pull/2356" target="_blank" rel="noopener noreferrer">full change in the PR</a>.</p>
<h3 id="header-colors" tabindex="-1"> Header colors</h3>
<p>With the new theming support, <code>header_color</code>, <code>header_bold</code>, and <code>header_align</code> have moved into the <code>[color_config]</code> section, and out of the root level, of the <code>config.toml</code> file.</p>
<h3 id="simplified-default-build" tabindex="-1"> Simplified default build</h3>
<p>While not technically a breaking change, it's worth a mention that starting with 0.19, you don't need to use <code>--features=stable</code> to get most of Nu's features. We've folded most of the common ones into the default install. For all the bells and whistles, now use <code>--features=extra</code>, which includes additional functionality not part of the original <code>stable</code> release.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>With 0.19, we see the first deeper changes to the completion engine since Nu was first released. These will grow to allow custom completions for commands, and we're looking forward to making these features available.</p>
<p>The new table literal also takes a step in the direction of data frame support in the future, a powerful feature popularized by pandas, R and other data processing libraries and languages. With it, we hope Nu will continue to grow to having a richer, more nuanced, view of data over time.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.20</title>
    <id>www.nushell.sh/blog/2020-09-22-nushell_0_20.html</id>
    <link href="www.nushell.sh/blog/2020-09-22-nushell_0_20.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-20" tabindex="-1"> Nushell 0.20</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.20 of Nu. In this version, we're introducing some new features for working with rows, improvements to completions, and more.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.20 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.20.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-functionality" tabindex="-1"> New functionality</h2>
<h3 id="each-group-and-each-window-ritobanrc" tabindex="-1"> <code>each group</code> and <code>each window</code> (ritobanrc)</h3>
<p>With 0.20, you can now work with groups of rows at a time easier than ever before.</p>
<p>For example, let's say you have a table like this:</p>
<div><pre><code>───┬───────┬─────
 # │ name  │ age
───┼───────┼─────
 0 │ Joe   │  30
 1 │ Fred  │  40
 2 │ Sally │  40
 3 │ Sean  │  42
 4 │ Gram  │  66
 5 │ Todd  │   1
───┴───────┴─────
</code></pre></div><p>And you wanted to take three rows at a time, and sum the ages. You can now do this using:</p>
<div><pre><code>... | each group 3 { get age | math sum }
───┬─────
 0 │ 110
 1 │ 109
───┴─────
</code></pre></div><p>Or, you can slide a &quot;window&quot; over the data, looking at multiple rows at a time. Let's slide a window of two rows, so that we look at each pair. We can use this to average the adjacent rows:</p>
<div><pre><code>... | each window 2 { get age | math avg }
───┬─────────
 0 │ 35.0000
 1 │ 40.0000
 2 │ 41.0000
 3 │ 54.0000
 4 │ 33.5000
───┴─────────
</code></pre></div><h3 id="completion-improvements-thegedge-rezural" tabindex="-1"> Completion improvements (thegedge, rezural)</h3>
<p>The new completer received a <a href="https://github.com/nushell/nushell/pull/2497" target="_blank" rel="noopener noreferrer">lot of bugfixes</a>, <a href="https://github.com/nushell/nushell/pull/2503" target="_blank" rel="noopener noreferrer">more fixes</a>, and <a href="https://github.com/nushell/nushell/pull/2525" target="_blank" rel="noopener noreferrer">yet more fixes</a> since its initial release with 0.19. We're continuing to improve this experience further.</p>
<p>Completions can <a href="https://github.com/nushell/nushell/pull/2556" target="_blank" rel="noopener noreferrer">now be case-insensitive</a>. This is especially useful for platforms where filepaths are case-insensitive.</p>
<h2 id="command-improvements" tabindex="-1"> Command Improvements</h2>
<ul>
<li>
<p><strong>NEW</strong> <a href="https://github.com/nushell/nushell/pull/2489" target="_blank" rel="noopener noreferrer"><code>random integer</code></a> - create random integers (smaydew)</p>
</li>
<li>
<p><strong>NEW</strong> <a href="https://github.com/nushell/nushell/pull/2495" target="_blank" rel="noopener noreferrer"><code>exec</code></a> - on Unix-based systems with exec support, you can now call the built-in <code>exec</code> command (almindor)</p>
</li>
<li>
<p><strong>NEW</strong> <a href="https://github.com/nushell/nushell/pull/2505" target="_blank" rel="noopener noreferrer"><code>mod</code></a> - a new modulo operator (jonathandturner)</p>
</li>
<li>
<p><code>mv</code> now uses the <a href="https://github.com/nushell/nushell/pull/2487" target="_blank" rel="noopener noreferrer"><code>fs_extra</code> crate for better recursive moves</a> (almindor)</p>
</li>
<li>
<p>More table themes (fdncred)</p>
</li>
<li>
<p><code>ls -l</code> now also lists the <a href="https://github.com/nushell/nushell/pull/2496" target="_blank" rel="noopener noreferrer">number of links</a> (gillespiecd)</p>
</li>
<li>
<p><code>str substring</code> can now <a href="https://github.com/nushell/nushell/pull/2499" target="_blank" rel="noopener noreferrer">optionally take a range</a> (defstryker)</p>
</li>
<li>
<p><code>char</code> gets support for <a href="https://github.com/nushell/nushell/pull/2500" target="_blank" rel="noopener noreferrer">weather characters</a> (fdncred)</p>
</li>
<li>
<p>Ranges can now <a href="https://github.com/nushell/nushell/pull/2506" target="_blank" rel="noopener noreferrer">start or end with variables</a> and can have <a href="https://github.com/nushell/nushell/pull/2509" target="_blank" rel="noopener noreferrer">decimal numbers as boundaries</a> (jonathandturner)</p>
</li>
<li>
<p>Ranges can now <a href="https://github.com/nushell/nushell/pull/2541" target="_blank" rel="noopener noreferrer">also be exclusive</a> using the <code>x..&lt;y</code> syntax (radekvit)</p>
</li>
<li>
<p><code>ps -l</code> now <a href="https://github.com/nushell/nushell/pull/2507" target="_blank" rel="noopener noreferrer">shows cpu time</a> (gillespiecd)</p>
</li>
<li>
<p><code>with-env</code> can now <a href="https://github.com/nushell/nushell/pull/2526" target="_blank" rel="noopener noreferrer">accept multiple variables</a> (itn3000)</p>
</li>
<li>
<p><code>math avg</code> will now <a href="https://github.com/nushell/nushell/pull/2529" target="_blank" rel="noopener noreferrer">also work with durations</a> (gorogoroumaru)</p>
</li>
<li>
<p><code>reduce</code> can now <a href="https://github.com/nushell/nushell/pull/2529" target="_blank" rel="noopener noreferrer">work with table values</a> (andrasio)</p>
</li>
<li>
<p>The active shell in <code>shells</code> is <a href="https://github.com/nushell/nushell/pull/2540" target="_blank" rel="noopener noreferrer">now more clearly shown</a> (gillespiecd)</p>
</li>
<li>
<p><code>sleep</code> now <a href="https://github.com/nushell/nushell/pull/2550" target="_blank" rel="noopener noreferrer">respects Ctrl+C</a> and can <a href="https://github.com/nushell/nushell/pull/2558" target="_blank" rel="noopener noreferrer">pass along the output</a> (radekvit)</p>
</li>
<li>
<p><code>str trim</code> and <code>trim</code> are <a href="https://github.com/nushell/nushell/pull/2576" target="_blank" rel="noopener noreferrer">merged</a> (gillespiecd and radekvit)</p>
</li>
<li>
<p><code>str find-replace</code> can now <a href="https://github.com/nushell/nushell/pull/2569" target="_blank" rel="noopener noreferrer">global search/replace</a> (fdncred)</p>
</li>
<li>
<p><code>open</code> now only streams for <a href="https://github.com/nushell/nushell/pull/2570" target="_blank" rel="noopener noreferrer">non-files and large files</a> (jonathandturner)</p>
</li>
<li>
<p>If supported on the platform, <code>benchmark</code> now gives <a href="https://github.com/nushell/nushell/pull/2571" target="_blank" rel="noopener noreferrer">user/system/idle times as well</a> (radekvit)</p>
</li>
<li>
<p>Ctrl+D now <a href="https://github.com/nushell/nushell/pull/2583" target="_blank" rel="noopener noreferrer">exits the current shell</a> (gillespiecd)</p>
</li>
<li>
<p><code>fetch</code> now <a href="https://github.com/nushell/nushell/pull/2587" target="_blank" rel="noopener noreferrer">supports CSV MIME types</a> (notryanb)</p>
</li>
</ul>
<h2 id="other-improvements-fdncred-gillespiecd-lidin-andrasio-radekvit-jonathandturner-coolshaurya" tabindex="-1"> Other improvements (fdncred, gillespiecd, lidin, andrasio, radekvit, jonathandturner, coolshaurya)</h2>
<p>Removed unnused dependencies, cleanups to duration, some ARM incompatibilites were fixed, some Ctrl+C issues were fixed, optimized some config reading, cleanup code in <code>get</code> and <code>nu-value-ext</code>, rustyline was upgraded (fixing a common instability in Windows), <code>help command</code> get some improvements, <code>random integer</code> got some stability fixes.</p>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<h2 id="in-and-not-in-are-now-in-and-not-in" tabindex="-1"> <code>in:</code> and <code>not-in:</code> are now <code>in</code> and <code>not-in</code></h2>
<p>In working with operators, we've removed the colon from the <code>in</code> and <code>not-in</code> operators.</p>
<h2 id="trim-and-str-trim-are-now-just-str-trim" tabindex="-1"> <code>trim</code> and <code>str trim</code> are now just <code>str trim</code></h2>
<p>We've merged the functionality and now just have the one <code>str trim</code> command.</p>
<h2 id="locale-formatted-numbers-temporarily-not-supported" tabindex="-1"> Locale-formatted numbers temporarily not supported</h2>
<p>As part of updating dependencies, we've had to temporarily disable locale-formatting numbers. We hope to fix this as dependencies update to the latest versions.</p>
<h2 id="change-in-config-location" tabindex="-1"> Change in config location</h2>
<p>We've tried to use a supported 'directories' crate, which has meant having to change until we found a supported one. This, unfortunately, means that this release moves the config location again.</p>
<p>On macOS, <code>config path</code> now points to: &quot;$HOME/Library/Application Support/org.nushell.nu/config.toml&quot;, in 0.19.0 and earlier it was: &quot;$HOME/Library/Preferences/org.nushell.nu/config.toml&quot;.</p>
<h1 id="zulip-chat" tabindex="-1"> Zulip chat</h1>
<p>We're experimenting with using Zulip for our community chat and design discussions. If you want, you can <a href="https://nushell.zulipchat.com/" target="_blank" rel="noopener noreferrer">try the server and tell us what you think</a>. If you'd rather we stick with <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">Discord</a>, you can tell us that, too 😃</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've put a <a href="https://docs.google.com/forms/d/e/1FAIpQLScEFzDh7j3jfAuVMBCQtQE-qfKAhugLCiUaaGL583QtGwz5fw/viewform?usp=sf_link" target="_blank" rel="noopener noreferrer">survey to get feedback from you about Nushell</a>. This will help us focus our efforts in the coming releases to refactor, trim, and polish Nu. Working with a large codebase is always a challenge, and recently we've been thinking through what features really make up the &quot;core&quot; Nu experience and what parts can be moved outside of Nu itself. This may mean making more things plugins, cutting back on the depedencies we use, and more. Getting your feedback makes sure we have a clear picture for what the &quot;core&quot; of Nu is to most people.</p>
<p>Even if you're just curious about Nushell but aren't using it, we'd love to hear from you.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.21</title>
    <id>www.nushell.sh/blog/2020-10-13-nushell_0_21.html</id>
    <link href="www.nushell.sh/blog/2020-10-13-nushell_0_21.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="nushell-0-21" tabindex="-1"> Nushell 0.21</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.21 of Nu. In this version, we introduce a charting functionality for quickly exploring data, stability improvements, and some general command cleanups.</p>
<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.21 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.21.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-functionality" tabindex="-1"> New functionality</h2>
<h3 id="charting-andrasio" tabindex="-1"> Charting (andrasio)</h3>
<p><img src="@source/assets/images/0_21_bar_charts.gif" alt="animation of building different types of bar charts"></p>
<p><em>New charting functionality</em></p>
<p>Nushell now supports bar and line charts for when you want to quickly take a look at data you're exploring. You can reach these through the new <code>chart</code> command.</p>
<p>Here's an example of using <code>chart</code> to chart out contributions to a git repository:</p>
<div><pre><code>> git log "--pretty=format:%h&lt;nu>%aN&lt;nu>%s&lt;nu>%aD" | lines | split column "&lt;nu>" sha1 author desc merged_at | where author == "Andrés N. Robalino" | update merged_at { get merged_at | str to-datetime } | reverse | chart line merged_at -f "%b-%Y"
</code></pre></div><p><img src="@source/assets/images/0_21_line_chart.png" alt="line chart of github contributions"></p>
<p><em>Line chart of GitHub contributions</em></p>
<h3 id="improvements" tabindex="-1"> Improvements</h3>
<ul>
<li><code>rm -f</code> no longer complains if the path can't be found (luccasmg)</li>
<li><code>benchmark</code> now randomizes the environment for more accurate results (tumdum)</li>
<li><code>select</code> now works with columns that have spaces (JonathanArns)</li>
<li>math with duration now properly handles overflow (samualvanderwaal)</li>
<li><code>mv</code> now properly fails if you try to move a directory into itself (luccasmg)</li>
<li>smarter auto-conversion to string where possible, helping with commands like <code>clip</code> (gillespiecd)</li>
<li>added left and right padding for strings via <code>str lpad</code> and <code>str rpad</code> (fdncred)</li>
<li>blink and strikethrough added to colors (fdncred)</li>
<li>initial WASI support (jonathandturner)</li>
<li>inf/nan handled in CSV (gillespiecd)</li>
<li>new <code>xpath</code> command that can search XML documents (fdncred, andrasio)</li>
<li>rustyline paste mode no longer assumes bracketed paste (wcarss)</li>
</ul>
<h3 id="internal-improvements-fdncred-gillespiecd-jonathandturner-josephtlyons-andrasio" tabindex="-1"> Internal improvements (fdncred, gillespiecd, jonathandturner, JosephTLyons, andrasio)</h3>
<p>Windows builds now use a bigger stack, suggestions have been cleaned up, cleaned up unused files in nu-data, some redundant dependencies were simplified, variable scope was improved to make way for variables, internal names for <code>describe</code> have been improved, nu-protocol got a tidy, added example to <code>update</code>, fix for panics in <code>str to-datetime</code>, internal name of <code>to md</code> corrected, <code>empty?</code> got a rewrite, integers are now parsed as BigInt, decimals are now parsed as BigDecimal, cleanup of old files in the root, more tests added,</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We recently finished the Nushell survey and will be working on processing the results, which will help us plan the next few months. Also, if you haven't heard, Nushell is part of the <a href="http://couchbase.sh" target="_blank" rel="noopener noreferrer">new Couchbase CLI experience</a>. There are also lots of big plans for improving core parts of the system, including line editing, completions, and more. If you're interested in helping out, come chat with us on <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a>.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.22</title>
    <id>www.nushell.sh/blog/2020-11-03-nushell_0_22.html</id>
    <link href="www.nushell.sh/blog/2020-11-03-nushell_0_22.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <summary type="html"><![CDATA[<h1 id="nushell-0-22" tabindex="-1"> Nushell 0.22</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.22 of Nu. In this version, we introduce a new flattening command, more math commands, we remove it-expansion, and add a lot of assorted improvements.</p>
]]></summary>
    <content type="html"><![CDATA[<h1 id="nushell-0-22" tabindex="-1"> Nushell 0.22</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.22 of Nu. In this version, we introduce a new flattening command, more math commands, we remove it-expansion, and add a lot of assorted improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.22 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.22.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-functionality" tabindex="-1"> New functionality</h2>
<h3 id="the-flatten-command-andrasio" tabindex="-1"> The <code>flatten</code> command (andrasio)</h3>
<p><img src="@source/assets/images/0_22_flatten.gif" alt="animation of using the flatten command"></p>
<p><em>New flatten command</em></p>
<p>There's now a flatten command that can take tables nested inside of the main table and flatten their contents into the main table.</p>
<h3 id="more-math-commands-morbatex-gillespiecd-fdncred" tabindex="-1"> More <code>math</code> commands (morbatex, gillespiecd, fdncred)</h3>
<p>You can now use rounding in math operations:</p>
<div><pre><code>> echo [1.5 2.3 -3.1] | math ceil
───┬────
 0 │  2
 1 │  3
 2 │ -3
───┴────

> echo [1.5 2.3 -3.1] | math floor
───┬────
 0 │  1
 1 │  2
 2 │ -4
───┴────

> echo [1.5 2.3 -3.1] | math round
───┬────
 0 │  2
 1 │  2
 2 │ -3
───┴────
</code></pre></div><h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<h3 id="remove-it-expansion-jonathandturner" tabindex="-1"> Remove it-expansion (jonathandturner)</h3>
<p>Previously, we treated the <code>$it</code> variable as a special variable that caused a command to iterate over each element in the row, for example <code>ls | echo $it.name</code> would expand to <code>ls | each { echo $it.name }</code>.</p>
<p>While this was handy in small examples, in the general case it became confusing to remember when and how it-expansion would happen.</p>
<p>In this release, we're trying an experiment of removing it-expansion.</p>
<p>Previously:</p>
<div><pre><code>ls | echo $it.name
</code></pre></div><p>Now:</p>
<div><pre><code>ls | each { echo $it.name }
</code></pre></div><p>Or, you can switch to other forms, like:</p>
<div><pre><code>ls | get name
</code></pre></div><p>We're working towards a simpler mental model, where blocks can have parameters, and <code>$it</code> is the name of the parameter if it's not specified.</p>
<p>Please try it out and let us know what you think.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li><strong>New</strong> - a <code>seq</code> command for working with sequences (fdncred)</li>
<li>bson and sqlite support added to the WiX (fdncred)</li>
<li><code>to md</code> now has a pretty flag (JosephTLyons)</li>
<li><code>ls</code> can now support other number formatting (lucassmmg)</li>
<li>Filesize formats can now be changed via <code>config</code> (fdncred)</li>
<li>Tables can now have heavy or no borders (fdncred)</li>
<li><code>math eval</code> now supports tau (rjboas)</li>
<li><code>char</code> now has simpler weather emoji (gillespiecd, fdncred)</li>
<li><code>str to-int</code> now takes an optional radix for conversion (gillespiecd)</li>
<li><code>char</code> can now print any unicode character (fdncred)</li>
<li><code>alias</code> now has optional type inference based on the recently accepted RFC (LhKipp)</li>
<li><code>ls</code> will also list inode in <code>-l</code> mode on Unix (gillespiecd)</li>
</ul>
<h2 id="internal-improvements-andrasio-jonathandturner-lhkipp-everlastingbugstopper-josephtlyons-fdncred-jjshanks" tabindex="-1"> Internal improvements (andrasio, jonathandturner, LhKipp, EverlastingBugstopper, JosephTLyons, fdncred, jjshanks)</h2>
<p>It's now easier to create column-paths inside of the Nu source, <code>alias</code> got some bugfixes, the parser got some bugfixes, fixed typo in the build message, filesize labels for bytes wasn't showing up (now fixed), internally there are now more helpers for creating the core Value type, bumped the required Rust version, bugfix for <code>;</code> endings, and remove unneeded comments.</p>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We're continuing to work to simplify the internal representation, improve the parser, and work to add support for features like block parameters, variables, and, in the future, custom commands.</p>
<p>If you'd like to help out, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hello!</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.23</title>
    <id>www.nushell.sh/blog/2020-11-24-nushell_0_23.html</id>
    <link href="www.nushell.sh/blog/2020-11-24-nushell_0_23.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <summary type="html"><![CDATA[<h1 id="nushell-0-23" tabindex="-1"> Nushell 0.23</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.23 of Nu. In this version, we continue improving the commands, release a new website, and talk about some of the experiments that will be making their way into Nu in future versions.</p>
]]></summary>
    <content type="html"><![CDATA[<h1 id="nushell-0-23" tabindex="-1"> Nushell 0.23</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.23 of Nu. In this version, we continue improving the commands, release a new website, and talk about some of the experiments that will be making their way into Nu in future versions.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.23 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.23.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-website-ibraheemdev" tabindex="-1"> New website (ibraheemdev)</h2>
<p><img src="@source/assets/images/0_23_website.png" alt="picture of the new Nushell website"></p>
<p><em>The new website</em></p>
<p>We've just put up the first version of a new website that combines the front site with the books and docs all in one place. We're still continuing to polish this, so if you'd like to help out, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hello!</p>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<p>The <code>from json</code> command used to preserve the order of fields. Unfortunately, unsafe behaviors in one of the dependencies we used for this were recently found and we've had to (perhaps temporarily) remove the order preservation. We'd happily accept PRs that re-enabled this functionality.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li>Better table alignments (fdncred)</li>
<li><code>seq</code> now can do date ranges as well (fdncred)</li>
<li>More refactoring towards script support (jonathandturner)</li>
<li>Some doc naming has been cleaned up (LhKipp)</li>
<li>Lots of <a href="https://github.com/nushell/nushell/pull/2742" target="_blank" rel="noopener noreferrer"><code>path</code> fixes and improvements</a> have now landed (kubouch)</li>
<li>Build artifacts are <a href="https://github.com/nushell/nushell/pull/2747" target="_blank" rel="noopener noreferrer">now smaller</a> (fdncred)</li>
<li>Some broken docs links have been fixed (naufraghi)</li>
<li>A new <code>random decimal</code> command (smaydew)</li>
<li>Some <code>str substring</code> fixes (andrasio)</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've been splitting our efforts between the website, Nushell, and two new side projects that will feed into Nushell in the future: <a href="https://github.com/jonathandturner/nunu/" target="_blank" rel="noopener noreferrer">nunu</a> and <a href="https://github.com/jonathandturner/nunu2" target="_blank" rel="noopener noreferrer">nunu2</a>. The first is investigating some parser improvements we could do in Nushell to better support scripts and more in the future. The second experiments with variables, blocks, and evaluation. Combined, they should some signs of what we hope will be available in Nu in the weeks to come.</p>
<p>As always, if you see somewhere you'd like to help or just want to chat, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hi!</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.24</title>
    <id>www.nushell.sh/blog/2020-12-15-nushell_0_24.html</id>
    <link href="www.nushell.sh/blog/2020-12-15-nushell_0_24.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <summary type="html"><![CDATA[<h1 id="nushell-0-24" tabindex="-1"> Nushell 0.24</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.24 of Nu. We've added a few new utilities, improved the existing date functionality, and more.</p>
]]></summary>
    <content type="html"><![CDATA[<h1 id="nushell-0-24" tabindex="-1"> Nushell 0.24</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.24 of Nu. We've added a few new utilities, improved the existing date functionality, and more.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.24 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.24.1" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p><strong>Note:</strong> There was a build issue discovered immediately after release, so we've also released a hotfix (0.24.1) to address this issue.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li>added a <code>hash</code> command for creating hashes (notryanb, andrasio)</li>
<li>impoved the public API by making <code>run_block</code> public (max-sixty)</li>
<li><code>version</code> now shows more information about the build (fdncred)</li>
<li><code>from csv</code> will show where errors happened if they occur (Dietr1ch)</li>
<li><code>date</code> now has some new-and-improved subcommands (jz448)</li>
<li>added a new <code>random chars</code> subcommand (gillespiecd)</li>
<li>gitpod setup got fixed (jankeronmes)</li>
<li>a new <code>math abs</code> command (xolve)</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>Our work on the big update has continued, and we're looking forward to making it available soon. We're now down to the last three known outstanding issues that need to be resolved before the work can be merged into the main Nushell source code.</p>
<p>As it lands, we'll need your help to try it out and give us feedback to help us continue to improve it.</p>
<p>As always, if you see somewhere you'd like to help or just want to chat, come by the <a href="https://discord.gg/NtAbbGn" target="_blank" rel="noopener noreferrer">discord</a> and say hi!</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.25</title>
    <id>www.nushell.sh/blog/2021-01-05-nushell_0_25.html</id>
    <link href="www.nushell.sh/blog/2021-01-05-nushell_0_25.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <summary type="html"><![CDATA[<h1 id="nushell-0-25" tabindex="-1"> Nushell 0.25</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.25 of Nu. It's one of the largest releases we've ever done. With it Nushell grows from being a shell to being a full scripting language as well.</p>
]]></summary>
    <content type="html"><![CDATA[<h1 id="nushell-0-25" tabindex="-1"> Nushell 0.25</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.25 of Nu. It's one of the largest releases we've ever done. With it Nushell grows from being a shell to being a full scripting language as well.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.25 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.25.1" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<p>Lots of new features in this release. If you'd like to watch a demonstration, we can also watch a <a href="https://www.youtube.com/watch?v=PO6EW7_a1tE" target="_blank" rel="noopener noreferrer">video showing off the new features</a>.</p>
<h2 id="custom-commands" tabindex="-1"> Custom commands</h2>
<p>A long-requested feature for Nushell is to have scripting capability. A key piece of this story is the ability to make your own commands in addition to those built into Nu.</p>
<p>With 0.25, you can now make your own custom commands:</p>
<div><pre><code>def add [x, y] {
    = $x + $y
}

add 1 5
</code></pre></div><p>The definitions are created in the scope where you define them, and are visible before any of the script body runs. This allows you to have written the above like so:</p>
<div><pre><code>add 1 5

def add [x, y] {
    = $x + $y
}
</code></pre></div><p>There are a few other important features of custom commands. The first is that you can optionally add a type annotation to each parameter you take in. These type annotations tell the parser how to parse arguments given to the function and tell the type checker what is allowed to be passed in.</p>
<div><pre><code>def add [x:int, y] {
    = $x + $y
}

add "bob" 4
</code></pre></div><p>Now if you run the example, you'll see a type error like this:</p>
<div><pre><code>error: Type Error
  ┌─ shell:5:5
  │
5 │ add "bob" 4
  │     ^^^^^ Expected int, found "bob"
</code></pre></div><p>Here's a list of the types that are allowed:</p>
<ul>
<li>int - an integer</li>
<li>string - a string</li>
<li>path - a filepath</li>
<li>table - a table</li>
<li>unit - a number with a unit (like <code>10kb</code>)</li>
<li>number - an integer or decimal number</li>
<li>pattern - a glob pattern (like <code>foo*</code>)</li>
<li>range - a numeric range (like <code>1..10</code>)</li>
<li>block - a code block (like <code>{ ls }</code>)</li>
<li>any - any of the above types (this is assumed if you leave off the type)</li>
</ul>
<p><em>Note: Nushell is whitespace-significant, so the variable + ':' + type need to be united as one, without spaces.</em></p>
<p>You can also create flags for your commands:</p>
<div><pre><code>def create-item(name, --age:int) { ... }

create-item "driver" --age 20
</code></pre></div><h2 id="variables" tabindex="-1"> Variables</h2>
<p>You can now also define variables using <code>let</code>.</p>
<div><pre><code>let name = "Nushell"
echo $name
</code></pre></div><p>These variables are created in the scope they're defined in.</p>
<p>If, for example, we had written this instead:</p>
<div><pre><code>do {
    let $name = "Nu"
    echo $name   # prints "Nu"
}
echo $name       # this will fail
</code></pre></div><p>Once we leave the block above, the <code>name</code> variable is no longer visible.</p>
<p>These variables are <strong>immutable</strong> and need to be initialized as they are defined.</p>
<p>Along with variables, we also support &quot;shadowing&quot;, so that you can create a variable inside of a scope, and have it &quot;shadow&quot; the variable of the same name outside of the scope:</p>
<div><pre><code>let size = 10
do {
    let size = 5
    echo $size     # prints 5
}
echo $size         # prints 10
</code></pre></div><h2 id="environment-variables" tabindex="-1"> Environment variables</h2>
<p>You can also use <code>let-env</code> to create environment variables. Just like variables, they are created in the scope they're defined.</p>
<div><pre><code>let-env TRACE = on
echo $nu.env.TRACE   # prints 'on'
</code></pre></div><h2 id="aliases" tabindex="-1"> Aliases</h2>
<p>With 0.25, we've also changed how aliases work to be more like a text expansion, in the spirit of how aliases work in shells like Bash.</p>
<div><pre><code>alias ll = ls -l
ll -a
</code></pre></div><p>This lets you alias a larger command to a smaller name, and then also pass additional arguments and flags to it.</p>
<h2 id="source-ing" tabindex="-1"> Source-ing</h2>
<p>You can now also <code>source</code> a script, so that the definitions and code of that script runs in the current scope and context.</p>
<p>Let's say we had a file called definitions.nu:</p>
<div><pre><code># definitions.nu
def add [x, y] {
    = x + y
}
</code></pre></div><p>We can later use the definitions in this file using <code>source</code>:</p>
<div><pre><code>source definitions.nu

add 3 7
</code></pre></div><p>Like variables and definitions, the definitions we <code>source</code> are put into the current scope.</p>
<div><pre><code>do {
    source definitions.nu
    echo $(add 3 7)      # prints 10
}
echo $(add 1 11)         # errors, `add` isn't in scope here
</code></pre></div><h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<ul>
<li>Please note that the <code>alias</code> command no longer works the same way it did pre-0.25</li>
</ul>
<p>Pre-0.25, aliases worked similarly to how <code>def</code> works now. We used multiple arguments, and each was optional:</p>
<div><pre><code>alias mycmd [a b c d] { myverylongcommand $a $b $c $d }
</code></pre></div><p>With 0.25, we no longer pass parameters to alias this way. Instead, think of the aliased name being replaced by the right hand side. To update the previous alias to 0.25, we can write:</p>
<div><pre><code>alias mycmd = myverylongcommand
</code></pre></div><p>Calling <code>mycmd 1 2</code> now expands to <code>myverylongcommand 1 2</code> and then runs the expanded command.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<ul>
<li>the <code>which</code> command now shows if the name points to an alias or custom command (LhKipp)</li>
<li>you can configure the <a href="https://github.com/nushell/nushell/pull/2829" target="_blank" rel="noopener noreferrer">style that primities are shown</a> (fdncred)</li>
<li>optionally you can <a href="https://github.com/nushell/nushell/pull/2794" target="_blank" rel="noopener noreferrer">highlight trailing spaces</a> (fdncred)</li>
<li>we support comments now, using <code>#</code> (jonathandturner)</li>
<li>better information for debugging in <code>version</code> (gillespiecd)</li>
<li>Thanks to all those who landed general improvements too! (baoyachi, scrabsha, stormasm, max-sixty, ArturKovacs, JosephTLyons)</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>This update opens a lot of doors to what's possible with Nushell. There are a few areas we'd like to explore with it: better autocompletions, describing external commands, and more. We'd also really like to hear your feedback on the release so we can continue to improve the overall experience of using Nu.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.26</title>
    <id>www.nushell.sh/blog/2021-01-26-nushell_0_26.html</id>
    <link href="www.nushell.sh/blog/2021-01-26-nushell_0_26.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <summary type="html"><![CDATA[<h1 id="nushell-0-26" tabindex="-1"> Nushell 0.26</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.26 of Nu. It's a polish release with lots of improvements.</p>
]]></summary>
    <content type="html"><![CDATA[<h1 id="nushell-0-26" tabindex="-1"> Nushell 0.26</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.26 of Nu. It's a polish release with lots of improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.26 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.26.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="rest-support-in-custom-commands-lhkipp-jonathandturner" tabindex="-1"> Rest support in custom commands (LhKipp, jonathandturner)</h2>
<p>You can now refer to a rest argument in your custom command:</p>
<div><pre><code>def my-cmd[...rest:int] {
    echo $rest | math sum
}
</code></pre></div><p>Elements of the rest are referred to with positions, like <code>$rest.1</code> for the 2nd position.</p>
<h2 id="short-flags-in-custom-commands-lhkipp" tabindex="-1"> Short flags in custom commands (LhKipp)</h2>
<p>You can now also added an optional shorthand flag to longhand flags:</p>
<div><pre><code>def foo [--bar(-b): int] {
    echo $bar
}

foo -b 10
foo --bar 10
</code></pre></div><h2 id="improved-build-times-jonathandturner-stormasm" tabindex="-1"> Improved build times (jonathandturner, stormasm)</h2>
<p>When building from scratch, you may now notice that Nushell builds slightly faster. This comes from refactoring large crates into smaller crates and replacing some of our support crates with similar crates that compile faster.</p>
<h2 id="improvements" tabindex="-1"> Improvements</h2>
<p>I hope you like improvements. We got a <em>lot</em> of them this release.</p>
<ul>
<li>fdcnred added support for using <a href="https://github.com/nushell/nushell/pull/2973" target="_blank" rel="noopener noreferrer">multi-byte chars as padding</a>, improved <a href="https://github.com/nushell/nushell/pull/2955" target="_blank" rel="noopener noreferrer">ansi and char support</a>, improved the output of <a href="https://github.com/nushell/nushell/pull/2959" target="_blank" rel="noopener noreferrer"><code>sys</code></a>, optimized some <a href="https://github.com/nushell/nushell/pull/2937" target="_blank" rel="noopener noreferrer">regex usage</a>, removed <a href="https://github.com/nushell/nushell/pull/2924" target="_blank" rel="noopener noreferrer"><code>set</code> from Windows built-ins</a>, added support for <a href="https://github.com/nushell/nushell/pull/2906" target="_blank" rel="noopener noreferrer">comparing a string and a filepath</a></li>
<li>JosephTLyons removed <a href="https://github.com/nushell/nushell/pull/2970" target="_blank" rel="noopener noreferrer">unnecessary clones</a> and <a href="https://github.com/nushell/nushell/pull/2969" target="_blank" rel="noopener noreferrer">fixed some test macros</a></li>
<li>andrasio added <a href="https://github.com/nushell/nushell/pull/2965" target="_blank" rel="noopener noreferrer">column path support to many <code>str</code> commands</a></li>
<li>jonathandturner added <a href="https://github.com/nushell/nushell/pull/2964" target="_blank" rel="noopener noreferrer">error checking for bad rows in column paths</a>, added <a href="https://github.com/nushell/nushell/pull/2952" target="_blank" rel="noopener noreferrer">proper flushing of stdout</a>, split <a href="https://github.com/nushell/nushell/pull/2898" target="_blank" rel="noopener noreferrer">nu-cli and nu-engine</a>, treat <a href="https://github.com/nushell/nushell/pull/2890" target="_blank" rel="noopener noreferrer">the startup commands a single script</a> which improves startup times, fixed <a href="https://github.com/nushell/nushell/pull/2893" target="_blank" rel="noopener noreferrer">reading/writing of bigint/bigdecimal</a></li>
<li>baoyachi updated <a href="https://github.com/nushell/nushell/pull/2963" target="_blank" rel="noopener noreferrer">shadow-rs support</a>, removed some of the <a href="https://github.com/nushell/nushell/pull/2935" target="_blank" rel="noopener noreferrer">git support that was no longer needed</a></li>
<li>kubouch added the <a href="https://github.com/nushell/nushell/pull/2953" target="_blank" rel="noopener noreferrer">--skip flag to <code>nth</code></a></li>
<li>ahkrr fixed <a href="https://github.com/nushell/nushell/pull/2951" target="_blank" rel="noopener noreferrer">variable scopes for <code>def</code> parameters</a></li>
<li>brightly-salty <a href="https://github.com/nushell/nushell/pull/2949" target="_blank" rel="noopener noreferrer">replaces the dirs/directories supporting crates</a></li>
<li>jankeronmes fixed <a href="https://github.com/nushell/nushell/pull/2948" target="_blank" rel="noopener noreferrer">Gitpod tests</a></li>
<li>LhKipp fixed a <a href="https://github.com/nushell/nushell/pull/2945" target="_blank" rel="noopener noreferrer">parser bug that prevented invocations and ranges from being parsed correctly</a>, added <a href="https://github.com/nushell/nushell/pull/2939" target="_blank" rel="noopener noreferrer"><code>def</code> documentation</a>, updated <a href="https://github.com/nushell/nushell/pull/2925" target="_blank" rel="noopener noreferrer"><code>alias</code> docs</a></li>
<li>DivineGod moved <a href="https://github.com/nushell/nushell/pull/2927" target="_blank" rel="noopener noreferrer">keybinding_path to nu-data</a></li>
<li>Gymea fixed the <a href="https://github.com/nushell/nushell/pull/2924" target="_blank" rel="noopener noreferrer">dirs dependency in nu-engine</a>, improved the <a href="https://github.com/nushell/nushell/pull/2915" target="_blank" rel="noopener noreferrer"><code>help</code> logic when the command does not have a description</a>, fixed <a href="https://github.com/nushell/nushell/pull/2894" target="_blank" rel="noopener noreferrer"><code>which</code> output for aliases</a></li>
<li>gillespiecd added the support for <a href="https://github.com/nushell/nushell/pull/2913" target="_blank" rel="noopener noreferrer">reverse ranges</a></li>
<li>stormasm refactored <a href="https://github.com/nushell/nushell/pull/2910" target="_blank" rel="noopener noreferrer">nu-cli and split off commands into nu-command</a></li>
<li>TrevorAC99 fixed a <a href="https://github.com/nushell/nushell/pull/2880" target="_blank" rel="noopener noreferrer">rust-embed build breakage</a></li>
</ul>
<h2 id="breaking-changes" tabindex="-1"> Breaking changes</h2>
<ul>
<li><code>ps</code> and <code>sys</code> are now served using a <a href="https://github.com/nushell/nushell/pull/2954" target="_blank" rel="noopener noreferrer">different supporting crate</a>. The functionality difference between the old crate and the new crate may mean a lack of fields that existed before, or different values than before (as it may be calculated differently).</li>
<li>We removed <a href="https://github.com/nushell/nushell/pull/2940" target="_blank" rel="noopener noreferrer"><code>str set</code></a>. This command was one of the first of its style and has since been replaced by more general commands like <code>update</code>.</li>
<li>Internal architecture: the Primitive case for <a href="https://github.com/nushell/nushell/pull/2887" target="_blank" rel="noopener noreferrer">lines has been removed</a>. Instead, use strings.</li>
<li>Internal architecture: the Path and Pattern primitives are now called <a href="https://github.com/nushell/nushell/pull/2889" target="_blank" rel="noopener noreferrer">FilePath and GlobPattern</a> respectively.</li>
</ul>
<h1 id="looking-forward" tabindex="-1"> Looking forward</h1>
<p>We've been humbled by the feedback we got on the 0.25 release and appreciate the support. Looking forward, we'll be continuing to polish the features that landed in 0.25 as we prepare for using these features in larger scripts and in custom completion logic.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.27</title>
    <id>www.nushell.sh/blog/2021-02-16-nushell_0_27.html</id>
    <link href="www.nushell.sh/blog/2021-02-16-nushell_0_27.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <summary type="html"><![CDATA[<h1 id="nushell-0-27" tabindex="-1"> Nushell 0.27</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.27 of Nu. This release fixes some long-standing issues with Nushell.</p>
]]></summary>
    <content type="html"><![CDATA[<h1 id="nushell-0-27" tabindex="-1"> Nushell 0.27</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.27 of Nu. This release fixes some long-standing issues with Nushell.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.27 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.27.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="book-updates-fdncred-jonathandturner" tabindex="-1"> Book updates (fdncred, jonathandturner)</h2>
<p>The Nushell book received some much-needed updates. You'll notice new chapters and updated chapters to bring it more up-to-date with recent Nushell.</p>
<ul>
<li><a href="https://www.nushell.sh/book/configuration.html" target="_blank" rel="noopener noreferrer">Thoroughly updated configuration section</a></li>
<li><a href="https://www.nushell.sh/book/types_of_data.html" target="_blank" rel="noopener noreferrer">Updated section on data types</a></li>
<li><a href="https://www.nushell.sh/book/custom_commands.html" target="_blank" rel="noopener noreferrer">A new section on creating your own commands</a></li>
<li><a href="https://www.nushell.sh/book/aliases.html" target="_blank" rel="noopener noreferrer">An updated section on aliases</a></li>
<li><a href="https://www.nushell.sh/book/variables_and_subexpressions.html" target="_blank" rel="noopener noreferrer">A new section on working with variables and expressions</a></li>
<li><a href="https://www.nushell.sh/book/scripts.html" target="_blank" rel="noopener noreferrer">The start of a new section on writing your own Nushell scripts</a></li>
</ul>
<h1 id="improvements" tabindex="-1"> Improvements</h1>
<h2 id="new-commands-fdncred" tabindex="-1"> New commands (fdncred)</h2>
<ul>
<li>A new <code>term size</code> commands <a href="https://github.com/nushell/nushell/pull/3038" target="_blank" rel="noopener noreferrer">lets you get the current size of the terminal</a></li>
<li>New <a href="https://github.com/nushell/nushell/pull/2976" target="_blank" rel="noopener noreferrer"><code>pow</code> operator</a></li>
<li>New <a href="https://github.com/nushell/nushell/pull/2975" target="_blank" rel="noopener noreferrer">modulus(<code>%</code>) operator</a></li>
</ul>
<h2 id="functionality-jonathandturner-watsonthink-ilius-andrasio-qwanve-fdncred-ammkrn" tabindex="-1"> Functionality (jonathandturner, WatsonThink, ilius, andrasio, Qwanve, fdncred, ammkrn)</h2>
<ul>
<li>Tables now <a href="https://github.com/nushell/nushell/pull/3061" target="_blank" rel="noopener noreferrer">truncate instead of crashing when too large</a></li>
<li><code>source</code> command now can <a href="https://github.com/nushell/nushell/pull/3059" target="_blank" rel="noopener noreferrer">use tilde in the path</a></li>
<li><code>let-env</code> can now shadow <a href="https://github.com/nushell/nushell/pull/3057" target="_blank" rel="noopener noreferrer">environment variables</a> in addition to adding new ones</li>
<li>Prompts can now call <a href="https://github.com/nushell/nushell/pull/3056" target="_blank" rel="noopener noreferrer">external commands on initial startup</a></li>
<li>You can now configure the <a href="https://github.com/nushell/nushell/pull/3045" target="_blank" rel="noopener noreferrer">file size standard to use</a></li>
<li>Strings can now be passed in where <a href="https://github.com/nushell/nushell/pull/3048" target="_blank" rel="noopener noreferrer">column-paths were expected</a> and <a href="https://github.com/nushell/nushell/pull/3016" target="_blank" rel="noopener noreferrer">here</a></li>
<li>More <a href="https://github.com/nushell/nushell/pull/3035" target="_blank" rel="noopener noreferrer">file size types have been added</a></li>
<li><code>sort-by</code> can now <a href="https://github.com/nushell/nushell/pull/3025" target="_blank" rel="noopener noreferrer">reverse sort</a></li>
<li><code>which</code> can now take <a href="https://github.com/nushell/nushell/pull/3024" target="_blank" rel="noopener noreferrer">multiple applications</a></li>
<li><code>ps -l</code> now has <a href="https://github.com/nushell/nushell/pull/3015" target="_blank" rel="noopener noreferrer">a cleaner output when the parent is missing</a></li>
<li><code>select</code> can no longer <a href="https://github.com/nushell/nushell/pull/3012" target="_blank" rel="noopener noreferrer">select the same column twice</a></li>
<li><code>to-md --per-element</code> now gives you <a href="https://github.com/nushell/nushell/pull/2997" target="_blank" rel="noopener noreferrer">more fine-grained control over the markdown output</a></li>
<li>A new <a href="https://github.com/nushell/nushell/pull/2995" target="_blank" rel="noopener noreferrer"><code>$nothing</code> built-in variable to help check for the existence of a value</a></li>
<li><code>str from</code> can convert <a href="https://github.com/nushell/nushell/pull/2977" target="_blank" rel="noopener noreferrer">more things to strings</a></li>
<li>Booleans are now shown as <a href="https://github.com/nushell/nushell/pull/3043" target="_blank" rel="noopener noreferrer">true/false instead of Yes/No</a></li>
</ul>
<h2 id="internal-stormasm-ilius-fdncred-lhkipp-rreverser-jonathandturner" tabindex="-1"> Internal (stormasm, ilius, fdncred, LhKipp, RReverser, jonathandturner)</h2>
<ul>
<li>Some <a href="https://github.com/nushell/nushell/pull/3053" target="_blank" rel="noopener noreferrer">comment parsing improvements</a></li>
<li>The <code>block</code> function is now <a href="https://github.com/nushell/nushell/pull/3047" target="_blank" rel="noopener noreferrer"><code>parse_block</code></a></li>
<li>More <a href="https://github.com/nushell/nushell/pull/3000" target="_blank" rel="noopener noreferrer">Value helpers were added</a></li>
<li><a href="https://github.com/nushell/nushell/pull/2986" target="_blank" rel="noopener noreferrer">Parser cleanup for handling <code>def</code></a></li>
<li>The <a href="https://github.com/nushell/nushell/pull/2983" target="_blank" rel="noopener noreferrer">WASI build should now be working again</a></li>
<li>File size is <a href="https://github.com/nushell/nushell/pull/2984" target="_blank" rel="noopener noreferrer">now a big int</a></li>
</ul>
<h2 id="documentation-watzon-ahkrr-lhkipp-andy-python-programmer-diogomafra" tabindex="-1"> Documentation (watzon, ahkrr, LhKipp, Andy-Python-Programmer, diogomafra)</h2>
<ul>
<li>Sample config has <a href="https://github.com/nushell/nushell/pull/3060" target="_blank" rel="noopener noreferrer">gotten an update</a> and <a href="https://github.com/nushell/nushell/pull/3031" target="_blank" rel="noopener noreferrer">here</a></li>
<li>Some <a href="https://github.com/nushell/nushell/pull/3052" target="_blank" rel="noopener noreferrer">README links got updated</a></li>
<li>More <a href="https://github.com/nushell/nushell/pull/3013" target="_blank" rel="noopener noreferrer">README updates</a> and <a href="https://github.com/nushell/nushell/pull/2996" target="_blank" rel="noopener noreferrer">here</a></li>
<li>README now shows <a href="https://github.com/nushell/nushell/pull/2993" target="_blank" rel="noopener noreferrer">contributor icons</a></li>
</ul>
<h1 id="breaking-changes" tabindex="-1"> Breaking changes</h1>
<ul>
<li>Booleans are now shown as <a href="https://github.com/nushell/nushell/pull/3043" target="_blank" rel="noopener noreferrer">true/false instead of Yes/No</a></li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're hard at work at putting together the proposed features for Nushell 1.0, which will help guide the work to get there. While there's still much work to do to achieve a 1.0 release, this proposal will let the community help refine and correct the direction. We're looking forward to kicking this off in the coming weeks.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
  <entry>
    <title type="html">Nushell 0.28</title>
    <id>www.nushell.sh/blog/2021-03-09-nushell_0_28.html</id>
    <link href="www.nushell.sh/blog/2021-03-09-nushell_0_28.html"/>
    <updated>2022-06-05T02:08:17.000Z</updated>
    <summary type="html"><![CDATA[<h1 id="nushell-0-28" tabindex="-1"> Nushell 0.28</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.28 of Nu. In this release we've added new commands for working with tables, paths, and lots of general feature improvements.</p>
]]></summary>
    <content type="html"><![CDATA[<h1 id="nushell-0-28" tabindex="-1"> Nushell 0.28</h1>
<p>Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.</p>
<p>Today, we're releasing 0.28 of Nu. In this release we've added new commands for working with tables, paths, and lots of general feature improvements.</p>

<h1 id="where-to-get-it" tabindex="-1"> Where to get it</h1>
<p>Nu 0.28 is available as <a href="https://github.com/nushell/nushell/releases/tag/0.28.0" target="_blank" rel="noopener noreferrer">pre-built binaries</a> or from <a href="https://crates.io/crates/nu" target="_blank" rel="noopener noreferrer">crates.io</a>. If you have Rust installed you can install it using <code>cargo install nu</code>.</p>
<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p>
<p>If you'd like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p>
<p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p>
<h1 id="what-s-new" tabindex="-1"> What's New</h1>
<h2 id="new-commands" tabindex="-1"> New commands</h2>
<h3 id="rotate-andrasio" tabindex="-1"> Rotate (andrasio)</h3>
<p>With the new <code>rotate</code> command, we have an easier way to turn rows to columns and columns to rows.</p>
<div><pre><code>> echo [[col1, col2, col3]; [cell1, cell2, cell3] [cell4, cell5, cell6]] | rotate
───┬─────────┬─────────┬─────────
 # │ Column0 │ Column1 │ Column2
───┼─────────┼─────────┼─────────
 0 │ cell4   │ cell1   │ col1
 1 │ cell5   │ cell2   │ col2
 2 │ cell6   │ cell3   │ col3
───┴─────────┴─────────┴─────────
</code></pre></div><p>You can also rotate counter-clockwise:</p>
<div><pre><code>> echo [[col1, col2, col3]; [cell1, cell2, cell3] [cell4, cell5, cell6]] | rotate counter-clockwise
───┬─────────┬─────────┬─────────
 # │ Column0 │ Column1 │ Column2
───┼─────────┼─────────┼─────────
 0 │ col3    │ cell3   │ cell6
 1 │ col2    │ cell2   │ cell5
 2 │ col1    │ cell1   │ cell4
───┴─────────┴─────────┴─────────
</code></pre></div><h3 id="column-rolling-andrasio" tabindex="-1"> Column rolling (andrasio)</h3>
<p>You are now able to move columns around in the same way you may do a bitwise-rotate.</p>
<div><pre><code>> echo '00000100'
| split chars
| each { str to-int }
| rotate counter-clockwise _
| reject _
| rename bit1 bit2 bit3 bit4 bit5 bit6 bit7 bit8
| roll column 3

───┬──────┬──────┬──────┬──────┬──────┬──────┬──────┬──────
 # │ bit4 │ bit5 │ bit6 │ bit7 │ bit8 │ bit1 │ bit2 │ bit3
───┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────
 0 │    0 │    0 │    1 │    0 │    0 │    0 │    0 │    0
───┴──────┴──────┴──────┴──────┴──────┴──────┴──────┴──────
</code></pre></div><h3 id="dropping-columns-andrasio" tabindex="-1"> Dropping columns (andrasio)</h3>
<p>The new <code>drop column</code> subcommand also gives you the ability to remove the last column from a table.</p>
<div><pre><code>> echo [[lib, extension]; [nu-core, rs] [rake, rb]] | drop column
─────────
   lib
─────────
 nu-core
 rake
─────────
</code></pre></div><h3 id="ansi-strip-fdncred" tabindex="-1"> ANSI strip (fdncred)</h3>
<p>With the new <a href="https://github.com/nushell/nushell/pull/3095" target="_blank" rel="noopener noreferrer"><code>ansi strip</code> command</a>, you can remove ansi sequences from a string of text.</p>
<h3 id="path-joining-kubouch" tabindex="-1"> Path joining (kubouch)</h3>
<p>We now have a <code>path join</code> command which allows you to join part of a path to an existing path following the path conventions for your platform.</p>
<p>For example, on Windows:</p>
<div><pre><code>> echo 'C:\Users\viking' | path join spam.txt
</code></pre></div><p>Or Unix-based systems:</p>
<div><pre><code>> echo '/home/viking' | path join spam.txt
</code></pre></div><h2 id="functionality" tabindex="-1"> Functionality</h2>
<h3 id="experimental-built-in-table-paging-rezural" tabindex="-1"> (Experimental) Built-in table paging (rezural)</h3>
<p>If you build Nushell with the optional <code>--features=table-pager</code> you'll see some new capabilities we're working on that will let you <a href="https://github.com/nushell/nushell/pull/3128" target="_blank" rel="noopener noreferrer">view a table with a built-in pager</a>.</p>
<p>In the future, we'll likely move this to its own command so that you can enable paging in much the same way you would use <code>less</code> in other shells.</p>
<p>Let us know how this works for you.</p>
<h3 id="timing-your-pipelines-fdncred" tabindex="-1"> Timing your pipelines (fdncred)</h3>
<p>You can now see the time spent in the last set of commands you sent to Nushell by checking the new <code>$nu.env.CMD_DURATION</code> environment variable.</p>
<p>This will let you, for example, add timings to your prompts for all your fancy prompt needs.</p>
<h3 id="improved-matches-ilius-kubouch" tabindex="-1"> Improved matches (ilius, kubouch)</h3>
<p>The <code>match</code> command has a <a href="https://github.com/nushell/nushell/pull/3111" target="_blank" rel="noopener noreferrer">few new flags</a> to give you more control over how you'd like to match text.</p>
<p>You're now also able to <a href="https://github.com/nushell/nushell/pull/3114" target="_blank" rel="noopener noreferrer">invert the match</a>.</p>
<h3 id="fetch-now-uses-the-latest-surf-and-rustls-fdncred" tabindex="-1"> Fetch now uses the latest surf and rustls (fdncred)</h3>
<p>We're experimenting with moving away from openssl for some commands. In this release, we've moved <a href="https://github.com/nushell/nushell/pull/3120" target="_blank" rel="noopener noreferrer"><code>fetch</code> to use the latest surf</a>, which gives us the ability to use rustls instead of openssl. Please try this out and let us know how it works for you.</p>
<h3 id="cleaner-help-output-kubouch" tabindex="-1"> Cleaner help output (kubouch)</h3>
<p>We've cleaned up the help, so that there's now a difference between <a href="https://github.com/nushell/nushell/pull/3124" target="_blank" rel="noopener noreferrer">the synopsis for a command and its full help text</a>. This makes <code>help commands</code> output a table that's much easier to read.</p>
<h3 id="json-order-is-now-preserved-again-andrasio" tabindex="-1"> JSON order is now preserved, again (andrasio)</h3>
<p>We previously supported preserving the order of fields of JSON when serialized and deserialized, but as we changed and updated dependencies we lost this ability.</p>
<p>In this release, it's been re-added so that <a href="https://github.com/nushell/nushell/pull/3126" target="_blank" rel="noopener noreferrer">fields will preserve order</a> once again.</p>
<h3 id="exit-codes-tiffany352" tabindex="-1"> Exit codes (tiffany352)</h3>
<p>The <code>exit</code> command can now <a href="https://github.com/nushell/nushell/pull/3132" target="_blank" rel="noopener noreferrer">optionally take an exit code</a>, allowing you to quit a nushell with an exit code that can be detect outside of the shell.</p>
<h3 id="vscode-extension-is-now-published-fdncred" tabindex="-1"> VSCode extension is now published (fdncred)</h3>
<p>VSCode users can now use the VSCode extension for Nushell <a href="https://marketplace.visualstudio.com/items?itemName=TheNuProjectContributors.vscode-nushell-lang" target="_blank" rel="noopener noreferrer">right from the VSCode marketplace</a>!</p>
<h2 id="internal" tabindex="-1"> Internal</h2>
<ul>
<li>Improved <a href="https://github.com/nushell/nushell/pull/3078" target="_blank" rel="noopener noreferrer">tests for nu-env</a> (andrasio)</li>
<li>We now remove the <a href="https://github.com/nushell/nushell/pull/3084" target="_blank" rel="noopener noreferrer">current directory (<code>.</code>) from paths</a> where possible (iCodeSometime)</li>
<li>We've begun a multi-step process of simplifying how tables are rendered. The first step is to <a href="https://github.com/nushell/nushell/pull/3088" target="_blank" rel="noopener noreferrer">convert drawing table to return strings</a> (rezural).</li>
<li>We've <a href="https://github.com/nushell/nushell/pull/3089" target="_blank" rel="noopener noreferrer">vendored an ansi term crate</a> to make it easier to improve. This helped make <a href="https://github.com/nushell/nushell/pull/3100" target="_blank" rel="noopener noreferrer">'Light' colors</a> easier to reach. (fdncred)</li>
<li>We've removed some <a href="https://github.com/nushell/nushell/pull/3091" target="_blank" rel="noopener noreferrer">unnecessary dependencies</a> (stormasm)</li>
<li>Some general <a href="https://github.com/nushell/nushell/pull/3093" target="_blank" rel="noopener noreferrer">improvements to parser logic</a> (ilius)</li>
<li>Some crashes in <a href="https://github.com/nushell/nushell/pull/3099" target="_blank" rel="noopener noreferrer"><code>flatten</code> and docs were fixed</a> (stormasm)</li>
<li>We're now using the <a href="https://github.com/nushell/nushell/pull/3112" target="_blank" rel="noopener noreferrer">host for output</a> rather than <code>std::err</code> for better portability. (LhKipp)</li>
<li>Improved ergnomics <a href="https://github.com/nushell/nushell/pull/3133" target="_blank" rel="noopener noreferrer">when working with $nothing</a> (fdncred)</li>
<li>Fixed some <a href="https://github.com/nushell/nushell/pull/3140" target="_blank" rel="noopener noreferrer">locking logic when working with output</a> (ahkrr)</li>
<li>Bel and backspace are <a href="https://github.com/nushell/nushell/pull/3144" target="_blank" rel="noopener noreferrer">now part of <code>char</code></a> (fdncred)</li>
<li><a href="https://github.com/nushell/nushell/pull/3146" target="_blank" rel="noopener noreferrer">Trash functionality has been fixed</a> (tw4452852)</li>
<li>Today's crates.io release was also <a href="https://github.com/nushell/nu_scripts/blob/main/nu_release.nu" target="_blank" rel="noopener noreferrer">fully automated, thanks to Nushell</a> (jonathandturner)</li>
</ul>
<h2 id="documentation" tabindex="-1"> Documentation</h2>
<ul>
<li>Instructions for building and <a href="https://github.com/nushell/nushell.github.io/pull/109" target="_blank" rel="noopener noreferrer">running the website locally</a> (jakevossen5)</li>
<li>Updates to the <a href="https://github.com/nushell/nushell.github.io/pull/108" target="_blank" rel="noopener noreferrer">docker instructions</a> (jakevossen5)</li>
<li>Improvements to the <a href="https://github.com/nushell/nushell.github.io/pull/107" target="_blank" rel="noopener noreferrer">environment documentation</a> (stormasm)</li>
<li>Fixed typo in the <a href="https://github.com/nushell/nushell.github.io/pull/106" target="_blank" rel="noopener noreferrer">textview docs</a> (davidmalcolm)</li>
<li>Corrected <a href="https://github.com/nushell/nushell.github.io/pull/104" target="_blank" rel="noopener noreferrer">Nushell version in excerpt</a> (iCodeSometime)</li>
<li>Fixed a typo in the <a href="https://github.com/nushell/nushell.github.io/pull/103" target="_blank" rel="noopener noreferrer">PowerShell comparison</a> (JTurtl3)</li>
</ul>
<h1 id="looking-ahead" tabindex="-1"> Looking ahead</h1>
<p>We're continuing our 1.0 planning and hope to publish a proposal soon for your feedback. There are also some on-going experiments, including a new <a href="https://github.com/jonathandturner/reedline" target="_blank" rel="noopener noreferrer">line editor</a> that are offering good insights into better ways of working with the terminal.</p>
<p>And, of course, we hear the feedback about improving completions. We're very much interested in beginning experiments here that will lead to a far better experience as we approach 1.0.</p>
]]></content>
    <author>
      <name>The Nu Authors</name>
    </author>
    <contributor>
      <name>The Nu Authors</name>
    </contributor>
    <published>2022-06-05T02:08:17.000Z</published>
    <rights>Copyright by The Nu Authors</rights>
  </entry>
</feed>